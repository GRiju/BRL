#include <a_samp>
#include <mapiconstreamer>
#include <zcmd>
#include <sscanf2>
#include <streamer>
#include <mysql>
#include <dini>
#include <gvar>
#include <progress>
//#include <FCNPC>
#include <mcp>
//#include <YSF>

#undef MAX_PLAYERS
#define MAX_PLAYERS 30

#undef MAX_VEHICLES
#define MAX_VEHICLES 1500

//#define ZOMBIK

/*------------------------ Update Log ------------------------------------------
//UTÓLAG BEÍRT DÁTUMOK

2012.07.22
- Új munka: zsebtolvaj

2012.07.24
- Változó idõjárás

2012.07.27
- Riporter munka kiszedve, helyette hiradós munka
- /hg parancs hír íráshoz a hiradósnak
- A hiradós elõre tudja milyen idõ lesz

2012.11.
- Adminoknak zöld ID
- /hsay parancs fõadminoknak (/googlesay)
- Klánok
- Adminpanel bõvítés
- /skin a spawnolási skin beállításához
- Új szabályzat

2013.01.
- Új munkák: úttisztító, farmer


//--------------------

2013.10.1
- Szint rendszer

2013.11.27
- kisebb frissítések:  	- felhasználóbarát klánpanel
							- gyorsabb klántag betöltés
						- kiírja a bank kivétel/betétel utáni összeget
2013.11.28
- kisebb frissítések:      - /autoszerkeszt neonnál kiírja hogy milyen neon van
								az autón
							- nem kell 1.200.000$ hogy levegyük a neont
							- Klántagok string nagyobbítása
							- Ready kijavítása
							- /clanpanel-ben írja a klán autóit
							- Rendõr fegyverarzenál javítva
2013.11.30
- kisebb frissítések:      - Klánháborúban a tagok két külön csapatba helyezése

2013.12.04
- kisebb frissítések:      - Mód felgyorsítása:
												- Pazarló for ciklusok
												kivétele, mysql lekérdezések
												szerkezetének megváltoztatása

2013.12.06
- Kisebb frissítések:      - Klán rangszerkesztésnél kiírja a jelenleni skinID-t
- Kereskedések elfogadása, elutasítása (drog, pia, cigi, buszjegyek)

2013.12.06 (Adminszkript)
- Karácsonyi rendszerek "újraélesztése", javítása
- Bekerült az ajándékozás
- Bekerült a havas Chilliad

2013.12.07 (Adminszkript)
- Kisebb frissítések:      - Több ajándékcsomag berakva

2013.12.19
- A Sultan és az Elegy már egyedül tuningolható (Saját jármû)
- Újra felvett metró NPC-k bekerültek

2013.12.20 (Adminszkript)
- Karácsonyi játék

2013.12.20
- EXP adás javítása

2013.12.21
- Kisebb frissítések:      	- Átalakítva a ház frissítések szerkezete
							- Átalakítva a garázs frissítések szerkezete
							- Tömbökbe csomagolva a vett autók pozíciói
							
2013.12.23 (Adminszkript)
- Kisebb frissítések:       - Karácsonyi játék hosszabbítása

2013.12.25
- Szint rendszerhez különbözõ jutalmak hozzá adva 1-6-os szintig

2013.12.25 (Adminszkript)
- Kisebb frissítések:       - A ban indokhoz hozzáadva a bant adó admin neve

2013.12.28
- Kisebb frissítések:       - Logolja az eladott és átadott jármûveket
- /parkol-hoz nem kell slot-ot írni

2013.12.29
- (Végre valahára) A jármû adatainál kiírja a tuning alkatrész nevét
- Kisebb frissítések:       - A klán alapítás 2-es szinttõl elérhetõ
							- A házvétel 3-as szinttõl elérhetõ
- Kláncsapatok javítása
- Neonhelyezésnél nem kell frissíteni

2013.12.30
- Klánháborúnál 2 választható map (Montgomery és Hajóraktár)
- Klánháborúnál választható szín a 2 klánnak

2013.12.30 (Adminszkript)
- Anti fakekill (Már csak az a kérdés hogy beválik- e) (2016.01.03: asszem nem vált be...)

2013.12.31
- Neonmozgató parancsok javítása (2-es neonslot mozgatása)

2014.01.01
Kisebb frissítések:     - Már a jármû utasai is látják a speedo-t

- Még több pazarló for ciklus  átalakítása
- Felesleges Ryuuzaki's cars parancsok kivétele

2014.01.09 (Adminszkript)
- Ajándékcsomagok kivétele, következõ alkalomkor könnyebb betétel

2014.01.10
- Csillagadás 5 percenként javítva

2014.01.30
- Rendõr számítógép a rendõrségi jármûvekben
- Drog idõ növelése

2014.02.03
- Felni eladása saját jármûrõl

2014.03.02
- Bizniszfizetés javítása

2014.03.07
- /neonx, /neony, /neonz, /neonrx, /neonry, /neonrz
	parancsok összevonva /neon parancsra
	
2014.05.26
- Már a Blista is egyedül tuningolható

2014.06.01
- Hackernél a reloghack már nem mûködik

2014.06.07 (23:57)
- Jármû motor leállítása/elindítása az N betûvel

2014.06.09
- Benzinrendszer
- Motor indítás rendszer benzinhez kötve

2014.06.10
- A benzin mostantól nem a motorhoz van kötve
- Új mapolt börtön by Viktor

2014.06.13
- A benzin folytonos kifogyásának javítása
- Rendõrfizetés emelése

2014.06.16
- UCP-n adminnak rconba bejelentkezés
- Rconnal lehet törölni autót és klánt

2014.06.19
- A szerver logolja az adminparancsokat
- Savanna egyedül tuningolható

2014.06.21
- UCP klán menüpontban meglehet nézni a klántagokat

2014.06.22
- Rablás pénzek növelve

2014.06.23
- Egy mini hiba javítása a benzin timernél
- Max EXP javítása UCP-ben
- Max szint hozzáadva: 50LvL

2014.06.24
- Akinek max szintje van annak írja a [MAX LvL] tag-et (UCP + kijelzõ)

2014.06.25
- UCP-ben unbanolni csak 4-es admin tud

2014.06.27
- Achievement rendszer (versenyrekord, versenyhelyezés, ölés.. stb.)
- /myach és /ach parancs az achievementek megtekintéséért

2014.06.28
- A riporter munka védett lett

2014.07.01
- /fogadas paranccsal ki lehet hívni játékost 1v1-es DM párbajra és fogadni pénzben

2014.07.03
- Egy házberendezés bug javítva

2014.07.07
- Új achievementek hozzáadva (rablás, autóvezetés, dm nyerés)

2014.07.08
- /myach-ben írja hogy még mennyi kell az ach. unlockoláshoz

2014.07.11
- a MySQL users tábla rendbe tevése
- Kamionos TP (külön rövid, hosszú)
- Új achievement: Letartóztatások
- Az achievement unlockolás kiírása megváltozott

2014.07.13
- Új katona HQ
- Katona jármûvekbe csak katona tud beülni

2014.07.14
- A /rendorsz-t a katonák is használhatják

2014.07.25
- Bugjavítások:
- Nem lehet gotozni, getelni játékost ha "tiltott" területen tartózkodik
(ház, garázs, paintball stb)
- A lehívott tank, hunter, hydra eltûnik ha az illetõ kiszáll
- Specelve nem lehet területet foglalni
- AFK-ban nem sebez az RC
- Specben nem sebez az RC
- Klánautók slotjánál a string növelve

- Tuningnál a nitro és a hidraulika egybõl rákerül a jármûre
- Egyes parancsokat nem lehet használni "tiltott" területen, pl /fogadas, /afk

2014.07.25 (Adminszkript)
- tshow csapatnevek javítva
- timerek leállítása adminszkript kitöltésekor

2014.08.02
- Házberendezés tárgyak kategorizálása
- Új achievementek: Elsõ ház, elsõ jármû, elsõ biznisz, elsõ leaderes meló,
	elsõ klántagság, elsõ klán, 50 horgászat, 100 horgászat
	
2014.08.03
- Versenyrendszer átalakítva, ezentúl a versenypályák a mysql-be lesznek mentve
- InGame versenylétrehozás

2014.08.06
- Farmer kap bokronként 1EXP-et
- Bandaterület elfoglalás 5EXP
- Bizniszvétel achievement 500EXP
- Házvétel achievement 200EXP

2014.08.08
- Küldetésrendszer elkezdése
- 1. küldetés alapok kész

2014.08.09
- 2. küldetés alapok kész

2014.08.12
- A biznisz már nem termel többet az áránál

2015.07.08
- 3. küldetés kész

2015.11.02
- Stuntok készítése IG, különválasztva a versenyektõl

2015.11.07
- Races és Stunts táblához CPsize hozzáadva
- Stuntoknál ajánlott jármû

2015.12.20 (Adminszkript)
- Ajándékcsomagok pozíciója tömbbe téve
- Bekerült az ajándékozás
- Havas Chilliad

2015.12.27 (Adminszkript)
- /mysqlselect parancs

2015.12.30
- /aw Adminfegyver, teleportálni lehet vele

2016.01.01
- Berendezéstárgyak ABC sorrendben
- /egyezes parancs

2016.01.02
- ABC sorrendben adja ki a berendezéseket házberendezésnél
- Mapolt hegy a parton
- Átalakítva a bútorbetöltés szerkezete

2016.01.02 (Adminszkript)
- Biznisz információk: /bizinfo
- Hidraulikaverseny információk: /hidinfo
- Szint információk: /szintinfo
- Küldetés információk: /questinfo
- Teljesítmény információk: /achinfo
- Pénzszerzési lehetõségek: /money
- Tapasztalatszerzési lehetõségek: /exp
- Némelyik segítség bõvítése/javítása

2016.01.03
- Kicsivel felhasználóbarátabb házberendezés dialog
- Új achievement: 10/50/100/200 óra játszott idõ
- 4. küldetés kész
- 	Küldetésteljesítés után az adatbázisból nem törlõdik a sor, csupán a
	QuestPart frissül 999-re
	
2016.01.04
- GPS visszatéve, a térkép alatt írja a területeket
- Benzincsík a térkép alól áthelyezve középre, a speedo alá

2016.01.16
- Actorok bandákhoz, munkákhoz
- Az actorokat meg lehet ölni

2016.01.16 (Adminszkript)
- Adminfegyvernek funkciók: Teleportálás, robbantás

2016.01.17 (Adminszkript)
- Adminfegyver funkció: Vonzás
- /skillinfo

2016.01.17
- SKILL RENDSZER
- Az adminfegyver elérhetõ minden játékosnak képességfegyver néven
- Textdraw a jelenlegi funkció mutatásához
- Görgõ vagy NUM1 a funkcióváltáshoz
- /skills a képességek fejlesztéséhez
- 3 képesség: Teleportálás, robbantás, vonzás
- 1 képességnek 5 szintje van, szintenként kisebb az újratöltési idõ
- A képességeket képességpontokkal lehet fejleszteni, amit szintlépéskor kap a játékos
- Visszaszámláló az újratöltési idõhöz

- Actor ölésért 1 EXP
- Munkás sebzésnél már nem megy egyik fél élete sem

2016.01.20 (Adminszkript)
- /questinfo kiegészítve parancsokkal

2016.01.20
- 1. küldetésnél írja, hogy mennyi szállítás van még hátra

2016.01.21
- Robbantás skill kicserélve Égetés skillre
- Területfoglalásnál a csapat összes tagja kap pénzt és EXP-et, aki bent van a zónában (fak ju Bart)

2016.01.22
MÓD GYORSÍTÁS/BUGTALANÍTÁS
- Object csatolásnál jármûre már streamerrel történik (AttachDynamicObject)
- CreatePickup cserélve CreateDynamicPickup-ra
- Az Égetés már autóra is sebez, ha ülnek benne
- Felesleges dolgok kivétele: 	- Ryucars munka maradék parancsai
								- Debug parancsok
								
2016.01.23
- (Elméletileg) már egybõl látszik a tûz az Égetés skillnél
- Házberendezés javítás alatt, playereknek jelenleg nem használható

2016.01.25
- A küldetésautót küldetésen kívül is el lehetett vinni, már nem lehet
- Elméletileg javítva az a hiba, hogy az NPC nem éled újra halál után
- Területfoglalás után szürke lett a terület, javítva
- Objectfrissítés OnPlayerUpdate alatt

2016.01.25 (Adminszkript)
- Banolt játékosnál csatlakozáskor kiírja a csatlakozási üzenetet
- Banolt játékosnál a Kick indoknál kiírja a ban indokot is

2016.01.29
-	Egyedül is lehet versenyezni, és az 1. helyezett nyereményének a felét kapja meg,
	és nem dönthet rekordot
	
2016.01.30
- Bizniszekhez pickup hozzáadva (eladó = sárga ház, nem eladó = narancssárga ház)
- Nem eladó ház pickup színe kék helyett piros
- A garázsbejárathoz hozzáadva egy barna nyílpickup
- Szirénahang vásárlása saját autóba 400.000$-ért

2017.12.29
- Újra elindult a szerver Kiss Attila és Kovács Levente kérésére
- MAX_OWNCARS

2018.01.01
- Ryucars leaderad mûködik

2018.01.02
- Házberendezés visszatéve, magától megjavult

2019.12.30
- Az Égetés skillnél már rákerül a közeli játékosokra a tûz object, a DynamicObject
	le lett cserélve egyszerû Objectre
- Ahová lõ az Égetés skillnél a játékos, ott egy tûz object jelenik meg
- objectek szkriptben az OnPlayerConnect valamiért nem hívódott meg, ezért
	az itteni metódusból hívódik meg az alap objectek törlése
------------------------------------------------------------------------------*/

#pragma tabsize 0

//Színek
#define COLOR_FADE1		            0xE6E6E6E6
#define COLOR_FADE2 		        0xC8C8C8C8
#define COLOR_FADE3 		        0xAAAAAAAA
#define COLOR_FADE4 		        0x8C8C8C8C
#define COLOR_FADE5 		        0x6E6E6E6E
#define COLOR_GRAD2 		        0xBFC0C2FF
#define COLOR_HIBA 		            0xD2691EAA
#define COLOR_TIP   		        0x01FCFFAA
#define COLOR_SEDA 			        0x808080AA
#define COLOR_UNDERTAKER 		    0xFF0000AA
#define COLOR_GREY 					0xAFAFAFAA
#define COLOR_RED 					0xFF000096
#define COLOR_YELLOW 				0xFFFF00AA
#define COLOR_PINK 					0xFF66FFAA
#define COLOR_BLUE 					0x0000BBAA
#define COLOR_WHITE 				0xFFFFFFAA
#define COLOR_ORANGE 				0xFF9900AA
#define COLOR_VIOLET 				0x9955DEEE
#define COLOR_LEMON 				0xDDDD2357
#define COLOR_BLACK 				0x00000000
#define COLOR_PINK 					0xFF66FFAA
#define COLOR_PURPLE 				0x800080AA
#define COLOR_GREEN 				0x33AA33AA
#define COLOR_YELLOW 				0xFFFF00AA
#define COLOR_WHITE 				0xFFFFFFAA
#define COLOR_BROWN 				0x993300AA
#define COLOR_LIME 					0x99FF00AA
#define COLOR_SYSTEM 				0xEFEFF7AA
#define COLOR_AQUA 					0x7CFC00AA
#define COLOR_GOLD 					0xB8860BAA
#define COLOR_MAV                   0xF5704996
#define COLOR_BKV                   0x1D89F5AA
#define COLOR_INAS                  0x40808096
#define COLOR_TAXI                  0xFFFF0096
#define COLOR_MENTOS                0xAE111196
#define COLOR_TEAMCHAT          	0xFFFF00FF
#define COLOR_BANKOS                0x5E5EA296
#define COLOR_RABLO                 0x5B9EAC96
#define COLOR_KAMIONOS              0x80FF8096
#define COLOR_ZSARU                 0x00408096
#define COLOR_POLITIKUS             0x00FF0096
#define COLOR_KATONA                0x5F772D96
#define COLOR_RIFA                  0x00FFFF96
#define COLOR_TERRORISTA            0x8C600F9F
#define COLOR_TRIAD                 0x5A0F7196
#define COLOR_MAFFIA                0xFF800096
#define COLOR_DANANG                0x438289BF
#define COLOR_GROVE                 0x00800096
#define COLOR_RODNEYMUNKA           0xFFFF80BF
#define COLOR_NEON                  0x00FF00AA
#define COLOR_SYSTEM                0xEFEFF7AA
#define COLOR_PAP                   0x40808096
#define COLOR_RIPORT                0x8080C096
#define COLOR_TUZOLTO               0xFD470296
#define COLOR_STUNTER               0x42a306AA
#define COLOR_CARS 					0x575fffAA
#define HOMER                       0x33AA33AA
#define ORANGE                      0xFFFFFFAA
#define COLOR_FORUM 				0x8A008A96
#define blue 						0x375FFFFF
#define red							0xFF0000AA
#define yellow 						0xFFFF00AA
#define grey 						0xC0C0C0AA
#define lightblue 					0x33CCFFAA
#define COLOR_HACKER                0x335a73AA
#define COLOR_HOTDOG                0xb05f84AA
#define COLOR_ERROR             	0x898992FF
#define COLOR_UTTISZTITO 			0xff4acfAA
#define COLOR_FARMER                0x473018AA
#define QUEST_COLOR                 0x2c80dbAA
#define COLOR_LIGHTGREEN 			0x24FF0AB9

#define HYELLOW		"{FFFF00}"
#define HBLUE       "{0000FF}"
#define HLIME       "{00FF00}"
#define HRED 		"{FF0000}"
#define HORANGE     "{FFA500}"
#define HGOLD       "{FFD700}"
#define HWHITE   	"{FFFFFF}"
#define HGREEN		"{00FF00}"

#define SQL_HOST	""
#define SQL_DB		""
#define SQL_USER	""
#define SQL_PASS	""

new linen[1024];
new query[500];

#define PRESSED(%0) \
		(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

//--------by Bart---------
//===========================HIDRAULIKA=========================================
forward Hid_OnPlayerKeyStateChange(playerid,newkeys,oldkeys);
forward EndH(playerid);
forward HidraulicTime(playerid);
new hpickup;
new htimer[MAX_PLAYERS];
new Menu:hmenu;
new SetHidrCP[MAX_PLAYERS];
#define HIDRAULIKA 10
#define CHECKPOINTSIZE  5

enum HIDR
{
    htime,
    hstarted,
    hscore,
    hneedkey,
};

new Hidraulics[MAX_PLAYERS][HIDR];
//-----Animok---------------
#define SPECIAL_ACTION_PISSING      68
//#define DISALLOW_ANIMS_INVEHICLES   //Uncomment if you don't want animations inside vehicles

new gPlayerUsingLoopingAnim[MAX_PLAYERS];
new gPlayerAnimLibsPreloaded[MAX_PLAYERS];
new animation[200];
new Text:txtAnimHelper;
//-----------by Bart-----------
//----------------------------házrendszer--------------------

#define MAX_HOUSES 500
#define MAX_HSLOTS 100

new hostring[200];
new editobject[MAX_PLAYERS];
new hobject[MAX_HOUSES][MAX_HSLOTS];
new Float:ox[MAX_PLAYERS], Float:oy[MAX_PLAYERS], Float:oz[MAX_PLAYERS];
new Float:orx[MAX_PLAYERS], Float:ory[MAX_PLAYERS], Float:orz[MAX_PLAYERS];
new szam[MAX_PLAYERS];
//new szam2[MAX_PLAYERS];
new oldszam[MAX_PLAYERS];
new ertek[MAX_PLAYERS];

new icons[MAX_HOUSES];
new Text3D:labels[MAX_HOUSES];
new pickups[MAX_HOUSES];
new bool:house[MAX_HOUSES];
//----------------------------------------------------------------
//---------------------------Garázsrendszer-----------------------
#define MAX_GARAGES 500

new gstring[150];
new gpickups[MAX_GARAGES];
new Text3D:garagetext[MAX_GARAGES];
//--------------------------Bizniszrendszer--------------------

#define MAX_BUSINESS 100

new bstring[128];
new Text3D:buslabels[MAX_BUSINESS];
new busicons[MAX_BUSINESS];
new bustexts[MAX_BUSINESS];
new bpickups[MAX_BUSINESS];
//new bool:buselado[MAX_BUSINESS];
//new bizniszf;

//-----------------------------Benzin rendszer-----------------------------
//#define MOTOR_SYSTEM
#define FUEL_SYSTEM

#if defined FUEL_SYSTEM

#define MAX_VLEVEL 28

#define VEHICLE_NONE 0
#define VEHICLE_CAR 1
#define VEHICLE_BOAT 2
#define VEHICLE_TRAIN 3
#define VEHICLE_HELI 4
#define VEHICLE_PLANE 5
#define VEHICLE_BIKE 6
#define VEHICLE_MONSTERTRUCK 7
#define VEHICLE_QUADBIKE 8
#define VEHICLE_BMX 9
#define VEHICLE_TRAILER 10

new vTypes [] =
{
    VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_MONSTERTRUCK,
    VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR,
    VEHICLE_CAR, VEHICLE_CAR, VEHICLE_HELI, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR,
    VEHICLE_CAR, VEHICLE_CAR, VEHICLE_HELI, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_BOAT,
    VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_TRAILER, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR,
    VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_MONSTERTRUCK, VEHICLE_CAR,
    VEHICLE_BOAT, VEHICLE_HELI, VEHICLE_BIKE, VEHICLE_TRAIN, VEHICLE_TRAILER, VEHICLE_CAR, VEHICLE_BOAT,
    VEHICLE_BOAT, VEHICLE_BOAT, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_PLANE,
    VEHICLE_BIKE, VEHICLE_BIKE, VEHICLE_BIKE, VEHICLE_PLANE, VEHICLE_HELI, VEHICLE_CAR, VEHICLE_CAR,
    VEHICLE_BIKE, VEHICLE_HELI, VEHICLE_CAR, VEHICLE_QUADBIKE, VEHICLE_BOAT, VEHICLE_BOAT, VEHICLE_CAR,
    VEHICLE_CAR, VEHICLE_PLANE, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_BMX, VEHICLE_CAR,
    VEHICLE_CAR, VEHICLE_BOAT, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_HELI, VEHICLE_HELI, VEHICLE_CAR, VEHICLE_CAR,
    VEHICLE_CAR, VEHICLE_CAR, VEHICLE_BOAT, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_HELI, VEHICLE_CAR,
    VEHICLE_CAR, VEHICLE_CAR, VEHICLE_HELI, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR,
    VEHICLE_CAR, VEHICLE_CAR, VEHICLE_BMX, VEHICLE_BMX, VEHICLE_PLANE, VEHICLE_PLANE, VEHICLE_PLANE,
    VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_PLANE, VEHICLE_PLANE, VEHICLE_BIKE,
    VEHICLE_BIKE, VEHICLE_BIKE, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR,
    VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_TRAIN,
    VEHICLE_TRAIN, VEHICLE_PLANE, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR,
    VEHICLE_CAR, VEHICLE_CAR, VEHICLE_HELI, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_PLANE,
    VEHICLE_CAR, VEHICLE_CAR, VEHICLE_MONSTERTRUCK, VEHICLE_MONSTERTRUCK, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR,
    VEHICLE_CAR, VEHICLE_CAR, VEHICLE_HELI, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR,
    VEHICLE_TRAIN, VEHICLE_TRAIN, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_MONSTERTRUCK, VEHICLE_CAR, VEHICLE_CAR,
    VEHICLE_CAR, VEHICLE_PLANE, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_BIKE, VEHICLE_CAR, VEHICLE_CAR,
    VEHICLE_TRAILER, VEHICLE_CAR, VEHICLE_BIKE, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_TRAIN,
    VEHICLE_TRAILER, VEHICLE_PLANE, VEHICLE_PLANE, VEHICLE_CAR, VEHICLE_BOAT, VEHICLE_CAR, VEHICLE_CAR,
    VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR, VEHICLE_CAR,
    VEHICLE_TRAILER, VEHICLE_TRAILER, VEHICLE_TRAILER, VEHICLE_CAR, VEHICLE_TRAILER, VEHICLE_TRAILER
};

new Text:fuel[MAX_PLAYERS];
new Bar:fuelbar[MAX_PLAYERS];
new fuelvalue[MAX_VEHICLES];

enum levelfuel
{
	levelvalue,
	maxfuelvalue
}

enum upfuel
{
	minlevel,
	mindollar
}

new fuellevel[][levelfuel] =
{
	{0, 50}, {1, 60},
	{2, 70}, {3, 80},
	{4, 90}, {5, 100},
	{6, 110}, {7, 120},
	{8, 130}, {9, 140},
	{10, 150}, {11, 200},
	{12, 210}, {13, 220},
	{14, 230}, {15, 240},
	{16, 250}, {17, 300},
	{18, 310}, {19, 320},
	{20, 340}, {21, 350},
	{22, 400}, {23, 410},
	{24, 420}, {25, 430},
	{26, 440}, {27, 450},
	{28, 500}
};

new updatefuel[][upfuel] =
{
	{1, 250000}, 	{1, 500000},
	{2, 750000}, 	{2, 1000000},
	{3, 1250000}, 	{3, 1500000},
	{4, 1750000}, 	{4, 2000000},
	{5, 2250000}, 	{5, 2500000},
	{6, 2750000}, 	{6, 3000000},
    {7, 3250000}, 	{7, 3500000},
    {8, 3750000}, 	{8, 4000000},
    {9, 4250000}, 	{9, 4500000},
    {10, 4750000}, 	{10, 5000000},
    {11, 5250000}, 	{11, 5500000},
    {12, 5750000}, 	{12, 6000000},
    {13, 6250000}, 	{13, 6500000},
    {14, 6750000}, 	{14, 7000000}
};
#endif
//-----------------------------Speedo by R@f-------------------------

#define SLOTS 200

//forward UpdateSpeed();

enum SavePlayerPosEnum {
Float:LastX,
Float:LastY,
Float:LastZ
}

new Text:Speedo[MAX_PLAYERS];

new CarName[][] =
{
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel",
	"Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus",
	"Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection",
	"Hunter", "Premier", "Enforcer", "Securicar", "Banshee", "Predator", "Bus",
	"Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach", "Cabbie",
	"Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral",
	"Squalo", "Seasparrow", "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder",
	"Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair", "Berkley's RC Van",
	"Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale",
	"Oceanic","Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy",
	"Hermes", "Sabre", "Rustler", "ZR-350", "Walton", "Regina", "Comet", "BMX",
	"Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper",
	"Rancher", "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking",
	"Blista Compact", "Police Maverick", "Boxvillde", "Benson", "Mesa", "RC Goblin",
	"Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher", "Super GT",
	"Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt",
 	"Tanker", "Roadtrain", "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra",
 	"FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck", "Fortune",
 	"Cadrona", "FBI Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer",
 	"Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent",
    "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder", "Primo",
	"Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite",
	"Windsor", "Monster", "Monster", "Uranus", "Jester", "Sultan", "Stratium",
	"Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper",
	"Broadway", "Tornado", "AT-400", "DFT-30", "Huntley", "Stafford", "BF-400",
	"News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
	"Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "Police Car",
 	"Police Car", "Police Car", "Police Ranger", "Picador", "S.W.A.T", "Alpha",
 	"Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs", "Boxville",
 	"Tiller", "Utility Trailer"
};

new CarNameBRL[][] =
{
    //---------------------|
   "Jeep Wagoneer",
   "Mercury Cougar",
   "Camaro with Scoop",
   "Big Rig",
   "Jeep Grand Wagoneer",
   "BMW 7-Series",
   "Dumptruck",
   "SA Firetruck",
   "Peterbuilt",
   "Lincoln Towncar",
   "Dodge Aries",
   "Acura NSX '05",
   "Chevy Biscayne",
   "Ford Aerostar",
   "Ford Box Van",
   "Ferrari Testarosso",
   "Ford Econoline",
   "Emergency Heli",
   "Chevrolet Astrovan",
   "Cadillac Eldorado",
   "Chevy Caprice",
   "Lincoln Mark 7",
   "Chevrolet S10",
   "Chevy Ice Cream Truck",
   "Volkswagen Beach Buggy",
   "AH-64A",
   "Chevrolet Caprice",
   "International SWAT Van",
   "Security Van",
   "Dodge Viper",
   "Preditor",
   "Volvo Bus",
   "M1A1 Abrams",
   "Barracks",
   "Ford Hot Rod",
   "Trailer",
   "Nissan Pulsar",
   "Old Coach",
   "Caprice Classic Cab",
   "Ford Mustang Mach 1",
   "Mercedes Van",
   "RC Bandit",
   "Cadillac Hearse",
   "Packer/Stunt Helper",
   "Chevy S-10 Monster Truck",
   "Mercedes-Benz S-Class",
   "Chris Craft Stinger",
   "Bell 47G",
   "Piaggio Vespa PX 200",
   "Tram",
   "Trailer",
   "Ferrari F40",
   "Go-Fast Boat",
   "Orca",
   "Sea Ray 270 Sedan Bridge",
   "Flatbed",
   "1992 Ford F800",
   "Golf Car",
   "Ford Taurus Wagon",
   "Honda Life '74",
   "Cessna 150 With Floats",
   "Honda CBR 600 '92",
   "Piaggio Vespa PX 200 '86",
   "Harley Davidson Soft Tail",
   "RC Red Baron",
   "RC Raider",
   "Dodge Dart",
   "Plymouth Belverdere",
   "Yamaha DT 200 Dirt Bike",
   "Bell 47G",
   "Hummer H-1",
   "Honda TRX250x '92",
   "Coastguard Boat",
   "Rescue Boat",
   "Mercury '51",
   "Chevy Chevelle",
   "Curtiss P-40D Warhawk",
   "Mazda RX-7",
   "Chevy Farm Truck",
   "Chevy Caprice Estate",
   "Porsche 911",
   "Schwinn BMX",
   "Dodge Ramvan",
   "Volkswagen Bus",
   "Endeavour 42",
   "Equitech M40 '85",
   "Bulldozer",
   "Bell 206L-4",
   "Bell 206B-3",
   "Ford Bronco",
   "Chevrolet Suburban '92",
   "Lincoln Mark 7",
   "Dodge Diplomat",
   "CMN Interceptor DV-15",
   "Ford Mustang LX",
   "Ford Bronco",
   "Honda CRX",
   "Bell 206L-4",
   "Chevy Cargo Van",
   "Ford Moving Van",
   "Jeep Wrangler",
   "RC Heli",
   "Ford Mustang LX '86",
   "Ford Mustang LX '86",
   "Customised Glendale",
   "Ford Bronco '80",
   "Mitsubishi 3000 GT",
   "Buick Roadmaster",
   "GMC R.V.",
   "Old Bike",
   "Schwinn Mesa Mountain Hardtail",
   "C-2 Greyhound",
   "Grumman G-164 AgCat",
   "Pitt's Special",
   "Gas Tanker",
   "International 9370 Truck",
   "Lincoln Towncar",
   "Chevy Monte Carlo",
   "Chevrolet Monte Carlo",
   "Bombardier Learjet 55",
   "AV-8 Harrier Jump-Jet",
   "Honda CBR 900 RR Fireblade",
   "Honda NSR 500 '01",
   "Kawasaki KZ1000-P21",
   "Chevrolet Cement Truck",
   "Tow Truck '91",
   "Ford Thunderbird",
   "Ford Escort",
   "CSI/FBI Investigation Truck",
   "Dodge Dynasty",
   "Forklift '89",
   "Old Tractor",
   "Combine Harvester",
   "Mercedes-Benz SL-Class",
   "Lincoln Mark 5",
   "Chevy CST '68",
   "Chevrolet Caprice Droptop",
   "1972 EMD SD40",
   "Amtrak F40PH",
   "Hovercraft",
   "Mercedes Benz E120",
   "Ford GT-40",
   "Chevy Nova",
   "Dodge 100 Series",
   "SA Firetruck",
   "Ford Hotrod",
   "Chevrolet Lumina",
   "Oldsmobile Cutlass Ciera",
   "Sikorsky CH-53",
   "Dodge Roadrunner",
   "Late 80's Honda Sedan",
   "Mercury Grand Marquis",
   "Chevy 2500",
   "Douglas C-47",
   "GMC Sierra",
   "Jaguar XKE '66",
   "Chevy S-10 Monster Truck",
   "Chevy S-10 Monster Truck",
   "Eagle Talon",
   "Toyota Supra",
   "Impreza 2.5RS '95",
   "Honda Accord Wagon",
   "Nissan R34 Skyline",
   "Sikorsky UH-60 Black Hawk",
   "RC Tiger",
   "Honda Civic",
   "Oldsmobile Cutlass",
   "Chevy Impala",
   "Half Life 2 Sand Rail",
   "EMD SD40",
   "Trailer",
   "Go Kart",
   "Ride-On Lawn Mower",
   "Mercedes-Benz AK 4x4 '91",
   "Elgin Pelican",
   "Caddilac '54",
   "Chevy Bel Air '57",
   "Boeing 737",
   "Flatbed",
   "Range Rover",
   "Rolls Royce",
   "Honda VFR 400",
   "Dodge Ramvan Newsvan",
   "Baggage Tow Tractor HTAG-30/40",
   "Trailer",
   "Infinity J30 '92",
   "Honda Goldwing GL1500 '04",
   "Nissan 300Z",
   "Hotdog Van",
   "Volkswagen Golf",
   "Trailer",
   "Trailer",
   "Lockheed C-5 Galaxy",
   "Cessna 150",
   "WTF u shouldnt drive this",
   "CMN Interceptor DV-15",
   "Chevy Caprice LA",
   "Chevy Caprice SF",
   "Chevy Caprice LV",
   "Chevy Blazer Desert",
   "Chevrolet El Camino '68",
   "S.W.A.T. Van",
   "Dodge Stealth '91",
   "Pontiac Trans AM",
   "Dodge Dart",
   "Dodge 100 Series",
   "Luggage Trailer",
   "Luggage Trailer",
   "Stair Trailer",
   "Chevy Cargo Van",
   "Farm Plow",
   "Chevy 2500 Trailer"
   //---------------------|
};

/*new WeaponNames[][32] = {
	{"Ököl"}, // 0
	{"Brass Knuckles"}, // 1
	{"Golf ütõ"}, // 2
	{"Gumibot"}, // 3
	{"Kés"}, // 4
	{"Baseball ütõ"}, // 5
	{"Ásó"}, // 6
	{"Biliárd ütõ"}, // 7
	{"Katana"}, // 8
	{"Láncfûrész"}, // 9
	{"Purple Dildo"}, // 10
	{"Big White Vibrator"}, // 11
	{"Medium White Vibrator"}, // 12
	{"Small White Vibrator"}, // 13
	{"Virág"}, // 14
	{"Bot"}, // 15
	{"Gránát"}, // 16
	{"Füstgránát"}, // 17
	{"Molotov"}, // 18
	{" "}, // 19
	{" "}, // 20
	{" "}, // 21
	{"Colt 45"}, // 22
	{"Colt 45 (Hangtompítós)"}, // 23
	{"Desert Eagle"}, // 24
	{"Normal Shotgun"}, // 25
	{"Sawnoff Shotgun"}, // 26
	{"Combat Shotgun"}, // 27
	{"Micro Uzi"}, // 28
	{"MP5"}, // 29
	{"AK47"}, // 30
	{"M4"}, // 31
	{"Tec9"}, // 32
	{"Country Rifle"}, // 33
	{"Sniper Rifle"}, // 34
	{"Rocket Launcher"}, // 35
	{"Heat-Seeking Rocket Launcher"}, // 36
	{"Lángszóró"}, // 37
	{"Minigun"}, // 38
	{"Robbanó táska"}, // 39
	{"Detonátor"}, // 40
	{"Spray"}, // 41
	{"Tûzoltó készülék"}, // 42
	{"Kamera"}, // 43
	{"Éjjel látó"}, // 44
	{"Infrás látó"}, // 45
	{"Ejtõernyõ"}, // 46
	{"Fake Pistol"} // 47
};*/
//-------------------------------------------------------
//----------------------------TUNINGINFO---------------------------------
enum
	ComponentInfo
{
	ID,
	ModelName[17],
	Part[35],
	Type[34],
	Cars[45]
};

new
	TunnedComponentId[][ComponentInfo] =
{
	{ 1000, " spl_b_mar_m " 	, "Spoiler(Légterelõ)"		, " Pro "							, " Certain Transfender cars " },
	{ 1001, " spl_b_bab_m " 	, "Spoiler(Légterelõ)"		, " Win "							, " Certain Transfender cars " },
	{ 1002, " spl_b_bar_m " 	, "Spoiler(Légterelõ)"		, " Drag "							, " Certain Transfender cars " },
	{ 1003, " spl_b_mab_m " 	, "Spoiler(Légterelõ)"		, " Alpha "							, " Certain Transfender cars " },
	{ 1004, " bnt_b_sc_m "  	, "Hood(Motorháztetõ)"			, " Champ Scoop "					, " Certain Transfender cars " },
	{ 1005, " bnt_b_sc_l "  	, "Hood(Motorháztetõ)"			, " Fury Scoop "					, " Certain Transfender cars " },
	{ 1006, " rf_b_sc_r "   	, "Roof(Tetõ)"			, "Roof Scoop "					, " Certain Transfender cars " },
	{ 1007, " wg_l_b_ssk "  	, "Sideskirt(Oldalszegély)"		, " Right Sideskirt "				, " Certain Transfender cars " },
	{ 1008, " nto_b_l "     	, "Nitro(Nitró 2-es)"			, " 5 times "						, " Most cars Most planes and Most Helicopters " },
	{ 1009, " nto_b_s "     	, "Nitro(Nitró 5-ös)"			, " 2 times "						, " Most cars Most planes and Most Helicopters " },
	{ 1010, " nto_b_tw "    	, "Nitro(Nitró 10-es)"			, " 10 times "						, " Most cars Most planes and Most Helicopters " },
	{ 1011, " bnt_b_sc_p_m "	, "Hood(Motorháztetõ)"			, " Race Scoop "					, " Certain Transfender cars " },
	{ 1012, " bnt_b_sc_p_l "	, "Hood(Motorháztetõ)"			, " Worx Scoop "					, " Certain Transfender cars " },
	{ 1013, " lgt_b_rspt "		, "Lamps(Lámpák)"			, " Round Fog "						, " Certain Transfender cars " },
	{ 1014, " spl_b_bar_l"		, "Spoiler(Légterelõ)"		, " Champ "							, " Certain Transfender cars " },
	{ 1015, " spl_b_bbr_l"		, "Spoiler(Légterelõ)"		, " Race "							, " Certain Transfender cars " },
	{ 1016, " spl_b_bbr_m"		, "Spoiler(Légterelõ)"		, " Worx "							, " Certain Transfender cars " },
	{ 1017, " wg_r_b_ssk "		, "Sideskirt(Oldalszegély)"		, " Left Sideskirt "				, " Certain Transfender cars " },
	{ 1018, " exh_b_ts	"		, "Exhaust(Kipufogó)"		, " Upswept "						, " Certain Transfender cars " },
	{ 1019, " exh_b_t "			, "Exhaust(Kipufogó)"		, " Twin "							, " Certain Transfender cars " },
	{ 1020, " exh_b_l "			, "Exhaust(Kipufogó)"		, " Large "							, " Certain Transfender cars " },
	{ 1021, " exh_b_m "			, "Exhaust(Kipufogó)"		, " Medium "						, " Certain Transfender cars " },
	{ 1022, " exh_b_s "			, "Exhaust(Kipufogó)"		, " Small "							, " Certain Transfender cars " },
	{ 1023, " spl_b_bbb_m"		, "Spoiler(Légterelõ)"		, " Fury "							, " Certain Transfender cars " },
	{ 1024, " lgt_b_sspt "		, "Lamps(Lámpák)"			, " Square Fog "					, " Certain Transfender cars " },
	{ 1025, " wheel_or1 "		, "Wheels(Kerekek)"		, " Offroad "						, " Certain Transfender cars " },
	{ 1026, " wg_l_a_s "		, "Sideskirt(Oldalszegély)"		, " Right Alien Sideskirt "			, " Sultan " },
	{ 1027, " wg_r_a_s "		, "Sideskirt(Oldalszegély)"		, " Left Alien Sideskirt "			, " Sultan " },
	{ 1028, " exh_a_s "			, "Exhaust(Kipufogó)"		, " Alien "							, " Sultan " },
	{ 1029, " exh_c_s "			, "Exhaust(Kipufogó)"		, " X-Flow "						, " Sultan " },
	{ 1030, " wg_r_c_s "		, "Sideskirt(Oldalszegély)"		, " Left X-Flow Sideskirt "			, " Sultan " },
	{ 1031, " wg_l_c_s "		, "Sideskirt(Oldalszegély)"		, " Right X-Flow Sideskirt "		, " Sultan " },
	{ 1032, " rf_a_s "			, "Roof(Tetõ)"			, " Alien Roof Vent "				, " Sultan " },
	{ 1033, " rf_c_s "			, "Roof(Tetõ)"			, " X-Flow Roof Vent "				, " Sultan " },
	{ 1034, " exh_a_l "			, "Exhaust(Kipufogó)"		, " Alien "							, " Elegy " },
	{ 1035, " rf_c_l "			, "Roof(Tetõ)"			, " X-Flow Roof Vent "				, " Elegy " },
	{ 1036, " wg_l_a_l "		, "Sideskirt(Oldalszegély)"		, " Right Alien Sideskirt "			, " Elegy " },
	{ 1037, " exh_c_l "			, "Exhaust(Kipufogó)"		, " X-Flow "						, " Elegy " },
	{ 1038, " rf_a_l "			, "Roof(Tetõ)"			, " Alien Roof Vent "				, " Elegy " },
	{ 1039, " wg_l_c_l "		, "Sideskirt(Oldalszegély)"		, " Right X-Flow Sideskirt "		, " Elegy " },
	{ 1040, " wg_r_a_l "		, "Sideskirt(Oldalszegély)"		, " Left Alien Sideskirt "			, " Elegy " },
	{ 1041, " wg_r_c_l "		, "Sideskirt(Oldalszegély)"		, " Right X-Flow Sideskirt "		, " Elegy " },
	{ 1042, " wg_l_lr_br1 "		, "Sideskirt(Oldalszegély)"		, " Right Chrome Sideskirt "		, " Broadway " },
	{ 1043, " exh_lr_br2 "		, "Exhaust(Kipufogó)"		, " Slamin "						, " Broadway " },
	{ 1044, " exh_lr_br1 "		, "Exhaust(Kipufogó)"		, " Chrome "						, " Broadway " },
	{ 1045, " exh_c_f "			, "Exhaust(Kipufogó)"		, " X-Flow "						, " Flash " },
	{ 1046, " exh_a_f "			, "Exhaust(Kipufogó)"		, " Alien "							, " Flash " },
	{ 1047, " wg_l_a_f "		, "Sideskirt(Oldalszegély)"		, " Right Alien Sideskirt "			, " Flash " },
	{ 1048, " wg_l_c_f "		, "Sideskirt(Oldalszegély)"		, " Right X-Flow Sideskirt "		, " Flash " },
	{ 1049, " spl_a_f_r"		, "Spoiler(Légterelõ)"		, " Alien "							, " Flash " },
	{ 1050, " spl_c_f_r"		, "Spoiler(Légterelõ)"		, " X-Flow "						, " Flash " },
	{ 1051, " wg_r_a_f "		, "Sideskirt(Oldalszegély)"		, " Left Alien Sideskirt "			, " Flash " },
	{ 1052, " wg_r_c_f "		, "Sideskirt(Oldalszegély)"		, " Left X-Flow Sideskirt "			, " Flash " },
	{ 1053, " rf_c_f "			, "Roof(Tetõ)"			, " X-Flow "						, " Flash " },
	{ 1054, " rf_a_f "			, "Roof(Tetõ)"			, " Alien "							, " Flash " },
	{ 1055, " rf_a_st "			, "Roof(Tetõ)"			, " Alien "							, " Statum " },
	{ 1056, " wg_l_a_st "		, "Sideskirt(Oldalszegély)"		, " Right Alien Sideskirt "			, " Statum " },
	{ 1057, " wg_l_c_st "		, "Sideskirt(Oldalszegély)"		, " Right X-Flow Sideskirt "		, " Statum " },
	{ 1058, " spl_a_st_r"		, "Spoiler(Légterelõ)"		, " Alien "							, " Statum " },
	{ 1059, " exh_c_st "		, "Exhaust(Kipufogó)"		, " X-Flow "						, " Statum " },
	{ 1060, " spl_c_st_r"		, "Spoiler(Légterelõ)"		, " X-Flow "						, " Statum " },
	{ 1061, " rf_c_st "			, "Roof(Tetõ)"			, " X-Flow "						, " Statum " },
	{ 1062, " wg_r_a_st "		, "Sideskirt(Oldalszegély)"		, " Left Alien Sideskirt "			, " Statum " },
	{ 1063, " wg_r_c_st "		, "Sideskirt(Oldalszegély)"		, " Left X-Flow Sideskirt "			, " Statum " },
	{ 1064, " exh_a_st "		, "Exhaust(Kipufogó)"		, " Alien "							, " Statum " },
	{ 1065, " exh_a_j "			, "Exhaust(Kipufogó)"		, " Alien "							, " Jester " },
	{ 1066, " exh_c_j "			, "Exhaust(Kipufogó)"		, " X-Flow "						, " Jester " },
	{ 1067, " rf_a_j "			, "Roof(Tetõ)"			, " Alien "							, " Jester " },
	{ 1068, " rf_c_j "			, "Roof(Tetõ)"			, " X-Flow "						, " Jester " },
	{ 1069, " wg_l_a_j "		, "Sideskirt(Oldalszegély)"		, " Right Alien Sideskirt "			, " Jester " },
	{ 1070, " wg_l_c_j "		, "Sideskirt(Oldalszegély)"		, " Right X-Flow Sideskirt "		, " Jester " },
	{ 1071, " wg_r_a_j "		, "Sideskirt(Oldalszegély)"		, " Left Alien Sideskirt "			, " Jester " },
	{ 1072, " wg_r_c_j "		, "Sideskirt(Oldalszegély)"		, " Left X-Flow Sideskirt "			, " Jester " },
	{ 1073, " wheel_sr6 "		, "Wheels(Kerekek)"		, " Shadow "						, " Most cars" },
	{ 1074, " wheel_sr3 "		, "Wheels(Kerekek)"		, " Mega "							, " Most cars" },
	{ 1075, " wheel_sr2 "		, "Wheels(Kerekek)"		, " Rimshine "						, " Most cars" },
	{ 1076, " wheel_lr4 "		, "Wheels(Kerekek)"		, " Wires "							, " Most cars" },
	{ 1077, " wheel_lr1 "		, "Wheels(Kerekek)"		, " Classic "						, " Most cars" },
	{ 1078, " wheel_lr3 "		, "Wheels(Kerekek)"		, " Twist "							, " Most cars" },
	{ 1079, " wheel_sr1 "		, "Wheels(Kerekek)"		, " Cutter "						, " Most cars" },
	{ 1080, " wheel_sr5 "		, "Wheels(Kerekek)"		, " Switch "						, " Most cars" },
	{ 1081, " wheel_sr4 "		, "Wheels(Kerekek)"		, " Grove "							, " Most cars" },
	{ 1082, " wheel_gn1 "		, "Wheels(Kerekek)"		, " Import "						, " Most cars" },
	{ 1083, " wheel_lr2 "		, "Wheels(Kerekek)"		, " Dollar "						, " Most cars" },
	{ 1084, " wheel_lr5 "		, "Wheels(Kerekek)"		, " Trance "						, " Most cars" },
	{ 1085, " wheel_gn2 "		, "Wheels(Kerekek)"		, " Atomic "						, " Most cars" },
	{ 1086, " stereo "			, "Stereo(Szteró)"		, " Stereo "						, " Most cars" },
	{ 1087, " hydralics "		, "Hydraulics(Hidraulika)"	, " Hydraulics "					, " Most cars" },
	{ 1088, " rf_a_u "			, "Roof(Tetõ)"			, " Alien "							, " Uranus " },
	{ 1089, " exh_c_u "			, "Exhaust(Kipufogó)"		, " X-Flow "						, " Uranus " },
	{ 1090, " wg_l_a_u "		, "Sideskirt(Oldalszegély)"		, " Right Alien Sideskirt "			, " Uranus " },
	{ 1091, " rf_c_u "			, "Roof(Tetõ)"			, " X-Flow "						, " Uranus " },
	{ 1092, " exh_a_u "			, "Exhaust(Kipufogó)"		, " Alien "							, " Uranus " },
	{ 1093, " wg_l_c_u "		, "Sideskirt(Oldalszegély)"		, " Right X-Flow Sideskirt "		, " Uranus " },
	{ 1094, " wg_r_a_u "		, "Sideskirt(Oldalszegély)"		, " Left Alien Sideskirt "			, " Uranus " },
	{ 1095, " wg_r_c_u "		, "Sideskirt(Oldalszegély)"		, " Right X-Flow Sideskirt "		, " Uranus " },
	{ 1096, " wheel_gn3 "		, "Wheels(Kerekek)"		, " Ahab "							, " Most cars" },
	{ 1097, " wheel_gn4 "		, "Wheels(Kerekek)"		, " Virtual "						, " Most cars" },
	{ 1098, " wheel_gn5 "		, "Wheels(Kerekek)"		, " Access "						, " Most cars" },
	{ 1099, " wg_r_lr_br1 "		, "Sideskirt(Oldalszegély)"		, " Left Chrome Sideskirt "			, " Broadway " },
	{ 1100, " misc_c_lr_rem1 "	, "Bullbar "		, " Chrome Grill "					, " Remington " },
	{ 1101, " wg_r_lr_rem1 "	, "Sideskirt(Oldalszegély)"		, " Left `Chrome Flames` Sideskirt ", " Remington " },
	{ 1102, " wg_r_lr_sv "		, "Sideskirt(Oldalszegély)"		, " Left `Chrome Strip` Sideskirt "	, " Savanna " },
	{ 1103, " rf_lr_bl2 "		, "Roof(Tetõ)"			, " Covertible "					, " Blade " },
	{ 1104, " exh_lr_bl1 "		, "Exhaust(Kipufogó)"		, " Chrome "						, " Blade " },
	{ 1105, " exh_lr_bl2 "		, "Exhaust(Kipufogó)"		, " Slamin "						, " Blade " },
	{ 1106, " wg_l_lr_rem2 "	, "Sideskirt(Oldalszegély)"		, " Right Chrome Arches "			, " Remington " },
	{ 1107, " wg_r_lr_bl1 "		, "Sideskirt(Oldalszegély)"		, " Left `Chrome Strip` Sideskirt"	, " Blade " },
	{ 1108, " wg_l_lr_bl1 "		, "Sideskirt(Oldalszegély)"		, " Right `Chrome Strip` Sideskirt ", " Blade " },
	{ 1109, " bbb_lr_slv1 "		, "Rear Bullbars "	, " Chrome "						, " Slamvan " },
	{ 1110, " bbb_lr_slv2 "		, "Rear Bullbars "	, " Slamin "						, " Slamvan " },
	{ 1111, " bnt_lr_slv1 "		, "Front Sign? "	, " Little Sign? "					, " Slamvan " },
	{ 1112, " bnt_lr_slv2 "		, "Front Sign? "	, " Little Sign? "					, " Slamvan " },
	{ 1113, " exh_lr_slv1 "		, "Exhaust(Kipufogó)"		, " Chrome "						, " Slamvan " },
	{ 1114, " exh_lr_slv2 "		, "Exhaust(Kipufogó)"		, " Slamin "						, " Slamvan " },
	{ 1115, " fbb_lr_slv1 "		, "Front Bullbars ", " Chrome "						, " Slamvan " },
	{ 1116, " fbb_lr_slv2 "		, "Front Bullbars ", " Slamin "						, " Slamvan " },
	{ 1117, " fbmp_lr_slv1 "	, "Front Bumper(Elsõ lökhárító)"	, " Chrome "						, " Slamvan " },
	{ 1118, " wg_l_lr_slv1 "	, "Sideskirt(Oldalszegély)"		, " Right `Chrome Trim` Sideskirt "	, " Slamvan " },
	{ 1119, " wg_l_lr_slv2 "	, "Sideskirt(Oldalszegély)"		, " Right `Wheelcovers` Sideskirt "	, " Slamvan " },
	{ 1120, " wg_r_lr_slv1 "	, "Sideskirt(Oldalszegély)"		, " Left `Chrome Trim` Sideskirt "	, " Slamvan " },
	{ 1121, " wg_r_lr_slv2 "	, "Sideskirt(Oldalszegély)"		, " Left `Wheelcovers` Sideskirt "	, " Slamvan " },
	{ 1122, " wg_l_lr_rem1 "	, "Sideskirt(Oldalszegély)"		, " Right `Chrome Flames` Sideskirt ", " Remington " },
	{ 1123, " misc_c_lr_rem2 "	, "Bullbars "		, " Bullbar Chrome Bars "			, " Remington " },
	{ 1124, " wg_r_lr_rem2 "	, "Sideskirt(Oldalszegély)"		, " Left `Chrome Arches` Sideskirt ", " Remington " },
	{ 1125, " misc_c_lr_rem3 "	, "Bullbars "		, " Bullbar Chrome Lights "			, " Remington " },
	{ 1126, " exh_lr_rem1 "		, "Exhaust(Kipufogó)"		, " Chrome Exhaust "				, " Remington " },
	{ 1127, " exh_lr_rem2 "		, "Exhaust(Kipufogó)"		, " Slamin Exhaust "				, " Remington " },
	{ 1128, " rf_lr_bl1 "		, "Roof(Tetõ)"			, " Vinyl Hardtop "					, " Blade " },
	{ 1129, " exh_lr_sv1 "		, "Exhaust(Kipufogó)"		, " Chrome "						, " Savanna " },
	{ 1130, " rf_lr_sv1 "		, "Roof(Tetõ)"			, " Hardtop "						, " Savanna " },
	{ 1131, " rf_lr_sv2 "		, "Roof(Tetõ)"			, " Softtop "						, " Savanna " },
	{ 1132, " exh_lr_sv2 "		, "Exhaust(Kipufogó)"		, " Slamin "						, " Savanna " },
	{ 1133, " wg_l_lr_sv "		, "Sideskirt(Oldalszegély)"		, " Right `Chrome Strip` Sideskirt ", " Savanna " },
	{ 1134, "  wg_l_lr_t1 "		, "Sideskirt(Oldalszegély)"		, " Right `Chrome Strip` Sideskirt ", " Tornado " },
	{ 1135, " exh_lr_t2 "		, "Exhaust(Kipufogó)"		, " Slamin "						, " Tornado " },
	{ 1136, " exh_lr_t1 "		, "Exhaust(Kipufogó)"		, " Chrome "						, " Tornado " },
	{ 1137, " wg_r_lr_t1 "		, "Sideskirt(Oldalszegély)"		, " Left `Chrome Strip` Sideskirt "	, " Tornado " },
	{ 1138, " spl_a_s_b"		, "Spoiler(Légterelõ)"		, " Alien "							, " Sultan " },
	{ 1139, " spl_c_s_b"		, "Spoiler(Légterelõ)"		, " X-Flow "						, " Sultan " },
	{ 1140, " rbmp_c_s "		, "Rear Bumper(Hátsó lökhárító)"	, " X-Flow "						, " Sultan " },
	{ 1141, " rbmp_a_s "		, "Rear Bumper(Hátsó lökhárító)"	, " Alien "							, " Sultan " },
	{ 1142, " bntr_b_ov "		, "Vents(Nyílás)"			, " Left Oval Vents "				, " Certain Transfender cars " },
	{ 1143, " bntl_b_ov "		, "Vents(Nyílás)"			, " Right Oval Vents "				, " Certain Transfender cars " },
	{ 1144, " bntr_b_sq "		, "Vents(Nyílás)"			, " Left Square Vents "				, " Certain Transfender cars " },
	{ 1145, " bntl_b_sq "		, "Vents(Nyílás)"			, " Right Square Vents "			, " Certain Transfender cars " },
	{ 1146, " spl_c_l_b "		, "Spoiler(Légterelõ)"		, " X-Flow "						, " Elegy " },
	{ 1147, " spl_a_l_b "		, "Spoiler(Légterelõ)"		, " Alien "							, " Elegy " },
	{ 1148, " rbmp_c_l "		, "Rear Bumper(Hátsó lökhárító)"	, " X-Flow "						, " Elegy " },
	{ 1149, " rbmp_a_l "		, "Rear Bumper(Hátsó lökhárító)"	, " Alien "							, " Elegy " },
	{ 1150, " rbmp_a_f "		, "Rear Bumper(Hátsó lökhárító)"	, " Alien "							, " Flash " },
	{ 1151, " rbmp_c_f "		, "Rear Bumper(Hátsó lökhárító)"	, " X-Flow "						, " Flash " },
	{ 1152, " fbmp_c_f "		, "Front Bumper(Elsõ lökhárító)"	, " X-Flow "						, " Flash " },
	{ 1153, " fbmp_a_f "		, "Front Bumper(Elsõ lökhárító)"	, " Alien "							, " Flash " },
	{ 1154, " rbmp_a_st "		, "Rear Bumper(Hátsó lökhárító)"	, " Alien "							, " Stratum " },
	{ 1155, " fbmp_a_st "		, "Front Bumper(Elsõ lökhárító)"	, " Alien "							, " Stratum " },
	{ 1156, " rbmp_c_st "		, "Rear Bumper(Hátsó lökhárító)"	, " X-Flow "						, " Stratum " },
	{ 1157, " fbmp_c_st "		, "Front Bumper(Elsõ lökhárító)"	, " X-Flow "						, " Stratum " },
	{ 1158, " spl_c_j_b"		, "Spoiler(Légterelõ)"		, " X-Flow "						, " Jester " },
	{ 1159, " rbmp_a_j "		, "Rear Bumper(Hátsó lökhárító)"	, " Alien "							, " Jester " },
	{ 1160, " fbmp_a_j "		, "Front Bumper(Elsõ lökhárító)"	, " Alien "							, "	Jester " },
	{ 1161, " rbmp_c_j "		, "Rear Bumper(Hátsó lökhárító)"	, " X-Flow "						, " Jester " },
	{ 1162, " spl_a_j_b"		, "Spoiler(Légterelõ)"		, " Alien "							, " Jester " },
	{ 1163, " spl_c_u_b"		, "Spoiler(Légterelõ)"		, " X-Flow "						, " Uranus " },
	{ 1164, " spl_a_u_b"		, "Spoiler(Légterelõ)"		, " Alien "							, " Uranus " },
	{ 1165, " fbmp_c_u "		, "Front Bumper(Elsõ lökhárító)"	, " X-Flow "						, " Uranus " },
	{ 1166, " fbmp_a_u "		, "Front Bumper(Elsõ lökhárító)"	, " Alien "							, " Uranus " },
	{ 1167, " rbmp_c_u "		, "Rear Bumper(Hátsó lökhárító)"	, " X-Flow "						, " Uranus " },
	{ 1168, " rbmp_a_u "		, "Rear Bumper(Hátsó lökhárító)"	, " Alien "							, " Uranus " },
	{ 1169, " fbmp_a_s "		, "Front Bumper(Elsõ lökhárító)"	, " Alien "							, " Sultan " },
	{ 1170, " fbmp_c_s "		, "Front Bumper(Elsõ lökhárító)"	, " X-Flow "						, " Sultan " },
	{ 1171, " fbmp_a_l "		, "Front Bumper(Elsõ lökhárító)"	, " Alien "							, " Elegy " },
	{ 1172, " fbmp_c_l "		, "Front Bumper(Elsõ lökhárító)"	, " X-Flow "						, " Elegy " },
	{ 1173, " fbmp_c_j "		, "Front Bumper(Elsõ lökhárító)"	, " X-Flow "						, " Jester " },
	{ 1174, " fbmp_lr_br1 "		, "Front Bumper(Elsõ lökhárító)"	, " Chrome "						, " Broadway " },
	{ 1175, " fbmp_lr_br2 "		, "Rear Bumper(Hátsó lökhárító)"	, " Slamin "						, " Broadway " },
	{ 1176, " rbmp_lr_br1 "		, "Front Bumper(Elsõ lökhárító)"	, " Chrome "						, " Broadway " },
	{ 1177, " rbmp_lr_br2 "		, "Rear Bumper(Hátsó lökhárító)"	, " Slamin "						, " Broadway " },
	{ 1178, " rbmp_lr_rem2 "	, "Rear Bumper(Hátsó lökhárító)"	, " Slamin "						, " Remington " },
	{ 1179, " fbmp_lr_rem1 "	, "Front Bumper(Elsõ lökhárító)"	, " Chrome "						, " Remington " },
	{ 1180, " rbmp_lr_rem1 "	, "Rear Bumper(Hátsó lökhárító)"	, " Chrome "						, " Remington " },
	{ 1181, " fbmp_lr_bl2 "		, "Front Bumper(Elsõ lökhárító)"	, " Slamin "						, " Blade " },
	{ 1182, " fbmp_lr_bl1 "		, "Front Bumper(Elsõ lökhárító)"	, " Chrome "						, " Blade " },
	{ 1183, " rbmp_lr_bl2 "		, "Rear Bumper(Hátsó lökhárító)"	, " Slamin "						, " Blade " },
	{ 1184, " rbmp_lr_bl1 "		, "Rear Bumper(Hátsó lökhárító)"	, " Chrome "						, " Blade " },
	{ 1185, " fbmp_lr_rem2 "	, "Front Bumper(Elsõ lökhárító)"	, " Slamin "						, " Remington " },
	{ 1186, " rbmp_lr_sv2 "		, "Rear Bumper(Hátsó lökhárító)"	, " Slamin "						, " Savanna " },
	{ 1187, " rbmp_lr_sv1 "		, "Rear Bumper(Hátsó lökhárító)"	, " Chrome "						, " Savanna " },
	{ 1188, " fbmp_lr_sv2 "		, "Front Bumper(Elsõ lökhárító)"	, " Slamin "						, " Savanna " },
	{ 1189, " fbmp_lr_sv1 "		, "Front Bumper(Elsõ lökhárító)"	, " Chrome "						, " Savanna " },
	{ 1190, " fbmp_lr_t2 "		, "Front Bumper(Elsõ lökhárító)"	, " Slamin "						, " Tornado " },
	{ 1191, " fbmp_lr_t1 "		, "Front Bumper(Elsõ lökhárító)"	, " Chrome "						, " Tornado " },
	{ 1192, " rbmp_lr_t1 "		, "Rear Bumper(Hátsó lökhárító)"	, " Chrome "						, " Tornado " },
	{ 1193, " rbmp_lr_t2 "		, "Rear Bumper(Hátsó lökhárító)"	, " Slamin "						, " Tornado " }
};
//-----------------------------Quest system-------------------------------------
new QuestID[MAX_PLAYERS] = -1;
new questCP[MAX_PLAYERS] = -1;
new QuestPart[MAX_PLAYERS] = -1;
new Float:bQuestHP[MAX_PLAYERS];
new bool:InDialog[MAX_PLAYERS];
//new WalkToTim[MAX_PLAYERS];
new DialogTimer[MAX_PLAYERS];
new DialogDet[MAX_PLAYERS];
new createQtimer[MAX_PLAYERS];

new QuestInt[MAX_PLAYERS];

new questcar;
//-----------------------------Simple kereskedés rendszer-----------------------
#define KERESKEDES_DIALOG 1500

#define DROG_ELADAS 0
#define CIGI_ELADAS 1
#define PIA_ELADAS 2
#define VONALJEGY_ELADAS 3
#define KULONJEGY_ELADAS 4
#define HOTDOG_ELADAS 5

new eladoid[MAX_PLAYERS];
new eladastipus[MAX_PLAYERS];

//------------------------------Autórendszer------------------------
#define MAX_SLOTS 500
#define MAX_OWNCARS 10

new autovehid, slot;
//new autoid;
new carplay[MAX_SLOTS];
//new autocolor1, autocolor2;
new objects[MAX_SLOTS];
new objects2[MAX_SLOTS];
//new rendszam[15];
//new paintjob;

new bool:csomagt[MAX_VEHICLES];

/*enum neonname
{
	neonn
}

new neonnames[][neonname] =
{
	{"Kék neoncsík", 18648}, {"Piros neoncsík", 18647},
	{"Zöld neoncsík", 18649}, {"Sárga neoncsík", 18650},
	{"Fehér neoncsík", 18652}, {"Rózsaszín neoncsík", 18651},
	{"Villogó", 18646}, {"Rendõr sziréna(villog)", 19419},
	{"Rendõr sziréna(nem villog)", 19420},
};*/
//---------------------------------------------------------------------
//---------------------Clan system-------------------------------------
#define MAX_CLANS 50
#define MAX_CCSLOTS 300
#define MAX_CLANRANK 11

//mapok
#define MONTGOMERY_MAP 1
#define HAJORAKTAR_MAP 2

new clancars[MAX_CCSLOTS];

//new clanstr[250];
new clanhtimer;
new clanh2timer;
//new Text3D:clantext[MAX_PLAYERS];
//---------------------------------------------------------------------

//---------------Szint rendszer----------------------------------------
#define MAX_LEVEL 50

#define SKILLS_DIALOG 2500

new bool:skillalw[3][MAX_PLAYERS];
new fireobj[MAX_PLAYERS];
new weapfireobj[MAX_PLAYERS];
new fireobjv[MAX_VEHICLES];

new Text:giveexp[MAX_PLAYERS];
new Text:level[MAX_PLAYERS];
new Text:exp[MAX_PLAYERS];
new Text:SkillBox[MAX_PLAYERS];
new Text:Skill1Text[MAX_PLAYERS];
new Text:Skill2Text[MAX_PLAYERS];
new Text:Skill3Text[MAX_PLAYERS];
new Text:Skill1Count[MAX_PLAYERS];
new Text:Skill2Count[MAX_PLAYERS];
new Text:Skill3Count[MAX_PLAYERS];

new Bar:expbar[MAX_PLAYERS];

enum explevel
{
	levelvalue,
	expvalue
}

new levelexp[][explevel] =
{
	{0, 500}, {1, 1000},
	{2, 1500}, {3, 2000},
	{4, 2500}, {5, 3000},
	{6, 3500}, {7, 4000},
	{8, 4500}, {9, 5000},
	{10, 5500}, {11, 6000},
	{12, 6500}, {13, 7000},
	{14, 7500}, {15, 8000},
	{16, 8500}, {17, 9000},
	{18, 9500}, {19, 10000},
	{20, 10500}, {21, 11000},
	{22, 11500}, {23, 12000},
	{24, 12500}, {25, 13000},
	{26, 13500}, {27, 14000},
	{28, 14500}, {29, 15000},
	{30, 15500}, {31, 16000},
	{32, 16500}, {33, 17000},
	{34, 17500}, {35, 18000},
	{36, 18500}, {37, 19000},
	{38, 19500}, {39, 20000},
	{40, 20500}, {41, 21000},
	{42, 21500}, {43, 22000},
	{44, 22500}, {45, 23000},
	{46, 23500}, {47, 24000},
	{48, 24500}, {49, 25000},
	{50, 0}
};

#define BANKOS_EXP 5
#define KAMIONOSH_EXP 10
#define KAMIONOSR_EXP 5
#define ZSARU_EXP 5
#define KATONA_EXP 5
#define RABLO_EXP 5
#define HACKER_EXP 5
#define HOTDOG_EXP 5
#define UTTISZTITO_EXP 2
#define FARMER_EXP 1

#define KILL_EXP 10
#define KLAN_EXP 30
#define RACE1_EXP 50
#define RACE2_EXP 25
#define RACE3_EXP 10
#define HORGASZ_EXP 15
#define HIDRA_EXP 15
#define GANGZONE_EXP 15
#define ACTORKILL_EXP 1

#define KNIFE50_EXP 60
#define KNIFE100_EXP 120
#define COLT50_EXP 50
#define COLT100_EXP 100
#define DEAGLE50_EXP 40
#define AK47100_EXP 90
#define SMG100_EXP 100
#define POLICE30_EXP 60
#define ARMY30_EXP 50
#define ROD30_EXP 70
#define VEHDRIVES200_EXP 100
#define VEHDRIVES500_EXP 200
#define SHOPROB50_EXP 100
#define SHOPROB100_EXP 200
#define DMWINS50_EXP 70
#define DMWINS100_EXP 150
#define DMWINS200_EXP 400
#define JAILS50_EXP 50
#define JAILS100_EXP 100
#define ELSOHAZ_EXP 200
#define ELSOKOCSI_EXP 50
#define ELSOBIZ_EXP 500
#define LEADERESM_EXP 50
#define ELSOCLANTAG_EXP 30
#define ELSOCLAN_EXP 100
#define HORGASZ50_EXP 100
#define HORGASZ100_EXP 200
//#define 10ORA_EXP 100
//#define 50ORA_EXP 500
//#define 100ORA_EXP 1000
//#define 200ORA_EXP 2000
#define AREA10_EXP 100
#define AREA30_EXP 300
#define AREA50_EXP 500
//#define 50KILLS_EXP 100
//#define 100KILLS_EXP 300
//#define 300KILLS_EXP 500

#define QUEST1_EXP 100
#define QUEST2_EXP 150
#define QUEST3_EXP 200
#define QUEST4_EXP 250

//---------------------------------------------------------------------
//--------------------------Zombi rendszer---------------------------
#if defined ZOMBIK

#include <FCNPC>

#define NPC0_SX 598.8798
#define NPC0_SY 94.4394
#define NPC0_SZ 5.2404

#define NPC1_SX 634.5329
#define NPC1_SY 114.6575
#define NPC1_SZ 8.3977

#define NPC2_SX 653.1035
#define NPC2_SY 95.9487
#define NPC2_SZ 11.7791

#define NPC3_SX 643.8849
#define NPC3_SY 71.0701
#define NPC3_SZ 10.8597

#define NPC4_SX 674.7527
#define NPC4_SY 87.6521
#define NPC4_SZ 27.5208

#define NPC5_SX 695.0989
#define NPC5_SY 114.1715
#define NPC5_SZ 29.2791

#define NPC6_SX 719.3630
#define NPC6_SY 106.4758
#define NPC6_SZ 43.1617

#define NPC7_SX 27.8865
#define NPC7_SY 75.0336
#define NPC7_SZ 55.7909

#define NPC8_SX 747.1475
#define NPC8_SY 78.8051
#define NPC8_SZ 61.9946

#define NPC9_SX 698.3025
#define NPC9_SY 105.6511
#define NPC9_SZ 32.9774

#define NPC10_SX 655.7479
#define NPC10_SY 133.2209
#define NPC10_SZ 12.4132

#define NPC11_SX 727.6618
#define NPC11_SY 148.0985
#define NPC11_SZ 35.8355

#define NPC12_SX 752.8864
#define NPC12_SY 121.4128
#define NPC12_SZ 53.8004

#define NPC13_SX 602.7823
#define NPC13_SY 137.6468
#define NPC13_SZ 8.2063

#define NPC14_SX 575.6992
#define NPC14_SY 118.6254
#define NPC14_SZ 9.2025

#define NPC15_SX 595.2695
#define NPC15_SY 64.6566
#define NPC15_SZ 6.4360

#define NPC16_SX 680.2097
#define NPC16_SY 53.4972
#define NPC16_SZ 38.8041

#define NPC17_SX 708.5142
#define NPC17_SY 69.3319
#define NPC17_SZ 49.1191

#define NPC18_SX 732.6958
#define NPC18_SY 57.3831
#define NPC18_SZ 58.7789

#define NPC19_SX 668.0526
#define NPC19_SY 118.1098
#define NPC19_SZ 16.9338

#define SEBZES 8
#define ASEBZES 20

#define MAX_ZOMBIE 10

enum zombiinfo
{
	tamadoid
}

new zombi[MAX_ZOMBIE][zombiinfo];

new npc[MAX_ZOMBIE];
new npctimer[MAX_ZOMBIE][MAX_PLAYERS];
new npcpoint_timer;

new gangzone;
new zzone;
#endif
//-------------------------------------------------------------------
//----------------------------Event System---------------------------
#define EVENT_DIALOG 1002
#define EVENTRACE_DIALOG 1003
#define EVENTSTUNT_DIALOG 1004
#define NEVEZESI_DIALOG 1005
#define STARTTIME_DIALOG 1006
#define KIRUGAS_DIALOG 1007
#define EVENTSTART_DIALOG 1008
#define AUTOSTART_DIALOG 1009

#define START_TIME 200
#define NEVEZESI_DIJ 0
#define AUTOSTART_TIME 5

#define AUTOEVENTS

new autoe_timer;

new races;
new stunts;
new racecp[MAX_PLAYERS];
new stuntcp[MAX_PLAYERS];

/*new racecp1[MAX_PLAYERS];
new racecp2[MAX_PLAYERS];
new racecp3[MAX_PLAYERS];
new racecp4[MAX_PLAYERS];
new racecp5[MAX_PLAYERS];
new racecp6[MAX_PLAYERS];
new racecp7[MAX_PLAYERS];
new racecp8[MAX_PLAYERS];*/
new bool:inrace[MAX_PLAYERS];
new bool:instunt[MAX_PLAYERS];
new bool:readyzett[MAX_PLAYERS];
new racestart_timer;
new stuntstart_timer;
new ready_timer;
new racestart = START_TIME;
new stuntstart = START_TIME;
new rekordt;
new minu[MAX_PLAYERS];
new sec[MAX_PLAYERS];
new racefile[128];

//new fa[20];

new bool:rhelyezes[3];
new bool:shelyezes[3];
new racestring[200];
new bool:relindult;
new bool:selindult;
new versenyzok;
new stuntolok;
new versenybenlt;
new stuntbanlt;

new Float:fracecpX, Float:fracecpY, Float:fracecpZ, fracecptype;
new Float:nfracecpX, Float:nfracecpY, Float:nfracecpZ, fraceid;
new sugcar;
new fracename[50], rmoneywin, rexpwin;
new bool:lastcp[MAX_PLAYERS];

//new Float:rpx, Float:rpy, Float:rpz;

new Float:oldrcpx, Float:oldrcpy, Float:oldrcpz;
new Float:rcpx, Float:rcpy, Float:rcpz;
new racename[50], raceid;
new bool:raceedit;
new cpcount;
new bool:stuntedit;
new racecarid = 0;
//--------------------------------------------------------------------
//---------------------------Horgászat rendszer------------------------
new bool:fishing[MAX_PLAYERS];
new bool:elkapni[MAX_PLAYERS];
new Float:fishingscore[MAX_PLAYERS];
new horgasztimer2[MAX_PLAYERS];
new horgasztimer3[MAX_PLAYERS];
new vizkozeltimer[MAX_PLAYERS];
new halfajta[24][0] =
{
	"Amur",
	"Angolna",
	"Csuka",
	"Dévérkeszeg",
	"Sügér",
	"Folyami galóca",
	"Fürge cselle",
	"Garda",
	"Gyöngyös koncér",
	"Harcsa",
	"Kárász",
	"Kecsege",
	"Süllõ",
	"Kõsüllõ",
	"Lapos keszeg",
	"Naphal",
	"Nyurga ponty",
	"Paduc",
	"Pénzes pér",
	"Törpeharcsa",
	"Vágó csík",
	"Vaskos csabak",
	"Vak ingola",
	"Vörösszárnyú keszeg"
};
//---------------------------------------------------------------------
//---------------------Random NPC-k------------------------------------
//#define ACTORS

#if defined ACTORS
new rifaa[2], bankroba, triada, ellenora[3], ryua, mentosa, maffiaa, fegyvera;
new katonaa[4], taxia, vonata, csovesa, dilera[2], hotdoga, kamionosa[2], bkvora;
new bkva, tuzoltoa, riportera, parkolosa, dananga[2], dancinga[5], pultosa, dja;
new munkasa[2], rendora[2], benzina;
new johnactor;
new vevoactor;
#endif
//---------------------------------------------------------------------
//Csapatok
#define TEAM_CIVIL 0
#define TEAM_BKV 1
#define TEAM_MAV 2
#define TEAM_TAXI 3
#define TEAM_MENTOS 4
#define TEAM_BANKOS 5
#define TEAM_RABLO 6
#define TEAM_KAMIONOS 7
#define TEAM_ZSARU 8
#define TEAM_POLITIKUS 9
#define TEAM_KATONA 10
#define TEAM_MTK 11
#define TEAM_UJPEST 12
#define TEAM_VASAS 13
#define TEAM_HONVED 14
#define TEAM_FRADI 15
#define TEAM_PAP 16
#define TEAM_RIPORT 17
#define TEAM_TUZOLTO 18
#define TEAM_RODNEYMUNKA 19
#define TEAM_TRIAD 20
#define TEAM_RIFA 21
#define TEAM_MAFFIA 22
#define TEAM_DANANG 23
#define TEAM_STUNTER 24
#define TEAM_TERRORISTA 25
#define TEAM_TDM1 26
#define TEAM_TDM2 27
#define TEAM_HACKER 28
#define TEAM_CARS 29
#define TEAM_HOTDOG 30
#define TEAM_UTTISZTITO 31
#define TEAM_FARMER 32
#define TEAM_KLAN1 33
#define TEAM_KLAN2 34
#define TEAM_DM1 35
#define TEAM_DM2 36
#define MAX_TEAMS 40

#define DIALOGID 10
#define CSOMAGTARTO_DIALOG 11
#define RCARARAK_DIALOG 876
#define CARINFO_DIALOG 877
#define CARINFOVETEL_DIALOG 878
#define CARSZINEK_DIALOG 879
#define CARSZINEK2_DIALOG 880
#define SPAWN_DIALOG 1100
#define AUTOSZEREL_DIALOG 1102
#define AUTOSLOT_DIALOG 1103
#define AUTOTUNING_DIALOG 1104
#define AUTOREND_DIALOG 1105
#define AUTOCOLOR_DIALOG 1106
#define AUTOPAINT_DIALOG 1107
#define AUTOTUNINGSLOT1_DIALOG 1108
#define AUTOTUNINGSLOT2_DIALOG 1109
#define AUTOTUNINGSEL_DIALOG 1110
#define AUTOTUNINGID_DIALOG 1111
#define AUTOCOLOR12_DIALOG 1112
#define AUTOADAT_DIALOG 1113
#define AUTOSZERKESZT_DIALOG 1114
#define AUTORENDSZAM_DIALOG 1115
#define AUTOSZIN_DIALOG 1116
#define AUTOSZIN1_DIALOG 1117
#define AUTOSZIN2_DIALOG 1118
#define AUTOSZPAINT_DIALOG 1119
#define HAZRENDEZ_DIALOG 1120
#define TARGYMEGVESZ1_DIALOG 1121
#define TARGYMEGVESZ2_DIALOG 1122
#define HAZBERENDEZES_DIALOG 1123
#define HAZTARGYAK_DIALOG 1124
#define HAZTARGYAK2_DIALOG 1125
#define TARGYELAD_DIALOG 1126
#define HOUSEMENU_DIALOG 1127
#define HAZNEV_DIALOG 1128
#define AUTOELAD_DIALOG 1129
#define AUTOSZTUNING_DIALOG 1130
#define AUTOADAT2_DIALOG 1131
#define AUTONEON1_DIALOG 1132
#define AUTONEON2_DIALOG 1133
#define AUTONEONELAD_DIALOG 1134
#define AUTOKEREK_DIALOG 1135
#define AUTOSULTAN_DIALOG 1136
#define AUTOELEGY_DIALOG 1137
#define FELNIELAD_DIALOG 1138
#define AUTOBLISTA_DIALOG 1139
#define AUTOLEVELUP_DIALOG 1140
#define AUTOLEVELUP2_DIALOG 1141
#define AUTOSAVANNA_DIALOG 1142
#define HAZKATEG_DIALOG 1143
#define QUEST_DIALOG 1144
#define NITROELAD_DIALOG 1145
#define HIDRAELAD_DIALOG 1146
//klán
#define CLANPANEL_DIALOG 3000
#define CLANTAGOK_DIALOG 3001
#define CLANTAGSZ_DIALOG 3002
#define CLANRANGOK_DIALOG 3003
#define RANGSZERKESZT_DIALOG 3004
#define CLANRANGNEV_DIALOG 3005
#define CLANRANGSKIN_DIALOG 3006
#define CLANRANGAD_DIALOG 3007
#define CLANKIRUG_DIALOG 3008
#define CLANELHAGY_DIALOG 3009
#define CLANFELOSZLAT_DIALOG 3010
#define CLANKIHIV1_DIALOG 3011
#define CLANKIHIV2_DIALOG 3012
#define CLANRANK_DIALOG 3013
#define CLANRANK2_DIALOG 3014
#define CLANMONEY_DIALOG 3015
#define CLANMONEY2_DIALOG 3016
#define CLANMONEY3_DIALOG 3017
#define CLANBUY_DIALOG 3018
#define CLANBUY2_DIALOG 3019
#define CLANAUTOBUY_DIALOG 3020
#define CLANAUTOINFO_DIALOG 3021
#define CLANAUTOCOLOR1_DIALOG 3022
#define CLANAUTOCOLOR2_DIALOG 3023
#define CLANJOGOK_DIALOG 3024
#define CLANJOGOK2_DIALOG 3025
#define CLANAUTOSEL_DIALOG 3026
#define CLANAUTOSEL2_DIALOG 3027
#define CLANAUTOSLOT_DIALOG 3028
#define CLANHMAP_DIALOG 3029
#define CLANHSZIN_DIALOG 3030
//----------

#define HACKER_DIALOG 1200
#define HACKERP_DIALOG 1201
#define HACKERP1_DIALOG 1202
#define HACKERP2_DIALOG 1203
#define HACKERP3_DIALOG 1204
#define HACKERP4_DIALOG 1205
#define HACKER1_DIALOG 1206
#define HACKER2_DIALOG 1207
#define HACKER3_DIALOG 1208

#define RENDORSZ1_DIALOG 1210
#define RENDORSZ2_DIALOG 1211
#define RENDORSZ3_DIALOG 1212

forward AMMUTIMER(playerid);
//Textdrawok
new Text:Clock;
new Text:gps[MAX_PLAYERS];

new TextTimer[MAX_PLAYERS];
new Text:TextDrawInfoBox[MAX_PLAYERS];
forward Text_Hide(playerid);
public Text_Hide(playerid) TextDrawHideForPlayer(playerid, TextDrawInfoBox[playerid]);

new TextTimer3[MAX_PLAYERS];
new Text:TextDrawInfoBox3[MAX_PLAYERS];
forward Text_Hide3(playerid);
public Text_Hide3(playerid) TextDrawHideForPlayer(playerid, TextDrawInfoBox3[playerid]);

new TextTimer2[MAX_PLAYERS];
new Text:TextDrawInfoBox2[MAX_PLAYERS];
forward Text_Hide2(playerid);
public Text_Hide2(playerid) TextDrawHideForPlayer(playerid, TextDrawInfoBox2[playerid]);

new DialogTextTimer[MAX_PLAYERS];
new Text:DialogTextInfoBox[MAX_PLAYERS];
forward DialogText_Hide(playerid);
public DialogText_Hide(playerid) TextDrawHideForPlayer(playerid, DialogTextInfoBox[playerid]);

new Text:Textdraw0;
new Text:Textdraw1;
new Text:Textdraw2;
new Text:Textdraw3;

new Text:Box[MAX_PLAYERS];
new Text:Ft[MAX_PLAYERS];

new Text:modeltext[MAX_PLAYERS];

new Text:atpic[MAX_PLAYERS];
new Text:attext[MAX_PLAYERS];
new Text:attext2[MAX_PLAYERS];
new Text:atbox[MAX_PLAYERS];

new waa[6];

new rodneyt1;
new rodneyt2;
new rodneyt3;
new rodneyt4;
new bloodykocsi;
new bazsikocsi;
new hackerkocsi[5];
new busz1, busz2, busz3;

new katonav[7];
//new drog[5];

//new bkvp;
new mavp, taxip, mentosp, hotdogp, tisztitp, farmerp, bankosp, rablop, rablop2, kamionp, rendorp, politikusp, partp, katonap, mtk, ujpest, vasasp, honved, fradi, pap, riportp, tuzolto;
new varoshazabe, varoshazaki, rendorsegbe, rendorsegki, rendorseginfo, parlamentki, parlamentbe, maffiaki, maffiabe,papbe, papki, tornabe, tornaki, fankosbe, fankoski;
new ruha[4], ammunation;
new bool:bar, bool:box, bool:burgerking, bool:zero, bool:tetovalas, bool:haj, bool:csirkes, bool:klub, bool:suburban, bool:binco, bool:zip, bool:victim, bool:pizza, bool:fankosr,bool:maffiar;
new bankp[7], hp[6];
new w[2];
new ejtoernyo;
//new autosuli;
new fbbe, fbki;
new rcarsp1, rcarsp2;
new bankrbe, bankrki;

new Float:hotdogcp[][3] =
{
	{-2802.8276,84.1990,7.0063},
	{-2830.1621,924.4988,43.8956},
	{-2732.5315,818.0867,53.0404},
	{-2664.0151,893.9106,79.5417},
	{-2467.8513,913.8954,62.8619},
	{-2012.3638,900.0180,45.2767},
	{-2448.4805,814.3035,35.0171},
	{-2395.6169,928.9139,45.3046},
	{-2132.3984,757.0424,69.4717},
	{-1908.7599,831.5030,34.9827},
	{-1819.5659,1112.2742,45.3539},
	{-1997.5480,1186.9233,45.2828}
};

new Float:UtCP[][3] =
{
	{-2007.3756,456.5320,34.5819},
	{-1895.3448,799.8868,37.6543},
	{-1926.2759,339.8727,31.0076},
	{-1847.5967,435.0401,16.5749},
	{-1981.2808,931.6055,44.8636},
	{-2173.4717,810.2540,62.2565},
	{-2528.7109,727.7755,28.1784},
	{-2307.0049,666.3625,44.1366},
	{-2356.8120,374.7614,34.5821},
	{-2541.5701,360.4771,19.6258},
	{-2627.2805,220.0014,4.0040},
	{-2403.1357,-72.3280,34.7299},
	{-2164.7800,-9.2193,34.7379},
	{-2139.4558,532.8443,34.5805},
	{-2256.1772,766.4357,48.8633}
};

/*new Float:drogcp[][3] =
{
	{2309.1392,-1653.2932,14.0559},
	{1827.3124,-1682.4991,13.1412},
	{2424.5200,-1228.6643,24.6618},
	{2544.1135,1018.6095,10.5047},
	{2507.3254,1247.4874,10.4708},
	{2441.6289,2058.5093,10.4708}
};*/

new Float:newCarPos[][4] =
{
    {-1638.1663,1210.3090,6.8343,224.9642},
    {-1650.8904,1223.2448,6.8343,224.7469}
};

new bool:termes[97];
new farmero[97];

new bombao[MAX_PLAYERS];
new bool:bombale[MAX_PLAYERS];

new otherid;

new gPlayerSpamTick[MAX_PLAYERS];

new PlayerCar[MAX_PLAYERS];

new rcxdveh[MAX_PLAYERS];

new StuntWorld[MAX_PLAYERS],LastCar[MAX_PLAYERS];
new Float:StuntX[MAX_PLAYERS],Float:StuntY[MAX_PLAYERS],Float:StuntZ[MAX_PLAYERS],Float:StuntA[MAX_PLAYERS];

new rodneymotor, rodneymotor1, BRL_005, BRL_006;

new randomw, weathers;

new pweap[MAX_PLAYERS][13], pammo[MAX_PLAYERS][13];

new sora, sperc, ssec;

new dmtimer;

//Bandazónák
new ZoneCount=0;
#define MAX_ZONES 20
enum gzones
{
	zone,
	zonename[24],
	Float:Minx,
	Float:Miny,
	Float:Maxx,
	Float:Maxy,
	Float:Cpx,
	Float:Cpy,
	Float:Cpz,
	Owner,
	Color,
	Attacker,
	ZoneCP,
	flashing,
	flashtime
};
new ZoneInfo[MAX_ZONES][gzones];
enum agzones
{
	isattacking
};
new TeamInfo[MAX_TEAMS][agzones];

enum pInfo
{
	lastzone,
	IsZoneCP,
	CpEnabled,
	pJailed,
	TJailTime,
	Cuffed,
	Level,
	ishidrauliking
};

new PlayerInfo[MAX_PLAYERS][pInfo];

new FALSE = false;
#define SendFormatMessage(%1,%2,%3,%4) do{new sendfstring[128];format(sendfstring,256,(%3),%4);SendClientMessage(%1,(%2),sendfstring);}while(FALSE)
#define SendFormatMessageToAll(%1,%2,%3) do{new sendfstring[128];format(sendfstring,256,(%2),%3);SendClientMessageToAll((%1),sendfstring);}while(FALSE)

main()
{
	print("\n----------------------------------");
	print("        Budapest Real Life");
	print(" A módot írták/javították:");
	print("Bart, Metaxa, hpeter94");
	print("A mód elõzõ fejlesztõi:");
	print("Okoska245 (2011)");
	print("Ryuuzaki (2012-2016)");
//	print("A mód jelenlegi fejlesztõje:");
	print("A forint bar-t Game94 készítette.:P (mert lusta voltam újat csinálni)");
	print("----------------------------------\n");
}

public OnGameModeInit()
{
	SetGVarInt("StartRaceTime", START_TIME);
    SetGVarInt("NevezesiDij", NEVEZESI_DIJ);
    SetGVarInt("autostarttime", AUTOSTART_TIME);
	#if defined AUTOEVENTS
	SetGVarInt("autoevent", 1);
	autoe_timer = SetTimer("autoetimer", GetGVarInt("autostarttime")*60000, 1);
	#endif
//	mysql_debug(1);
	new MySQL:connection = mysql_init(LOG_ONLY_ERRORS);
	mysql_connect(SQL_HOST, SQL_USER, SQL_PASS, SQL_DB, connection, 1);
	if(mysql_ping())
	{
	    print(!"MySQL: Kapcsolódás sikertelen!");
	    SetGameModeText("[HUN] BRL[No Database]");
		return 1;
 	}
	print("MySQL: Kapcsolódás sikeres!");
	Textdraw0 = TextDrawCreate(500.000000,9.000000,"~r~Budapest ~w~Real ~g~Life");//Budapest ~w~Real ~g~Life
	Textdraw1 = TextDrawCreate(571.000000,131.000000,"");//B
	Textdraw2 = TextDrawCreate(571.000000,150.000000,"");//R
	TextDrawUseBox(Textdraw1,1);
	TextDrawBoxColor(Textdraw1,0xff000099);
	TextDrawTextSize(Textdraw1,611.000000,0.000000);
	TextDrawUseBox(Textdraw2,1);
	TextDrawBoxColor(Textdraw2,0xffffff99);
	TextDrawTextSize(Textdraw2,611.000000,0.000000);
	TextDrawAlignment(Textdraw0,0);
	TextDrawAlignment(Textdraw1,0);
	TextDrawAlignment(Textdraw2,0);
	TextDrawBackgroundColor(Textdraw0,0x000000ff);
	TextDrawBackgroundColor(Textdraw1,0x000000ff);
	TextDrawBackgroundColor(Textdraw2,0x000000ff);
	TextDrawFont(Textdraw0,1);
	TextDrawLetterSize(Textdraw0,0.400000,1.300000);
	TextDrawFont(Textdraw1,3);
	TextDrawLetterSize(Textdraw1,1.000000,1.000000);
	TextDrawFont(Textdraw2,3);
	TextDrawLetterSize(Textdraw2,1.000000,1.000000);
	TextDrawColor(Textdraw0,0xffffffff);
	TextDrawColor(Textdraw1,0xff000099);
	TextDrawColor(Textdraw2,0xffffffff);
	TextDrawSetOutline(Textdraw0,1);
	TextDrawSetOutline(Textdraw1,1);
	TextDrawSetOutline(Textdraw2,1);
	TextDrawSetProportional(Textdraw0,1);
	TextDrawSetProportional(Textdraw1,1);
	TextDrawSetProportional(Textdraw2,1);
	TextDrawSetShadow(Textdraw0,1);
	TextDrawSetShadow(Textdraw1,1);
	TextDrawSetShadow(Textdraw2,1);
	Textdraw3 = TextDrawCreate(571.000000,155.000000,"");//l
	TextDrawUseBox(Textdraw3,1);
	TextDrawBoxColor(Textdraw3,0x00ff00ff);
	TextDrawTextSize(Textdraw3,611.000000,0.000000);
	TextDrawAlignment(Textdraw3,0);
	TextDrawBackgroundColor(Textdraw3,0x000000ff);
	TextDrawFont(Textdraw3,3);
	TextDrawLetterSize(Textdraw3,1.000000,1.000000);
	TextDrawColor(Textdraw3,0x00ff0099);
	TextDrawSetOutline(Textdraw3,1);
	TextDrawSetProportional(Textdraw3,1);
	TextDrawSetShadow(Textdraw3,1);

	txtAnimHelper = TextDrawCreate(610.0, 400.0, "~b~~k~~PED_LOCK_TARGET~ ~w~hogy lell¢tsd az animot!");
	TextDrawUseBox(txtAnimHelper, 0);
	TextDrawFont(txtAnimHelper, 2);
	TextDrawSetShadow(txtAnimHelper,0); // no shadow
    TextDrawSetOutline(txtAnimHelper,1); // thickness 1
    TextDrawBackgroundColor(txtAnimHelper,0x000000FF);
    TextDrawColor(txtAnimHelper,0xFFFFFFFF);
    TextDrawAlignment(txtAnimHelper,3); // align right
    
    hmenu = CreateMenu("Hidraulika", 1, 400.0, 200.0, 150.0, 150.0);
	if(IsValidMenu(hmenu))
	{
	AddMenuItem(hmenu, 0, "Csatlakozni");
    }

	//Alapvetõ beállítások
//	SendRconCommand("hostname [HUN]Budapest Real Life [FreeRoam In Real Life]| FPS-system.eu");//Hostnév beállítása
	SendRconCommand("hostname [HUN]Budapest Real Life | Sunwell.hu");//Hostnév beállítása
	SetGameModeText("[HUN] BRL FreeRoam");//GameModeNév beállítása
	SendRconCommand("mapname Budapest, San Fierro");//Mapnév beállítása
	SendRconCommand("language Magyar/Hungarian/English");//Nyelv beállítása
	SendRconCommand("weburl www.brl.ucoz.net");//Weblap beállítása
	SendRconCommand("reloadfs admin");
	SendRconCommand("reloadfs npc");
	SendRconCommand("reloadfs npc2");
	SendRconCommand("reloadfs objectek");

	//SetWorldTime(0);//Óra beállítása
	SetWeather(1);//Idõjárás beállítása

	UsePlayerPedAnims();//CJ stílusú futás mindenkinek
//	AllowInteriorWeapons(false);//Letiltja a fegyvereket interiorban //nem mûködik
	SetTeamCount(26);
	//SetDeathDropAmount(1000);

	//Timerek
	SetTimer("MindenesTimer", 1000, 1);//Speedo, CheckMoney, bizniszfizu, Markertimer
	#if defined FUEL_SYSTEM
	SetTimer("fueltimer", 60000, 1);
	#endif
	//SetTimer("GangTimer",1*1000,1);//A bandazóna frissítés timerje
	SetTimer("Fizetes", 60*1000,1);//Fizetés a dolgozó népnek :)
	//SetTimer("MarkerTimer", 1*1000,1);//A rendõrõknek és katonáknak a körözés
	SetTimer("ClockSync", 60*1000, 1);//Óra
	SetTimer("GPS", 500, 1);//GPS információ frissítése
	//SetTimer("MoneyScore", 1*1000, 1);//A score helyére a lóvét rakja be :D
	//SetTimer("UpdateSpeed", 1000, 1);//Speedometer alias sebességmérõ
	//SetTimer("Bizniszfizetes", 1000, 1);//A tulajoknak fizet a biznisz
	//SetTimer("CheckMoney", 1000, true);
	//SetTimer("bizniszmentes", 5000, 1);//Biznisz mentése
	//SetTimer("oratimer", 55000, 1);//Lekérdezi hogy megvan- e a 300 játszott óra
	//SetTimer("RandomWeather", 60000, 1);
	
	#if defined ZOMBIK
	
	gangzone = GangZoneCreate(555.7527,167.6413, 782.5479,34.5652);

	new zstring[12];
	for(new i; i < MAX_ZOMBIE; i++)
	{
		format(zstring, sizeof(zstring), "Zombi%d", i);
		npc[i] = FCNPC_Create(zstring);
		FCNPC_SetInterior(npc[i], 0);
		zombi[i][tamadoid] = -1;
		npcpoint_timer = SetTimer("npcpoint", 1000, 1);
	}

	FCNPC_Spawn(npc[0], 159, NPC0_SX, NPC0_SY, NPC0_SZ);
	FCNPC_Spawn(npc[1], 182, NPC1_SX, NPC1_SY, NPC1_SZ);
	FCNPC_Spawn(npc[2], 183, NPC2_SX, NPC2_SY, NPC2_SZ);
	FCNPC_Spawn(npc[3], 4, NPC3_SX, NPC3_SY, NPC3_SZ);
	FCNPC_Spawn(npc[4], 79, NPC4_SX, NPC4_SY, NPC4_SZ);
	FCNPC_Spawn(npc[5], 95, NPC5_SX, NPC5_SY, NPC5_SZ);
	FCNPC_Spawn(npc[6], 134, NPC6_SX, NPC6_SY, NPC6_SZ);
	FCNPC_Spawn(npc[7], 136, NPC7_SX, NPC7_SY, NPC7_SZ);
	FCNPC_Spawn(npc[8], 158, NPC8_SX, NPC8_SY, NPC8_SZ);
	FCNPC_Spawn(npc[9], 160, NPC9_SX, NPC9_SY, NPC9_SZ);
/*	FCNPC_Spawn(npc[10], 222, NPC10_SX, NPC10_SY, NPC10_SZ);
	FCNPC_Spawn(npc[11], 239, NPC11_SX, NPC11_SY, NPC11_SZ);
	FCNPC_Spawn(npc[12], 282, NPC12_SX, NPC12_SY, NPC12_SZ);
	FCNPC_Spawn(npc[13], 282, NPC13_SX, NPC13_SY, NPC13_SZ);
	FCNPC_Spawn(npc[14], 282, NPC14_SX, NPC14_SY, NPC14_SZ);
	FCNPC_Spawn(npc[15], 282, NPC15_SX, NPC15_SY, NPC15_SZ);
	FCNPC_Spawn(npc[16], 282, NPC16_SX, NPC16_SY, NPC16_SZ);
	FCNPC_Spawn(npc[17], 282, NPC17_SX, NPC17_SY, NPC17_SZ);
	FCNPC_Spawn(npc[18], 282, NPC18_SX, NPC18_SY, NPC18_SZ);
	FCNPC_Spawn(npc[19], 282, NPC19_SX, NPC19_SY, NPC19_SZ);
*/
    zzone = CreateDynamicRectangle(555.7527,167.6413, 782.5479,34.5652);
    #endif
    
    //Házrendszer
    new main_str[200];
    mysql_query("SELECT * FROM houses");
    mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		while(mysql_fetch_row(linen))
		{
			new tarolo[24];
			new i;
			new nevtarolo[24];
			new tarolo2[4];
			new Float:tarolo3[3];
			new haznev[64];
			sscanf(linen, "p<|>ds[24]s[24]s[64]ddddfff", i, tarolo, nevtarolo, haznev, tarolo2[0], tarolo2[1], tarolo2[2], tarolo2[3], tarolo3[0], tarolo3[1], tarolo3[2]);
			if(!strcmp("ELADO", tarolo))
			{
			    pickups[i] = CreateDynamicPickup(1273, 1, tarolo3[0], tarolo3[1], tarolo3[2]);
				icons[i] = CreateDynamicMapIcon(tarolo3[0], tarolo3[1], tarolo3[2], 31, 0);
				format(main_str, sizeof(main_str), #HLIME#"Tulaj: ELADÓ\n"#HLIME#"Házszám: %d\n"#HYELLOW#"Ár: %s$\n"#HBLUE#"Megvétel: /buyhouse", i, convertFormattedNumber(tarolo2[0], "."));
				labels[i] = Create3DTextLabel(main_str, COLOR_BLUE, tarolo3[0], tarolo3[1], tarolo3[2], 10, 0, 1);
			}
			else if(strcmp("ELADO", tarolo) && strcmp("Nincs", nevtarolo))
			{
			    pickups[i] = CreateDynamicPickup(19522, 1, tarolo3[0], tarolo3[1], tarolo3[2]); //1272
				icons[i] = CreateDynamicMapIcon(tarolo3[0], tarolo3[1], tarolo3[2], 32, 0);
			    format(main_str, sizeof(main_str), #HLIME#"%s\n"#HLIME#"Házszám: %d\nTulaj: %s\n"#HYELLOW#"Társtulaj: %s\n"#HBLUE#"Belépés: Y gomb", haznev, i, tarolo, nevtarolo);
				labels[i] = Create3DTextLabel(main_str, COLOR_BLUE, tarolo3[0], tarolo3[1], tarolo3[2], 10, 0, 1);
			}
			else if(!strcmp("Nincs", nevtarolo))
			{
			    if(strcmp("ELADO", tarolo))
			    {
			        pickups[i] = CreateDynamicPickup(19522, 1, tarolo3[0], tarolo3[1], tarolo3[2]); //1272
	   				icons[i] = CreateDynamicMapIcon(tarolo3[0], tarolo3[1], tarolo3[2], 32, 0);
				    format(main_str, sizeof(main_str), #HLIME#"%s\n"#HLIME#"Házszám: %d\nTulaj: %s\n"#HBLUE#"Belépés: Y gomb", haznev, i, tarolo);
					labels[i] = Create3DTextLabel(main_str, COLOR_BLUE, tarolo3[0], tarolo3[1], tarolo3[2], 10, 0, 1);
				}
			}
		}
		mysql_free_result();
	}
	//Garázsrendszer
	mysql_query("SELECT ID, VW, Tulaj, ar, size, outX, outY, outZ FROM garages");
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    while(mysql_fetch_row(linen))
	    {
		    new tulaj[24];
		    new ar, size, vw, i;
		    new Float:tarolo4[3];
		    sscanf(linen, "p<|>iis[24]iifff", i, vw, tulaj, ar, size, tarolo4[0], tarolo4[1], tarolo4[2]);
			if(!strcmp("ELADO", tulaj))
			{
				if(size == 1) format(main_str, sizeof(main_str), #HLIME#"Garázs\nID: %d\nTulaj: ELADÓ\n"#HYELLOW#"Ár: %s$"#HBLUE#"\nMéret: Kicsi\nMegvétel: /buygarage", vw, convertFormattedNumber(ar, "."));
				if(size == 2) format(main_str, sizeof(main_str), #HLIME#"Garázs\nID: %d\nTulaj: ELADÓ\n"#HYELLOW#"Ár: %s$"#HBLUE#"\nMéret: Nagy\nMegvétel: /buygarage", vw, convertFormattedNumber(ar, "."));
			}
			else if(strcmp("ELADO", tulaj))
			{
				if(size == 1) format(main_str, sizeof(main_str), #HLIME#"Garázs\nID: %d\nTulaj: %s\nMéret: Kicsi\nBelépés: Y", vw, tulaj);
				if(size == 2) format(main_str, sizeof(main_str), #HLIME#"Garázs\nID: %d\nTulaj: %s\nMéret: Nagy\nBelépés: Y", vw, tulaj);
			}
			gpickups[i] = CreateDynamicPickup(19132, 1, tarolo4[0], tarolo4[1], tarolo4[2]);
			garagetext[i] = Create3DTextLabel(main_str, COLOR_BLUE, tarolo4[0], tarolo4[1], tarolo4[2], 10, 0, 1);
		}
		mysql_free_result();
	}
	//bútorrendszer
	/*for(new i; i < MAX_HOUSES; i++)
	{
	    for(new x; x < MAX_HSLOTS; x++)
	    {
		    format(query, sizeof(query), "SELECT VW, objectID, X, Y, Z, rX, rY, rZ FROM houseobjects WHERE houseID = %d AND slot = %d", i, x);
      		mysql_query(query);
		    mysql_store_result();
			if(mysql_num_rows() != 0)
			{
			    mysql_fetch_row(linen);
			    new tarolo[2];
			    new Float:tarolo2[6];
			    sscanf(linen, "p<|>iiffffff", tarolo[0], tarolo[1], tarolo2[0], tarolo2[1], tarolo2[2], tarolo2[3], tarolo2[4], tarolo2[5]);
			    mysql_free_result();
			    hobject[i][x] = CreateDynamicObject(tarolo[1], tarolo2[0], tarolo2[1], tarolo2[2], tarolo2[3], tarolo2[4], tarolo2[5], tarolo[0]);
			}
		}
	}*/

	mysql_query("SELECT VW, objectID, X, Y, Z, rX, rY, rZ, HouseID, slot FROM houseobjects");
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    while(mysql_fetch_row(linen))
	    {
	        new tarolo[2];
		    new Float:tarolo2[6];
		    new i, x;
		    sscanf(linen, "p<|>iiffffffii", tarolo[0], tarolo[1], tarolo2[0], tarolo2[1], tarolo2[2], tarolo2[3], tarolo2[4], tarolo2[5], i, x);
		    hobject[i][x] = CreateDynamicObject(tarolo[1], tarolo2[0], tarolo2[1], tarolo2[2], tarolo2[3], tarolo2[4], tarolo2[5], tarolo[0]);
	    }
 	}
	//Garázs objectek
	for(new i = 1; i < MAX_GARAGES; i++)
	{
		//size1
 		CreateDynamicObject(3095, -1312, -250.5, 14, 0, 90, 316, i);
		CreateDynamicObject(3095, -1318, -250.89999389648, 14, 0, 90, 225.99975585938, i);
		CreateDynamicObject(3095, -1318.0999755859, -244.89999389648, 14, 0, 90, 135.99975585938, i);
		CreateDynamicObject(3095, -1315.1999511719, -247.80000305176, 18.10000038147, 0, 0, 225.99975585938, i);
		CreateDynamicObject(2957, -1313.5, -243.19999694824, 14.800000190735, 0, 0, 316, i);
		CreateDynamicObject(2957, -1310.3000488281, -246.30000305176, 14.800000190735, 0, 0, 315.99975585938, i);
		CreateDynamicObject(2957, -1310.3000488281, -246.30000305176, 18, 0, 0, 315.99975585938, i);
		CreateDynamicObject(2957, -1313.5, -243.19999694824, 18, 0, 0, 315.99975585938, i);
		//size2
		CreateDynamicObject(3095, -1272, -238.89999389648, 15.60000038147, 0, 90, 315, i);
		CreateDynamicObject(3095, -1278.3000488281, -245.19999694824, 15.60000038147, 0, 90, 314.99996948242, i);
		CreateDynamicObject(3095, -1284.0999755859, -245.39999389648, 15.60000038147, 0, 90, 224.99450683594, i);
		CreateDynamicObject(3095, -1290.3000488281, -239.19999694824, 15.60000038147, 0, 90, 224.98901367188, i);
		CreateDynamicObject(3095, -1290, -233.30000305176, 15.60000038147, 0, 90, 134.99444580078, i);
		CreateDynamicObject(3095, -1281.4000244141, -242.19999694824, 19.5, 0, 0, 134.98904418945, i);
		CreateDynamicObject(3095, -1283.69921875, -227, 15.60000038147, 0, 90, 134.98901367188, i);
		CreateDynamicObject(3095, -1275.0999755859, -235.89999389648, 19.5, 0, 0, 134.98904418945, i);
		CreateDynamicObject(3095, -1287.6999511719, -235.89999389648, 19.5, 0, 0, 134.98904418945, i);
		CreateDynamicObject(3095, -1281.4000244141, -229.60000610352, 19.5, 0, 0, 134.98904418945, i);
		CreateDynamicObject(3084, -1272.9000244141, -231.60000610352, 14.800000190735, 0, 0, 314.75, i);
		CreateDynamicObject(3084, -1272.9000244141, -231.60000610352, 18, 0, 0, 314.74731445313, i);
		CreateDynamicObject(3084, -1276.5, -228, 18, 0, 0, 314.74731445313, i);
		CreateDynamicObject(3084, -1276.5, -228, 14.800000190735, 0, 0, 314.74731445313, i);
	}
	//Üzletrendszer
	mysql_query("SELECT * FROM business");
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    while(mysql_fetch_row(linen))
	    {
	        new i;
		    new tarolo[64];
		    new tarolo2[24];
		    new tarolo3[2];
			new Float:tarolo4[3];
			new tarolo5;
		    sscanf(linen, "p<|>ds[64]s[24]ddfffd", i, tarolo, tarolo2, tarolo3[0], tarolo3[1], tarolo4[0], tarolo4[1], tarolo4[2], tarolo5);
		    if(!strcmp(tarolo2, "ELADO"))
		    {
				format(main_str, sizeof(main_str), "Biznisz neve: %s\nTulaj: Eladó\nÁr: %s$\n/buybiz", tarolo, convertFormattedNumber(tarolo3[0], "."));
	            busicons[i] = CreateDynamicMapIcon(tarolo4[0], tarolo4[1], tarolo4[2], 35, 0);
				buslabels[i] = Create3DTextLabel(main_str, COLOR_LIGHTGREEN, tarolo4[0], tarolo4[1], tarolo4[2], 10, 0, 1);
				bustexts[i] = CreateDynamicSphere(tarolo4[0], tarolo4[1], tarolo4[2], 2, 0, 0, -1);
				bpickups[i] = CreateDynamicPickup(19524, 1, tarolo4[0], tarolo4[1], tarolo4[2]);
//				buselado[i] = true;
			}
			else if(strcmp(tarolo2, "ELADO"))
		    {
				format(main_str, sizeof(main_str), "Biznisz neve: %s\nTulaj: %s", tarolo, tarolo2);
	            busicons[i] = CreateDynamicMapIcon(tarolo4[0], tarolo4[1], tarolo4[2], 35, 0);
				buslabels[i] = Create3DTextLabel(main_str, COLOR_LIGHTGREEN, tarolo4[0], tarolo4[1], tarolo4[2], 10, 0, 1);
				bustexts[i] = CreateDynamicSphere(tarolo4[0], tarolo4[1], tarolo4[2], 2, 0, 0, -1);
				bpickups[i] = CreateDynamicPickup(19523, 1, tarolo4[0], tarolo4[1], tarolo4[2]);
//				buselado[i] = false;
			}
		}
		mysql_free_result();
	}

    #if defined FUEL_SYSTEM
	for(new i; i < MAX_VEHICLES; i++)
	{
		fuelvalue[i] = 50;
	}
	#endif
	//autórendszer
 	mysql_query("SELECT * FROM cars");
   	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		while(mysql_fetch_row(linen))
		{
			new i;
			new fuelt;
			new tarolo[6];
			new tuning[10];
			new Float:tarolo2[4];
			new tarolo3[15];
			new Float:tarolo4[6];
			new Float:tarolo5[6];
			new vwtarolo;
			new sirent;
			sscanf(linen, "p<|>d{d}d{s[24]s[24]}dffffdddddddddddddddds[15]{dddddddddddddddddddddd}ffffffffffffd{s[60]}", i, fuelt,
			tarolo[0], Float:tarolo2[0], Float:tarolo2[1], Float:tarolo2[2], Float:tarolo2[3], vwtarolo, tarolo[1], tarolo[2],
		 	tuning[0], tuning[1], tuning[2], tuning[3], tuning[4], tuning[5], tuning[6], tuning[7], tuning[8],
		 	tuning[9], tarolo[3], tarolo[4], tarolo[5], tarolo3, Float:tarolo4[0], Float:tarolo4[1],
		 	Float:tarolo4[2], Float:tarolo4[3], Float:tarolo4[4],Float:tarolo4[5], Float:tarolo5[0], Float:tarolo5[1], Float:tarolo5[2], Float:tarolo5[3],
		   	Float:tarolo5[4], Float:tarolo5[5], sirent);
			carplay[i] = CreateVehicle(tarolo[0], tarolo2[0], tarolo2[1], tarolo2[2], tarolo2[3], tarolo[1], tarolo[2], -1, sirent);
			SetVehicleVirtualWorld(carplay[i], vwtarolo);
			AddVehicleComponent(carplay[i], tuning[0]);
			AddVehicleComponent(carplay[i], tuning[1]);
			AddVehicleComponent(carplay[i], tuning[2]);
			AddVehicleComponent(carplay[i], tuning[3]);
			AddVehicleComponent(carplay[i], tuning[4]);
			AddVehicleComponent(carplay[i], tuning[5]);
			AddVehicleComponent(carplay[i], tuning[6]);
			AddVehicleComponent(carplay[i], tuning[7]);
			AddVehicleComponent(carplay[i], tuning[8]);
			AddVehicleComponent(carplay[i], tuning[9]);
			if(tarolo[3] != 0)
			{
				objects[i] = CreateDynamicObject(tarolo[3], 0, 0, -50, 0, 0, 0);
				AttachDynamicObjectToVehicle(objects[i], carplay[i], Float:tarolo4[0], Float:tarolo4[1], Float:tarolo4[2], Float:tarolo4[3], Float:tarolo4[4], Float:tarolo4[5]);
			}
			if(tarolo[4] != 0)
			{
				objects2[i] = CreateDynamicObject(tarolo[4], 0, 0, -50, 0, 0, 0);
				AttachDynamicObjectToVehicle(objects2[i], carplay[i], tarolo5[0], tarolo5[1], tarolo5[2], tarolo5[3], tarolo5[4], tarolo5[5]);
			}
			ChangeVehiclePaintjob(carplay[i], tarolo[5]);
			SetVehicleNumberPlate(carplay[i], tarolo3);
			#if defined FUEL_SYSTEM
			fuelvalue[carplay[i]] = fuelt;
			#endif
		}
		mysql_free_result();
	}
	mysql_query("SELECT * FROM clancars");
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    while(mysql_fetch_row(linen))
	    {
		    new i, vehid, Float:vpos[4], color[2], vw, tuning[5];
			sscanf(linen, "p<|>d{s[30]}dffffdddddddd", i, vehid, vpos[0], vpos[1], vpos[2], vpos[3], color[0], color[1], vw, tuning[0], tuning[1], tuning[2], tuning[3], tuning[4]);
			clancars[i] = CreateVehicle(vehid, vpos[0], vpos[1], vpos[2], vpos[3], color[0], color[1], -1);
			SetVehicleVirtualWorld(clancars[i], vw);
			AddVehicleComponent(clancars[i], tuning[0]);
			AddVehicleComponent(clancars[i], tuning[1]);
			AddVehicleComponent(clancars[i], tuning[2]);
			AddVehicleComponent(clancars[i], tuning[3]);
			AddVehicleComponent(clancars[i], tuning[4]);
		}
		mysql_free_result();
	}
    
//--------------------------------------3DTextek--------------------------------//
	Create3DTextLabel("9mm\n90Ammo/300$", COLOR_GREEN, -2619.8362,196.2584,0.1078, 10, 0, 1);
	Create3DTextLabel("9mm Hangtompítós\n90Ammo/500$", COLOR_GREEN, -2619.8362,193.9020,0.1078, 10, 0, 1);
	Create3DTextLabel("Desert Eagle\n70Ammo/1500$", COLOR_GREEN, -2619.8359,191.2234,0.1078, 10, 0, 1);
	Create3DTextLabel("Pump Shotgun\n30Ammo/700$", COLOR_GREEN, -2624.0491,190.5348,0.1078, 10, 0, 1);
	Create3DTextLabel("Sawnoff Shotgun\n40Ammo/400$", COLOR_GREEN, -2626.9180,190.5383,0.1078, 10, 0, 1);
	Create3DTextLabel("Combat Shotgun\n70Ammo/2000$", COLOR_GREEN, -2629.4370,190.5444,0.1078, 10, 0, 1);
	Create3DTextLabel("Micro SMG\n100Ammo/200$", COLOR_GREEN, -2632.4585,190.5370,0.1078, 10, 0, 1);
	Create3DTextLabel("Tec\n100Ammo/150$", COLOR_GREEN, -2633.7639,192.2296,0.1078, 10, 0, 1);
	Create3DTextLabel("SMG\n90Ammo/100$", COLOR_GREEN, -2633.7642,195.1601,0.1078, 10, 0, 1);
	Create3DTextLabel("Armour\n200$", COLOR_GREEN, -2631.6733,197.5399,0.1078, 10, 0, 1);
	Create3DTextLabel("M4\n100Ammo/1000$", COLOR_GREEN, -2630.6252,197.7593,0.1078, 10, 0, 1);
	Create3DTextLabel("AK-47\n90Ammo/900$", COLOR_GREEN, -2628.4482,197.7493,0.1078, 10, 0, 1);

	Create3DTextLabel("Paintball bejárat\nHasználat: Y", COLOR_GREEN, -2022.5594,-864.8543,31.8879, 10, 0, 1);
	Create3DTextLabel("Paintball kijárat\nHasználat: Y", COLOR_GREEN, -2022.5037,-866.2480,31.6087, 10, 0, 1);
	Create3DTextLabel("Paintball bejárat\nHasználat: Y", COLOR_GREEN, -2022.5818,-945.7154,31.6087, 10, 0, 1);
	Create3DTextLabel("Paintball kijárat\nHasználat: Y", COLOR_GREEN, -2022.5911,-944.3606,31.6087, 10, 0, 1);

	Create3DTextLabel("bolt rablása: /rabol", COLOR_YELLOW, 509.4155,-71.9277,998.7578, 10, 0, 1);
	Create3DTextLabel("bolt rablása: /rabol", COLOR_YELLOW, 767.6898,-36.6481,1000.6865, 10, 0, 1);
	Create3DTextLabel("bolt rablása: /rabol", COLOR_YELLOW, 372.5804,-65.4323,1001.5078, 10, 0, 1);
	Create3DTextLabel("bolt rablása: /rabol", COLOR_YELLOW, -2232.0461,129.2900,1035.4141, 10, 0, 1);
	Create3DTextLabel("bolt rablása: /rabol", COLOR_YELLOW, -201.4025,-7.3274,1002.2734, 10, 0, 1);
	Create3DTextLabel("bolt rablása: /rabol", COLOR_YELLOW, 420.5546,-81.4736,1001.8047, 10, 0, 1);
	Create3DTextLabel("bolt rablása: /rabol", COLOR_YELLOW, 371.3192,-7.3398,1001.8589, 10, 0, 1);
	Create3DTextLabel("bolt rablása: /rabol", COLOR_YELLOW, 502.3051,-14.0034,1000.6797, 10, 0, 1);
	Create3DTextLabel("bolt rablása: /rabol", COLOR_YELLOW, 203.9833,-43.8138,1001.8047, 10, 0, 1);
	Create3DTextLabel("bolt rablása: /rabol", COLOR_YELLOW, 207.7380,-101.4601,1005.2578, 10, 0, 1);
	Create3DTextLabel("bolt rablása: /rabol", COLOR_YELLOW, 161.8955,-84.7291,1001.8047, 10, 0, 1);
	Create3DTextLabel("bolt rablása: /rabol", COLOR_YELLOW, 207.3801,-10.2720,1001.2109, 10, 0, 1);
	Create3DTextLabel("bolt rablása: /rabol", COLOR_YELLOW, 376.7180,-119.5506,1001.4995, 10, 0, 1);
	Create3DTextLabel("bolt rablása: /rabol", COLOR_YELLOW, 379.3516,-182.2067,1000.6328, 10, 0, 1);
	Create3DTextLabel("bolt rablása: /rabol", COLOR_YELLOW, -779.5485,500.8824,1371.7422, 10, 0, 1);
	//--------------------------------Skinek------------------------------------//
	AddPlayerClass(77, -2112.2219,128.0912,35.2246,82.3141, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(78,  -2112.2219,128.0912,35.2246,82.3141, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(79, -2112.2219,128.0912,35.2246,82.3141, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(137, -2112.2219,128.0912,35.2246,82.3141, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(212, -2112.2219,128.0912,35.2246,82.3141, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(230, -2112.2219,128.0912,35.2246,82.3141, 0, 0, 0, 0, 0, 0);
	//AddPlayerClass(187, -2028.2233,-61.1729,35.3203, 180.0, 0, 0, 0, 0, 0, 0);
	//AddPlayerClass(19,  -2028.2233,-61.1729,35.3203, 180.0, 0, 0, 0, 0, 0, 0);
	//AddPlayerClass(185, -2028.2233,-61.1729,35.3203, 180.0, 0, 0, 0, 0, 0, 0);
	//ház interiorok
	for(new i; i < MAX_HOUSES; i++)
	{
		CreateDynamicObject(14700, -1285.60, -109.44, 15.56,   0.00, 0.00, 0.00, i, 1);
		CreateDynamicObject(14701, -1254.79, -119.75, 15.56,   0.00, 0.00, 0.00, i, 1);
		CreateDynamicObject(14706, -1322.30, -106.14, 16.59,   0.00, 0.00, 0.00, i, 1);
		CreateDynamicObject(14707, -1304.65, -34.72, 17.86,   0.00, 0.00, 0.00, i, 1);
		CreateDynamicObject(14703, -1335.44, -70.20, 17.92,   0.00, 0.00, 0.00, i, 1);
		CreateDynamicObject(14708, -1268.71, -81.29, 15.35,   0.00, 0.00, 0.00, i, 1);
		CreateDynamicObject(14709, -1322.91, -139.98, 15.16,   0.00, 0.00, 0.00, i, 1);
		CreateDynamicObject(14710, -1355.12, -99.51, 14.90,   0.00, 0.00, 0.00, i, 1);
		CreateDynamicObject(14711, -1303.44, -77.96, 15.24,   0.00, 0.00, 0.00, i, 1);
		CreateDynamicObject(14712, -1342.64, -35.39, 14.94,   0.00, 0.00, 0.00, i, 1);
		CreateDynamicObject(14713, -1292.42, -141.27, 15.37,   0.00, 0.00, 0.00, i, 1);
		CreateDynamicObject(14714, -1368.56, -64.11, 15.22,   0.00, 0.00, 0.00, i, 1);
		CreateDynamicObject(14718, -1352.12, -125.07, 13.28,   0.00, 0.00, 0.00, i, 1);
		CreateDynamicObject(1536, -1333.52, -83.58, 13.62,   0.00, 0.00, 0.00, i, 1);
		CreateDynamicObject(1536, -1294.00, -71.23, 13.61,   0.00, 0.00, 90.00, i, 1);
		CreateDynamicObject(1536, -1286.37, -113.51, 14.06,   0.00, 0.00, 0.00, i, 1);
		CreateDynamicObject(1536, -1255.89, -130.03, 13.49,   0.00, 0.00, 0.00, i, 1);
		CreateDynamicObject(1536, -1288.03, -146.24, 13.57,   0.00, 0.00, 0.00, i, 1);
		CreateDynamicObject(1536, -1349.88, -129.95, 13.29,   0.00, 0.00, 0.00, i, 1);
		CreateDynamicObject(1536, -1345.56, -103.46, 13.39,   0.00, 0.00, 90.00, i, 1);
		CreateDynamicObject(1536, -1369.34, -72.15, 13.41,   0.00, 0.00, 0.00, i, 1);
		CreateDynamicObject(1536, -1340.44, -42.91, 13.37,   0.00, 0.00, 0.00, i, 1);
	}
	//----------------------------------Jármûvek--------------------------------//
	//gokartok
	AddStaticVehicleEx(571,-2027.9303,-745.5801,31.4550,180.8189,91,2, -1); // kart1
	AddStaticVehicleEx(571,-2023.3092,-745.7663,31.4556,178.2062,91,2, -1); // kart2
	AddStaticVehicleEx(571,-2020.5917,-745.7166,31.4559,178.9792,91,2, -1); // kart3
	AddStaticVehicleEx(571,-2016.4285,-745.6441,31.4478,180.6962,91,2, -1); // kart4
	AddStaticVehicleEx(571,-2013.1785,-745.7260,31.4479,178.2480,91,2, -1); // kart5
	AddStaticVehicleEx(571,-2010.0137,-745.6402,31.4479,178.6285,91,2, -1); // kart6
	AddStaticVehicleEx(571,-2006.4104,-745.6040,31.4561,182.1368,91,2, -1); // kart7
	//Kikötõhöz járó jármûvek(hajók, repülõ)
	AddStaticVehicleEx(446, -3006.8030, 406.2481, -0.0278, 180.0000, -1, -1, -1);
	AddStaticVehicleEx(452, -3007.0532, 383.2183, -0.0307, 180.0000, -1, -1, -1);
	AddStaticVehicleEx(460, -2995.6973, 422.8238, 2.0000, 90.0000, -1, -1, -1);
	AddStaticVehicleEx(473, -3031.9836, 409.2073, -0.0282, 180.0000, -1, -1, -1);
	AddStaticVehicleEx(484, -3030.8069, 390.7863, -0.0137, 180.0000, -1, -1, -1);
	AddStaticVehicleEx(453, -2993.9153, 382.5141, -0.0233, 180.0000, -1, -1, -1);
	AddStaticVehicleEx(454, -2980.8083, 406.2142, -0.0206, 180.0000, -1, -1, -1);
	AddStaticVehicleEx(493, -3044.3137, 389.1596, -0.0199, 180.0000, -1, -1, -1);
	AddStaticVehicleEx(473, -2992.5093, 407.8801, -0.0282, 180.0000, -1, -1, -1);
	AddStaticVehicleEx(493, -3020.0706, 407.4223, -0.0199, 180.0000, -1, -1, -1);
	AddStaticVehicleEx(472, -2982.6875, 381.6804, -0.0135, 180.0000, -1, -1, -1);
	//AddStaticVehicleEx(411,-2662.7146,989.4730,64.6562,49.3989,123,1, -1);
	AddStaticVehicleEx(538,-1947.8145,137.4988,25.7109,357.2525,1,1, -1);
	busz1 = AddStaticVehicleEx(437,-2056.1201,-249.1094,35.4554,357.4019,87,7, -1); //
	busz2 = AddStaticVehicleEx(437,-2060.6550,-248.8148,35.4536,359.7462,87,7, -1); //
	busz3 = AddStaticVehicleEx(437,-2050.8193,-249.7277,35.4553,358.0638,87,7, -1); //
	AddStaticVehicleEx(449,-2264.6880,527.1956,35.5908,180.4091,7,7, -1);
	AddStaticVehicleEx(416,-2629.6489,612.7410,14.6043,358.6617,1,3, -1); //
	AddStaticVehicleEx(416,-2635.1382,612.7314,14.6024,359.6874,1,3, -1); //
	AddStaticVehicleEx(416,-2641.2817,612.4699,14.6025,1.4069,1,3, -1); //
	AddStaticVehicleEx(416,-2646.1931,612.6993,14.6025,0.1989,1,3, -1); //
	AddStaticVehicleEx(416,-2662.0247,617.9917,14.6028,91.0262,1,3, -1); //
	AddStaticVehicleEx(428,-2429.8997,514.5834,30.0530,215.8342,4,75, -1); //
	AddStaticVehicleEx(428,-2425.9246,518.4001,30.0530,225.2628,4,75, -1); //
	AddStaticVehicleEx(428,-2422.5361,521.7764,30.0529,226.6932,4,75, -1); //
	AddStaticVehicleEx(428,-2419.1392,525.7558,30.0969,233.8277,4,75, -1); //
	AddStaticVehicleEx(413,-1823.8075,-153.0786,9.4861,177.5663,91,1, -1); //
	AddStaticVehicleEx(440,-1819.6575,-152.6703,9.5105,176.2550,110,110, -1); //
	AddStaticVehicleEx(459,-1828.9000,-169.8118,9.3094,182.5026,28,28, -1); //
	AddStaticVehicleEx(403,-2150.8911,-158.5152,35.9270,272.0446,28,1, -1); //
	AddStaticVehicleEx(514,-2151.8101,-163.2870,35.9073,268.1633,25,1, -1); //
	AddStaticVehicleEx(515,-2151.5884,-168.7358,36.3374,267.5438,24,77, -1); //
	AddStaticVehicleEx(435,-2131.9702,-118.1068,35.3203,180.1625,24,77, -1); //
	AddStaticVehicleEx(450,-2126.4941,-118.6124,35.3203,177.0291,24,77, -1); //
	AddStaticVehicleEx(584,-2121.9385,-119.2758,35.3203,177.0291,24,77, -1); //
	//AddStaticVehicleEx(470,-1527.2183,435.2845,7.1805,358.9641,43,0, -1); //katona
	//AddStaticVehicleEx(470,-1533.3491,435.2923,7.1810,358.0016,43,0, -1); //katona
	//AddStaticVehicleEx(470,-1539.5629,435.4583,7.1830,359.7021,43,0, -1); //katona
	//AddStaticVehicleEx(433,-1530.1775,426.6786,7.6261,90.9730,43,0, -1); //katona
	//AddStaticVehicleEx(433,-1530.0785,418.4625,7.6243,92.3179,43,0, -1); //katona
	//AddStaticVehicleEx(433,-1530.1818,409.7531,7.6243,92.7504,43,0, -1); //katona
	//AddStaticVehicleEx(443,-1334.0057,480.1814,7.8155,269.7881,20,1, -1); //
	//AddStaticVehicleEx(548,-1587.4136,392.5356,8.8408,356.2652,1,1, -1); //katonai helikopter
	//AddStaticVehicleEx(431,-1526.7739,455.1451,7.2820,0.0401,66,66, -1); //katonai busz(?)
	
	katonav[0] = AddStaticVehicleEx(487,-1415.4895,517.4954,18.4193,271.2621,0,0,-1); // Katona_Maverick
 	katonav[1] = AddStaticVehicleEx(470,-1362.8976,478.9684,7.1777,179.9237,43,0,-1); // Patriot_1
 	katonav[2] = AddStaticVehicleEx(470,-1359.0448,479.0847,7.1841,179.6469,43,0,-1); // Patriot_2
 	katonav[3] = AddStaticVehicleEx(470,-1355.0449,479.0361,7.1815,180.2258,43,0,-1); // Patriot_3
 	katonav[4] = AddStaticVehicleEx(548,-1453.8846,501.6555,19.8876,269.2950,1,1,-1); // Kat_Heli
 	katonav[5] = AddStaticVehicleEx(447,-1334.5258, 507.6092, 18.3433,270.0000,1,1,-1); //Katona_Seasparrow_1
 	katonav[6] = AddStaticVehicleEx(447,-1364.5258, 507.6092, 18.3433,270.0000,1,1,-1); //Katona_Seasparrow_2

	AddStaticVehicleEx(506,-2093.7439,-84.2335,34.8684,0.4337,6,6, -1); //
	AddStaticVehicleEx(426,-2024.6282,-75.2601,34.9864,270.9292,53,53, -1); //
	AddStaticVehicleEx(407,-2021.5917,93.6473,28.2858,271.6411,3,1, -1); //
	AddStaticVehicleEx(544,-2019.2841,83.6679,28.0976,272.2792,3,1, -1); //
	AddStaticVehicleEx(455,-2099.3389,-54.9537,35.7564,179.3676,84,58, -1); //
	AddStaticVehicleEx(486,-2101.7307,146.8877,35.3495,290.4396,1,1, -1); //
	AddStaticVehicleEx(422,-2132.3372,294.7512,34.7522,266.8409,67,59, -1); //
	AddStaticVehicleEx(543,-2129.8342,252.4960,35.2053,268.9734,32,8, -1); //
	AddStaticVehicleEx(486,-2094.5740,244.9512,35.9683,203.9616,1,1, -1); //
	AddStaticVehicleEx(605,-2107.4214,124.4539,35.0894,242.5257,32,8, -1); //
	AddStaticVehicleEx(527,-2033.1914,170.0932,28.5513,273.5648,53,1, -1); //
	AddStaticVehicleEx(529,-2034.4255,178.5920,28.4736,270.6864,7,7, -1); //
	AddStaticVehicleEx(462,-1981.6276,127.7507,27.2777,8.2187,13,13, -1); //
	AddStaticVehicleEx(400,-1830.7408,-25.1786,15.2096,272.5481,123,1, -1); //
	//AddStaticVehicleEx(500,-2733.9036,871.3859,67.9155,90.5537,25,119, -1); //
	//AddStaticVehicleEx(533,-2665.1396,911.2532,79.3760,179.8924,75,1, -1); //
	//AddStaticVehicleEx(405,-2651.0508,855.5686,63.8846,312.0078,24,1, -1); //
	//AddStaticVehicleEx(579,-2680.0547,869.4496,76.5412,6.5649,53,53, -1); //
	AddStaticVehicleEx(470,-2673.3455,784.9565,49.9798,0.6778,43,0, -1); //
	AddStaticVehicleEx(522,-2709.7893,871.4847,70.2740,92.9088,7,79, -1); //
	//AddStaticVehicleEx(451,-2637.6763,932.1611,71.5555,247.7028,36,36, -1); //
	AddStaticVehicleEx(566,-2847.4077,952.4170,43.8353,295.3315,95,1, -1); //
	AddStaticVehicleEx(516,-2896.1917,1069.7410,31.7048,272.8435,119,1, -1); //
	AddStaticVehicleEx(517,-2898.1165,1161.6704,13.2375,271.1879,36,36, -1); //
	AddStaticVehicleEx(492,-2862.2458,686.8758,23.1366,293.1747,24,55, -1); //
	AddStaticVehicleEx(554,-2645.6216,1332.7878,7.2710,269.3485,15,32, -1); //
	AddStaticVehicleEx(576,-2644.5208,1339.5844,6.7719,270.4760,68,96, -1); //
	AddStaticVehicleEx(600,-2645.6018,1345.1350,6.8854,271.9919,32,8, -1); //
	AddStaticVehicleEx(575,-2643.5713,1378.6793,6.7602,267.7032,19,96, -1); //
	AddStaticVehicleEx(575,-2618.2417,1376.9259,6.7349,179.9975,25,96, -1); //
	AddStaticVehicleEx(575,-2643.9829,1372.5956,6.7616,266.2053,31,64, -1); //
	AddStaticVehicleEx(587,-2472.9087,1247.6461,33.1145,273.2741,53,1, -1); //
	AddStaticVehicleEx(585,-2521.3413,1228.4640,37.0150,32.4669,53,53, -1); //
	AddStaticVehicleEx(402,-2512.1360,1205.3165,37.2534,267.5231,13,13, -1); //
	AddStaticVehicleEx(581,-2548.6536,1215.2993,37.0142,359.3023,66,1, -1); //
	AddStaticVehicleEx(526,-2429.7317,1133.0349,55.4932,173.7111,0,7, -1); //
	AddStaticVehicleEx(442,-2572.3433,1146.5579,55.5581,159.0707,0,0, -1); //
	AddStaticVehicleEx(556,-1776.3656,1204.9250,25.5000,181.1676,0,7, -1); //
	AddStaticVehicleEx(493,-2942.4302,496.4869,0.2931,356.7454,36,13, -1); //
	AddStaticVehicleEx(496,-1746.4286,158.7941,3.2708,178.6582,10,111, -1); //
	AddStaticVehicleEx(404,-1862.4001,-218.1952,18.1093,270.6924,123,92, -1); //
	AddStaticVehicleEx(550,-2269.2031,-221.2560,35.8352,1.3247,19,46, -1); //
	AddStaticVehicleEx(429,-2273.7246,-131.3031,35.0000,267.2176,79,127, -1); //
	AddStaticVehicleEx(586,-2322.2527,-123.3506,34.8327,183.4886,107,72, -1); //
	AddStaticVehicleEx(526,-2434.7620,-163.6067,35.1220,267.6738,0,7, -1); //
	AddStaticVehicleEx(439,-2615.5332,-131.4886,4.2313,271.3821,67,8, -1); //
	AddStaticVehicleEx(487,-1187.0765,26.8995,14.3250,227.7537,46,14, -1); //
	AddStaticVehicleEx(487,-1225.4872,-10.8506,14.3256,231.4571,116,8, -1); //
	AddStaticVehicleEx(592,-1666.6538,-177.7716,15.3423,316.0466,1,1, -1); //
	AddStaticVehicleEx(522,-1657.8947,1211.0969,6.7871,263.1163,90,74, -1); //
	AddStaticVehicleEx(522,-1654.8121,1209.5219,13.2368,271.5764,15,3, -1); //
	AddStaticVehicleEx(522,-1658.1277,1213.4147,13.2424,308.6742,15,3, -1); //
	AddStaticVehicleEx(562,-2601.4338,447.1422,14.1849,180.3914,90,90, -1); //
	AddStaticVehicleEx(522,-2502.2317,410.2141,27.3479,146.8540,39,106, -1); //
	AddStaticVehicleEx(491,-2493.5991,427.4270,27.5360,318.0581,71,72, -1); //
	//AddStaticVehicleEx(566,-2480.1702,393.2431,27.5563,322.6655,83,1, -1); //
	AddStaticVehicleEx(461,-2568.1487,327.0273,10.1531,130.1517,37,1, -1); //
	AddStaticVehicleEx(507,-2586.0447,315.1171,4.6776,269.4917,42,42, -1); //
	AddStaticVehicleEx(516,-2678.3569,267.8882,4.1670,359.4275,122,1, -1); //
	AddStaticVehicleEx(533,-2569.0884,192.9646,6.2256,204.6431,75,1, -1); //
	AddStaticVehicleEx(477,-2218.5522,294.0696,34.8725,179.1133,94,1, -1); //
	AddStaticVehicleEx(478,-2180.3586,305.7605,35.1100,179.1349,59,1, -1); //
	AddStaticVehicleEx(478,-2079.5574,385.3551,35.1620,91.2965,59,1, -1); //
	AddStaticVehicleEx(411,-1950.4104,585.9810,34.8392,179.7424,116,1, -1); //
	AddStaticVehicleEx(506,-1616.8214,723.9468,13.6465,270.8226,7,7, -1); //
	AddStaticVehicleEx(428,-1612.0164,859.6077,7.7353,85.9038,4,75, -1); //
	AddStaticVehicleEx(428,-1576.3711,859.9102,7.3639,268.6569,4,75, -1); //
	AddStaticVehicleEx(545,-1829.3823,1288.8339,31.6698,202.0455,44,96, -1); //
	AddStaticVehicleEx(521,-1805.7594,1294.8303,31.4279,354.3080,87,118, -1); //
	AddStaticVehicleEx(489,-1802.2616,1312.3932,41.2913,359.4345,14,123, -1); //
	AddStaticVehicleEx(522,-1797.8655,1294.1893,59.2688,177.7186,3,3, -1); //
	AddStaticVehicleEx(593,-1368.4778,-488.8868,14.6353,207.0541,58,8, -1); //
	AddStaticVehicleEx(593,-1445.9982,-514.8869,14.6347,205.2626,60,1, -1); //
	AddStaticVehicleEx(511,-1316.2188,-451.5790,15.5200,259.1373,4,90, -1); //
	AddStaticVehicleEx(511,-1332.9645,-618.5117,15.5213,355.7739,8,66, -1); //
	AddStaticVehicleEx(553,-1347.1505,-262.9307,15.5043,305.5349,61,74, -1); //
	AddStaticVehicleEx(519,-1253.9626,-101.2692,15.0664,131.7672,1,1, -1); //
	AddStaticVehicleEx(519,-1211.9574,-145.0442,15.0672,122.3853,1,1, -1); //
	AddStaticVehicleEx(476,-1380.7052,-622.0544,14.8600,324.5881,7,6, -1); //
	AddStaticVehicleEx(476,-1413.9122,-620.7112,14.8760,40.7672,1,6, -1); //
	AddStaticVehicleEx(476,-1398.8867,-620.4373,14.8543,4.3228,89,91, -1); //
	AddStaticVehicleEx(513,-1261.8649,-621.6712,14.7161,5.0017,21,34, -1); //
	AddStaticVehicleEx(513,-1284.5995,-624.2089,14.7003,2.7768,54,34, -1); //
	AddStaticVehicleEx(487,-1515.3350,-545.9844,14.2789,240.9710,54,29, -1); //
	AddStaticVehicleEx(487,-1499.2043,-532.9960,14.2978,182.6900,3,29, -1); //
	AddStaticVehicleEx(417,-1580.1151,-571.5956,14.6563,218.3419,0,0, -1); //
	AddStaticVehicleEx(563,-1613.0144,-586.4764,14.8422,207.0812,1,6, -1); //
	AddStaticVehicleEx(447,-1633.0776,-598.7565,14.1757,230.1460,75,2, -1); //
	AddStaticVehicleEx(447,-1276.0579,23.5427,14.1616,42.0721,75,2, -1); //
	AddStaticVehicleEx(469,-1236.5598,42.6477,14.1519,240.4435,1,3, -1); //
	AddStaticVehicleEx(577,-1709.4410,-358.4373,14.0849,91.1613,8,10, -1); //
	AddStaticVehicleEx(476,-1618.7390,-505.1994,23.3571,135.9727,119,117, -1); //
	AddStaticVehicleEx(451,-2247.4377,688.1497,49.0729,2.3558,16,16, -1);

    AddStaticVehicleEx(566,2474.4106,-1702.2689,13.3051,356.4977,86,8, -1); //
    AddStaticVehicleEx(517,2462.7881,-1710.5332,13.3716,269.3362,86,0, -1); //
    AddStaticVehicleEx(566,2468.3987,-1717.9252,13.2065,298.0977,86,4, -1); //

	AddStaticVehicleEx(409,-2757.5125,353.6022,4.1828,359.7132,0,0, -1); //
	AddStaticVehicleEx(409,-2757.4302,369.9496,4.1513,359.7128,0,0, -1); //
	AddStaticVehicleEx(409,-2757.3665,382.5861,4.1361,359.7164,0,0, -1); //
	AddStaticVehicleEx(409,-2757.3042,395.1580,4.1359,359.7169,0,0, -1); //
	AddStaticVehicleEx(560,-2151.7412,627.1489,52.0209,1.3377,0,1, -1); //
	AddStaticVehicleEx(560,-2151.5063,638.7587,52.0204,358.1728,0,1, -1); //
	AddStaticVehicleEx(560,-2158.0820,650.9752,52.0726,270.3162,0,1, -1); //
	AddStaticVehicleEx(560,-2158.2859,655.4354,52.0740,270.8121,0,1, -1); //
	AddStaticVehicleEx(560,-2126.5962,650.4664,52.0724,89.9880,0,1, -1); //
	AddStaticVehicleEx(560,-2126.4907,656.1806,52.0724,90.5546,0,1, -1); //
	AddStaticVehicleEx(560,-2190.0383,645.6614,49.1428,268.0722,0,1, -1); //
	AddStaticVehicleEx(551,-2544.5115,305.0438,18.6242,176.2351,72,1, -1); //
	AddStaticVehicleEx(551,-2544.5828,327.6921,19.4777,179.9925,72,1, -1); //
	AddStaticVehicleEx(551,-2586.0059,332.1822,4.6523,270.1297,72,1, -1); //
	AddStaticVehicleEx(551,-2585.5020,328.6454,4.6525,270.4822,72,1, -1); //
	AddStaticVehicleEx(536,-2156.3149,-197.2967,35.0578,179.1007,12,1, -1); //
	AddStaticVehicleEx(536,-2179.3767,-201.8935,35.0595,270.0820,12,1, -1); //
	AddStaticVehicleEx(536,-2163.2744,-220.9569,35.0610,269.8261,12,1, -1); //
	AddStaticVehicleEx(536,-2136.4651,-228.3835,35.0577,1.4217,12,1, -1); //
	AddStaticVehicleEx(475,-2175.6660,-211.1046,35.1208,2.1000,9,39, -1); //
	AddStaticVehicleEx(475,-2184.5208,-209.4180,36.3171,274.2627,33,0, -1); //
	AddStaticVehicleEx(405,-1641.1051,1420.7179,7.0625,173.7474,24,1, -1); //
	AddStaticVehicleEx(405,-1635.6499,1419.2581,7.0625,180.9513,24,1, -1); //
	AddStaticVehicleEx(405,-1650.6653,1353.4459,7.0571,135.7326,24,1, -1); //
	AddStaticVehicleEx(405,-1685.3669,1332.9353,7.0547,43.8038,24,1, -1); //
	AddStaticVehicleEx(405,-1720.5240,1347.7010,7.0647,62.8285,24,1, -1); //
	AddStaticVehicleEx(405,-1686.3167,1404.7964,7.0537,314.7394,24,1, -1); //

    AddStaticVehicleEx(468,-2313.5076,-1690.5059,481.3485,115.1627,3,3, -1); // sanchez
	AddStaticVehicleEx(468,-2314.1624,-1689.0563,481.4475,128.6725,6,6, -1); // sanchez
	AddStaticVehicleEx(468,-2315.3262,-1688.2673,481.5149,137.8974,46,46, -1); // sanchez
	AddStaticVehicleEx(468,-2316.2002,-1687.3650,481.5838,135.7791,53,53, -1); // sanchez
	AddStaticVehicleEx(468,-2316.9905,-1686.5431,481.6433,134.6600,3,3, -1); // sanchez
	AddStaticVehicleEx(468,-2317.7544,-1685.8469,481.6974,136.3775,6,6, -1); // sanchez
	AddStaticVehicleEx(468,-2318.8149,-1684.3741,481.8008,141.7452,46,46, -1); // sanchez
	AddStaticVehicleEx(468,-2319.6873,-1683.4968,481.8672,146.0148,53,53, -1); // sanchez
	AddStaticVehicleEx(470,-2372.5195,-2185.9192,33.4383,207.1591,43,0, -1); // patriot
	AddStaticVehicleEx(470,-2376.5574,-2188.2185,33.3555,207.0364,43,0, -1); // patriot
	AddStaticVehicleEx(470,-2380.8345,-2190.1726,33.2862,206.0083,43,0, -1); // patriot
	AddStaticVehicleEx(470,-2387.4016,-2190.2527,33.2796,203.6239,43,0, -1); // patriot
	AddStaticVehicleEx(470,-2391.8638,-2190.5864,33.2793,199.8863,43,0, -1); // patriot
	AddStaticVehicleEx(470,-2404.2603,-2179.2205,33.2807,87.1901,43,0, -1); // patriot
	AddStaticVehicleEx(489,-2809.6938,-1534.9498,139.4328,91.2698,84,110, -1); // rancher chatka
	AddStaticVehicleEx(579,-2814.5308,-1512.0387,139.2123,92.5898,62,62, -1); // hubtley chatka
	AddStaticVehicleEx(468,-2803.8425,-1516.2441,138.9556,163.5958,6,6, -1); // sanchez
	AddStaticVehicleEx(471,-2823.2771,-1522.8894,138.7716,5.1963,74,91, -1); // quad
	AddStaticVehicleEx(521,-2597.8694,454.8554,14.1805,0.4404,75,13, -1); // fcr
	AddStaticVehicleEx(522,-2361.7869,578.0761,24.4568,353.8763,51,118, -1); // nrg
	AddStaticVehicleEx(411,-2424.0698,317.6606,34.6958,153.6277,123,1, -1); // infernus
	AddStaticVehicleEx(551,-2419.5527,326.4508,34.7691,154.0872,67,1, -1); // merit
	AddStaticVehicleEx(415,-2414.2283,336.1261,34.7412,150.7559,75,1, -1); // cheetah
	AddStaticVehicleEx(522,-2469.2439,143.8468,34.7175,185.4172,3,3, -1); // nrg
	AddStaticVehicleEx(480,-2460.8362,149.4373,34.7334,182.1827,4,4, -1); // comet
	AddStaticVehicleEx(451,-2461.0513,156.9861,34.6652,181.0608,36,36, -1); // turismo
	AddStaticVehicleEx(580,-2456.0051,137.8714,34.7594,224.5812,66,66, -1); // stafford
	AddStaticVehicleEx(482,-2306.6885,-46.5849,35.4393,2.8153,71,71, -1); // burrito
	AddStaticVehicleEx(562,-2265.3340,-148.5380,34.9020,179.9950,113,1, -1); // elegy
	AddStaticVehicleEx(559,-2150.4973,-459.3654,34.9975,135.5499,13,8, -1); // jester
	AddStaticVehicleEx(561,-2153.5439,-456.9533,35.1569,136.9382,37,78, -1); // stratun
	AddStaticVehicleEx(522,-2206.4756,-403.3706,34.9007,49.7470,3,8, -1); // nrg
	AddStaticVehicleEx(541,-2071.7373,968.1530,61.4908,28.3518,68,8, -1); // bullet
	AddStaticVehicleEx(589,-1883.0850,949.7328,34.8300,349.5977,22,22, -1); // club
	AddStaticVehicleEx(560,-2011.7184,853.3373,45.0732,180.7152,37,0, -1); // sultan
	AddStaticVehicleEx(402,-1891.5985,749.7643,45.1998,3.5691,90,90, -1); // buffalo
	AddStaticVehicleEx(603,-1705.8759,758.5151,24.6480,359.0011,32,1, -1); // phoenix
	AddStaticVehicleEx(463,-1590.7446,717.8824,8.9083,240.5939,7,7, -1); // freeway
	AddStaticVehicleEx(533,-1610.4601,723.4459,12.5036,272.4184,77,1, -1); // feltzer
	AddStaticVehicleEx(470,-1536.2255,487.4199,7.1733,177.7889,43,0, -1); // patriot
	AddStaticVehicleEx(470,-1540.9639,487.3197,7.1695,179.6183,43,0, -1); // patriot
	AddStaticVehicleEx(545,-1673.1725,440.2443,6.9907,41.7906,47,1, -1); // hustler
	AddStaticVehicleEx(424,-1669.9718,443.5887,6.9608,48.2922,2,2, -1); // bf injection
	AddStaticVehicleEx(600,-1715.0410,397.3518,6.8922,39.8990,8,90, -1); // picador
	AddStaticVehicleEx(522,-1742.4132,188.3156,3.1137,185.1689,3,8, -1); // nrg
	AddStaticVehicleEx(522,-1693.7407,80.3842,3.0963,345.3554,3,8, -1); // nrg
	AddStaticVehicleEx(579,-1093.0127,-1630.5532,76.2992,53.7919,53,53, -1); // huntley farma
	AddStaticVehicleEx(531,-1070.3954,-1612.7971,76.3388,301.8496,36,2, -1); // tractor
	AddStaticVehicleEx(531,-1105.8801,-1685.4520,76.3397,242.0826,51,53, -1); // tractor
	AddStaticVehicleEx(489,-1110.5366,-1624.3938,76.5173,88.9789,112,120, -1); // rancher
	AddStaticVehicleEx(470,-1111.9915,-1618.7484,76.3626,90.2538,43,0, -1); // patriot
	AddStaticVehicleEx(471,-1101.7765,-1616.2205,75.8493,57.9455,120,114, -1); // quad
	AddStaticVehicleEx(476,325.3508,2540.0251,17.5209,179.8926,7,6, -1); // rustler
	AddStaticVehicleEx(476,291.2292,2541.4775,17.5332,181.7163,1,6, -1); // rustler
	AddStaticVehicleEx(489,400.9998,2535.3098,16.6880,321.0924,120,123, -1); // rancher
	AddStaticVehicleEx(476,365.3216,2538.3203,17.3572,181.7799,89,91, -1); // rustler
	AddStaticVehicleEx(549,-2279.4504,1015.9863,83.5815,90.5447,83,36, -1); // tampa
	AddStaticVehicleEx(565,-2290.7786,799.2661,49.0676,180.0604,62,62, -1); // flash
	AddStaticVehicleEx(555,-2274.6462,647.7779,49.0497,180.1260,2,1, -1); // windsor
	AddStaticVehicleEx(402,-2156.1831,781.4805,69.3813,272.7228,39,39, -1); // buffalo
	AddStaticVehicleEx(542,-2601.3889,736.1639,29.1812,359.8801,32,92, -1); // clover
	AddStaticVehicleEx(558,-2756.5847,775.5863,53.9360,179.7390,30,1, -1); // uranus
	AddStaticVehicleEx(471,-2724.0923,955.5191,53.9432,293.9660,103,111, -1); // quad
	AddStaticVehicleEx(551,-2848.8271,953.4837,43.8562,115.7912,20,1, -1); // merit
	AddStaticVehicleEx(562,-2894.5442,1063.9021,31.6698,89.5115,116,1, -1); // elegy
	AddStaticVehicleEx(405,-2900.4185,1168.0831,13.1571,91.1467,11,1, -1); // sentinel
	AddStaticVehicleEx(493,-2924.5259,1226.0530,-0.8583,79.6404,36,13, -1); // jetmax
	AddStaticVehicleEx(454,-2880.7083,1261.4916,0.1152,36.0964,26,26, -1); // tropic
	AddStaticVehicleEx(522,-2332.0769,-1588.9292,483.2318,122.2123,8,82, -1); // nrg
	AddStaticVehicleEx(522,-2332.6877,-1587.4797,483.2162,123.1623,36,105, -1); // nrg
	AddStaticVehicleEx(522,-2333.1357,-1585.6777,483.1936,110.5288,39,106, -1); // nrg
	AddStaticVehicleEx(522,-2333.6799,-1583.6958,483.1853,102.3571,51,118, -1); // nrg
	AddStaticVehicleEx(504,-2341.8721,-1595.9706,483.4272,70.3151,45,29, -1); // bloodring
	AddStaticVehicleEx(504,-2344.3887,-1600.0614,483.4391,69.8890,34,9, -1); // bloodring
	AddStaticVehicleEx(504,-2347.3052,-1604.3849,483.4367,68.2590,65,9, -1); // bloodring
	AddStaticVehicleEx(559,-1991.8807,247.3945,34.8282,80.2820,68,8, -1); // jester
	AddStaticVehicleEx(558,-1991.0800,251.9599,34.8017,80.8553,117,1, -1); // uranus
	AddStaticVehicleEx(536,-1988.4208,273.8621,34.9133,87.6338,32,1, -1); // blade
	AddStaticVehicleEx(412,-1920.2655,303.0461,40.8846,88.5741,11,1, -1); // voodoo
	AddStaticVehicleEx(589,-2188.7610,293.6430,34.7753,180.4956,23,23, -1); // club
	AddStaticVehicleEx(565,-2162.9924,306.1278,34.7430,359.8007,42,42, -1); // flash
	AddStaticVehicleEx(496,-2226.9329,306.6320,34.8338,1.7734,66,72, -1); // blista
	AddStaticVehicleEx(549,-2265.1709,200.5963,34.8613,270.1519,75,39, -1); // tampa
	AddStaticVehicleEx(561,-2265.7061,137.1694,34.9855,270.1798,54,38, -1); // stratum
	AddStaticVehicleEx(405,-2269.2236,61.6065,35.0390,269.3761,4,1, -1); // sentinel
	AddStaticVehicleEx(439,-2266.1721,97.2363,35.0677,269.2738,54,38, -1); // stallion
	AddStaticVehicleEx(542,-2224.9268,-105.3418,35.0638,94.9249,31,93, -1); // clover
	AddStaticVehicleEx(603,-2161.2856,3.0090,35.0830,359.1470,69,1, -1); // phoenix
	AddStaticVehicleEx(443,-2099.2966,-25.6728,35.9553,359.6257,24,1, -1); // packer
	AddStaticVehicleEx(602,-2487.0212,-174.5239,25.4227,92.7514,69,1, -1); // alpha
	AddStaticVehicleEx(467,-2487.2068,-187.3382,25.3570,96.2462,68,8, -1); // oceanic
	AddStaticVehicleEx(496,-2590.4438,52.0029,4.0519,0.4137,53,56, -1); // blista
	AddStaticVehicleEx(549,-2661.5469,268.0483,4.0332,179.5532,79,39, -1); // tampa
	AddStaticVehicleEx(550,-2688.3528,268.1028,4.1578,181.6963,53,53, -1); // sunrise
	AddStaticVehicleEx(418,-2668.0894,267.8105,4.4291,179.9061,114,114, -1); // moonbeam
	AddStaticVehicleEx(540,-2573.0977,632.1154,14.3221,269.8619,10,10, -1); // vincent
	AddStaticVehicleEx(602,-2543.8269,592.7834,14.2597,271.3831,75,77, -1); // alpha
	AddStaticVehicleEx(551,-2546.1306,657.9969,14.2596,89.8525,101,1, -1); // merit
	AddStaticVehicleEx(554,-2477.8833,741.3684,35.0982,358.3058,65,32, -1); // yosemite
	AddStaticVehicleEx(418,-2451.5068,741.7474,35.1088,359.5799,108,108, -1); // moonbeam
	AddStaticVehicleEx(562,-2416.5908,741.4702,34.6740,359.3000,11,1, -1); // elegy
	AddStaticVehicleEx(481,-2436.8577,754.0707,34.6626,17.1656,6,6, -1); // bmx
	AddStaticVehicleEx(603,-2434.1685,741.8135,34.8538,359.1653,75,77, -1); // phoenix
	//AddStaticVehicleEx(565,-2457.9160,1069.6501,55.4046,177.7637,53,53, -1); // flash
	AddStaticVehicleEx(560,-2480.4727,1068.6029,55.4608,179.5759,33,0, -1); // sultan
	AddStaticVehicleEx(600,-2414.8594,1021.4720,50.1069,177.3559,11,11, -1); // picador
	AddStaticVehicleEx(536,-2424.8293,956.1724,45.0342,94.3538,37,1, -1); // blade
	AddStaticVehicleEx(561,-2083.3970,792.8954,69.3765,180.6236,67,8, -1); // stratum
	AddStaticVehicleEx(402,-2152.0828,970.8085,79.7543,178.9651,30,30, -1); // buffalo
	AddStaticVehicleEx(558,-2225.7053,1186.2435,55.2798,89.2277,24,1, -1); // uranus
	AddStaticVehicleEx(533,-2512.6946,1205.1871,37.1310,88.9930,75,1, -1); // feltzer
	AddStaticVehicleEx(555,-2534.2827,1229.1024,37.1054,32.4221,60,1, -1); // windsor
	AddStaticVehicleEx(579,-2494.8831,1217.3175,37.3529,321.5468,37,37, -1); // huntley
	AddStaticVehicleEx(445,-2379.7390,1341.7853,11.4580,92.9690,43,43, -1); // admiral
	AddStaticVehicleEx(603,-2091.2571,1375.2344,6.9394,90.3399,18,1, -1); // phoenix
	AddStaticVehicleEx(454,-2103.5476,1389.1704,0.2769,179.0390,26,26, -1); // tropic
	AddStaticVehicleEx(493,-2101.7629,1434.0568,-0.0070,181.1476,36,13, -1); // jetmax
	AddStaticVehicleEx(551,-1964.7931,1340.6993,6.9848,90.9031,109,1, -1); // merit
	AddStaticVehicleEx(482,-1871.9746,1416.8265,7.3013,225.3014,64,64, -1); // burrito
	AddStaticVehicleEx(554,-1790.3705,1425.9823,7.2672,359.0716,14,32, -1); // yosemite
	AddStaticVehicleEx(540,-1651.9418,1311.5626,6.8953,312.8812,11,11, -1); // vincent
	AddStaticVehicleEx(559,-1641.3693,1300.8605,6.6861,312.9863,2,1, -1); // jester
	AddStaticVehicleEx(415,-1638.2065,1297.1580,6.8087,310.9196,62,1, -1); // cheetah
	AddStaticVehicleEx(579,-1630.6045,1289.7437,6.9671,314.5822,42,42, -1); // huntley
	AddStaticVehicleEx(580,-1554.1633,1049.6372,6.9837,358.9498,67,67, -1); // stafford
	AddStaticVehicleEx(555,-1628.3512,871.8318,7.9183,3.5388,68,1, -1); // windsor
	AddStaticVehicleEx(481,-1933.0105,555.4269,34.6652,243.5694,3,3, -1); // bmx
	AddStaticVehicleEx(551,-1789.8810,579.8111,34.9658,222.6322,75,1, -1); // merit cierny
	AddStaticVehicleEx(551,-1781.4532,562.7908,34.9647,356.2645,83,1, -1); // merit cierny
	AddStaticVehicleEx(579,-1778.4333,559.3687,35.0923,352.0914,11,11, -1); // huntley cierny
	AddStaticVehicleEx(540,-1741.4453,811.3098,24.7505,179.2630,7,7, -1); // vincent
	AddStaticVehicleEx(559,-1745.3031,811.6306,24.5471,180.2793,60,1, -1); // jester
	AddStaticVehicleEx(560,-1787.7644,812.0565,24.5960,268.3189,17,1, -1); // sultan
	AddStaticVehicleEx(480,-1787.4357,807.4562,24.6635,268.6151,6,6, -1); // comet
	AddStaticVehicleEx(405,-1762.8485,955.0219,24.6171,90.2791,123,1, -1); // sentinel
	AddStaticVehicleEx(579,-1754.7728,955.0800,24.6809,91.0316,15,15, -1); // huntley
	AddStaticVehicleEx(415,-1746.7502,954.8319,24.5148,89.1834,40,1, -1); // cheetah
	AddStaticVehicleEx(541,-1687.3861,1048.9304,17.2106,268.4851,60,1, -1); // bullet
	AddStaticVehicleEx(576,-1736.8115,1012.1531,17.1968,89.7884,75,96, -1); // tornado
	AddStaticVehicleEx(562,-1736.1820,1057.3555,17.2453,90.6559,17,1, -1); // elegy
	AddStaticVehicleEx(533,-2057.6206,1116.2598,52.9981,87.6433,74,1, -1); // feltzer
	AddStaticVehicleEx(500,-2057.7605,1111.0399,53.3863,88.0445,40,84, -1); // mesa

	AddStaticVehicleEx(582,-1817.9843,573.6243,35.2281,358.4504,41,10, -1); //
	AddStaticVehicleEx(582,-1813.4229,573.4145,35.2226,359.1036,112,116, -1); //
	AddStaticVehicleEx(582,-1809.0538,573.4918,35.2233,358.8764,49,11, -1); //
	AddStaticVehicleEx(582,-1804.3865,573.5679,35.2250,0.3160,56,123, -1); //
	AddStaticVehicleEx(582,-1782.7872,587.2060,35.2208,80.7709,41,10, -1); //

	AddStaticVehicleEx(475,-2152.2888,444.9573,34.8904,178.2329,21,1, -1); // sabre
	AddStaticVehicleEx(554,-2080.1240,227.0085,35.5422,36.5855,34,30, -1); // yosemite
	AddStaticVehicleEx(486,-2090.5168,239.8546,35.6059,116.4927,1,1, -1); // dozer
	AddStaticVehicleEx(486,-2090.5046,133.8230,35.3487,232.2263,1,1, -1); // dozer
	AddStaticVehicleEx(600,-2118.6216,150.4623,35.0569,61.5280,67,8, -1); // picado
	AddStaticVehicleEx(573,-1718.9668,11.5377,4.2666,257.3132,115,43, -1); // duneride
	AddStaticVehicleEx(573,-1716.1472,15.4899,4.2544,259.6835,85,6, -1); // duneride
	AddStaticVehicleEx(443,-1539.5844,150.8455,4.1893,314.1507,20,1, -1); // packer
	AddStaticVehicleEx(522,-1645.3911,65.9071,3.1069,125.9537,8,82, -1); // nrg
	AddStaticVehicleEx(468,-1689.6512,-96.0662,3.2417,328.5449,53,53, -1); // sanc&hez
	AddStaticVehicleEx(589,-2553.4187,187.9392,5.5029,355.5887,31,31, -1); // club
	AddStaticVehicleEx(561,-2711.3230,203.1700,4.0644,179.8944,8,17, -1); // stratum
	AddStaticVehicleEx(480,-2653.0361,363.6252,4.1460,268.7263,12,12, -1); // comet
	AddStaticVehicleEx(493,-2953.8022,500.6723,-0.2403,178.2703,36,13, -1); // jetmax
	AddStaticVehicleEx(454,-2981.8672,501.3287,0.4535,179.6868,26,26, -1); // tropic
	AddStaticVehicleEx(454,-2959.9902,207.7853,0.8314,182.1048,26,26, -1); // tropic
	AddStaticVehicleEx(493,-2993.6572,-9.4173,0.3350,171.3481,36,13, -1); // jetmax
	AddStaticVehicleEx(454,-2954.8164,-256.9762,-0.7128,216.7480,26,26, -1); // tropic
	AddStaticVehicleEx(579,-2781.4163,-282.5211,6.9703,359.8904,11,11, -1); // huntley
	AddStaticVehicleEx(480,-2757.5168,-295.0418,6.8160,178.8350,2,2, -1); // comet
	AddStaticVehicleEx(555,-2746.7114,-282.2917,6.7237,359.4485,58,1, -1); // windsor
	AddStaticVehicleEx(445,-2770.9844,-312.8067,6.9141,180.6641,35,35, -1); // admiral
	AddStaticVehicleEx(540,-2726.9075,-282.0252,6.8938,0.9134,53,53, -1); // vincent
	AddStaticVehicleEx(409,-2725.6648,-311.3157,6.8391,313.9727,1,1, -1); // stretch
	AddStaticVehicleEx(457,-2656.0969,-278.9689,7.1285,314.3059,2,1, -1); // caddy
	AddStaticVehicleEx(457,-2652.5618,-282.1224,7.1247,313.3287,63,1, -1); // caddy
	AddStaticVehicleEx(457,-2649.0574,-285.8678,7.1319,314.6625,18,1, -1); // caddy
	AddStaticVehicleEx(457,-2645.3584,-289.3748,7.1279,313.9458,18,1, -1); // caddy
	AddStaticVehicleEx(457,-2659.3584,-290.1035,7.0907,133.6485,32,1, -1); // caddy
	AddStaticVehicleEx(457,-2651.9985,-296.9979,7.0873,130.2245,45,1, -1); // caddy
	AddStaticVehicleEx(457,-2655.8291,-293.2400,7.0922,133.2029,13,1, -1); // caddy
	AddStaticVehicleEx(457,-2662.5283,-286.1400,7.1086,130.6079,13,1, -1); // caddy
	AddStaticVehicleEx(549,-2318.8755,-125.5654,35.0098,0.0046,72,39, -1); // tampa
	AddStaticVehicleEx(560,-2352.1372,-125.6629,35.0181,359.6077,9,39, -1); // sultan
	AddStaticVehicleEx(540,-2341.1882,-124.9599,35.1726,359.8677,62,62, -1); // vincent
	AddStaticVehicleEx(576,-2461.3235,-23.6851,32.4150,89.3029,74,8, -1); // tornado
	AddStaticVehicleEx(415,-2460.8958,-8.4998,27.7107,91.8291,36,1, -1); // cheetah
	AddStaticVehicleEx(482,-2517.2246,-1.7463,25.7328,269.1544,52,52, -1); // burrito
	AddStaticVehicleEx(562,-2531.8142,-23.5894,16.0837,239.0622,35,1, -1); // elegy
	AddStaticVehicleEx(402,-2533.2891,-13.3243,16.2540,244.8124,13,13, -1); // buffalo
	AddStaticVehicleEx(412,-2623.3420,-55.1406,4.1726,179.5717,10,8, -1); // voodoo
	AddStaticVehicleEx(467,-2666.4993,-35.1473,4.0759,359.1442,58,8, -1); // oceanic
	AddStaticVehicleEx(542,-2679.7214,-54.8511,4.0793,179.4813,24,118, -1); // clover
	AddStaticVehicleEx(463,-2683.0869,-21.6824,3.8758,358.6091,84,84, -1); // freeway
	AddStaticVehicleEx(495,-586.0619,-148.8576,78.0879,355.6880,5,6, -1); // sandking predchadzajuci neplati
	AddStaticVehicleEx(495,-581.9771,-149.2910,77.8695,353.4924,123,124, -1); // sandking
	AddStaticVehicleEx(495,-578.2306,-149.7642,77.7767,351.8945,119,122, -1); // sandking
	AddStaticVehicleEx(495,-574.2620,-150.3799,77.6948,353.1541,118,117, -1); // sandking
	AddStaticVehicleEx(495,-569.9040,-150.6273,77.6702,353.7339,116,115, -1); // sandking
	AddStaticVehicleEx(424,-554.2932,-163.5151,78.1426,263.1348,3,2, -1); // bf injection
	AddStaticVehicleEx(424,-559.7655,-167.9401,78.1886,201.5484,3,6, -1); // bf injection
	AddStaticVehicleEx(424,-563.7231,-168.9974,78.1864,210.6596,6,16, -1); // bf injection
	AddStaticVehicleEx(424,-567.8969,-169.6466,78.1850,228.6316,15,30, -1); // bf injection
	AddStaticVehicleEx(424,-554.5526,-153.0647,77.0623,305.7353,24,53, -1); // bf injection

	AddStaticVehicleEx(545,-1766.1432,1177.5975,24.9361,271.1632,44,96, -1); //
	AddStaticVehicleEx(421,-2672.1965,558.1028,14.4128,91.0404,13,1, -1); //


	//rozvoz pizze
   	AddStaticVehicleEx(448,-1713.2594,1367.4851,6.7808,236.1663,3,6, -1); // pizzaboy
	AddStaticVehicleEx(448,-1712.2252,1368.6274,6.7826,226.3705,3,6, -1); // pizzaboy
	AddStaticVehicleEx(448,-1711.2678,1369.9459,6.7866,222.7275,3,6, -1); // pizzaboy
	AddStaticVehicleEx(448,-1710.0127,1371.2015,6.7841,223.5477,3,6, -1); // pizzaboy
	//novinar
	AddStaticVehicleEx(582,-2535.7737,-601.5165,132.6150,0.0659,41,20, -1); // newsvan
	AddStaticVehicleEx(582,-2528.0486,-601.7396,132.6194,0.8894,49,11, -1); // newsvan
	AddStaticVehicleEx(582,-2524.4124,-601.9594,132.6190,359.6250,56,123, -1); // newsvan
	AddStaticVehicleEx(582,-2517.1255,-601.8660,132.6195,359.9563,110,113, -1); // newsvan
	AddStaticVehicleEx(488,-2495.8989,-680.3182,139.4993,184.2857,2,29, -1); // news heli
	AddStaticVehicleEx(488,-2501.2988,-637.1882,135.4492,178.0701,2,26, -1); // news heli
	//letisko
	AddStaticVehicleEx(487,-1187.0878,25.8561,14.3242,222.4336,26,57, -1); // maverick
	AddStaticVehicleEx(487,-1225.3107,-10.2404,14.3220,218.8050,54,29, -1); // maverick
	AddStaticVehicleEx(511,-1243.0566,-29.9658,15.5226,224.9443,4,90, -1); // beagle
	AddStaticVehicleEx(592,-1113.3639,-197.2603,15.3422,303.1027,1,1, -1); // andro
	AddStaticVehicleEx(519,-1341.1422,-269.8368,15.0685,131.3863,1,1, -1); // shamal
	AddStaticVehicleEx(519,-1378.6879,-233.0551,15.0705,134.1723,1,1, -1); // shamal
	AddStaticVehicleEx(511,-1379.2925,-489.8994,15.5476,203.5331,7,68, -1); // beagle
	AddStaticVehicleEx(511,-1355.9941,-479.9481,15.5471,201.5048,8,66, -1); // beagle
	AddStaticVehicleEx(519,-1456.1853,-525.2393,15.0905,206.1435,1,1, -1); // shamal
	AddStaticVehicleEx(519,-1433.4172,-513.3412,15.0908,209.7425,1,1, -1); // shamal
	AddStaticVehicleEx(592,-1244.3256,-576.2858,15.3425,249.6487,1,1, -1); // andro
	AddStaticVehicleEx(487,-1652.9928,-373.8928,14.3331,205.8208,26,3, -1); // maverick
	AddStaticVehicleEx(551,-1645.9150,-376.1258,13.9487,178.0388,91,1, -1); // merit

	//offroad
    	AddStaticVehicleEx(495,-1966.5094,-2435.3848,30.9739,315.9687,119,122, -1); // sandking
	AddStaticVehicleEx(495,-1963.2280,-2438.6089,30.9750,315.6819,118,117, -1); // sandking
	AddStaticVehicleEx(495,-1959.6450,-2442.0662,30.9760,314.6120,116,115, -1); // sandking
	AddStaticVehicleEx(495,-1969.6466,-2431.9717,30.9775,314.4254,114,108, -1); // sandking
	AddStaticVehicleEx(495,-1981.3597,-2434.6353,30.9736,316.2894,101,106, -1); // sandking
	AddStaticVehicleEx(495,-1985.4609,-2430.4563,30.9753,316.1717,88,99, -1); // sandking
	AddStaticVehicleEx(495,-1988.6155,-2427.2402,30.9744,313.8776,5,6, -1); // sandking
	AddStaticVehicleEx(495,-1992.2836,-2423.4265,30.9778,315.1561,123,124, -1); // sandking

	AddStaticVehicleEx(554,-1884.0620,-209.1865,18.4719,89.7858,65,32, -1); // yosemite
	AddStaticVehicleEx(554,-1884.4841,-201.7391,15.9108,270.9978,14,32, -1); // yosemite
	AddStaticVehicleEx(600,-1858.4669,-219.0332,18.0859,270.2128,43,8, -1); // picador
	AddStaticVehicleEx(482,-1869.7537,-183.8671,18.5063,358.1795,52,52, -1); // burrito

	AddStaticVehicleEx(471,-2910.0847,413.0385,3.3647,41.2033,103,111, -1); // quad
	AddStaticVehicleEx(471,-2907.8865,413.9195,3.3332,40.9028,120,114, -1); // quad
	AddStaticVehicleEx(471,-2905.6353,414.5395,3.2941,21.2135,74,91, -1); // quad
	AddStaticVehicleEx(471,-2902.9534,413.1427,3.4806,8.9852,120,112, -1); // quad
	AddStaticVehicleEx(471,-2901.0930,412.1186,3.6633,353.4191,74,83, -1); // quad
	AddStaticVehicleEx(471,-2898.7710,412.3522,3.6766,343.4192,120,113, -1); // quad
	AddStaticVehicleEx(471,-2900.0720,408.5942,4.0545,27.2310,66,71, -1); // quad
	AddStaticVehicleEx(471,-2904.3699,409.8583,3.8642,24.3668,120,117, -1); // quad

	AddStaticVehicleEx(410,-2489.7947,2290.4417,4.6351,268.9720,39,3, -1); // uj kocsik
	AddStaticVehicleEx(421,-2485.2449,2242.3735,4.7264,180.3381,0,0, -1); //
	AddStaticVehicleEx(436,-2464.8147,2225.8389,4.6147,357.8223,51,88, -1); //
	AddStaticVehicleEx(445,-2449.7805,2242.0598,4.6686,359.5489,94,70, -1); //
	AddStaticVehicleEx(447,-2227.4856,2328.6682,7.5694,359.0878,18,12, -1); //
	AddStaticVehicleEx(463,-2251.9414,2296.9731,4.3625,90.2372,116,116, -1); //
	AddStaticVehicleEx(462,-2271.4614,2312.2253,4.4201,269.9882,111,23, -1); //
	AddStaticVehicleEx(422,-2245.8933,2371.3489,4.9826,131.8006,47,78, -1); //
	AddStaticVehicleEx(467,-2543.9141,2359.7466,4.7242,268.9551,110,76, -1); //
	AddStaticVehicleEx(468,-2628.6555,2273.5671,7.9767,266.8478,55,71, -1); //
	AddStaticVehicleEx(466,-2435.7427,2454.8682,13.5288,178.1161,89,40, -1); //
	AddStaticVehicleEx(471,-1596.6541,2694.7825,54.5216,180.2818,107,110, -1); //
	AddStaticVehicleEx(598,-1393.2158,2625.9175,55.7027,91.4621,0,1, -1); //
	AddStaticVehicleEx(600,-1446.7485,2585.3315,55.4863,359.9239,0,0, -1); //
	AddStaticVehicleEx(603,-1526.3671,2571.1331,55.6736,90.6209,6,6, -1); //
	AddStaticVehicleEx(416,-1506.9874,2527.0305,55.8368,1.4623,1,78, -1); //
	AddStaticVehicleEx(416,-1522.4628,2526.9072,55.8612,179.7556,1,78, -1); //
	AddStaticVehicleEx(416,-1528.5719,2526.1443,55.9119,178.9547,1,78, -1); //
	AddStaticVehicleEx(403,-1303.3400,2705.5479,50.6703,185.3381,72,113, -1); //
	AddStaticVehicleEx(403,-1287.9535,2715.7964,50.6678,185.0683,72,113, -1); //
	AddStaticVehicleEx(405,-834.6259,2752.1321,45.7211,162.8644,53,82, -1); //
	AddStaticVehicleEx(415,-784.3564,2767.2256,45.4170,178.3105,63,108, -1); //
	AddStaticVehicleEx(418,-295.7810,2684.6931,62.7473,359.1986,13,11, -1); //
	AddStaticVehicleEx(468,-240.6178,2716.1694,62.3566,181.8105,94,82, -1); //
	AddStaticVehicleEx(439,-223.3444,2770.3447,62.5660,178.2035,73,5, -1); //
	AddStaticVehicleEx(440,-166.1725,2720.3362,62.1356,88.9164,31,68, -1); //

	//AddStaticVehicleEx(587,-2721.4590,977.9216,54.1905,4.7269,44,23, -1); //
    AddStaticVehicleEx(561,-2527.5068,2252.2258,4.7854,154.7782,4,37, -1); //
    AddStaticVehicleEx(587,-2559.9365,2259.5920,4.7890,334.4454,109,123, -1); //
    AddStaticVehicleEx(572,-2536.8896,2230.5330,4.5676,66.8897,79,90, -1); //
    AddStaticVehicleEx(471,-2564.0420,2248.0637,4.5028,63.8559,60,118, -1); //
    AddStaticVehicleEx(446,-2218.4893,2427.7864,-0.3922,317.8435,8,12, -1); //
    AddStaticVehicleEx(480,-2619.2834,2298.8525,7.9849,178.6081,6,6, -1); //
    AddStaticVehicleEx(560,-2625.3230,2251.7041,7.8540,272.1368,19,104, -1); //
    AddStaticVehicleEx(481,-2445.1775,2508.9551,14.7975,170.8896,0,96, -1); //
    AddStaticVehicleEx(442,-2492.6404,2411.4153,16.3024,30.9223,0,0, -1); //
    AddStaticVehicleEx(408,-2431.2886,2259.8181,5.5268,179.9159,47,88, -1); //
    AddStaticVehicleEx(401,-2258.2019,2384.8821,4.7796,43.2561,4,96, -1); //
    AddStaticVehicleEx(405,-2305.0076,2419.0537,4.7891,315.4895,113,40, -1); //
    AddStaticVehicleEx(424,-2323.7798,2535.0425,5.8623,240.6708,87,50, -1); //
    AddStaticVehicleEx(454,-2225.6213,2518.1970,0.1341,303.4886,116,54, -1); //
    AddStaticVehicleEx(468,-2479.0955,2516.5193,17.4216,354.3630,65,18, -1); //
    AddStaticVehicleEx(579,-2516.9734,2512.2185,18.7699,182.1960,87,46, -1); //
    AddStaticVehicleEx(500,-2542.5022,2433.7654,18.9313,250.8623,11,76, -1); //
    AddStaticVehicleEx(499,-2287.4580,2282.8398,4.9643,86.8376,83,32, -1); //
    AddStaticVehicleEx(578,-2408.1309,2368.8936,6.4765,185.4971,1,1, -1); //
    AddStaticVehicleEx(604,-2395.9294,2360.4375,4.5354,245.4773,49,13, -1); //
    AddStaticVehicleEx(572,-2334.2483,2429.3013,6.8847,147.4256,176,66, -1); //
    AddStaticVehicleEx(562,-2251.9963,2312.1426,4.4720,267.4112,122,97, -1); //
    AddStaticVehicleEx(458,-2271.5347,2291.5310,4.6988,89.1646,108,93, -1); //
    AddStaticVehicleEx(574,-2293.8274,2230.1487,4.7073,358.9467,1,1, -1); //
    AddStaticVehicleEx(568,-2506.0293,2535.4656,18.6351,108.8919,54,58, -1); //
    AddStaticVehicleEx(470,-2610.7288,2525.5303,26.5954,140.3219,0,0, -1); //
    AddStaticVehicleEx(581,-2361.8599,2433.0491,7.6643,142.7667,79,91, -1); //

    AddStaticVehicleEx(411,2038.7054,1414.7993,10.3979,181.5701,0,15, -1); // BRL LVkocsi1
    AddStaticVehicleEx(567,2075.7131,1238.5469,10.5423,0.1025,14,27, -1); // BRL LVkocsi2
    AddStaticVehicleEx(492,2454.3167,1267.5685,10.6044,359.3211,7,49, -1); // BRL LVkocsi3
    AddStaticVehicleEx(514,2491.2085,1420.1854,11.4372,1.4919,78,65, -1); // BRL LVkocsi4
    AddStaticVehicleEx(434,2178.1035,1822.2750,10.7878,1.8408,45,79, -1); // BRL LVkocsi5
    AddStaticVehicleEx(522,2189.9695,1787.5162,10.3911,356.9846,0,0, -1); // BRL LVkocsi6
    AddStaticVehicleEx(522,2119.0432,2181.3174,10.2419,188.4567,0,0, -1); // BRL LVkocsi7
    AddStaticVehicleEx(514,1998.7864,2297.6094,11.4015,269.7701,4,4, -1); // BRL LVkocsi8
    AddStaticVehicleEx(496,1519.0912,2280.9321,10.5363,180.8709,1,89, -1); // BRL LVkocsi9
    AddStaticVehicleEx(536,1525.4954,2258.2852,10.5579,179.5546,39,72, -1); // BRL LVkocsi10
    AddStaticVehicleEx(419,1532.4785,2291.0806,10.6178,180.4965,14,15, -1); // BRL LVkocsi11
    AddStaticVehicleEx(521,1703.2819,1436.3435,10.2891,357.9335,0,0, -1); // LVkocsi12
    AddStaticVehicleEx(405,1234.0292,2607.7971,10.6953,269.9420,6,6, -1); // LVkocsi13
    AddStaticVehicleEx(404,1403.6782,2578.4868,10.5589,299.0412,4,4, -1); // LVkocsi14
    AddStaticVehicleEx(402,1518.3777,2576.5249,10.6520,3.3275,0,0, -1); // LVkocsi15
    AddStaticVehicleEx(402,1561.9883,2601.5569,10.6520,125.2036,0,0, -1); // LVkocsi16
    AddStaticVehicleEx(456,1909.9160,2570.0706,10.9928,187.6331,12,34, -1); // LVkocsi17
    AddStaticVehicleEx(502,1878.5117,2642.5652,10.7096,180.4036,12,13, -1); // LVkocsi18
    AddStaticVehicleEx(491,2104.4971,2655.2429,10.5729,92.1466,1,2, -1); // LVkocsi19

    //AddStaticVehicleEx(532,-1171.0980,-1048.6005,130.2027,297.7473,77,15, -1); // combajn
    AddStaticVehicleEx(531,-1139.7709,-1102.6689,129.1853,240.3872,69,118, -1); //
    AddStaticVehicleEx(531,-1048.2949,-1113.7017,129.1840,137.8984,69,118, -1); // traktor
    AddStaticVehicleEx(531,-1061.3035,-1163.2450,129.1825,228.3921,69,118, -1); // traktor
    AddStaticVehicleEx(572,-1077.8215,-1202.2650,128.7986,90.9939,81,7, -1); //
    AddStaticVehicleEx(531,-1066.0277,-1301.9617,129.1787,294.3236,122,40, -1); //
    AddStaticVehicleEx(471,-1062.7793,-1215.9474,128.7011,271.6707,6,6, -1); //
    AddStaticVehicleEx(543,-1073.2284,-1203.4246,129.0397,0.9971,110,110, -1); // auto1
    AddStaticVehicleEx(478,-1069.7062,-1203.7946,129.2059,352.4402,47,19, -1); // auto2
    AddStaticVehicleEx(478,-1094.8898,-1212.4851,129.2258,107.5853,47,19, -1); // auto3

   	AddStaticVehicleEx(560,-1957.4775,257.8267,35.1741,53.6362,9,39, -1); //
	AddStaticVehicleEx(559,-1950.3446,263.4765,35.1251,60.1715,58,8, -1); //
	AddStaticVehicleEx(415,-1947.5323,273.8875,35.2457,110.0240,25,1, -1); //
    AddStaticVehicleEx(562,-1959.3073,304.1040,35.0196,123.8708,87,87, -1); //
	AddStaticVehicleEx(429,-1955.2555,298.0291,35.1484,122.4652,2,1, -1); //
	AddStaticVehicleEx(411,-1951.1654,256.9077,40.7741,286.8935,123,1, -1); //
	AddStaticVehicleEx(451,-1952.6129,266.2447,40.7535,261.3683,16,16, -1); //
    AddStaticVehicleEx(587,-1955.8868,261.1134,40.7742,274.1424,53,1, -1); //
	AddStaticVehicleEx(522,-1954.8981,304.5724,40.6178,124.0816,7,79, -1); //
	AddStaticVehicleEx(521,-1953.3374,298.6664,40.6146,103.5464,87,118, -1); //
	AddStaticVehicleEx(581,-1952.0747,292.7762,40.6459,111.5868,75,1, -1); //

    AddStaticVehicleEx(403,-1049.9546,-652.6876,32.6135,206.1590,0,3, -1); // kocsi
    AddStaticVehicleEx(414,-1030.4557,-681.7053,32.1015,270.2986,102,55, -1); //
    AddStaticVehicleEx(414,-1010.1934,-695.3159,32.1014,63.2248,4,4, -1); //
    AddStaticVehicleEx(456,-1003.8474,-646.4821,32.1814,358.4397,0,19, -1); //
    AddStaticVehicleEx(499,-1003.1343,-598.9960,32.0066,35.3129,17,111, -1); //
    AddStaticVehicleEx(509,-962.8977,-500.1470,25.4648,265.7131,51,113, -1); //
    AddStaticVehicleEx(586,-950.7984,-537.3541,25.4811,179.1089,0,14, -1); //
    AddStaticVehicleEx(478,-919.4131,-506.7987,25.9555,222.1870,14,0, -1); //
    AddStaticVehicleEx(482,-520.4773,-545.5439,25.6453,177.9764,68,39, -1); //
    AddStaticVehicleEx(482,-557.5298,-544.9865,25.6373,359.9646,68,39, -1); //
    AddStaticVehicleEx(482,-569.0430,-505.0218,25.6487,270.4540,68,39, -1); //
    AddStaticVehicleEx(482,-530.0696,-501.7686,25.0200,181.0328,68,39, -1); //
    AddStaticVehicleEx(522,1708.2164,-2119.8818,13.1008,349.6812,2,2, -1); // alvin gecisege
    AddStaticVehicleEx(481,1705.4485,-2124.9329,13.0650,15.8481,2,2, -1); // alvin gecisege
    AddStaticVehicleEx(481,1703.0271,-2125.5120,13.0644,344.5927,2,2, -1); // alvin gecisege
    AddStaticVehicleEx(522,1709.6427,-2120.2742,13.0902,339.2218,2,2, -1); // alvin gecisege
    AddStaticVehicleEx(522,1711.0995,-2119.8508,13.0900,17.8978,2,2, -1); // alvin gecisege
    AddStaticVehicleEx(522,1712.4641,-2119.5986,13.1019,16.7695,2,2, -1); // alvin gecisege
    AddStaticVehicleEx(602,1707.5659,-2107.8408,13.2728,271.4545,2,2, -1); // alvin gecisegew
    AddStaticVehicleEx(411,1698.6563,-2101.7292,13.3005,183.2594,2,2, -1); // alvin gecisegew
    AddStaticVehicleEx(576,1690.7405,-2108.1748,13.0785,272.4742,2,2, -1); // alvin gecisegew
    AddStaticVehicleEx(567,1686.8010,-2117.7173,13.4209,268.4195,2,2, -1); // alvin gecisegew

    AddStaticVehicleEx(452,-2562.1360,1417.2384,-0.3642,89.9044,184,184, -1); // rifa
    AddStaticVehicleEx(587,-289.8198,1778.0721,42.4374,88.4123,184,184, -1); // rifa
    AddStaticVehicleEx(562,-301.8838,1775.0553,42.3469,269.0857,184,184, -1); // rifa
    AddStaticVehicleEx(559,-289.5788,1769.9882,42.3517,88.6024,184,184, -1); // rifa
    AddStaticVehicleEx(560,-302.0882,1767.8661,42.3931,269.2108,184,184, -1); // rifa
    AddStaticVehicleEx(589,-290.1393,1762.1031,42.3456,88.5676,184,184, -1); // rifa
    AddStaticVehicleEx(589,-290.1393,1762.1031,42.3456,88.5676,184,184, -1); // rifa
    AddStaticVehicleEx(522,-315.7697,1772.8397,43.2116,220.4302,184,184, -1); // rifa
    AddStaticVehicleEx(440,-301.7472,1758.2418,42.8035,268.9442,184,184, -1); // rifa
    AddStaticVehicleEx(516,-290.9057,1753.8042,42.5236,88.5781,184,184, -1); // rifa
    AddStaticVehicleEx(487,-310.7818,1808.5162,42.4331,90.3510,184,184, -1); // rifa
    AddStaticVehicleEx(511,-265.3568,1889.3361,43.6649,140.4069,184,184, -1); // rifa
    AddStaticVehicleEx(539,-313.2380,1752.7058,42.1213,32.2586,184,184, -1); // rifa

    AddStaticVehicleEx(422,-2421.9373,2441.5330,12.9715,88.9285,0,50, -1); //
    AddStaticVehicleEx(541,-2427.5061,2427.3540,12.9420,271.6983,86,86, -1); // bajnokkocsi
    AddStaticVehicleEx(492,-2471.4746,2437.8989,15.4788,95.5957,86,0, -1); // alvinkocsi
    AddStaticVehicleEx(429,-2426.1965,2345.3518,4.6573,191.7269,0,1, -1); // zalnkocsi

    AddStaticVehicleEx(536,-1959.3368,585.1230,34.8584,180.0513,12,1, -1); //
	AddStaticVehicleEx(575,-1926.3191,585.3216,34.7276,0.1723,19,96, -1); //
	AddStaticVehicleEx(534,-1753.9451,813.3657,24.6145,271.0786,42,42, -1); //
	AddStaticVehicleEx(567,-1953.3492,585.2680,34.9916,359.7967,88,64, -1); //
	AddStaticVehicleEx(535,-1938.2919,585.1266,34.8875,359.8850,28,1, -1); //
	AddStaticVehicleEx(576,-1932.2926,585.1517,34.7337,180.5862,74,8, -1); //
	AddStaticVehicleEx(412,-1941.4937,584.6548,34.9688,0.7712,25,8, -1); //
	AddStaticVehicleEx(535,-2058.5322,1104.8730,53.0528,269.5178,55,1, -1); //
	AddStaticVehicleEx(535,-1929.0411,585.5192,34.8848,184.3054,66,1, -1); //
	AddStaticVehicleEx(535,-1947.4351,585.5957,34.8843,358.0185,31,1, -1); //
	AddStaticVehicleEx(535,-1956.4846,585.6069,34.8791,179.6208,28,1, -1); //
	AddStaticVehicleEx(497,-1680.3921,706.6240,30.7768,184.9529,0,1, -1); //

    AddStaticVehicleEx(522,-2124.7434,-815.3036,31.5988,270,1,1, -1); //
	AddStaticVehicleEx(522,-2124.7043,-818.1428,31.5974,270,1,1, -1); //
	AddStaticVehicleEx(522,-2124.7034,-821.4612,31.5987,270,1,1, -1); //
	AddStaticVehicleEx(522,-2124.5342,-824.8478,31.5977,270,1,1, -1); //
	AddStaticVehicleEx(411,-2134.1116,-814.7549,31.7505,90,1,1, -1); //
	AddStaticVehicleEx(411,-2133.7195,-818.2419,31.7505,90,1,1, -1); //
	AddStaticVehicleEx(411,-2133.9385,-821.2896,31.7505,90,1,1, -1); //
	AddStaticVehicleEx(411,-2133.8665,-824.6615,31.7505,90,1,1, -1); //
	AddStaticVehicleEx(443,-2134.2307,-841.4976,32.6613,0,1,1, -1); //
	AddStaticVehicleEx(438,-2125.2866,-847.3751,31.9100,270,1,1, -1); //
	AddStaticVehicleEx(438,-2125.5093,-844.0319,32.0276,270,1,1, -1); //
	AddStaticVehicleEx(438,-2124.8262,-840.7314,32.0255,270,1,1, -1); //
	AddStaticVehicleEx(495,-2125.0579,-831.1497,32.3716,270,1,1, -1); //

	AddStaticVehicleEx(435,-2116.6873,-119.3618,35.9450,175.8156,1,1, -1); // utánfutó
	AddStaticVehicleEx(435,-2103.6438,-198.9226,35.9597,86.0533,1,1, -1); // utanfuto
	AddStaticVehicleEx(584,-2103.6963,-204.2327,36.4707,92.7735,1,1, -1); // utánfutó
	AddStaticVehicleEx(515,-2101.5037,-273.7518,36.3490,0.5684,13,76, -1); // kamion
	AddStaticVehicleEx(515,-2107.0645,-274.4870,36.3376,359.3938,13,76, -1); // kamion
	AddStaticVehicleEx(515,-2112.5229,-274.6013,36.3445,0.5595,13,76, -1); // kamion

	AddStaticVehicleEx(420,-1490.95312500,818.36065674,7.03749990,90.00000000,6,6, -1); //Taxi
	AddStaticVehicleEx(420,-1491.02343750,813.92285156,7.03531599,90.00000000,6,6, -1); //Taxi
	AddStaticVehicleEx(438,-1491.02197266,801.88983154,7.38285637,90.00000000,6,6, -1); //Cabbie
	AddStaticVehicleEx(438,-1490.95874023,805.46850586,7.38504028,90.00000000,6,6, -1); //Cabbie
	AddStaticVehicleEx(420,-1490.99975586,810.05578613,7.03749990,90.00000000,6,6, -1); //Taxi
	AddStaticVehicleEx(420,-1491.51855469,797.39862061,7.03531599,90.00000000,6,6, -1); //Taxi
	AddStaticVehicleEx(438,-1491.11486816,792.99548340,7.38504028,90.00000000,6,6, -1); //Cabbie
	AddStaticVehicleEx(438,-1490.81896973,822.23413086,7.38504028,90.00000000,6,6, -1); //Cabbie

	AddStaticVehicleEx(588,-2316.1785,-162.6811,35.2246,180.3642,1,1, -1); // hotdogos
	AddStaticVehicleEx(588,-2310.1582,-163.0869,35.2247,178.5176,1,1, -1); // hotdogos
	AddStaticVehicleEx(588,-2303.4375,-163.7872,35.2162,178.1535,1,1, -1); // hotdogos
	AddStaticVehicleEx(588,-2303.5173,-151.9376,35.2230,180.3444,1,1, -1); // hotdogos

	AddStaticVehicleEx(574,-1970.1764,454.3928,34.8979,90.4123,26,26, -1); // úttisztító
	//AddStaticVehicleEx(574,-1969.5631,451.2917,34.8970,90.4796,26,26, -1); // úttisztító
	AddStaticVehicleEx(574,-1969.3151,448.5023,34.8970,90.4007,26,26, -1); // úttisztító
	//AddStaticVehicleEx(574,-1969.2141,445.5477,34.8970,90.5065,26,26, -1); // úttisztító
	AddStaticVehicleEx(574,-1969.3887,442.5598,34.8970,90.3984,26,26, -1); // úttisztító
	//AddStaticVehicleEx(574,-1969.3217,439.4728,34.8970,89.5635,26,26, -1); // úttisztító
	AddStaticVehicleEx(574,-1969.4132,436.5527,34.8969,89.4138,26,26, -1); // úttisztító
	//AddStaticVehicleEx(574,-1969.5305,433.5873,34.8970,90.8808,26,26, -1); // úttisztító
	AddStaticVehicleEx(574,-1969.0410,430.4501,34.8970,89.9710,26,26, -1); // úttisztító

	AddStaticVehicleEx(532,-1212.8480,-1045.4824,129.2521,268.1254,77,15, -1); // Kombájn
	AddStaticVehicleEx(532,-1212.7352,-1035.5453,129.2481,270.0552,77,15, -1); // Kombájn
	AddStaticVehicleEx(532,-1212.4541,-1026.2861,129.2383,271.8944,77,15, -1); // Kombájn
	AddStaticVehicleEx(532,-1212.9980,-1013.8041,129.2425,268.0521,77,15, -1); // Kombájn
	AddStaticVehicleEx(532,-1212.6115,-1002.7106,129.2388,270.7839,77,15, -1); // Kombájn
	AddStaticVehicleEx(532,-1212.5868,-990.5391,129.2495,267.9158,77,15, -1); // Kombájn
	AddStaticVehicleEx(532,-1212.7053,-978.6744,129.2475,272.0394,77,15, -1); // Kombájn

	AddStaticVehicleEx(531,-1193.6328,-1067.9094,129.1837,11.3459,69,118, -1); // Traktor
	AddStaticVehicleEx(531,-1189.4982,-1067.9536,129.1841,5.0865,69,118, -1); // Traktor
	AddStaticVehicleEx(531,-1185.0759,-1067.0013,129.1842,7.8203,69,118, -1); // Traktor
	AddStaticVehicleEx(531,-1180.9781,-1066.1796,129.1822,3.7647,69,118, -1); // Traktor
	AddStaticVehicleEx(531,-1177.4084,-1066.0356,129.1851,5.2333,69,118, -1); // Traktor
	AddStaticVehicleEx(531,-1174.2228,-1065.6573,129.1833,3.2152,69,118, -1); // Traktor
	AddStaticVehicleEx(531,-1170.3185,-1065.3936,129.1837,6.4721,69,118, -1); // Traktor
	AddStaticVehicleEx(531,-1166.9734,-1064.8622,129.1817,8.5141,69,118, -1); // Traktor
	AddStaticVehicleEx(531,-1163.2947,-1064.2495,129.1816,4.7619,69,118, -1); // Traktor
   	////////////////////////////Tuningolt jármûvek//////////////////////////////
	waa[0] = AddStaticVehicleEx(560,-2768.5093,236.4491,6.8928,269.0472,1,1, -1); // tunnedsultan
	waa[1] = AddStaticVehicleEx(559,-2769.0166,245.5404,6.8438,271.8490,1,1, -1); // tunnedjester
	waa[2] = AddStaticVehicleEx(562,-2776.5122,236.4910,6.8470,270.5103,1,1, -1); // tunnedelegy
	waa[3] = AddStaticVehicleEx(558,-2776.2427,245.2758,6.8171,270.7300,1,1, -1); // tunneduranus
	waa[4] = AddStaticVehicleEx(565,-2783.5774,236.2822,6.8122,271.1021,1,1, -1); // tunnedflash
	waa[5] = AddStaticVehicleEx(561,-2783.3689,245.3741,7.0013,270.6403,1,1, -1); // tunnedstratum

	rodneymotor = AddStaticVehicleEx(522,-2621.1736,267.8422,3.8910,275.6408,6,0, -1); // rodneymotor
	rodneymotor1 = AddStaticVehicleEx(522,-2621.6619,264.4290,3.9000,282.9488,0,6, -1); // rodneymotor2
	BRL_005 = AddStaticVehicleEx(411,-2607.4641,260.9789,6.7996,189.7279,6,1, -1); // Rodneyteam

	//drog[0] = AddStaticVehicleEx(609,-2273.5061,-119.0239,35.3874,269.9373,36,36, -1); // drogos szállító 1
	//drog[1] = AddStaticVehicleEx(609,-2274.0337,-122.9989,35.3881,269.9142,36,36, -1); // drogos szállító 2
	//drog[2] = AddStaticVehicleEx(609,-2273.9800,-127.1954,35.3875,268.9281,36,36, -1); // drogos szállító 3
	//drog[3] = AddStaticVehicleEx(609,-2284.7820,-118.0642,35.3869,270.6123,36,36, -1); // drogos szállító 4
	//drog[4] = AddStaticVehicleEx(609,-2285.4697,-128.1731,35.3872,269.4809,36,36, -1); // drogos szállító 5

	AddStaticVehicleEx(599,-1634.2267,651.1108,6.9552,0.5074,0,1, -1);
	AddStaticVehicleEx(599,-1628.3556,651.3044,6.9567,1.3937,0,1, -1);
	AddStaticVehicleEx(596,-1622.3536,651.6420,6.9569,1.0391,0,1, -1);
	AddStaticVehicleEx(596,-1616.5742,651.6359,6.9567,0.8214,0,1, -1);
	AddStaticVehicleEx(598,-1610.2964,651.7912,6.9548,0.6299,0,1, -1);
	AddStaticVehicleEx(598,-1604.8855,652.0081,6.9568,1.2011,0,1, -1);
	AddStaticVehicleEx(490,-1599.2642,651.7172,6.9557,1.0398,0,0, -1);
	AddStaticVehicleEx(490,-1593.4397,651.7552,6.9568,0.9106,0,0, -1);
	AddStaticVehicleEx(523,-1612.1162,673.0206,6.9548,179.4709,0,1, -1);
	AddStaticVehicleEx(523,-1605.9705,673.2211,6.9573,181.2567,0,1, -1);
	AddStaticVehicleEx(523,-1600.1461,673.4185,6.9585,179.1014,0,1, -1);
	AddStaticVehicleEx(523,-1594.0758,673.3860,6.9557,182.4906,0,1, -1);
	AddStaticVehicleEx(597,-1588.1267,673.2575,6.9092,180.9248,0,1, -1);
	AddStaticVehicleEx(597,-1582.3705,673.2330,6.9105,181.1754,0,1, -1);
	AddStaticVehicleEx(427,-1612.9547,749.4036,-5.1128,178.4682,0,1, -1);
	AddStaticVehicleEx(427,-1604.5143,748.8416,-5.1150,181.5073,0,1, -1);
	AddStaticVehicleEx(427,-1608.4493,749.1235,-5.1107,179.4784,0,1, -1);
	AddStaticVehicleEx(599,-1573.3623,742.7050,-5.0497,270.8310,158,1, -1);
	AddStaticVehicleEx(599,-1572.9114,738.6533,-5.0502,269.5838,158,1, -1);
	AddStaticVehicleEx(598,-1572.6520,730.7257,-5.4937,269.3729,158,1, -1);
	AddStaticVehicleEx(598,-1572.2903,726.6233,-5.4947,269.5117,158,1, -1);
	AddStaticVehicleEx(427,-1573.1237,706.0330,-5.1095,269.7371,158,1, -1);
	AddStaticVehicleEx(427,-1572.9878,710.2504,-5.1101,270.0886,158,1, -1);
	AddStaticVehicleEx(427,-1572.9554,714.5554,-5.1103,269.0936,44,1, -1);
	AddStaticVehicleEx(427,-1572.9407,718.3649,-5.1102,268.3892,44,1, -1);

	/*new vehicleid = AddStaticVehicleEx(597,-1608.6528,749.6986,-5.4737,358.8150,8,8, -1);
	AddVehicleComponent(vehicleid, 1010);//nitro
	AddVehicleComponent(vehicleid, 1073);//wheels shadow

	vehicleid = AddStaticVehicleEx(597,-1603.8931,749.7988,-5.4740,357.4953,8,8, -1);
	AddVehicleComponent(vehicleid, 1010);//nitro
	AddVehicleComponent(vehicleid, 1073);//wheels shadow

	vehicleid = AddStaticVehicleEx(597,-1599.8810,749.8843,-5.4738,0.9043,8,8, -1);
	AddVehicleComponent(vehicleid, 1010);//nitro
	AddVehicleComponent(vehicleid, 1073);//wheels shadow*/

	rodneyt1 = AddStaticVehicleEx(451,-2612.7124,280.9570,4.2869,184.2104,6,6, -1); //
	rodneyt2 = AddStaticVehicleEx(541,-2616.5073,278.5926,4.3731,189.8325,0,6, -1); // bullet
	rodneyt3 = AddStaticVehicleEx(495,-2620.0225,278.1177,3.9394,189.1645,0,6, -1); //
	rodneyt4 = AddStaticVehicleEx(541,-2621.1235,253.7167,4.1527,183.1012,0,6, -1); // bullet
	bloodykocsi = AddStaticVehicleEx(535,-2661.1897,230.5160,3.9281,56.8332,42,87, -1); // police
	bazsikocsi = AddStaticVehicleEx(535,-2661.6143,237.8086,4.1020,88.9216,1,1, -1); // bazsi

	hackerkocsi[0] = AddStaticVehicleEx(585,-1478.4181,1014.1438,6.7733,90.2780,13,13, -1); // hackerocsi1
	hackerkocsi[1] = AddStaticVehicleEx(585,-1479.4847,1010.4675,6.7737,90.7847,13,13, -1); // hackerocsi2
	hackerkocsi[2] = AddStaticVehicleEx(541,-1489.6947,999.5981,6.8121,91.2914,13,13, -1); // hackerocsi3
	hackerkocsi[3] = AddStaticVehicleEx(550,-1479.5974,999.9901,7.0091,90.8730,13,13, -1); // hackerocsi4
	hackerkocsi[4] = AddStaticVehicleEx(550,-1480.7429,1004.2879,7.0049,90.2413,13,13, -1); // hackerocsi5

	AddStaticVehicleEx(468,-2514.8230,-15.0342,25.2801,212.1631,75,75, -1); // sancez 1 //terrorista
	AddStaticVehicleEx(468,-2522.4221,-24.2201,25.2792,302.9155,75,75, -1); // sancez 2 //terrorista
	AddStaticVehicleEx(579,-2508.9536,-22.4846,25.6959,0.3363,53,53, -1); // huntley //terrorista
	
	questcar = AddStaticVehicleEx(603,-1547.8051,121.4169,3.3934,135.6467,69,1, -1, 1); // kuldikocsi

	for(new i; i < MAX_VEHICLES; i++) VehicleTuning(i);//A tuningolandó jármûvek tuningraküldése!

	AddStaticVehicleEx(567,-1763.5054,823.0115,24.7601,81.3457,25,25, -1); //
	AddStaticVehicleEx(560,-2023.2471,-44.1357,35.0673,179.9096,9,39, -1); //
	AddStaticVehicleEx(560,-2062.4419,-77.0063,35.0251,270.6337,9,39, -1); //
	AddStaticVehicleEx(496,-2040.7181,-61.9559,35.0302,268.5648,74,72, -1); //
	AddStaticVehicleEx(522,-2089.5110,-84.2522,34.7227,1.5277,3,3, -1); //
	AddStaticVehicleEx(522,-2085.7944,-84.2200,34.7337,358.3404,3,3, -1); //
	AddStaticVehicleEx(411,-1738.0453,811.0767,24.8167,178.4637,123,1, -1); //
	AddStaticVehicleEx(411,-1740.1786,954.0457,24.6775,76.9404,123,1, -1); //
	AddStaticVehicleEx(518,-2900.9722,1175.7191,12.8156,89.9499,9,39, -1); //
	AddStaticVehicleEx(522,-2903.1038,1151.2814,13.2766,269.6549,39,106, -1); //
	AddStaticVehicleEx(402,-2464.6143,741.5823,34.8302,359.8822,13,13, -1); //
	AddStaticVehicleEx(402,-2265.7515,192.7331,34.9789,269.3283,13,13, -1); //
	AddStaticVehicleEx(587,-1659.4019,455.2750,6.9085,45.1773,36,1, -1); //
	AddStaticVehicleEx(587,-1585.6053,907.1151,7.4193,269.7783,36,1, -1); //
	AddStaticVehicleEx(533,-2114.2478,1154.7365,54.8410,359.1461,73,1, -1); //
	AddStaticVehicleEx(565,-2379.6763,1258.1964,26.9531,178.6310,11,11, -1); //
	AddStaticVehicleEx(451,-2358.2283,1313.1151,16.6898,358.3310,125,125, -1); //
	AddStaticVehicleEx(451,-2623.3687,1377.3655,6.9309,180.6597,125,125, -1); //
	AddStaticVehicleEx(411,-2627.5095,1378.4166,7.0094,180.6883,106,1, -1); //
	AddStaticVehicleEx(477,-2797.6536,475.7745,5.2312,271.2194,36,1, -1); //
	AddStaticVehicleEx(480,-2679.6497,-22.2997,4.1085,180.6927,6,6, -1); //
	AddStaticVehicleEx(589,-2636.9724,-54.9786,3.9940,0.5167,7,7, -1); //
	AddStaticVehicleEx(589,-2616.1221,-188.2435,3.9941,268.9015,7,7, -1); //
	AddStaticVehicleEx(562,-2487.0728,-181.2537,25.2757,90.4222,36,1, -1); //
	AddStaticVehicleEx(434,-2547.3245,-142.8261,13.9125,3.4359,6,6, -1); //
	AddStaticVehicleEx(579,-2585.2605,311.3915,4.7874,269.5291,62,62, -1); //
	AddStaticVehicleEx(579,-2543.8083,604.4401,14.3850,268.7316,62,62, -1); //
	AddStaticVehicleEx(546,-2592.6528,634.6545,27.5368,89.6758,78,38, -1); //
	AddStaticVehicleEx(410,-2592.1492,639.7196,27.4708,89.8309,9,1, -1); //
	AddStaticVehicleEx(474,-2591.8977,655.7331,27.5748,86.7931,81,1, -1); //
	AddStaticVehicleEx(581,-2617.6799,741.9491,30.0525,270.0030,72,1, -1); //
	AddStaticVehicleEx(555,-2565.7993,922.5909,64.6682,179.5775,22,1, -1); //
	AddStaticVehicleEx(521,-2468.5823,897.4512,62.6366,0.5147,75,13, -1); //
	AddStaticVehicleEx(411,-2321.9116,989.7504,50.6207,97.9129,12,1, -1); //
	AddStaticVehicleEx(461,-2320.7588,1031.9524,50.2854,115.2484,43,1, -1); //
	AddStaticVehicleEx(411,-2276.7493,772.6202,49.3721,269.4460,64,1, -1); //
	AddStaticVehicleEx(506,-2206.9490,927.8243,70.0106,271.4330,7,7, -1); //
	
	AddStaticVehicleEx(493,-4408.6851,245.5612,0.2070,262.3465,36,13, -1); // hajo1
	AddStaticVehicleEx(493,-4407.8613,256.6989,-0.3657,296.8977,36,13, -1); // hajo2
	AddStaticVehicleEx(493,-4401.9976,275.3936,0.2183,270.5911,36,13, -1); // hajo3
	AddStaticVehicleEx(493,-4404.7070,297.1482,-0.0239,283.4725,36,13, -1); // hajo4

    //Véletlenszerû rendszám
	new rendszamabc[][] = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "V", "Z", "X", "Y", "W", "U"};
	new rendszamszam[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0};
	new rendszam2[16];

	for(new i; i < MAX_VEHICLES; i++)
	{
		new szam1random = random(sizeof(rendszamszam));
		new szam2random = random(sizeof(rendszamszam));
		new szam3random = random(sizeof(rendszamszam));

	    format(rendszam2, sizeof(rendszam2), "%s%s%s - %d%d%d", rendszamabc[random(sizeof(rendszamabc))][0],rendszamabc[random(sizeof(rendszamabc))][0],rendszamabc[random(sizeof(rendszamabc))][0],rendszamszam[szam1random],rendszamszam[szam2random],rendszamszam[szam3random]);
		SetVehicleNumberPlate(i, rendszam2);
	}

	SetTimer("autospawn", 20000, 0);
	//SetTimer("VehicleRespawn", 10*60*1000, true);//Jármûvek újraspawnolása

	//------------------------------Mapikonok----------------------------------//
 	//CreateMapIcon(8,0,-2274.8491,533.5869,35.0597);
	CreateDynamicMapIcon(-2057.8557,-140.3324,35.3203, 8,0);
    CreateDynamicMapIcon(-1969.0994,161.7874,27.6875, 34,0);
    CreateDynamicMapIcon(-1486.7839,781.3308,7.1853, 42,0);
    CreateDynamicMapIcon(-2645.8765,639.1412,14.4531, 22,0);
    CreateDynamicMapIcon(-2446.9485,521.1221,30.2955, 36,0);
    CreateDynamicMapIcon(-1817.8936,-175.9810,9.3984, 25, 0);
    CreateDynamicMapIcon(-2153.1523,-173.8441,35.3203, 51, 0);
    CreateDynamicMapIcon(-1605.6041,712.0567,13.8672, 30, 0);
    CreateDynamicMapIcon(-1493.8768,920.2049,7.1875, 46, 0);
    CreateDynamicMapIcon(-1885.5920,863.1423,35.1719, 45, 0);
    CreateDynamicMapIcon(-2493.8625,-29.2117,25.7656, 45, 0);
    CreateDynamicMapIcon(-2377.3215,910.0261,45.4453, 45, 0);
    CreateDynamicMapIcon(-1696.4679,950.2330,24.890, 45, 0);
    CreateDynamicMapIcon(-1600.1000,869.6873,9.2298, 52, 0);
    CreateDynamicMapIcon(-1334.8940,447.4821,7.1875, 18, 0);
    CreateDynamicMapIcon(-2452.9998,504.0262,30.0811, 52, 0);
    CreateDynamicMapIcon(-2718.8086,127.8294,6.5670, 52, 0);
    CreateDynamicMapIcon(-2168.5867,251.7198,35.3295, 52, 0);
    CreateDynamicMapIcon(-1953.9259,1342.9504,7.1875, 52, 0);
    CreateDynamicMapIcon(-1865.0065,1064.3359,46.0859, 52, 0);
    CreateDynamicMapIcon(-2562.4644,310.1865,15.9453, 50, 0);
    CreateDynamicMapIcon(-2154.6396,643.3008,52.3672, 43, 0);
    CreateDynamicMapIcon(-2148.9529,-241.9265,36.5156, 61, 0);
    CreateDynamicMapIcon(-1653.7972,1430.4453,7.1833, 60, 0);
    CreateDynamicMapIcon(-2764.4766,375.8189,6.3411, 40, 0);
	CreateDynamicMapIcon(-2501.2649,2319.3535,4.9844, 52, 0);
	CreateDynamicMapIcon(-1059.5852,-1205.4084,129.2188, 26, 0);
	CreateDynamicMapIcon(-2482.3123,2406.5144,17.1094, 49, 0);
	CreateDynamicMapIcon(-2935.1475,484.7553,4.9141, 33, 0);
	//CreateMapIcon(54,0,-2269.3740,-155.9729,35.3203);

	//------------------------------Pickupok----------------------------------//
	//bkvp = CreateDynamicPickup(1239,23,-2274.8491,533.5869,35.0597);
	mavp = CreateDynamicPickup(1239,23,-1969.0994,161.7874,27.6875);
	taxip = CreateDynamicPickup(1239,23,-1486.7839,781.3308,7.1853);
	mentosp = CreateDynamicPickup(1239,23,-2645.8765,639.1412,14.4531);
	bankosp = CreateDynamicPickup(1239,23,-2446.9485,521.1221,30.2955);
	hotdogp = CreateDynamicPickup(1239, 23, -2323.6829,-158.8489,35.5547);
	tisztitp = CreateDynamicPickup(1239, 23, -1961.6693,434.1478,35.1719);
	farmerp = CreateDynamicPickup(1239, 23, -1061.3529,-1205.4236,129.7565);
	rablop = CreateDynamicPickup(1239,23,-1812.3574,-168.1509,4.7213);
	rablop2 = CreateDynamicPickup(1239, 23, -1809.4814,-170.3784,4.7115);
	kamionp = CreateDynamicPickup(1239,23,-2153.1523,-173.8441,35.3203);
	rendorp = CreateDynamicPickup(1239,23,235.1457,110.0641,1010.2188);
	politikusp = CreateDynamicPickup(1239,23,359.6905,180.4762,1008.3828);
	partp = CreateDynamicPickup(1239,23,1956.4124,963.6814,1011.4880);
	katonap = CreateDynamicPickup(1239,23,-1523.8248,493.0586,7.1797);
	mtk = CreateDynamicPickup(1239,23,-2148.9529,-241.9265,36.5156);
	ujpest = CreateDynamicPickup(1239,23,-2154.6396,643.3008,52.3672);
	vasasp = CreateDynamicPickup(1239,23,-783.7529,496.6279,1376.1953);
	honved = CreateDynamicPickup(1239,23,-1653.7972,1430.4453,7.1833);
	fradi = CreateDynamicPickup(1239,23,2521.6641,-1678.6760,15.4891);
	pap = CreateDynamicPickup(1239,23,-2039.3427,1087.6926,18.8424);
	riportp = CreateDynamicPickup(1239,23,-2521.1143,-624.9529,132.7841);
	tuzolto = CreateDynamicPickup(1239,23,-2024.5416,79.6962,28.1932);
	ammunation = CreateDynamicPickup(1239,23,296.6812,-38.3310,1001.5156);
	hpickup = CreateDynamicPickup(1239,23,-2935.1475,484.7553,4.9141);

	varoshazabe = CreateDynamicPickup(1318,23,-1493.8768,920.2049,7.1875);
	varoshazaki = CreateDynamicPickup(1318,23,387.6764,173.9684,1008.3828);
	rendorsegbe = CreateDynamicPickup(1318,23,-1605.6041,712.0567,13.8672);
	rendorsegki = CreateDynamicPickup(1318,23,246.2552,108.9417,1003.2188);
	rendorseginfo = CreateDynamicPickup(1239,23,247.1012,118.0825,1003.2188);
	parlamentki = CreateDynamicPickup(1318,23,1966.5725,995.7894,1021.5662);
	parlamentbe = CreateDynamicPickup(1318,23,-2764.4766,375.8189,6.3411);
	maffiabe = CreateDynamicPickup(1318,23,-2562.4644,310.1865,15.9453);
	maffiaki = CreateDynamicPickup(1318,23,-794.9285,490.4004,1376.1953);
	papbe = CreateDynamicPickup(1318,23,-2482.3123,2406.5144,17.1094);
	papki = CreateDynamicPickup(1318,23,-2024.7321,1142.0500,18.0688);
	tornabe = CreateDynamicPickup(1318,23,756.2015,-16.7779,1000.5859);
	tornaki = CreateDynamicPickup(1318,23,2324.8000,-1540.9879,25.3438);
	fankosbe = CreateDynamicPickup(1318,23,-2765.8606,789.1227,52.7813);
	fankoski = CreateDynamicPickup(1318,23,377.3091,-192.4648,1000.6328);
	fbbe = CreateDynamicPickup(1318, 23, -2626.6255,209.0263,4.5965);
	fbki = CreateDynamicPickup(1318, 23, -2620.1523,200.6094,0.1078);

/*	bar = CreateDynamicPickup(1550,2,509.4155,-71.9277,998.7578);
	box = CreateDynamicPickup(1550,2,767.6898,-36.6481,1000.6865);
	//autosuli = CreateDynamicPickup(1550,2,-2032.0631,-117.4357,1035.1719);
	burgerking = CreateDynamicPickup(1550,2,372.5804,-65.4323,1001.5078);
	zero = CreateDynamicPickup(1550,2,-2232.0461,129.2900,1035.4141);
	tetovalas = CreateDynamicPickup(1550,2,-201.4025,-7.3274,1002.2734);
	haj = CreateDynamicPickup(1550,2,420.5546,-81.4736,1001.8047);
	csirkes = CreateDynamicPickup(1550,2,371.3192,-7.3398,1001.8589);
	klub = CreateDynamicPickup(1550,2,502.3051,-14.0034,1000.6797);
	suburban = CreateDynamicPickup(1550,2,203.9833,-43.8138,1001.8047);
	binco = CreateDynamicPickup(1550,2,207.7380,-101.4601,1005.2578);
	zip = CreateDynamicPickup(1550,2,161.8955,-84.7291,1001.8047);
	victim = CreateDynamicPickup(1550,2,207.3801,-10.2720,1001.2109);
	pizza = CreateDynamicPickup(1550,2,376.7180,-119.5506,1001.4995);
	fankosr = CreateDynamicPickup(1550,2,379.3516,-182.2067,1000.6328);
	maffiar = CreateDynamicPickup(1550,2,-779.5485,500.8824,1371.7422);*/
	ruha[0] = CreateDynamicPickup(1275,23,174.8714,-83.5854,1001.8047);
	ruha[1] = CreateDynamicPickup(1275,23,212.3280,-96.1352,1005.2578);
	ruha[2] = CreateDynamicPickup(1275,23,209.5075,-34.7378,1001.9297);
	ruha[3] = CreateDynamicPickup(1275,23,205.6970,-4.2691,1001.2109);

	bankp[0] = CreateDynamicPickup(1274,23,-1600.1000,869.6873,9.2298);
	bankp[1] = CreateDynamicPickup(1274,23,-2452.9998,504.0262,30.0811);
	bankp[2] = CreateDynamicPickup(1274,23,-2718.8086,127.8294,6.5670);
	bankp[3] = CreateDynamicPickup(1274,23,-2168.5867,251.7198,35.3295);
	bankp[4] = CreateDynamicPickup(1274,23,-1953.9259,1342.9504,7.1875);
	bankp[5] = CreateDynamicPickup(1274,23,-1865.0065,1064.3359,46.0859);
	bankp[6] = CreateDynamicPickup(1274,23,-2501.2649,2319.3535,4.9844);

	//[0] = CreateDynamicPickup(1247,2,-2613.2410,182.8701,4.3203);
	//w[1] = CreateDynamicPickup(1247,2,-2446.8850,-164.0894,35.3358);
	//w[0] = CreateDynamicPickup(1247,2,-2208.0330,695.4005,49.4375);
	w[0] = CreateDynamicPickup(1247,2, -2208.0330,695.4005,49.4375);
	//w[3] = CreateDynamicPickup(1247,2,-1685.0927,439.4519,7.1875);
	//w[0] = CreateDynamicPickup(1247,2,-1876.7026,-190.2473,18.3923);
	//w[5] = CreateDynamicPickup(1247,2,-2328.6514,727.0098,45.8640);
	//w[1] = CreateDynamicPickup(1247,2,-2657.1973,784.6352,49.9846);
	w[1] = CreateDynamicPickup(1247,2, -1707.0844,1018.0095,17.5859);
	//w[7] = CreateDynamicPickup(1247,2,-1651.5236,1090.7598,7.8280);
	//w[1] = CreateDynamicPickup(1247,2,-1807.6520,787.5030,29.7534);
	//w[9] = CreateDynamicPickup(1247,2,-2162.0239,1229.2744,33.9297);

	hp[0] = CreateDynamicPickup(1276,2,-2543.6938,-352.5542,37.0313);
	hp[1] = CreateDynamicPickup(1276,2,-1979.1721,428.7036,24.9224);
	hp[2] = CreateDynamicPickup(1276,2,-1532.8348,688.5331,133.0514);
	hp[3] = CreateDynamicPickup(1276,2,-2793.4231,1191.4940,20.2734);
	hp[4] = CreateDynamicPickup(1276,2,-2043.5010,973.1083,54.6831);
	hp[5] = CreateDynamicPickup(1276,2,-2186.2212,696.3799,53.8906);

	rcarsp1 = CreateDynamicPickup(1239, 23, -1653.5195,1212.4888,21.1563);
	rcarsp2 = CreateDynamicPickup(1239, 23, -1653.3105,1207.8264,21.1563);

	bankrbe = CreateDynamicPickup(1318, 23, -1816.8586,-169.4936,4.7261);
	bankrki = CreateDynamicPickup(1318, 23, -1816.0332,-169.1814,9.3984);

	ejtoernyo = CreateDynamicPickup(1310, 23, -2358.8782,-1633.7865,483.6957);
	for(new teams;teams<MAX_TEAMS;teams++) TeamInfo[teams][isattacking]=0;

	//AddGangZone("név",minx,miny,maxx,maxy,cp:x,cp:y,cp:z,gang);
	//AddGangZone("", , , ,   ,,TEAM_);
	AddGangZone("Triád bázis",-2248.0208,553.6202,-2129.3440,744.4578,-2153.4336,653.4489,52.3672,TEAM_UJPEST);
	AddGangZone("Nyugat-kínai negyed",-2399.0159,553.6202,-2248.0208,968.4432,-2276.9355,695.2850,49.4453,TEAM_UJPEST);
	AddGangZone("Észak-kínai negyed",-2248.0208,744.4578,-1991.6285,968.4432,-2130.5952,835.8737,69.5547,TEAM_UJPEST);
	AddGangZone("Kelet-kínai negyed",-2129.3440,553.6202,-1991.6285,744.4578,-2095.9883,652.9802,52.3672,TEAM_UJPEST);
	AddGangZone("Dél-kínai negyed",-2399.0159,499.4019,-1991.6285,553.6202,-2154.8936,535.3154,35.1719,TEAM_UJPEST);

	AddGangZone("Rifa bázis",-2262.0923,-303.3835,-1995.5957,-60.2728,-2138.1162,-108.6386,35.3273,TEAM_MTK);
	AddGangZone("Józsefváros",-2262.0923,-60.2728,-2136.8433,330.3129,-2176.0166,40.8631,35.3203,TEAM_MTK);
	AddGangZone("Park",-2382.1323,-200.3121,-2262.0923,59.9553,-2363.2825,-116.0859,35.3203,TEAM_MTK);
	AddGangZone("Keleti pályaudvar",-2136.8433,-60.2728,-1997.0685,118.4034,-2098.5476,86.9724,35.3203,TEAM_MTK);
	AddGangZone("Gyártelep",-1865.5576,-246.4129,-1790.3602,193.2930,-1806.6237,-141.6918,6.4529,TEAM_MTK);

	AddGangZone("Maffia bázis",-2616.6138,208.1307,-2529.3284,478.3775,-2546.9043,313.1712,19.4670,TEAM_VASAS);
	AddGangZone("Gazdag negyed",-2529.3284,208.1307,-2298.9927,478.3775,-2387.9275,414.3678,35.1641,TEAM_VASAS);
	AddGangZone("Ammunation utca",-2818.6633,208.1307,-2616.6138,298.2448,-2678.7617,225.6537,4.3281,TEAM_VASAS);
	AddGangZone("ferencvárosi lakótelep",-2818.6633,-220.2963,-2608.8567,208.1307,-2713.3491,59.9941,4.3359,TEAM_VASAS);
	AddGangZone("Ferencváros",-2608.8567,-220.2963,-2411.1360,208.1307,-2516.6274,-20.6846,25.6172,TEAM_VASAS);

	AddGangZone("Kispest-Honvéd Bázis",-1752.9038,1260.0094,-1657.9038,1406.2841,-1704.3615,1338.8729,7.1804,TEAM_HONVED);
	AddGangZone("Északi Part",-2016.0406,1260.0094,-1752.9038,1393.4156,-1878.3693,1311.4978,7.1875,TEAM_HONVED);
	AddGangZone("Keleti Part",-1619.9287,1007.0906,-1506.0532,1233.3489,-1615.5250,1102.4194,7.1875,TEAM_HONVED);
	AddGangZone("Kõbánya",-2279.1042,1163.6248,-1619.9287,1260.0094,-1924.2867,1189.4567,45.4453,TEAM_HONVED);
	AddGangZone("Észak-nyugati Part",-2279.1042,1260.0094,-2060.2373,1356.6230,-2132.0024,1320.2389,7.1875,TEAM_HONVED);
	
	//------------------------------Random NPC-k--------------------------------
    #if defined ACTORS
	rifaa[0] = CreateActor(174,-2148.6448,-239.2978,36.5156,91.0914); // rifa npc
	rifaa[1] = CreateActor(174,-2137.4636,-247.8737,36.5156,267.1597); // rifa npc
	bankroba = CreateActor(122,-1809.8611,-172.4836,4.7240,91.0211); // bankrob npc
	triada = CreateActor(118,-2155.0352,646.9669,52.3672,269.2542); // triad npc
	ellenora[0] = CreateActor(61,-2015.8435,349.0695,35.1719,269.9978); // ellenõr npc
	ellenora[1] = CreateActor(61,-2721.4719,357.7983,4.3359,155.1135); // ellenõr npc
	ellenora[2] = CreateActor(61,-1623.2506,1175.4584,7.3214,356.4500); // ellenõr npc
	ryua = CreateActor(50,-1651.1914,1207.7759,21.1487,72.3990); // ryucars npc
	mentosa = CreateActor(274,-2648.1667,638.6247,14.4531,182.6312); // mentõs npc
	maffiaa = CreateActor(124,-780.8338,495.1211,1376.1953,77.7629); // maffia npc
	fegyvera = CreateActor(30,-2629.5503,199.5446,0.1078,175.7984); // fegyverbolt npc
	katonaa[0] = CreateActor(287,-1521.2755,492.6148,7.1797,353.0289);
	katonaa[1] = CreateActor(287,-1376.8612,461.7383,7.1875,85.4526);
	katonaa[2] = CreateActor(287,-1377.0787,471.3652,7.1875,85.4526);
	katonaa[3] = CreateActor(287,-1387.9698,496.0232,3.0391,86.5471);
	taxia = CreateActor(255,-1491.2568,789.3668,7.1875,179.8575);
	vonata = CreateActor(7, -1952.2520,151.6664,26.2813,330.4695);
	
	rendora[0] = CreateActor(311,-1570.3921,655.5984,7.1875,266.8986); // rendõrnpc
	rendora[1] = CreateActor(288,-1570.9436,667.3329,7.1875,268.3203); // rendõrnpc
	munkasa[0] = CreateActor(16,-2101.2048,256.9701,36.2558,218.8264); // munkás
	munkasa[1] = CreateActor(27,-2100.8296,157.0839,35.1301,8.9145); // munkás
	csovesa = CreateActor(1,-2104.0530,131.9551,35.3100,176.8861); // csöves
	dilera[0] = CreateActor(28,-2747.8301,209.1513,7.1282,114.6441); // dílernpc
	dilera[1] = CreateActor(28,-2521.9819,-1.3341,25.6172,186.7979); // dílernpc
	hotdoga = CreateActor(170,-2321.2710,-161.4266,35.5547,270.8536); // hotdogos
	kamionosa[0] = CreateActor(202,-2157.4380,-173.5247,35.3203,269.4338); // kamionosnpc
	kamionosa[1] = CreateActor(202,-2119.1956,-265.9278,35.3203,267.0541); // kamionosnpc
	bkvora = CreateActor(164,-2055.0286,-92.1918,35.3203,262.4838); // valamiõrnpc
	bkva = CreateActor(61,-2037.9917,-120.9772,35.1904,81.2306); // bkvnpc
	tuzoltoa = CreateActor(278,-2025.5428,73.0735,28.2681,269.2263); // tûzoltónpc
	riportera = CreateActor(259,-1785.0890,573.3452,35.1641,85.9911); // riporternpc
	parkolosa = CreateActor(189,-1751.5767,960.1191,24.8828,177.2533); // parkolósnpc
	dananga[0] = CreateActor(121,-1692.1255,1352.8024,9.8047,137.1293); // danangnpc
	dananga[1] = CreateActor(123,-1651.5294,1433.9069,7.1738,179.4530); // danangnpc
	dancinga[0] = CreateActor(13,-2561.6182,646.0833,28.1803,238.7548); // dancingnp
	dancinga[1] = CreateActor(40,-2560.4138,636.4750,28.1803,238.7548); // dancingnpc
	dancinga[2] = CreateActor(100,-2553.9622,638.7076,28.1803,330.4419); // dancingnpc
	dancinga[3] = CreateActor(181,-2552.0681,645.9741,28.1803,330.4419); // dancingnpc
	dancinga[4] = CreateActor(249,-2549.8481,632.8239,28.1803,195.5144); // dancingnpc
	pultosa = CreateActor(194,-2579.3530,623.5522,28.1099,355.9191); // pultosnpc
	dja = CreateActor(217,-2544.5593,640.3978,30.8259,87.1000); // djnpc
	benzina = CreateActor(50, -1678.0554,429.7852,7.1797,220.4144); // benzinkutasnpc
	
	//SetActorInvulnerable(vonata, false);
	
 	ApplyActorAnimation(fegyvera,"PED","IDLE_CHAT",4.1,1,1,1,1,1);
	ApplyActorAnimation(ryua,"PED","IDLE_CHAT",4.1,1,1,1,1,1);
	ApplyActorAnimation(dancinga[0],"DANCING","dance_loop",4.1,1,1,1,1,1);
	ApplyActorAnimation(dancinga[1],"DANCING","dnce_M_a",4.1,1,1,1,1,1);
	ApplyActorAnimation(dancinga[2],"DANCING","dnce_M_b",4.1,1,1,1,1,1);
	ApplyActorAnimation(dancinga[3],"DANCING","dnce_M_c",4.1,1,1,1,1,1);
	ApplyActorAnimation(dancinga[4],"DANCING","dnce_M_d",4.1,1,1,1,1,1);
	ApplyActorAnimation(dja,"DANCING","dnce_M_e",4.1,1,1,1,1,1);
	#endif
	//--------------------------------Textdrawok-------------------------------//
	for(new i=0; i< MAX_PLAYERS; i++)
	{
  	 	gps[i] = TextDrawCreate(85.000000, 428.000000,"GPS");
		TextDrawAlignment(gps[i],2);
		TextDrawBackgroundColor(gps[i],255);
		TextDrawFont(gps[i],1);
		TextDrawLetterSize(gps[i],0.519999, 1.500000);
		TextDrawColor(gps[i],0xffffffff);
		TextDrawSetOutline(gps[i],0);
		TextDrawSetProportional(gps[i],1);
		TextDrawSetShadow(gps[i], 1);
	}

	Clock = TextDrawCreate(551.2, 24.0,"00:00"); //ez a merete
    TextDrawAlignment(Clock,0);
    TextDrawBackgroundColor(Clock,0x000000AA); //hatterszine
    TextDrawFont(Clock,3); //betu tipusa
    TextDrawLetterSize(Clock,0.6, 1.8); //merete
    TextDrawSetOutline(Clock,1);
    TextDrawSetProportional(Clock,1);
    TextDrawSetShadow(Clock,2); //hatter tipusa

    //Személyes textdrawok létrehozása
    for(new i; i < MAX_PLAYERS; i++)
    {
        atbox[i] = TextDrawCreate(100.000000, 237.000000, "_");
		TextDrawAlignment(atbox[i], 2);
		TextDrawBackgroundColor(atbox[i], 255);
		TextDrawFont(atbox[i], 3);
		TextDrawLetterSize(atbox[i], 0.400000, 11.000000);
		TextDrawColor(atbox[i], -1);
		TextDrawSetOutline(atbox[i], 1);
		TextDrawSetProportional(atbox[i], 1);
		TextDrawUseBox(atbox[i], 1);
		TextDrawBoxColor(atbox[i], -1347440726);
		TextDrawTextSize(atbox[i], 174.000000, -181.000000);
		TextDrawSetSelectable(atbox[i], 0);
    
        atpic[i] = TextDrawCreate(18.000000, 272.000000, "ld_tatt:8gun");
		TextDrawBackgroundColor(atpic[i], 255);
		TextDrawFont(atpic[i], 4);
		TextDrawLetterSize(atpic[i], 1.289999, -4.300000);
		TextDrawColor(atpic[i], -1);
		TextDrawSetOutline(atpic[i], 0);
		TextDrawSetProportional(atpic[i], 1);
		TextDrawSetShadow(atpic[i], 1);
		TextDrawUseBox(atpic[i], 1);
		TextDrawBoxColor(atpic[i], 255);
		TextDrawTextSize(atpic[i], 44.000000, 42.000000);
		TextDrawSetSelectable(atpic[i], 0);

		attext[i] = TextDrawCreate(70.000000, 255.000000, "~r~Achievement megszerezve: ~w~100 oles AK-47-tel");
		TextDrawBackgroundColor(attext[i], 255);
		TextDrawFont(attext[i], 2);
		TextDrawLetterSize(attext[i], 0.170000, 1.599999);
		TextDrawColor(attext[i], -1);
		TextDrawSetOutline(attext[i], 1);
		TextDrawSetProportional(attext[i], 1);
		TextDrawUseBox(attext[i], 1);
		TextDrawBoxColor(attext[i], 120);
		TextDrawTextSize(attext[i], 180.000000, 130.000000);
		TextDrawSetSelectable(attext[i], 0);
		
		attext2[i] = TextDrawCreate(15.000000, 237.000000, "gyors kolcson keszpenzben");
		TextDrawBackgroundColor(attext2[i], 255);
		TextDrawFont(attext2[i], 2);
		TextDrawLetterSize(attext2[i], 0.200000, 1.000000);
		TextDrawColor(attext2[i], -1);
		TextDrawSetOutline(attext2[i], 1);
		TextDrawSetProportional(attext2[i], 1);
		TextDrawUseBox(attext2[i], 1);
		TextDrawBoxColor(attext2[i], 130);
		TextDrawTextSize(attext2[i], 185.000000, -188.000000);
		TextDrawSetSelectable(attext2[i], 0);
    
        #if defined FUEL_SYSTEM
		//fuelbar[i] = CreateProgressBar(11.00, 432.00, 112.50, 9.50, 866792362, 100.0);
		fuelbar[i] = CreateProgressBar(236.00, 429.00, 160.50, 19.20, 866792362, 100.0);

        //fuel[i] = TextDrawCreate(21.000000, 431.000000, "500/500");
        fuel[i] = TextDrawCreate(236.000000, 432.000000, "Liter: 500/500");
		TextDrawBackgroundColor(fuel[i], 255);
		TextDrawFont(fuel[i], 2);
		TextDrawLetterSize(fuel[i], 0.500000, 1.000000);
		TextDrawColor(fuel[i], -1);
		TextDrawSetOutline(fuel[i], 0);
		TextDrawSetProportional(fuel[i], 1);
		TextDrawSetShadow(fuel[i], 1);
		TextDrawSetSelectable(fuel[i], 0);
		#endif
		//---------------------------------------------------|
  		Speedo[i] = TextDrawCreate(320.00, 380.00, "~g~Jrm«: ~w~%s (%s)~n~~b~KM/H : ~w~%d~n~~r~Jrm« lete:~w~ %.0f/1000");
		TextDrawSetOutline(Speedo[i], 0);
		TextDrawFont(Speedo[i], 3);
		TextDrawSetProportional(Speedo[i], 2);
		TextDrawAlignment(Speedo[i], 2);
		//--------------------------------------------------|
		TextDrawInfoBox[i] = TextDrawCreate(21.0, 142.0, " ");
		TextDrawLetterSize(TextDrawInfoBox[i],0.5, 1.7999);
		TextDrawAlignment(TextDrawInfoBox[i],0);
		TextDrawBackgroundColor(TextDrawInfoBox[i],0x000000FF);
		TextDrawFont(TextDrawInfoBox[i],1);
		TextDrawUseBox(TextDrawInfoBox[i],1);
		TextDrawBoxColor(TextDrawInfoBox[i],150);
		TextDrawTextSize(TextDrawInfoBox[i],191.0, 200.0);
		TextDrawSetOutline(TextDrawInfoBox[i],0);
		TextDrawSetShadow(TextDrawInfoBox[i],0);
		//--------------------------------------------------|
		//--------------------------------------------------|
		TextDrawInfoBox3[i] = TextDrawCreate(498.0, 337.0-60, "00:00");
		TextDrawLetterSize(TextDrawInfoBox3[i],0.6, 2.5);
		TextDrawAlignment(TextDrawInfoBox3[i],0);
		TextDrawBackgroundColor(TextDrawInfoBox3[i],0x000000FF);
		TextDrawFont(TextDrawInfoBox3[i],2);
		TextDrawSetOutline(TextDrawInfoBox3[i],2);
		TextDrawColor(TextDrawInfoBox3[i], 0xFFFFFFFF);
		TextDrawSetProportional(TextDrawInfoBox3[i], true);
		//--------------------------------------------------|
		//--------------------------------------------------|
		TextDrawInfoBox2[i] = TextDrawCreate(335.000000, 382.000000, " ");
		TextDrawLetterSize(TextDrawInfoBox2[i],0.349999, 1.899998);
		TextDrawAlignment(TextDrawInfoBox2[i],2);
		TextDrawBackgroundColor(TextDrawInfoBox2[i],255);
		TextDrawFont(TextDrawInfoBox2[i],1);
		TextDrawSetOutline(TextDrawInfoBox2[i],1);
		TextDrawColor(TextDrawInfoBox2[i], -1);
		TextDrawSetProportional(TextDrawInfoBox2[i], 1);
		//--------------------------------------------------
		//--------------------------------------------------
		DialogTextInfoBox[i] = TextDrawCreate(373.000000, 350.000000, "~r~Fonok: ~w~Udv. Lenne egy feladatom szamara. Azt a hirt kaptuk, hogy on vallal szallitast. Nem igy van? Akkor hazudtak...");
		TextDrawAlignment(DialogTextInfoBox[i], 2);
		TextDrawBackgroundColor(DialogTextInfoBox[i], 255);
		TextDrawFont(DialogTextInfoBox[i], 1);
		TextDrawLetterSize(DialogTextInfoBox[i], 0.380000, 1.499999);
		TextDrawColor(DialogTextInfoBox[i], -1);
		TextDrawSetOutline(DialogTextInfoBox[i], 0);
		TextDrawSetProportional(DialogTextInfoBox[i], 1);
		TextDrawSetShadow(DialogTextInfoBox[i], 1);
		TextDrawUseBox(DialogTextInfoBox[i], 1);
		TextDrawBoxColor(DialogTextInfoBox[i], 255);
		TextDrawTextSize(DialogTextInfoBox[i], 39.000000, 440.000000);
		TextDrawSetSelectable(DialogTextInfoBox[i], 0);
		//--------------------------------------------------|
		Box[i] = TextDrawCreate(622.000000, 79.000000, "   ");
		TextDrawBackgroundColor(Box[i], 255);
		TextDrawFont(Box[i], 1);
		TextDrawLetterSize(Box[i], 0.500000, 1.000000);
		TextDrawColor(Box[i], -1);
		TextDrawSetOutline(Box[i], 0);
		TextDrawSetProportional(Box[i], 1);
		TextDrawSetShadow(Box[i], 1);
		TextDrawUseBox(Box[i], 1);
		TextDrawBoxColor(Box[i], 255);
		TextDrawTextSize(Box[i], 483.000000, 49.000000);

		Ft[i] = TextDrawCreate(490.000000, 77.000000, "~g~$00000000");
		TextDrawBackgroundColor(Ft[i], 255);
		TextDrawFont(Ft[i], 1);
		TextDrawLetterSize(Ft[i], 0.539999, 2.299999);
		TextDrawColor(Ft[i], 65535);
		TextDrawSetOutline(Ft[i], 1);
		TextDrawSetProportional(Ft[i], 1);
		//---------------------------------------------------|
		modeltext[i] = TextDrawCreate(470.000000, 140.000000, "_");
		TextDrawAlignment(modeltext[i], 2);
		TextDrawBackgroundColor(modeltext[i], 255);
		TextDrawFont(modeltext[i], 5);
		TextDrawLetterSize(modeltext[i], 1.800000, -0.699999);
		TextDrawColor(modeltext[i], -1);
		TextDrawSetOutline(modeltext[i], 0);
		TextDrawSetProportional(modeltext[i], 1);
		TextDrawSetShadow(modeltext[i], 1);
		TextDrawUseBox(modeltext[i], 1);
		TextDrawBoxColor(modeltext[i], 255);
		TextDrawTextSize(modeltext[i], 150.000000, 170.000000);
		TextDrawSetSelectable(modeltext[i], 0);
		//--------------------------------------------------|
		expbar[i] = CreateProgressBar(476.00, 429.00, 160.50, 19.20, -65366, 100.0);
		
		exp[i] = TextDrawCreate(474.000000, 439.000000, "EXP: 10000/500");
		TextDrawBackgroundColor(exp[i], 255);
		TextDrawFont(exp[i], 3);
		TextDrawLetterSize(exp[i], 0.500000, 1.000000);
		TextDrawColor(exp[i], -16776961);
		TextDrawSetOutline(exp[i], 0);
		TextDrawSetProportional(exp[i], 1);
		TextDrawSetShadow(exp[i], 1);
		TextDrawSetSelectable(exp[i], 0);

		level[i] = TextDrawCreate(473.000000, 418.000000, "Szint: 5000");
		TextDrawBackgroundColor(level[i], 255);
		TextDrawFont(level[i], 3);
		TextDrawLetterSize(level[i], 0.500000, 1.000000);
		TextDrawColor(level[i], -16776961);
		TextDrawSetOutline(level[i], 0);
		TextDrawSetProportional(level[i], 1);
		TextDrawSetShadow(level[i], 1);
		TextDrawSetSelectable(level[i], 0);

		giveexp[i] = TextDrawCreate(470.000000, 408.000000, "+5000 EXP");
		TextDrawBackgroundColor(giveexp[i], 255);
		TextDrawFont(giveexp[i], 2);
		TextDrawLetterSize(giveexp[i], 0.500000, 1.000000);
		TextDrawColor(giveexp[i], -65281);
		TextDrawSetOutline(giveexp[i], 0);
		TextDrawSetProportional(giveexp[i], 1);
		TextDrawSetShadow(giveexp[i], 1);
		TextDrawSetSelectable(giveexp[i], 0);
		
		SkillBox[i] = TextDrawCreate(534.000000, 386.000000, "_");
		TextDrawAlignment(SkillBox[i], 2);
		TextDrawBackgroundColor(SkillBox[i], 255);
		TextDrawFont(SkillBox[i], 1);
		TextDrawLetterSize(SkillBox[i], 0.500000, 1.299999);
		TextDrawColor(SkillBox[i], -1);
		TextDrawSetOutline(SkillBox[i], 0);
		TextDrawSetProportional(SkillBox[i], 1);
		TextDrawSetShadow(SkillBox[i], 1);
		TextDrawUseBox(SkillBox[i], 1);
		TextDrawBoxColor(SkillBox[i], 102);
		TextDrawTextSize(SkillBox[i], -10.000000, 200.000000);
		TextDrawSetSelectable(SkillBox[i], 0);

		Skill1Text[i] = TextDrawCreate(436.000000, 387.000000, "TELEPORT");
		TextDrawBackgroundColor(Skill1Text[i], 255);
		TextDrawFont(Skill1Text[i], 2);
		TextDrawLetterSize(Skill1Text[i], 0.300000, 1.000000);
		TextDrawColor(Skill1Text[i], -16776961);
		TextDrawSetOutline(Skill1Text[i], 0);
		TextDrawSetProportional(Skill1Text[i], 1);
		TextDrawSetShadow(Skill1Text[i], 1);
		TextDrawSetSelectable(Skill1Text[i], 0);

		Skill2Text[i] = TextDrawCreate(541.000000, 387.000000, FixGameString("ÉGETÉS"));
		TextDrawAlignment(Skill2Text[i], 2);
		TextDrawBackgroundColor(Skill2Text[i], 255);
		TextDrawFont(Skill2Text[i], 2);
		TextDrawLetterSize(Skill2Text[i], 0.300000, 1.000000);
		TextDrawColor(Skill2Text[i], 16711935);
		TextDrawSetOutline(Skill2Text[i], 0);
		TextDrawSetProportional(Skill2Text[i], 1);
		TextDrawSetShadow(Skill2Text[i], 1);
		TextDrawSetSelectable(Skill2Text[i], 0);

		Skill3Text[i] = TextDrawCreate(631.000000, 387.000000, FixGameString("VONZÁS"));
		TextDrawAlignment(Skill3Text[i], 3);
		TextDrawBackgroundColor(Skill3Text[i], 255);
		TextDrawFont(Skill3Text[i], 2);
		TextDrawLetterSize(Skill3Text[i], 0.300000, 1.000000);
		TextDrawColor(Skill3Text[i], -16776961);
		TextDrawSetOutline(Skill3Text[i], 0);
		TextDrawSetProportional(Skill3Text[i], 1);
		TextDrawSetShadow(Skill3Text[i], 1);
		TextDrawSetSelectable(Skill3Text[i], 0);
		
		Skill1Count[i] = TextDrawCreate(466.000000, 372.000000, "60");
		TextDrawAlignment(Skill1Count[i], 2);
		TextDrawBackgroundColor(Skill1Count[i], 255);
		TextDrawFont(Skill1Count[i], 2);
		TextDrawLetterSize(Skill1Count[i], 0.500000, 1.000000);
		TextDrawColor(Skill1Count[i], -16776961);
		TextDrawSetOutline(Skill1Count[i], 0);
		TextDrawSetProportional(Skill1Count[i], 1);
		TextDrawSetShadow(Skill1Count[i], 1);
		TextDrawSetSelectable(Skill1Count[i], 0);

		Skill2Count[i] = TextDrawCreate(542.000000, 372.000000, "50");
		TextDrawAlignment(Skill2Count[i], 2);
		TextDrawBackgroundColor(Skill2Count[i], 255);
		TextDrawFont(Skill2Count[i], 2);
		TextDrawLetterSize(Skill2Count[i], 0.500000, 1.000000);
		TextDrawColor(Skill2Count[i], -16776961);
		TextDrawSetOutline(Skill2Count[i], 0);
		TextDrawSetProportional(Skill2Count[i], 1);
		TextDrawSetShadow(Skill2Count[i], 1);
		TextDrawSetSelectable(Skill2Count[i], 0);

		Skill3Count[i] = TextDrawCreate(604.000000, 372.000000, "15");
		TextDrawAlignment(Skill3Count[i], 2);
		TextDrawBackgroundColor(Skill3Count[i], 255);
		TextDrawFont(Skill3Count[i], 2);
		TextDrawLetterSize(Skill3Count[i], 0.500000, 1.000000);
		TextDrawColor(Skill3Count[i], -16776961);
		TextDrawSetOutline(Skill3Count[i], 0);
		TextDrawSetProportional(Skill3Count[i], 1);
		TextDrawSetShadow(Skill3Count[i], 1);
		TextDrawSetSelectable(Skill3Count[i], 0);

	}
	return 1;
}

#if defined FUEL_SYSTEM
forward autospawn();
public autospawn()
{
    for(new i = 0; i < MAX_VEHICLES; i++)
	{
        if(IsVehicleType(i))
		{
		    if(fuelvalue[i] < 1)
		    {
			    new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(i, 0, lights, alarm, doors, bonnet, boot, objective);
			}
		}
	}
	for(new i; i < MAX_SLOTS; i++)
	{
        if(IsVehicleType(i))
		{
		    if(fuelvalue[i] < 1)
		    {
			    new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(carplay[i], engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(carplay[i], 0, lights, alarm, doors, bonnet, boot, objective);
			}
		}
	}
}
#endif

public OnGameModeExit()
{
    #if defined ACTORS
    DestroyActor(rifaa[0]);
    DestroyActor(rifaa[1]);
    DestroyActor(bankroba);
    DestroyActor(triada);
    DestroyActor(ellenora[0]);
    DestroyActor(ellenora[1]);
    DestroyActor(ellenora[2]);
    DestroyActor(ryua);
    DestroyActor(mentosa);
    DestroyActor(maffiaa);
    DestroyActor(fegyvera);
    DestroyActor(katonaa[0]);
    DestroyActor(katonaa[1]);
    DestroyActor(katonaa[2]);
    DestroyActor(katonaa[3]);
    DestroyActor(taxia);
    DestroyActor(vonata);
    DestroyActor(csovesa);
    DestroyActor(dilera[0]);
    DestroyActor(dilera[1]);
    DestroyActor(hotdoga);
    DestroyActor(kamionosa[0]);
    DestroyActor(kamionosa[1]);
    DestroyActor(bkvora);
    DestroyActor(bkva);
    DestroyActor(tuzoltoa);
    DestroyActor(riportera);
    DestroyActor(parkolosa);
    DestroyActor(dananga[0]);
    DestroyActor(dananga[1]);
    DestroyActor(dancinga[0]);
    DestroyActor(dancinga[1]);
    DestroyActor(dancinga[2]);
    DestroyActor(dancinga[3]);
    DestroyActor(dancinga[4]);
    DestroyActor(pultosa);
    DestroyActor(dja);
    DestroyActor(munkasa[0]);
    DestroyActor(munkasa[1]);
    DestroyActor(rendora[0]);
    DestroyActor(rendora[1]);
    DestroyActor(benzina);
    #endif
	for(new i; i < MAX_SLOTS; i++)
	{
	    DestroyVehicle(carplay[i]);
		carplay[i] = 0;
	}
	for(new i; i < MAX_CCSLOTS; i++)
	{
		DestroyVehicle(clancars[i]);
		clancars[i] = 0;
	}
	for(new i; i < MAX_PLAYERS; i++)
	{
//	    Delete3DTextLabel(clantext[i]);
    	TextDrawDestroy(TextDrawInfoBox[i]);
		TextDrawDestroy(TextDrawInfoBox3[i]);
		TextDrawDestroy(TextDrawInfoBox2[i]);
		TextDrawDestroy(DialogTextInfoBox[i]);
		TextDrawDestroy(SkillBox[i]);
		TextDrawDestroy(Skill1Text[i]);
		TextDrawDestroy(Skill2Text[i]);
		TextDrawDestroy(Skill3Text[i]);
	}
	#if defined ZOMBIK
	KillTimer(npcpoint_timer);
    DestroyDynamicArea(zzone);
	GangZoneDestroy(gangzone);
	for(new i; i < MAX_ZOMBIE; i++)
	{
    	FCNPC_Destroy(npc[i]);
	}
	#endif
	mysql_close();
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	SetPlayerColor(playerid, COLOR_GREY);
	SetPlayerPos(playerid, -2510.0908,-700.9126,279.7344);
    SetPlayerFacingAngle(playerid, 266.7442);
	SetPlayerCameraPos(playerid, -2494.7053,-701.1025,279.7344);
	SetPlayerCameraLookAt(playerid, -2510.0908,-700.9126,279.7344);
	return 1;
}

public OnPlayerConnect(playerid)
{
	if(IsPlayerNPC(playerid)) return 1;
	SetPVarInt(playerid, "fireveh", -1);
	inrace[playerid] = false;
	lastcp[playerid] = false;
	instunt[playerid] = false;
	readyzett[playerid] = false;
	racecp[playerid] = 0;
	stuntcp[playerid] = 0;
 	sec[playerid] = 0;
	minu[playerid] = 0;
    gPlayerUsingLoopingAnim[playerid] = 0;
	gPlayerAnimLibsPreloaded[playerid] = 0;
	GameTextForPlayer(playerid,"~r~Budapest ~w~Real ~g~Life",2500,5);
	ClockSync();
	SetPVarInt(playerid, "JustConnect", 1);
	CallRemoteFunction("StartRemoveObjects", "i", playerid); //objectek szkriptbõl
	//Bandazónák
	PlayerInfo[playerid][lastzone]=-1;
	PlayerInfo[playerid][IsZoneCP]=0;
	PlayerInfo[playerid][CpEnabled]=0;
	//-------------------------------------------------|
	TextDrawShowForPlayer(playerid,Textdraw0);
	TextDrawShowForPlayer(playerid,Textdraw1);
	TextDrawShowForPlayer(playerid,Textdraw2);
	TextDrawShowForPlayer(playerid,Textdraw3);
	TextDrawShowForPlayer(playerid, Ft[playerid]);
	TextDrawShowForPlayer(playerid, Box[playerid]);
	
	TextDrawForPlayer(playerid,10*1000, "~w~Ajánlom figyelmedbe a ~y~/help~w~ parancsot.");
	return 1;
}

public OnPlayerDisconnect(playerid)
{
    DestroyObject(fireobj[playerid]);
    SetPVarInt(playerid, "skillfire", 0);
    skillalw[0][playerid] = false;
    skillalw[1][playerid] = false;
    skillalw[2][playerid] = false;
    HideSkillText(playerid);
	QuestInt[playerid] = 0;
	KillTimer(createQtimer[playerid]);
	KillTimer(DialogTimer[playerid]);
//    KillTimer(WalkToTim[playerid]);
	RemoveQuestCP(playerid);
    QuestID[playerid] = -1;
    QuestPart[playerid] = -1;
    InDialog[playerid] = false;
    #if defined ZOMBIK
    for(new i; i < MAX_ZOMBIE; i++)
	{
		if(zombi[i][tamadoid] == playerid)
		{
		    KillTimer(npctimer[i][playerid]);
		    zombi[i][tamadoid] = -1;
		}
	}
	#endif
	GangZonesHideForPlayer(playerid);//Bandazóna

    DestroyDynamicObject(bombao[playerid]);
	bombale[playerid] = false;

	StuntWorld[playerid]=0;
//	Delete3DTextLabel(clantext[playerid]);
	KillTimer(horgasztimer2[playerid]);
	KillTimer(horgasztimer3[playerid]);
	KillTimer(vizkozeltimer[playerid]);
	TogglePlayerControllable(playerid, 1);
	RemovePlayerAttachedObject(playerid, 9);
	fishing[playerid] = false;
	elkapni[playerid] = false;
	
 	if(GetGVarInt("1v1dm") == 1)
	{
		if(GetGVarInt("dmkihivo") == playerid)
		{
		    SetGVarInt("1v1dm", 0);
		    SetPVarInt(playerid, "1v1dmben", 0);
			SetPVarInt(GetGVarInt("dmkihivott"), "1v1dmben", 0);
			GivePlayerMoneyEx(GetGVarInt("dmkihivott"), GetGVarInt("dmosszeg"), "DM nyerés");
			GivePlayerMoneyEx(playerid, -GetGVarInt("dmosszeg"), "DM vesztés");
			SpawnPlayer(GetGVarInt("dmkihivott"));
			SetTimerEx("dmlose", 2000, 0, "ii", playerid, GetGVarInt("dmosszeg"));
		}
		if(GetGVarInt("dmkihivott") == playerid)
		{
		    SetGVarInt("1v1dm", 0);
		    SetPVarInt(playerid, "1v1dmben", 0);
			SetPVarInt(GetGVarInt("dmkihivo"), "1v1dmben", 0);
			GivePlayerMoneyEx(GetGVarInt("dmkihivo"), GetGVarInt("dmosszeg"), "DM nyerés");
			GivePlayerMoneyEx(playerid, -GetGVarInt("dmosszeg"), "DM vesztés");
			SpawnPlayer(GetGVarInt("dmkihivo"));
			SetTimerEx("dmlose", 2000, 0, "ii", playerid, GetGVarInt("dmosszeg"));
		}
	}

	if(GetPVarInt(playerid, "mostvett") == 1)
	{
		if(editobject[playerid] != 0) DestroyDynamicObject(editobject[playerid]);
	}
	if(PlayerCar[playerid]>-1)
	{
		DestroyVehicle(PlayerCar[playerid]);
		PlayerCar[playerid]=-1;
	}
	return 1;
}

forward dmlose(playerid, osszeg);
public dmlose(playerid, osszeg)
{
    format(query, sizeof(query), "UPDATE users SET Money = Money - %d, Deaths = Deaths + 1 WHERE Name = %s", osszeg, GetPlayerNameEx(playerid));
	mysql_query(query);
}

public OnPlayerSpawn(playerid)
{
    SetPVarInt(playerid, "fireveh", -1);
    DestroyObject(fireobj[playerid]);
    SetPVarInt(playerid, "skillfire", 0);
    GivePlayerWeapon(playerid, 33, 50000);
	if(GetPVarInt(playerid, "skill1level") >= 1) SetPVarInt(playerid, "aws", 1);
	else if(GetPVarInt(playerid, "skill2level") >= 1) SetPVarInt(playerid, "aws", 2);
	else if(GetPVarInt(playerid, "skill3level") >= 1) SetPVarInt(playerid, "aws", 3);
	
	if(GetPVarInt(playerid, "aws") == 1) SetSkillColors(playerid, 1, 2, 2);
	else if(GetPVarInt(playerid, "aws") == 2) SetSkillColors(playerid, 2, 1, 2);
	else if(GetPVarInt(playerid, "aws") == 3) SetSkillColors(playerid, 2, 2, 1);
	
    if(GetPVarInt(playerid, "skill1level") == 0) TextDrawColor(Skill1Text[playerid], 0x800080AA);//lila
    if(GetPVarInt(playerid, "skill2level") == 0) TextDrawColor(Skill2Text[playerid], 0x800080AA);//lila
    if(GetPVarInt(playerid, "skill3level") == 0) TextDrawColor(Skill3Text[playerid], 0x800080AA);//lila
	
	ShowSkillText(playerid);
	
	SetPVarInt(playerid, "hazban", 0);
	#if defined ZOMBIK
	GangZoneShowForPlayer(playerid, gangzone, COLOR_RED);
	#endif
	SetPVarInt(playerid, "sebezhetetlen", 0);
    SetPVarInt(playerid, "oszerkeszt", 0);
	SetPVarInt(playerid, "mostvett", 0);
    if(!gPlayerAnimLibsPreloaded[playerid])
	{
   		PreloadAnimLib(playerid,"BOMBER");
   		PreloadAnimLib(playerid,"RAPPING");
    	PreloadAnimLib(playerid,"SHOP");
   		PreloadAnimLib(playerid,"BEACH");
   		PreloadAnimLib(playerid,"SMOKING");
    	PreloadAnimLib(playerid,"FOOD");
    	PreloadAnimLib(playerid,"ON_LOOKERS");
    	PreloadAnimLib(playerid,"DEALER");
		PreloadAnimLib(playerid,"CRACK");
		PreloadAnimLib(playerid,"CARRY");
		PreloadAnimLib(playerid,"COP_AMBIENT");
		PreloadAnimLib(playerid,"PARK");
		PreloadAnimLib(playerid,"INT_HOUSE");
		PreloadAnimLib(playerid,"FOOD");
		PreloadAnimLib(playerid,"PED");
		gPlayerAnimLibsPreloaded[playerid] = 1;
	}
	SetPlayerVirtualWorld(playerid,0);
	StuntWorld[playerid]=0;
	if(cGetPlayerTeam(playerid) != 0)
	{
		SetTeam(playerid, cGetPlayerTeam(playerid));
		if(GetPVarInt(playerid, "ajon") == 1) return 1;
	}
	else //Ha nincs munkában vagy csapatban
	{
	    if(GetPVarInt(playerid, "JustConnect") == 1)
		{
	    	SetPVarInt(playerid, "JustConnect", 0);
	    	if(GetPVarInt(playerid, "ajon") == 1) return 1;
		}
		else
		{
		    if(GetPVarInt(playerid, "ajon") == 1) return 1;
			SetPlayerPos(playerid,-2112.2219,128.0912,35.2246);
		}
	}
	TextDrawShowForPlayer(playerid,Text:Clock);
	TextDrawShowForPlayer(playerid, Ft[playerid]);
	TextDrawShowForPlayer(playerid, Box[playerid]);
	TextDrawHideForPlayer(playerid, modeltext[playerid]);

	new expstr[64], szintstr[64];
	SetProgressBarMaxValue(expbar[playerid], levelexp[GetPVarInt(playerid, "Szint")][expvalue]);
	SetProgressBarValue(expbar[playerid], GetPVarInt(playerid, "EXP"));
	format(expstr, sizeof(expstr), "EXP: %d/%d", levelexp[GetPVarInt(playerid, "Szint")][expvalue], GetPVarInt(playerid, "EXP"));
	TextDrawSetString(exp[playerid], expstr);
	new sztext[25];
	if(GetPVarInt(playerid, "Szint") >= MAX_LEVEL) sztext = "[MAX LvL]";
	format(szintstr, sizeof(szintstr), "Szint: %d%s", GetPVarInt(playerid, "Szint"), sztext);
	TextDrawSetString(level[playerid], szintstr);

	ShowProgressBarForPlayer(playerid, expbar[playerid]);
	TextDrawShowForPlayer(playerid, level[playerid]);
	TextDrawShowForPlayer(playerid, exp[playerid]);

	if(GetPVarInt(playerid, "ajon") == 1) return 1;
    SetPVarInt(playerid, "GPS_Spawned", 1);
    if(GetPVarInt(playerid, "Sskin") == 1)
	{
		SetPlayerSkin(playerid, GetPVarInt(playerid, "Skin"));
	}
	else if(GetPVarInt(playerid, "Sskin") == 2)
	{
		format(query, sizeof(query), "SELECT ClanSkin%d FROM clans WHERE ClanName = '%s'", GetPVarInt(playerid, "ClanRank"), GetPVarStringEx(playerid, "Clan"));
  		mysql_query(query);
		mysql_store_result();
		if(mysql_num_rows() != 0)
		{
			mysql_fetch_row(linen);
			new tarolo;
			sscanf(linen, "d", tarolo);
			mysql_free_result();
			SetPlayerSkin(playerid, tarolo);
		}
	}
    if(GetPVarInt(playerid, "haboruban") == 1)
	{
		if(!strcmp(GetGVarStringEx("klanname1"), GetPVarStringEx(playerid, "Clan")))
		{
		    ResetPlayerWeapons(playerid);
		    SetPlayerVirtualWorld(playerid, 50);
		    if(GetGVarInt("clanhmap") == MONTGOMERY_MAP)
		    {
			    SetPlayerPos(playerid, 1293.3663,166.8506,20.4609);
			    SetPlayerFacingAngle(playerid, 64.1222);
			}
			if(GetGVarInt("clanhmap") == HAJORAKTAR_MAP)
		    {
			    SetPlayerPos(playerid, -2436.0608,1554.8264,2.1172);
			    SetPlayerFacingAngle(playerid, 267.8336);
			}
		    SetPlayerInterior(playerid, 0);
		    SetPlayerArmour(playerid, 100);
		    GivePlayerWeapon(playerid, 24, 500);
			GivePlayerWeapon(playerid, 27, 500);
			GivePlayerWeapon(playerid, 29, 500);
			GivePlayerWeapon(playerid, 31, 500);
			GivePlayerWeapon(playerid, 8, 1);
			cSetPlayerTeam(playerid, TEAM_KLAN1);
			if(GetGVarInt("clanhszin") == 1) SetPlayerColor(playerid, 0xff0000AA);
			if(GetGVarInt("clanhszin") == 2) SetPlayerColor(playerid, 0x0009ffAA);
			if(GetGVarInt("clanhszin") == 3) SetPlayerColor(playerid, 0xff0000AA);
			if(GetGVarInt("clanhszin") == 4) SetPlayerColor(playerid, 0x09ff00AA);
			if(GetGVarInt("clanhszin") == 5) SetPlayerColor(playerid, 0xd500ffAA);
			if(GetGVarInt("clanhszin") == 6) SetPlayerColor(playerid, 0xff5e00AA);
			return 1;
		}
		else if(!strcmp(GetGVarStringEx("klanname2"), GetPVarStringEx(playerid, "Clan")))
		{
		    ResetPlayerWeapons(playerid);
			SetPlayerVirtualWorld(playerid, 50);
			SetPlayerPos(playerid, 1408.6246,358.8268,19.2259);
			if(GetGVarInt("clanhmap") == MONTGOMERY_MAP)
		    {
				SetPlayerPos(playerid, 1408.6246,358.8268,19.2259);
				SetPlayerFacingAngle(playerid, 64.4451);
			}
			if(GetGVarInt("clanhmap") == HAJORAKTAR_MAP)
		    {
			    SetPlayerPos(playerid, -2367.2085,1541.4362,2.1172);
			    SetPlayerFacingAngle(playerid, 354.6044);
			}
			SetPlayerInterior(playerid, 0);
			SetPlayerArmour(playerid, 100);
			GivePlayerWeapon(playerid, 24, 500);
			GivePlayerWeapon(playerid, 27, 500);
			GivePlayerWeapon(playerid, 29, 500);
			GivePlayerWeapon(playerid, 31, 500);
			GivePlayerWeapon(playerid, 8, 1);
			cSetPlayerTeam(playerid, TEAM_KLAN2);
			if(GetGVarInt("clanhszin") == 1) SetPlayerColor(playerid, 0xfff700AA);
			if(GetGVarInt("clanhszin") == 2) SetPlayerColor(playerid, 0xfff700AA);
			if(GetGVarInt("clanhszin") == 3) SetPlayerColor(playerid, 0x001effAA);
			if(GetGVarInt("clanhszin") == 4) SetPlayerColor(playerid, 0x824f18AA);
			if(GetGVarInt("clanhszin") == 5) SetPlayerColor(playerid, 0xff7b00AA);
			if(GetGVarInt("clanhszin") == 6) SetPlayerColor(playerid, 0xfff700AA);
			return 1;
		}
	}
	if(GetPVarInt(playerid, "Spawnhely") == 1)
	{
	    format(query, sizeof(query), "SELECT ID, IntX, IntY, IntZ, Interior, VW FROM houses WHERE Tulaj = '%s' OR Tarstulaj = '%s'", GetPlayerNameEx(playerid), GetPlayerNameEx(playerid));
     	mysql_query(query);
	    mysql_store_result();
	    if(mysql_num_rows() != 0)
	    {
	        mysql_fetch_row(linen);
	        new Float:spawn[3];
	        new spawn2[2];
	        new houseid;
	        sscanf(linen, "p<|>ifffii", houseid, spawn[0], spawn[1], spawn[2], spawn2[0], spawn2[1]);
	        mysql_free_result();
	        SetPlayerPos(playerid, spawn[0], spawn[1], spawn[2]);
	        SetPlayerInterior(playerid, spawn2[0]);
	        SetPlayerVirtualWorld(playerid, spawn2[1]);
	        SetPVarInt(playerid, "hazban", houseid);
	        ObjectLoader(playerid, 3000);
		}
	}
	else if(GetPVarInt(playerid, "Spawnhely") == 2)
	{
	    format(query, sizeof(query), "SELECT slot FROM cars WHERE (Tulaj = '%s' OR Tarstulaj = '%s') AND VehID = 508", GetPlayerNameEx(playerid), GetPlayerNameEx(playerid));
   	 	mysql_query(query);
	    mysql_store_result();
	    if(mysql_num_rows() != 0)
	    {
	        new tarolo;
	        mysql_fetch_row(linen);
	        sscanf(linen, "p<|>i", tarolo);
			SetPlayerPos(playerid,  2951.5, -1877.09, 5);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, tarolo);
			SetPVarInt(playerid, "lakocsi", tarolo);
			ObjectLoader(playerid, 3000);
			mysql_free_result();
		}
	}
//	Delete3DTextLabel(clantext[playerid]);
//	if(strcmp(GetPVarStringEx(playerid, "Clan"), "None"))
//	{
//	    clantext[playerid] = Create3DTextLabel(GetPVarStringEx(playerid, "Clan"), COLOR_WHITE, 0, 0, -50, 20, 0);
//	    Attach3DTextLabelToPlayer(clantext[playerid], playerid, 0, 0, 0.4);
//	}
	format(query, sizeof(query), "SELECT QuestID, QuestPart FROM quests WHERE Name = '%s' AND QuestPart != 0 AND QuestPart != 999", GetPlayerNameEx(playerid));
	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    mysql_fetch_row(linen);
	    new questid, questpart;
	    sscanf(linen, "p<|>ii", questid, questpart);
	    mysql_free_result();
	    QuestPart[playerid] = questpart;
    	QuestID[playerid] = questid;
		if(QuestID[playerid] == 1)
		{
		    if(QuestPart[playerid] == 1)
		    {
		        CreateQuestCP(playerid, -2145.5195,-246.4585,36.5156);
		    }
		    if(QuestPart[playerid] == 3)
		    {
		        CreateQuestCP(playerid, -2145.5195,-246.4585,36.5156);
		    }
		}
		if(QuestID[playerid] == 2)
		{
		    if(QuestPart[playerid] == 1)
		    {
		        CreateQuestCP(playerid, -2145.5195,-246.4585,36.5156);
		    }
		    if(QuestPart[playerid] == 2)
		    {
		        CreateQuestCP(playerid, -2948.1531,480.1698,4.8935);
		    }
		    if(QuestPart[playerid] == 3)
		    {
		        CreateQuestCP(playerid, -2145.5195,-246.4585,36.5156);
		    }
		}
		if(QuestID[playerid] == 3)
		{
		    if(QuestPart[playerid] == 1)
		    {
		        CreateQuestCP(playerid, -2145.5195,-246.4585,36.5156);
		    }
		}
		if(QuestID[playerid] == 4)
		{
		    if(QuestPart[playerid] == 1)
		    {
		        CreateQuestCP(playerid, -2145.5195,-246.4585,36.5156);
		    }
		    if(QuestPart[playerid] == 3)
		    {
		        CreateQuestCP(playerid, -2145.5195,-246.4585,36.5156);
		    }
		}
	}
    return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	SetPVarInt(playerid, "skill1alt", 0);
	SetPVarInt(playerid, "skill2alt", 0);
	SetPVarInt(playerid, "skill3alt", 0);
	skillalw[0][playerid] = false, TextDrawHideForPlayer(playerid, Skill1Count[playerid]);
	skillalw[1][playerid] = false, TextDrawHideForPlayer(playerid, Skill2Count[playerid]);
	skillalw[2][playerid] = false, TextDrawHideForPlayer(playerid, Skill3Count[playerid]);
    DestroyObject(fireobj[playerid]);
    SetPVarInt(playerid, "skillfire", 0);
	KillTimer(createQtimer[playerid]);
	KillTimer(DialogTimer[playerid]);
//    KillTimer(WalkToTim[playerid]);
    RemoveQuestCP(playerid);
    QuestID[playerid] = -1;
    QuestPart[playerid] = -1;
    InDialog[playerid] = false;
	new str[128];
	KillTimer(horgasztimer2[playerid]);
	KillTimer(horgasztimer3[playerid]);
	KillTimer(vizkozeltimer[playerid]);
	TogglePlayerControllable(playerid, 1);
	RemovePlayerAttachedObject(playerid, 9);
	fishing[playerid] = false;
	elkapni[playerid] = false;
//    Delete3DTextLabel(clantext[playerid]);
    SetPVarInt(playerid, "oszerkeszt", 0);
	SetPVarInt(playerid, "mostvett", 0);
    if(gPlayerUsingLoopingAnim[playerid])
	{
        gPlayerUsingLoopingAnim[playerid] = 0;
        TextDrawHideForPlayer(playerid,txtAnimHelper);
	}
	if(IsPlayerAttachedObjectSlotUsed(playerid,8))
	{
	    SetPVarInt(playerid, "Jedi",0);
     	RemovePlayerAttachedObject(playerid, 8);
	}
    if(GetPVarInt(playerid, "haboruban") == 0) GameTextForPlayer(playerid,"Megd¨gl¨ttl",2000,5);
    SendDeathMessage(killerid,playerid,reason);
    SetPVarInt(playerid, "GPS_Spawned", 0);

    if(GetGVarInt("1v1dm") != 1)
	{
	    if(playerid != GetGVarInt("dmkihivo") && playerid != GetGVarInt("dmkihivott"))
	    {

		    SetPVarInt(playerid, "Killstreak", 0);
			SetPVarInt(playerid, "RC-XD", 0);
		    SetPVarInt(killerid, "Killstreak", GetPVarInt(killerid, "Killstreak")+1);
		}
	}

	//if(GetPlayerMoneyEx(playerid) < 1000000)
	//{
	if(!GetPlayerJob(playerid) || GetPVarInt(playerid, "cancel") != 1)
	{
	    if(GetPVarInt(playerid, "1v1dmben") != 1)
	    {
			GivePlayerMoneyEx(killerid, GetPlayerMoneyEx(playerid)/2, "Ölés");
			GivePlayerMoneyEx(playerid, -GetPlayerMoneyEx(playerid)/2, "Halál");
			SetPVarInt(playerid, "cancel", 0);
		}
	}
	//}
	SetPVarInt(playerid, "cancel", 0);
	
	if(GetGVarInt("1v1dm") == 1)
	{
	    if(playerid == GetGVarInt("dmkihivo") || playerid == GetGVarInt("dmkihivott"))
	    {
			SetGVarInt("1v1dm", 0);
			SetPVarInt(playerid, "1v1dmben", 0);
			SetPVarInt(killerid, "1v1dmben", 0);
			GivePlayerMoneyEx(killerid, GetGVarInt("dmosszeg"), "DM nyerés");
			GivePlayerMoneyEx(playerid, -GetGVarInt("dmosszeg"), "DM vesztés");
			SpawnPlayer(killerid);
			SetPVarInt(killerid, "dmcsillag", 1);
			SendFormatMessageToAll(COLOR_GREEN, "{FFFF00}%s{00FF00} megnyerte a DM párbajt {FFFF00}%s{00FF00} ellen! Nyereménye: %d$", GetPlayerNameEx(killerid), GetPlayerNameEx(playerid), GetGVarInt("dmosszeg"));

			GiveAchievement(killerid, "dmwins", 1);
		    if(GetAchievement(killerid, "dmwins") == 50)
		    {
				UnlockAchievement(killerid, "ld_tatt:7cross", "50 párbaj megnyerése", "Egy az egy ellen");
				GiveAchievement(killerid, "dmwins", 1);
				GiveEXP(killerid, DMWINS50_EXP);
		    }
		    else if(GetAchievement(killerid, "dmwins") == 100)
		    {
				UnlockAchievement(killerid, "ld_tatt:7cross2", "100 párbaj megnyerése", "Ki a következõ?");
				GiveAchievement(killerid, "dmwins", 1);
				GiveEXP(killerid, DMWINS100_EXP);
		    }
		    else if(GetAchievement(killerid, "dmwins") == 200)
		    {
				UnlockAchievement(killerid, "ld_tatt:7cross3", "200 párbaj megnyerése", "Párbajhõs");
				GiveAchievement(killerid, "dmwins", 1);
				GiveEXP(killerid, DMWINS200_EXP);
		    }

		}
	}
	//----------Achievements
	if(reason == WEAPON_KNIFE)
	{
	    GiveAchievement(killerid, "knifes", 1);
	    if(GetAchievement(killerid, "knifes") == 50)
	    {
			UnlockAchievement(killerid, "ld_tatt:12dager", "50 késelés", "Késforgató");
			GiveAchievement(killerid, "knifes", 1);
			GiveEXP(killerid, KNIFE50_EXP);
	    }
	    else if(GetAchievement(killerid, "knifes") == 100)
	    {
			UnlockAchievement(killerid, "ld_tatt:9homby", "100 késelés", "Pengeélen táncoló");
			GiveAchievement(killerid, "knifes", 1);
			GiveEXP(killerid, KNIFE100_EXP);
	    }
	}
	
	if(reason == WEAPON_SILENCED || reason == WEAPON_COLT45)
	{
	    GiveAchievement(killerid, "9mm", 1);
	    if(GetAchievement(killerid, "9mm") == 50)
	    {
			UnlockAchievement(killerid, "ld_tatt:9gun2", "50 ölés 9mm-el", "Nincs kegyelem!");
			GiveAchievement(killerid, "9mm", 1);
			GiveEXP(killerid, COLT50_EXP);
	    }
	    else if(GetAchievement(killerid, "9mm") == 100)
	    {
			UnlockAchievement(killerid, "ld_tatt:5gun", "100 ölés 9mm-el", "Gyilkológép");
			GiveAchievement(killerid, "9mm", 1);
			GiveEXP(killerid, COLT100_EXP);
	    }
	}
	
	if(reason == WEAPON_DEAGLE)
	{
	    GiveAchievement(killerid, "Deagle", 1);
	    if(GetAchievement(killerid, "Deagle") == 50)
	    {
			UnlockAchievement(killerid, "ld_tatt:9bullt", "50 ölés Deagle-el", "Sivatagi sas");
			GiveAchievement(killerid, "Deagle", 1);
			GiveEXP(killerid, DEAGLE50_EXP);
	    }
	}
	
	if(reason == WEAPON_AK47)
	{
	    GiveAchievement(killerid, "AK47", 1);
	    if(GetAchievement(killerid, "AK47") == 100)
	    {
			UnlockAchievement(killerid, "ld_tatt:8gun", "100 ölés AK-47-tel", "7.62 - süvít a skuló");
			GiveAchievement(killerid, "AK47", 1);
			GiveEXP(killerid, AK47100_EXP);
	    }
	}
	
	if(reason == WEAPON_MP5 || reason == WEAPON_UZI || reason == WEAPON_TEC9)
	{
	    GiveAchievement(killerid, "SMG", 1);
	    if(GetAchievement(killerid, "SMG") == 100)
	    {
			UnlockAchievement(killerid, "ld_tatt:9gun", "100 ölés SMG-vel", "Nincs megállás");
			GiveAchievement(killerid, "SMG", 1);
			GiveEXP(killerid, SMG100_EXP);
	    }
	}
	
	if(cGetPlayerTeam(playerid) == TEAM_ZSARU)
	{
	    GiveAchievement(killerid, "Policekills", 1);
	    if(GetAchievement(killerid, "Policekills") == 30)
	    {
			UnlockAchievement(killerid, "ld_otb2:ric1", "30 zsaru megölése", "Sünvadász");
			GiveAchievement(killerid, "Policekills", 1);
			GiveEXP(killerid, POLICE30_EXP);
	    }
	}
	
	if(cGetPlayerTeam(playerid) == TEAM_KATONA)
	{
	    GiveAchievement(killerid, "Armykills", 1);
	    if(GetAchievement(killerid, "Armykills") == 30)
	    {
			UnlockAchievement(killerid, "ld_otb2:ric5", "30 katona megölése", "Egyszemélyes hadsereg");
			GiveAchievement(killerid, "Armykills", 1);
			GiveEXP(killerid, ARMY30_EXP);
	    }
	}
	
	if(cGetPlayerTeam(playerid) == TEAM_RODNEYMUNKA)
	{
	    GiveAchievement(killerid, "Rodkills", 1);
	    if(GetAchievement(killerid, "Rodkills") == 30)
	    {
			UnlockAchievement(killerid, "ld_otb2:ric3", "30 Rodney bandás megölése", "A golyóálló");
			GiveAchievement(killerid, "Rodkills", 1);
			GiveEXP(killerid, ROD30_EXP);
	    }
	}
	//----------------------

	if(cGetPlayerTeam(killerid) == TEAM_KATONA)
	{
	    if(GetPlayerWantedLevel(playerid) > 0)
	    {
	    	GivePlayerMoneyEx(killerid,15000);
	    	SetPVarInt(killerid, "KatonaTP", GetPVarInt(killerid,"KatonaTP")+1);
	    	format(str, sizeof(str), "~g~+ Katona TP(%d)", GetPVarInt(killerid, "KatonaTP"));
			TextDraw2ForPlayer(killerid,6000,str);
			GiveEXP(killerid, KATONA_EXP);
			TextDrawForPlayer(killerid,6000,"Megöltél egy bûnözõt. Ezért pénzt és tapasztalatot kaptál!");
		}
	}

    if(cGetPlayerTeam(killerid)==TEAM_KATONA) SetPlayerWantedLevel(playerid,0);
	if(cGetPlayerTeam(playerid)==TEAM_KATONA || cGetPlayerTeam(playerid)==TEAM_ZSARU)
	{
		if(GetPVarInt(killerid, "dmcsillag") != 1)
		{
	 		SetPlayerWantedLevel(killerid,GetPlayerWantedLevel(killerid)+1);
		}
	}
	if(killerid != INVALID_PLAYER_ID)
	{
		if(!(GetPVarInt(killerid, "Killstreak") % 3))
		{
		    if(GetPVarInt(killerid, "Killstreak") != 0)
        	{
			    new Killstreak[128];
		   		format(Killstreak, sizeof(Killstreak), #HRED#"%s"#HLIME#" megölt "#HBLUE#"%d"#HLIME#" játékost, ezért "#HYELLOW#"%d"#HLIME#" killstreakje van!",GetPlayerNameEx(killerid),GetPVarInt(killerid, "Killstreak"),GetPVarInt(killerid, "Killstreak"));
		   		SendClientMessageToAll(COLOR_NEON,Killstreak);
			}
		}
	}
	if(!(GetPVarInt(killerid, "Killstreak") % 3))
    {
        if(GetPVarInt(killerid, "Killstreak") != 0)
        {
	        new Killstreak[128];
	        format(Killstreak, sizeof(Killstreak), "%d killstreakod van, ezért kaptál egy RC-XD-t. A használathoz írd be az /rcxd parancsot!", GetPVarInt(killerid, "Killstreak"));
	        SendClientMessage(killerid,COLOR_GREEN, Killstreak);
	        SetPVarInt(killerid, "RC-XD", GetPVarInt(killerid, "RC-XD")+1);
	        format(Killstreak, sizeof(Killstreak), "~g~Killstreak %d: RC-XD", GetPVarInt(killerid, "Killstreak"));
	        TextDraw2ForPlayer(killerid,6000,Killstreak);
		}
	}
	if(GetPVarInt(killerid, "haboruban") == 0) GiveEXP(killerid, KILL_EXP);
	if(GetPVarInt(playerid, "haboruban") == 1 || GetPVarInt(killerid, "haboruban") == 1)
	{
	    if(killerid != INVALID_PLAYER_ID)
	    {
			if(!strcmp(GetGVarStringEx("klanname1"), GetPVarStringEx(playerid, "Clan")))
			{
				SetGVarInt("klan2kills", GetGVarInt("klan2kills")+1);
				if(cGetPlayerTeam(playerid) == 8 || cGetPlayerTeam(playerid) == 10)
				{
					SetPlayerWantedLevel(killerid, GetPlayerWantedLevel(killerid)-1);
				}
			}
			else if(!strcmp(GetGVarStringEx("klanname2"), GetPVarStringEx(playerid, "Clan")))
			{
		 		SetGVarInt("klan1kills", GetGVarInt("klan1kills")+1);
		 		if(cGetPlayerTeam(playerid) == 8 || cGetPlayerTeam(playerid) == 10)
				{
					SetPlayerWantedLevel(killerid, GetPlayerWantedLevel(killerid)-1);
				}
			}
		}
		else
		{
			if(!strcmp(GetGVarStringEx("klanname1"), GetPVarStringEx(playerid, "Clan")))
			{
				SetGVarInt("klan2kills", GetGVarInt("klan2kills")+1);
			}
			else if(!strcmp(GetGVarStringEx("klanname2"), GetPVarStringEx(playerid, "Clan")))
			{
		 		SetGVarInt("klan1kills", GetGVarInt("klan1kills")+1);
			}
		}
		for(new i; i < MAX_PLAYERS; i++)
		{
		    if(GetPVarInt(i, "haboruban") == 1)
		    {
				format(str, sizeof(str), "~y~%s: %d~n~%s: %d", GetGVarStringEx("klanname1"), GetGVarInt("klan1kills"), GetGVarStringEx("klanname2"), GetGVarInt("klan2kills"));
			 	GameTextForPlayer(i, str, 5000, 1);
			}
		}
	}
	#if defined ZOMBIK
	for(new i; i < MAX_ZOMBIE; i++)
	{
		if(zombi[i][tamadoid] == playerid)
		{
		    KillTimer(npctimer[i][playerid]);
		    SetPVarInt(playerid, "sebezhetetlen", 1);
		    zombi[i][tamadoid] = -1;
		}
	}
	#endif
	SetPVarInt(playerid, "hazban", 0);
	SetPVarInt(playerid, "garazsban", 0);
	SetPVarInt(playerid, "lakocsi", 0);
//	racecp[playerid] = 0;
//	inrace[playerid] = false;
//	lastcp[playerid] = false;
//	DisablePlayerRaceCheckpoint(playerid);
	SetPVarInt(killerid, "dmcsillag", 0);
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
    VehicleTuning(vehicleid);//A tuningolandó jármûvek tuningraküldése!
    #if defined FUEL_SYSTEM
	fuelvalue[vehicleid] = 50;
	#endif
	for(new i; i < MAX_SLOTS; i++)
	{
	    if(vehicleid == carplay[i])
	    {
		   	AutoUpdate(i);
		}
	}
	for(new i; i < MAX_CCSLOTS; i++)
    {
        if(vehicleid == clancars[i])
        {
	        ClanAutoUpdate(i);
		}
	}
	csomagt[vehicleid] = false;
	
	#if defined MOTOR_SYSTEM
	if(IsVehicleType(vehicleid))
	{
		new engine, lights, alarm, doors, bonnet, boot, objective;
	    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, 0, lights, alarm, doors, bonnet, boot, objective);
	}
	#endif

    #if defined FUEL_SYSTEM
	new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(IsVehicleType(vehicleid))
	{
	    if(fuelvalue[vehicleid] < 1)
	    {
	        SetVehicleParamsEx(vehicleid, 0, lights, alarm, doors, bonnet, boot, objective);
	    }
	}
	#endif
	return 1;
}

forward VehicleTuning(vehicleid);
public VehicleTuning(vehicleid)
{
    if(vehicleid==waa[0])
    {
	    AddVehicleComponent(waa[0], 1010);
		AddVehicleComponent(waa[0],1028);
		AddVehicleComponent(waa[0],1140);
		AddVehicleComponent(waa[0],1170);
		AddVehicleComponent(waa[0],1087);
		AddVehicleComponent(waa[0],1139);
		AddVehicleComponent(waa[0],1033);
		AddVehicleComponent(waa[0],1031);
		AddVehicleComponent(waa[0],1030);
		ChangeVehiclePaintjob(waa[0],1);
    }
    if(vehicleid==waa[1])
    {
	    AddVehicleComponent(waa[1],1070);
	    AddVehicleComponent(waa[1],1066);
		AddVehicleComponent(waa[1],1072);
		AddVehicleComponent(waa[1],1010);
	    AddVehicleComponent(waa[1],1087);
	    AddVehicleComponent(waa[1],1147);
	    AddVehicleComponent(waa[1],1068);
	    AddVehicleComponent(waa[1],1173);
	    AddVehicleComponent(waa[1],1161);
	    ChangeVehiclePaintjob(waa[1],1);
    }
    if(vehicleid==waa[2])
    {
	    ChangeVehiclePaintjob(waa[2],1);
		AddVehicleComponent(waa[2],1037);
		AddVehicleComponent(waa[2],1010);
		AddVehicleComponent(waa[2],1035);
		AddVehicleComponent(waa[2],1039);
		AddVehicleComponent(waa[2],1041);
		AddVehicleComponent(waa[2],1086);
		AddVehicleComponent(waa[2],1087);
		AddVehicleComponent(waa[2],1147);
		AddVehicleComponent(waa[2],1148);
		AddVehicleComponent(waa[2],1172);
    }
    if(vehicleid==waa[3])
    {
		AddVehicleComponent(waa[3],1092);
		AddVehicleComponent(waa[3],1166);
		AddVehicleComponent(waa[3],1165);
		AddVehicleComponent(waa[3],1090);
		AddVehicleComponent(waa[3],1094);
		AddVehicleComponent(waa[3],1010);
		AddVehicleComponent(waa[3],1087);
		AddVehicleComponent(waa[3],1163);
		AddVehicleComponent(waa[3],1091);
		ChangeVehiclePaintjob(waa[3],2);
    }
    if(vehicleid==waa[4])
    {
		ChangeVehiclePaintjob(waa[4],2);
		AddVehicleComponent(waa[4],1046);
		AddVehicleComponent(waa[4],1151);
		AddVehicleComponent(waa[4],1152);
		AddVehicleComponent(waa[4],1010);
		AddVehicleComponent(waa[4],1087);
		AddVehicleComponent(waa[4],1139);
		AddVehicleComponent(waa[4],1081);
		AddVehicleComponent(waa[4],1053);
		AddVehicleComponent(waa[4],1047);
		AddVehicleComponent(waa[4],1051);
    }
    if(vehicleid==waa[5])
    {
		AddVehicleComponent(waa[5],1056);
		AddVehicleComponent(waa[5],1156);
		AddVehicleComponent(waa[5],1157);
	    AddVehicleComponent(waa[5],1062);
	    AddVehicleComponent(waa[5],1059);
		AddVehicleComponent(waa[5],1010);
	    AddVehicleComponent(waa[5],1087);
	    AddVehicleComponent(waa[5],1146);
	    AddVehicleComponent(waa[5],1061);
	    ChangeVehiclePaintjob(waa[5],2);
    }

    if(vehicleid==rodneyt1)
    {
		AddVehicleComponent(rodneyt1,1010);
		AddVehicleComponent(rodneyt1,1080);
		AddVehicleComponent(rodneyt1,1087);
		SetVehicleNumberPlate(rodneyt1, "Rodney");
    }
    if(vehicleid==rodneyt2)
    {
		AddVehicleComponent(rodneyt2, 1010);
   		AddVehicleComponent(rodneyt2, 1080);
   		AddVehicleComponent(rodneyt2, 1087);
		SetVehicleNumberPlate(rodneyt2, "Rodney");
    }

    if(vehicleid == rodneyt3)
	{
		SetVehicleNumberPlate(rodneyt3, "Rodney");
		AddVehicleComponent(rodneyt3, 1010);
		AddVehicleComponent(rodneyt3, 1087);
	}

    if(vehicleid==rodneyt4)
    {
		AddVehicleComponent(rodneyt4, 1010);
   		AddVehicleComponent(rodneyt4, 1080);
   		AddVehicleComponent(rodneyt4, 1087);
		SetVehicleNumberPlate(rodneyt4, "Rodney");
    }

    if(vehicleid==BRL_005)
    {
  		AddVehicleComponent(BRL_005, 1010);
   		AddVehicleComponent(BRL_005, 1080);
   		AddVehicleComponent(BRL_005, 1087);
		SetVehicleNumberPlate(BRL_005, "Rodney");
	}

    if(vehicleid==bloodykocsi)
    {
		ChangeVehiclePaintjob(bloodykocsi,2);
		AddVehicleComponent(bloodykocsi, 1010);//nitro
   		AddVehicleComponent(bloodykocsi, 1084);//trance kerék
   		AddVehicleComponent(bloodykocsi, 1109);
   		AddVehicleComponent(bloodykocsi, 1113);
   		AddVehicleComponent(bloodykocsi, 1115);
   		AddVehicleComponent(bloodykocsi, 1119);
   		AddVehicleComponent(bloodykocsi, 1121);
		SetVehicleNumberPlate(bloodykocsi, "P0LICE");
    }
    if(vehicleid==bazsikocsi)
    {
		ChangeVehiclePaintjob(bazsikocsi,2);
		AddVehicleComponent(bazsikocsi, 1010);//nitro
   		AddVehicleComponent(bazsikocsi, 1084);//trance kerék
   		AddVehicleComponent(bazsikocsi, 1109);
   		AddVehicleComponent(bazsikocsi, 1113);
   		AddVehicleComponent(bazsikocsi, 1115);
   		AddVehicleComponent(bazsikocsi, 1119);
		AddVehicleComponent(bazsikocsi, 1121);
		SetVehicleNumberPlate(bazsikocsi, "Bazsi");
    }
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	return 1;
}

public OnPlayerText(playerid, text[])
{
	return 1;
}

stock CheckPoliceCar(vehid)
{
	new m = GetVehicleModel(vehid);
	return m == 432 || m == 601 || m == 497 || m == 523 || m == 427 || m == 490 || m == 528 || m == 596 || m == 597 || m == 598 || m == 599;
}

stock CheckArmyCar(vehid)
{
	return vehid == katonav[0] || vehid == katonav[1] || vehid == katonav[2] || vehid == katonav[3] || vehid == katonav[4] || vehid == katonav[5] || vehid == katonav[6];
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	new str[128];
    for(new i = 0; i < MAX_BUSINESS; i++)
    {
        if(IsPlayerInDynamicArea(playerid, bustexts[i]))
		{
	        format(query, sizeof(query), "SELECT Propertyname, Tulaj, Ar, Termeles, Osszeg FROM business WHERE ID = %d", i);
   			mysql_query(query);
			mysql_store_result();
			if(mysql_num_rows() != 0)
			{
			    mysql_fetch_row(linen);
			    new tarolo[64];
			    new tarolo2[24];
			    new tarolo3[3];
			    sscanf(linen, "p<|>s[64]s[24]ddd", tarolo, tarolo2, tarolo3[0], tarolo3[1], tarolo3[2]);
			    mysql_free_result();
			    if(!strcmp(tarolo2, "ELADO"))
			    {
			        if(IsPlayerInAnyVehicle(playerid)) return 1;
			        format(str, sizeof(str), "~r~Biznisz neve: %s~n~~y~Tulaja: Eladó~n~~p~Ár: %s$", tarolo, convertFormattedNumber(tarolo3[0], "."));
			        GameTextForPlayer(playerid, FixGameString(str), 4000, 4);
				}
				else if(strcmp(tarolo2, "ELADO"))
				{
    				if(IsPlayerInAnyVehicle(playerid)) return 1;
			        format(str, sizeof(str), "~r~Biznisz neve: %s~n~~y~Tulaja: %s~n~~p~Ár: %s$", tarolo, tarolo2, convertFormattedNumber(tarolo3[0], "."));
			        GameTextForPlayer(playerid, FixGameString(str), 4000, 4);
			        if(!strcmp(GetPlayerNameEx(playerid), tarolo2))
			        {
			            GivePlayerMoneyEx(playerid, tarolo3[2], "Biznisz nyereség");
			            format(query, sizeof(query), "UPDATE business SET Osszeg = 0 WHERE ID = %d", i);
			            mysql_query(query);
					}
				}
		    }
		}
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
    #if defined ZOMBIK
    if(playerid == INVALID_PLAYER_ID) return 1;
    if(IsPlayerNPC(playerid)) return 1;
	if(areaid == zzone)
	{
	    for(new i; i < MAX_ZOMBIE; i++)
		{
			if(zombi[i][tamadoid] == playerid)
			{
			    KillTimer(npctimer[i][playerid]);
			    zombi[i][tamadoid] = -1;
			    FCNPC_SetHealth(npc[i], 100);
			    if(npc[i] == npc[0]) FCNPC_GoTo(npc[i], NPC0_SX, NPC0_SY, NPC0_SZ, MOVE_TYPE_RUN, 4, true);
			    if(npc[i] == npc[1]) FCNPC_GoTo(npc[i], NPC1_SX, NPC1_SY, NPC1_SZ, MOVE_TYPE_RUN, 4, true);
			    if(npc[i] == npc[2]) FCNPC_GoTo(npc[i], NPC2_SX, NPC2_SY, NPC2_SZ, MOVE_TYPE_RUN, 4, true);
			    if(npc[i] == npc[3]) FCNPC_GoTo(npc[i], NPC3_SX, NPC3_SY, NPC3_SZ, MOVE_TYPE_RUN, 4, true);
			    if(npc[i] == npc[4]) FCNPC_GoTo(npc[i], NPC4_SX, NPC4_SY, NPC4_SZ, MOVE_TYPE_RUN, 4, true);
			    if(npc[i] == npc[5]) FCNPC_GoTo(npc[i], NPC5_SX, NPC5_SY, NPC5_SZ, MOVE_TYPE_RUN, 4, true);
			    if(npc[i] == npc[6]) FCNPC_GoTo(npc[i], NPC6_SX, NPC6_SY, NPC6_SZ, MOVE_TYPE_RUN, 4, true);
			    if(npc[i] == npc[7]) FCNPC_GoTo(npc[i], NPC7_SX, NPC7_SY, NPC7_SZ, MOVE_TYPE_RUN, 4, true);
			    if(npc[i] == npc[8]) FCNPC_GoTo(npc[i], NPC8_SX, NPC8_SY, NPC8_SZ, MOVE_TYPE_RUN, 4, true);
			    if(npc[i] == npc[9]) FCNPC_GoTo(npc[i], NPC9_SX, NPC9_SY, NPC9_SZ, MOVE_TYPE_RUN, 4, true);
			    /*if(npc[i] == npc[10]) FCNPC_GoTo(npc[i], NPC10_SX, NPC10_SY, NPC10_SZ, MOVE_TYPE_RUN, 4, true);
			    if(npc[i] == npc[11]) FCNPC_GoTo(npc[i], NPC11_SX, NPC11_SY, NPC11_SZ, MOVE_TYPE_RUN, 4, true);
			    if(npc[i] == npc[12]) FCNPC_GoTo(npc[i], NPC12_SX, NPC12_SY, NPC12_SZ, MOVE_TYPE_RUN, 4, true);
			    if(npc[i] == npc[13]) FCNPC_GoTo(npc[i], NPC13_SX, NPC13_SY, NPC13_SZ, MOVE_TYPE_RUN, 4, true);
			    if(npc[i] == npc[14]) FCNPC_GoTo(npc[i], NPC14_SX, NPC14_SY, NPC14_SZ, MOVE_TYPE_RUN, 4, true);
			    if(npc[i] == npc[15]) FCNPC_GoTo(npc[i], NPC15_SX, NPC15_SY, NPC15_SZ, MOVE_TYPE_RUN, 4, true);
			    if(npc[i] == npc[16]) FCNPC_GoTo(npc[i], NPC16_SX, NPC16_SY, NPC16_SZ, MOVE_TYPE_RUN, 4, true);
			    if(npc[i] == npc[17]) FCNPC_GoTo(npc[i], NPC17_SX, NPC17_SY, NPC17_SZ, MOVE_TYPE_RUN, 4, true);
			    if(npc[i] == npc[18]) FCNPC_GoTo(npc[i], NPC18_SX, NPC18_SY, NPC18_SZ, MOVE_TYPE_RUN, 4, true);
			    if(npc[i] == npc[19]) FCNPC_GoTo(npc[i], NPC19_SX, NPC19_SY, NPC19_SZ, MOVE_TYPE_RUN, 4, true);*/
			}
		}
	}
	#endif
	return 1;
}

#if defined ZOMBIK

public FCNPC_OnRespawn(npcid)
{
    for(new i; i < MAX_ZOMBIE; i++)
	{
		if(npcid == npc[i])
		{
		    for(new x; x < MAX_PLAYERS; x++)
	    	{
	    	    if(IsPlayerConnected(x))
	    	    {
		    		KillTimer(npctimer[i][x]);
				}
			}
		}
	}
	return 1;
}

public FCNPC_OnDeath(npcid, killerid, weaponid)
{
    new zstring[24];
	for(new i; i < MAX_ZOMBIE; i++)
	{
		if(npcid == npc[i])
		{
		    for(new x; x < MAX_PLAYERS; x++)
	    	{
	    	    if(IsPlayerConnected(x))
	    	    {
		    		KillTimer(npctimer[i][x]);
				}
			}
		    zombi[i][tamadoid] = -1;
		    format(zstring, sizeof(zstring), "npc%dkilled", i);
	 		SetTimer(zstring, 10000, 0);
	 		//SendClientMessage(killerid, COLOR_RED, "megöltél egy zombit");
		}
	}
	return 1;
}

public FCNPC_OnTakeDamage(npcid, damagerid, weaponid, bodypart, Float:health_loss)
{
	new zstring[24];
	for(new i; i < MAX_ZOMBIE; i++)
	{
		if(npcid == npc[i])
		{
		    if(IsPlayerInDynamicArea(damagerid, zzone))
		    {
		        new Float:zhealth = FCNPC_GetHealth(npc[i]);
	 			if(weaponid == WEAPON_M4) FCNPC_SetHealth(npc[i], zhealth+7);
	 			if(weaponid == WEAPON_DEAGLE) FCNPC_SetHealth(npc[i], zhealth+30);
	 			if(weaponid == WEAPON_AK47) FCNPC_SetHealth(npc[i], zhealth+7);
	 			if(weaponid == WEAPON_SHOTGSPA) FCNPC_SetHealth(npc[i], zhealth+20);

				if(weaponid == WEAPON_COLT45) FCNPC_SetHealth(npc[i], zhealth+5);
				//if(weaponid == WEAPON_GRENADE) FCNPC_SetHealth(npc[i], zhealth+20);
				if(weaponid == WEAPON_SNIPER) FCNPC_SetHealth(npc[i], zhealth+30);
				if(weaponid == WEAPON_SHOTGUN) FCNPC_SetHealth(npc[i], zhealth+25);
				if(weaponid == WEAPON_UZI) FCNPC_SetHealth(npc[i], zhealth+5);

				if(weaponid == WEAPON_SILENCED) FCNPC_SetHealth(npc[i], zhealth+10);
				//if(weaponid == WEAPON_SAWEDOFF) FCNPC_SetHealth(npc[i], zhealth+health_loss);
				if(weaponid == WEAPON_MP5) FCNPC_SetHealth(npc[i], zhealth+7);
				if(weaponid == WEAPON_TEC9) FCNPC_SetHealth(npc[i], zhealth+5);

				if(zombi[i][tamadoid] == -1)
				{
				    format(zstring, sizeof(zstring), "npc%d_timer", i);
				    npctimer[i][damagerid] = SetTimerEx(zstring, 500, 1, "i", damagerid);
				    zombi[i][tamadoid] = damagerid;
				}
			}
		}
	}
	return 1;
}

#endif

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	new str[128];
	if(fishing[playerid] == true)
	{
	    KillTimer(horgasztimer2[playerid]);
	    KillTimer(horgasztimer3[playerid]);
	    KillTimer(vizkozeltimer[playerid]);
		TogglePlayerControllable(playerid, 1);
		RemovePlayerAttachedObject(playerid, 9);
		fishing[playerid] = false;
		elkapni[playerid] = false;
		SendClientMessage(playerid, COLOR_GREEN, #HGOLD#"Horgászat befejezve.");
	}
	if(ispassenger == 0)
	{
	    if(vehicleid == questcar)
	    {
	        if(QuestID[playerid] == 3)
			{
		    	if(QuestPart[playerid] == 2)
		    	{
                    CreateQuestCP(playerid, -2135.8789,-239.7583,35.1584);
                    QuestInt[playerid] = 1;
                    TextDrawForPlayer(playerid, 5000, "Vidd el a jármûvet Johnnak.");
		    	}
			}
			else SendClientMessage(playerid, COLOR_RED, "HIBA: Ez a jármû küldetéstárgy, nem viheted el."), ClearAnimations(playerid);
	    }
	
	    // A vehicleid a jármû rendszerben elfoglalt azonosító, ami arra szolgál, hogy
	    // hivatkozni tudjuk rajta keresztül a jármûre.
		//if(vehicleid == 523 || vehicleid == 427 || vehicleid == 528 || vehicleid == 596 || vehicleid == 598 || vehicleid == 597 || vehicleid == 599 || vehicleid == 601)
		if(CheckPoliceCar(vehicleid))
		{
	    	if(cGetPlayerTeam(playerid) != TEAM_ZSARU)
	    	{
		   	 	ClearAnimations(playerid);
		    	SendClientMessage(playerid, COLOR_RED, "Nem vagy zsaru!");
  			}

		}
		if(vehicleid == rodneymotor || vehicleid == rodneymotor1 || vehicleid == rodneyt1 || vehicleid == rodneyt2 || vehicleid == rodneyt3 || vehicleid == rodneyt4 || vehicleid == BRL_005 || vehicleid == BRL_006)
			{
		        if(cGetPlayerTeam(playerid) != TEAM_RODNEYMUNKA)
		 		{
				 	SendClientMessage(playerid,COLOR_RED,"HIBA: Rodney-team jármûve!");
					ClearAnimations(playerid);
				}
			}
		if(vehicleid == hackerkocsi[0] || vehicleid == hackerkocsi[1] || vehicleid == hackerkocsi[2] || vehicleid == hackerkocsi[3] || vehicleid == hackerkocsi[4])
		{
	        if(cGetPlayerTeam(playerid) != TEAM_HACKER)
	 		{
			 	SendClientMessage(playerid,COLOR_RED,"HIBA: nem vagy hacker!");
				ClearAnimations(playerid);
			}
		}
		if(vehicleid == busz1 || vehicleid == busz2 || vehicleid == busz3)
		{
	        if(cGetPlayerTeam(playerid) != TEAM_BKV)
	 		{
			 	SendClientMessage(playerid,COLOR_RED,"HIBA: nem vagy az OBKK tagja!");
				ClearAnimations(playerid);
			}
		}
		/*if(vehicleid == drog[0] || vehicleid == drog[1] || vehicleid == drog[2] || vehicleid == drog[3] || vehicleid == drog[4])
		{
	        if(cGetPlayerTeam(playerid) != TEAM_TERRORISTA)
	 		{
			 	SendClientMessage(playerid,COLOR_RED,"HIBA: Nem vagy drogdíler!");
				ClearAnimations(playerid);
			}
		}*/
		for(new i; i < sizeof(katonav); i++)
		{
			if(vehicleid == katonav[i])
			{
			    if(cGetPlayerTeam(playerid) != TEAM_KATONA)
		 		{
				 	SendClientMessage(playerid,COLOR_RED,"HIBA: Nem vagy katona!");
					ClearAnimations(playerid);
					break;
				}
			}
		}
	}
	if(ispassenger == 0)
	{
		for(new i; i < MAX_SLOTS; i++)
		{
			if(vehicleid == carplay[i])
			{
  				new tarolo[24], tarolo2[24];
	    		format(query, sizeof(query), "SELECT Tulaj, Tarstulaj FROM cars WHERE slot = '%d'", i);
    			mysql_query(query);
		    	mysql_store_result();
		    	if(mysql_num_rows() != 0)
		    	{
					mysql_fetch_row(linen);
					sscanf(linen, "p<|>s[24]s[24]", tarolo, tarolo2);
					if(strcmp(tarolo, GetPlayerNameEx(playerid)))
					{
					    if(!strcmp(tarolo2, "Nincs"))
					    {
							ClearAnimations(playerid);
							format(str, sizeof(str), "Ez a jármû '%s' tulajdona! Te nem vezetheted!", tarolo);
							SendClientMessage(playerid, COLOR_GREY, str);
							return 1;
						}
					}
					else
					{
						format(query, sizeof(query), "UPDATE cars SET Date = NOW() WHERE slot = %d", i);
					 	mysql_query(query);
					 	return 1;
					}
					if(strcmp(tarolo, GetPlayerNameEx(playerid)) && strcmp(tarolo2, GetPlayerNameEx(playerid)))
					{
					    if(strcmp(tarolo2, "Nincs"))
					    {
							ClearAnimations(playerid);
							format(str, sizeof(str), "Ez a jármû '%s' és '%s' tulajdona! Te nem vezetheted!", tarolo, tarolo2);
							SendClientMessage(playerid, COLOR_GREY, str);
							return 1;
						}
						if(strfind(tarolo2, "|", true) != -1)
						{
							SendClientMessageToAll(COLOR_RED, "A szerver bugot észlelt! A szerver 30 másodperc mulva restartol!");
							SetTimer("szerverresi", 30000, 0);
							return 1;
						}
					}
					else
					{
						format(query, sizeof(query), "UPDATE cars SET Date = NOW() WHERE slot = %d", i);
      					mysql_query(query);
                        return 1;
					}
					mysql_free_result();
				}
			}
		}
		for(new i; i < MAX_CCSLOTS; i++)
	    {
	        if(vehicleid == clancars[i])
	        {
		        format(query, sizeof(query), "SELECT ClanTulaj FROM clancars WHERE slot = %d", i);
    			mysql_query(query);
				mysql_store_result();
				if(mysql_num_rows() != 0)
				{
				    mysql_fetch_row(linen);
					new tulaj[30];
					sscanf(linen, "s[30]", tulaj);
					mysql_free_result();
					if(strcmp(GetPVarStringEx(playerid, "Clan"), tulaj))
					{
					    ClearAnimations(playerid);
						SendFormatMessage(playerid, COLOR_ERROR, "Ez a jármû a(z) '%s' klán tulajdona!", tulaj);
						return 1;
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(vehicleid == questcar) RemoveQuestCP(playerid);
	if(GetVehicleModel(vehicleid) == 432) DestroyVehicle(vehicleid);
	if(GetVehicleModel(vehicleid) == 425) DestroyVehicle(vehicleid);
	if(GetVehicleModel(vehicleid) == 520) DestroyVehicle(vehicleid);
	#if defined MOTOR_SYSTEM
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
        if(IsVehicleType(vehicleid))
	    {
		    new engine, lights, alarm, doors, bonnet, boot, objective;
		    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, 0, lights, alarm, doors, bonnet, boot, objective);
		}
	}
	#endif
	
	if(cGetPlayerTeam(playerid) == TEAM_HOTDOG)
	{
	    if(GetVehicleModel(vehicleid) == 588)
	    {
			SetPVarInt(playerid, "hotdogmunka", 0);
			DisablePlayerCheckpoint(playerid);
		}
	}
	/*if(cGetPlayerTeam(playerid) == TEAM_TERRORISTA)
	{
	    if(GetVehicleModel(vehicleid) == 609)
	    {
			SetPVarInt(playerid, "drogmunka", 0);
			DisablePlayerCheckpoint(playerid);
		}
	}*/
	if(cGetPlayerTeam(playerid) == TEAM_BANKOS)
	{
	    if(GetVehicleModel(vehicleid) == 428)
	    {
	        SetPVarInt(playerid, "Bankoskuldi", 0);
	        DisablePlayerCheckpoint(playerid);
	    }
	}
	if(cGetPlayerTeam(playerid) == TEAM_UTTISZTITO)
	{
	    if(GetVehicleModel(vehicleid) == 574)
	    {
			DisablePlayerCheckpoint(playerid);
		}
	}
	if(cGetPlayerTeam(playerid) == TEAM_FARMER)
	{
	    if(GetVehicleModel(vehicleid) == 532 || GetVehicleModel(vehicleid) == 531)
	    {
	        DisablePlayerCheckpoint(playerid);
	    }
	}
	if(PlayerInfo[playerid][ishidrauliking] == 1)
	{
	    KillTimer(htimer[playerid]);
		Hidraulics[playerid][htime] = 0;
		Hidraulics[playerid][hscore] = 0;
		Hidraulics[playerid][hstarted] = 0;
		Hidraulics[playerid][hneedkey] = 0;
		DisablePlayerCheckpoint(playerid);
        SetHidrCP[playerid]=-1;
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(newstate == PLAYER_STATE_DRIVER)
	{
		GiveAchievement(playerid, "vehdrives", 1);
	    if(GetAchievement(playerid, "vehdrives") == 200)
	    {
			UnlockAchievement(playerid, "hud:skipicon", "200 jármû vezetése", "Jármûvezetés");
			GiveAchievement(playerid, "vehdrives", 1);
			GiveEXP(playerid, VEHDRIVES200_EXP);
	    }
	    else if(GetAchievement(playerid, "vehdrives") == 500)
	    {
			UnlockAchievement(playerid, "wheels:wheel_saloon64", "500 jármû vezetése", "Jármûvezetés");
			GiveAchievement(playerid, "vehdrives", 1);
			GiveEXP(playerid, VEHDRIVES500_EXP);
	    }
	}
	if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
 		TextDrawHideForPlayer(playerid, Speedo[playerid]);
 		#if defined FUEL_SYSTEM
 		HideProgressBarForPlayer(playerid, fuelbar[playerid]);
 		TextDrawHideForPlayer(playerid, fuel[playerid]);
 		#endif
	}
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		TextDrawShowForPlayer(playerid, Speedo[playerid]);
		#if defined FUEL_SYSTEM
		if(IsVehicleType(GetPlayerVehicleID(playerid)))
		{
		    new fuelstr[50];
   			if(GetAllVehicleLevel(GetPlayerVehicleID(playerid)) >= 0)
			{
			    SetProgressBarMaxValue(fuelbar[playerid], fuellevel[GetAllVehicleLevel(GetPlayerVehicleID(playerid))][maxfuelvalue]);
				format(fuelstr, sizeof(fuelstr), "Liter: %d/%d", fuellevel[GetAllVehicleLevel(GetPlayerVehicleID(playerid))][maxfuelvalue], fuelvalue[GetPlayerVehicleID(playerid)]);
			}
			else
			{
				SetProgressBarMaxValue(fuelbar[playerid], 50);
				format(fuelstr, sizeof(fuelstr), "Liter: 50/%d", fuelvalue[GetPlayerVehicleID(playerid)]);
			}
	    	SetProgressBarValue(fuelbar[playerid], fuelvalue[GetPlayerVehicleID(playerid)]);
			UpdateProgressBar(fuelbar[playerid], playerid);
		    TextDrawSetString(fuel[playerid], fuelstr);
		    
		    ShowProgressBarForPlayer(playerid, fuelbar[playerid]);
		    TextDrawShowForPlayer(playerid, fuel[playerid]);
		}
		#endif
	}
	
	if(newstate == PLAYER_STATE_DRIVER)
	{
	    if(cGetPlayerTeam(playerid) == TEAM_HOTDOG)
	    {
	        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 588)
	        {
	            SetPVarInt(playerid, "hotdogmunka", 1);
	            SendClientMessage(playerid, COLOR_HOTDOG, "Menj a CP-be és vedd fel a hotdogot hogy kiszállíthasd!");
	            DisablePlayerCheckpoint(playerid);
	            SetPlayerCheckpoint(playerid, -2328.5940,-172.2441,35.2236, 4);
			}
		}
		/*if(cGetPlayerTeam(playerid) == TEAM_TERRORISTA)
		{
		    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 609)
		    {
		        SetPVarInt(playerid, "drogmunka", 1);
		        SendClientMessage(playerid, COLOR_TERRORISTA, "Menj a CP-be és vedd fel a drogot hogy kiszállíthasd!");
		        DisablePlayerCheckpoint(playerid);
		        SetPlayerCheckpoint(playerid, -2265.6042,-139.4614,35.3143, 4);
		    }
		}*/
		if(cGetPlayerTeam(playerid) == TEAM_BANKOS)
		{
		    if(GetPVarInt(playerid, "Bankoskuldi") == 1)
		    {
		        if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 428)
		        {
		            SetPVarInt(playerid, "Bankoskuldi", 0);
		            DisablePlayerCheckpoint(playerid);
		        }
		    }
		}
		if(cGetPlayerTeam(playerid) == TEAM_UTTISZTITO)
		{
		    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 574)
		    {
			    TextDrawForPlayer(playerid, 1000*5, "Elkezdted az utakat tisztítani, menj a ~r~Checkpoint~w~-okba!");
			    SendClientMessage(playerid, COLOR_WHITE, "Ha be akarod fejezni az úttisztítást, szállj ki a jármûbõl!");
	      		new rand = random(sizeof(UtCP));
				SetPlayerCheckpoint(playerid, UtCP[rand][0], UtCP[rand][1], UtCP[rand][2], 4);
			}
		}
	}
	return 1;
}

CMD:quest4(playerid)
{
	if(GetPVarInt(playerid, "Szint") < 4) return SendClientMessage(playerid, COLOR_RED, "Ehhez a parancshoz legalább 4-es szintûnek kell lenned.");
    format(query, sizeof(query), "SELECT * FROM quests WHERE Name = '%s' AND QuestID = 4", GetPlayerNameEx(playerid));
	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() == 0)
	{
        format(query, sizeof(query), "INSERT INTO quests (ID, Name, QuestID, QuestName, QuestPart) VALUES (0, '%s', 4, 'Raboljunk!', 0)", GetPlayerNameEx(playerid));
		mysql_query(query);
		SendClientMessage(playerid, COLOR_GREEN, "4. küldetés hozzáadva.");
	}
	else SendClientMessage(playerid, COLOR_RED, "Már hozzáadtad a küldetéseidhez a 4. küldetést.");
	return 1;
}

CMD:crecp(playerid)
{
    ShowPlayerCheckpoint(playerid, questCP[playerid], true);
	return 1;
}

CMD:questvar(playerid)
{
	SendFormatMessage(playerid, COLOR_RED, "QuestID: %d", QuestID[playerid]);
	SendFormatMessage(playerid, COLOR_RED, "QuestPart: %d", QuestPart[playerid]);
	return 1;
}

public OnPlayerEnterCheckPointEx(playerid, checkpoint)
{
	if(checkpoint == questCP[playerid])
	{
		if(QuestID[playerid] == 1)
		{
		    if(QuestPart[playerid] == 1)
		    {
			    SetQuestDialogState(playerid, true);
			    SetQuestCamera(playerid, -2141.0256,-250.4976,43.5156, -2143.4148,-244.5622,36.5156);
			    DialogText(playerid, 3000, "~r~", GetPlayerNameEx(playerid), "Hahó!");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 1500, 0, "i", playerid);
			    DialogDet[playerid] = 1;
	   		}
	   		else if(QuestPart[playerid] == 3)
	   		{
   		    	SetQuestDialogState(playerid, true);
			    HideQuestCP(playerid);
			 	DialogText(playerid, 3000, "~r~", "Megbízó", "Alkalmasnak bizonyulsz. Még késõbb felkereslek és adok munkát a számodra. Ja és... Üdv a városban!");
			 	DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 3000, 0, "i", playerid);
	   		}
		}
		else if(QuestID[playerid] == 2)
		{
		    if(QuestPart[playerid] == 1)
		    {
		        SetQuestDialogState(playerid, true);
		        SetQuestCamera(playerid, -2141.0256,-250.4976,43.5156, -2143.4148,-244.5622,36.5156);
			    DialogText(playerid, 3000, "~r~", GetPlayerNameEx(playerid), "Hahóó! Itt vagyok!");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 1500, 0, "i", playerid);
			    DialogDet[playerid] = 1;
		    }
		    else if(QuestPart[playerid] == 2)
		    {
		        SetQuestDialogState(playerid, true);
		        SetQuestCamera(playerid, -2947.5278,496.1544,15.4273, -2947.7065,484.1356,4.4398);
		        TextDrawForPlayer(playerid, 10000, "Várj a ~y~vevõre.");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 10000, 0, "i", playerid);
			    DialogDet[playerid] = 1;
		    }
		    else if(QuestPart[playerid] == 3)
		    {
				#if defined ACTORS
		        CreateQuestActor();
		        #endif
		        SetQuestDialogState(playerid, true);
		        SetQuestCamera(playerid, -2141.0256,-250.4976,43.5156, -2143.4148,-244.5622,36.5156);
		        DialogText(playerid, 3000, "~r~", "John", "Vissza is tértél?");
		        DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 3000, 0, "i", playerid);
		      	DialogDet[playerid] = 1;
		    }
		}
		else if(QuestID[playerid] == 3)
		{
		    if(QuestPart[playerid] == 1)
		    {
		        SetQuestDialogState(playerid, true);
		        SetQuestCamera(playerid, -2141.0256,-250.4976,43.5156, -2143.4148,-244.5622,36.5156);
		        DialogText(playerid, 3000, "~r~", GetPlayerNameEx(playerid), "Visszatértem!");
		        DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 1500, 0, "i", playerid);
			    DialogDet[playerid] = 1;
		    }
			if(QuestPart[playerid] == 2)
			{
			    if(QuestInt[playerid] == 1)
			    {
				    if(IsPlayerInVehicle(playerid, questcar))
				    {
				        GivePlayerMoneyEx(playerid, 200000, "Küldetés");
					    GiveEXP(playerid, QUEST3_EXP);
					    EndQuest(playerid, QuestID[playerid]);
					    PlayerPlaySound(playerid, 1185, 0, 0, 0);
					    SetTimerEx("MusicEndTimer", 10000, 0, "i", playerid);
				        SetVehicleToRespawn(questcar);
				    }
				    else SendClientMessage(playerid, COLOR_RED, "Hol a jármû?");
				}
			}
		}
		else if(QuestID[playerid] == 4)
		{
		    if(QuestPart[playerid] == 1)
		    {
			    #if defined ACTORS
			    CreateQuestActor();
				#endif
			    SetQuestDialogState(playerid, true);
			    SetQuestCamera(playerid, -2141.0256,-250.4976,43.5156, -2143.4148,-244.5622,36.5156);
			    DialogText(playerid, 3000, "~r~", GetPlayerNameEx(playerid), "Üdv! Kéne meló.");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 1500, 0, "i", playerid);
			    DialogDet[playerid] = 1;
			}
			if(QuestPart[playerid] == 3)
		    {
		    	#if defined ACTORS
                CreateQuestActor();
                #endif
		        SetQuestDialogState(playerid, true);
		        SetQuestCamera(playerid, -2141.0256,-250.4976,43.5156, -2143.4148,-244.5622,36.5156);
		        DialogText(playerid, 5000, "~r~", GetPlayerNameEx(playerid), "Megvolnék. Mivel a pénzt nem kéred, megkaphatnám a fizettségemet?");
		        DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 5000, 0, "i", playerid);
		      	DialogDet[playerid] = 1;
		    }
		}
	}
	return 1;
}

forward QuestTimerAll(playerid, questid, integer);
public QuestTimerAll(playerid, questid, integer)
{
	if(questid == 4)
	{
		if(integer == 0) TextDrawForPlayer(playerid, 5000, "Rabolj ki ~y~10 boltot~w~.");
	}
	if(questid == 3)
	{
	    if(integer == 0)
	    {
		    TextDrawForPlayer(playerid, 5000, "Menj a ~r~dokkokhoz ~w~ és hozd el a ~y~Phoenix típusú ~w~jármûvet.");
		    SetTimerEx("QuestTimerAll", 5000, 0, "iii", playerid, 2, 1);
		}
		if(integer == 1)
		{
		    TextDrawForPlayer(playerid, 5000, "A dokkok a Solain Industriessel szemben van.");
		}
	}
	if(questid == 2)
	{
		if(integer == 0)
		{
	    	TextDrawForPlayer(playerid, 5000, "Menj a kikötõbe és találkozz a ~y~vevõvel.");
	    	SetTimerEx("QuestTimerAll", 5000, 0, "iii", playerid, 2, 1);
		}
		if(integer == 1)
		{
	    	TextDrawForPlayer(playerid, 5000, "Ha nem jelenne meg a checkpoint, írd be a ~y~/questcont~w~ parancsot.");
		}
	}
}

forward QuestTimerDialog(playerid);
public QuestTimerDialog(playerid)
{
	if(QuestID[playerid] == 4)
	{
		if(QuestPart[playerid] == 1)
		{
		    if(DialogDet[playerid] == 1)
		    {
		        DialogText(playerid, 3000, "~r~", "John", "Pont jókor jöttél! Tudok neked egy remek melót!");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 3000, 0, "i", playerid);
			    DialogDet[playerid]++;
		    }
		    else if(DialogDet[playerid] == 2)
		    {
		        DialogText(playerid, 5000, "~r~", GetPlayerNameEx(playerid), "És mi lenne az?");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 2500, 0, "i", playerid);
			    DialogDet[playerid]++;
		    }
		    else if(DialogDet[playerid] == 3)
		    {
		        DialogText(playerid, 5000, "~r~", "John", "Rablás! Azt szeretném, ha kirabolnál nekem 10 boltot.");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 3000, 0, "i", playerid);
			    DialogDet[playerid]++;
		    }
		    else if(DialogDet[playerid] == 4)
		    {
		        DialogText(playerid, 5000, "~r~", GetPlayerNameEx(playerid), "Rablás? És mi van, ha elkapnak?");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 3000, 0, "i", playerid);
			    DialogDet[playerid]++;
		    }
		    else if(DialogDet[playerid] == 5)
		    {
		        DialogText(playerid, 5000, "~r~", "John", "Hát... Ne kapjanak el. Ha megcsinálod nekem ezt, megtarthatod a pénzt és még fizettséget is kapsz!");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 5000, 0, "i", playerid);
			    DialogDet[playerid]++;
		    }
		    else if(DialogDet[playerid] == 6)
		    {
		        DialogText(playerid, 5000, "~r~", GetPlayerNameEx(playerid), "Érdekesen hangzik... De ha megtarthatom a pénzt, akkor miért kell kirabolnom õket?");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 5000, 0, "i", playerid);
			    DialogDet[playerid]++;
		    }
		    else if(DialogDet[playerid] == 7)
		    {
		        DialogText(playerid, 5000, "~r~", "John", "Ezt nem árulhatom el neked, sajnálom.");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 3000, 0, "i", playerid);
			    DialogDet[playerid]++;
		    }
		    else if(DialogDet[playerid] == 8)
		    {
		        #if defined ACTORS
          		DestroyQuestActor();
          		#endif
		        DialogText(playerid, 5000, "~r~", GetPlayerNameEx(playerid), "Rendben, legyen. Raboljunk!");
		        SetQuestDialogState(playerid, false);
		        SetQuestPart(playerid, 4, 2);
			    SetTimerEx("QuestTimerAll", 5000, 0, "iii", playerid, 4, 0);
		    }
		}
		if(QuestPart[playerid] == 3)
		{
		    if(DialogDet[playerid] == 1)
		    {
		        DialogText(playerid, 5000, "~r~", "John", "Persze, itt van.");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 3000, 0, "i", playerid);
			    DialogDet[playerid]++;
		    }
		    else if(DialogDet[playerid] == 2)
		    {
			    DialogText(playerid, 3000, "~r~", GetPlayerNameEx(playerid), "Kösz.");
			    SetQuestDialogState(playerid, false);
			    QuestInt[playerid] = 0;
			    GivePlayerMoneyEx(playerid, 250000, "Küldetés");
			    GiveEXP(playerid, QUEST4_EXP);
			    EndQuest(playerid, QuestID[playerid]);
			    PlayerPlaySound(playerid, 1185, 0, 0, 0);
			    SetTimerEx("MusicEndTimer", 10000, 0, "i", playerid);
		    }
		}
	}
	if(QuestID[playerid] == 3)
	{
	    if(DialogDet[playerid] == 1)
	    {
	        #if defined ACTORS
	        CreateQuestActor();
			#endif
	        DialogText(playerid, 3000, "~r~", "John", " Remek. Rögtön a lényegre térek.");
		    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 2000, 0, "i", playerid);
		    DialogDet[playerid]++;
	    }
	    else if(DialogDet[playerid] == 2)
	    {
	        DialogText(playerid, 5000, "~r~", "John", "Most elfoglalt vagyok, de nem rég érkezett egy autó a dokkokhoz. Egy külföldi barátomtól vettem. Elhoznád nekem?");
		    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 5000, 0, "i", playerid);
		    DialogDet[playerid]++;
	    }
	    else if(DialogDet[playerid] == 3)
	    {
	        DialogText(playerid, 5000, "~r~", GetPlayerNameEx(playerid), "Persze");
		    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 1500, 0, "i", playerid);
		    DialogDet[playerid]++;
	    }
	    else if(DialogDet[playerid] == 4)
	    {
	        DialogText(playerid, 5000, "~r~", "John", "A dokkok a ~r~Solain Industriessel szemben~w~ van.~n~Egy ~y~Phoenix típusú~w~ barna jármûvet keress fehér csíkkal.");
		    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 5000, 0, "i", playerid);
		    DialogDet[playerid]++;
	    }
	    else if(DialogDet[playerid] == 5)
	    {
	        #if defined ACTORS
	        DestroyQuestActor();
	        #endif
	        DialogText(playerid, 5000, "~r~", GetPlayerNameEx(playerid), "Meglesz.");
		    SetQuestDialogState(playerid, false);
		    SetQuestPart(playerid, 3, 2);
		    SetTimerEx("QuestTimerAll", 5000, 0, "iii", playerid, 3, 0);
	    }
	}
	if(QuestID[playerid] == 2)
	{
	    if(QuestPart[playerid] == 1)
	    {
			if(DialogDet[playerid] == 1)
			{
			    DialogText(playerid, 3000, "~r~", "Megbízó", "Persze. Máris jövök.");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 5000, 0, "i", playerid);
			    DialogDet[playerid]++;
			}
			else if(DialogDet[playerid] == 2)
			{
			    #if defined ACTORS
			    CreateQuestActor();
			    #endif
			    DialogText(playerid, 5000, "~r~", "Megbízó", "Nos.. Lenne egy munkám a számodra. Egy könnyed munka..");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 5000, 0, "i", playerid);
			    DialogDet[playerid]++;
			}
			else if(DialogDet[playerid] == 3)
			{
			    DialogText(playerid, 3000, "~r~", GetPlayerNameEx(playerid), "Hallgatlak.");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 3000, 0, "i", playerid);
			    DialogDet[playerid]++;
			}
			else if(DialogDet[playerid] == 4)
			{
			    DialogText(playerid, 4000, "~r~", "Megbízó", "Itt van ez a csomag. Tessék.~n~ ~y~Odaadja");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 4000, 0, "i", playerid);
			    DialogDet[playerid]++;
			}
			else if(DialogDet[playerid] == 5)
			{
			    DialogText(playerid, 4000, "~r~", "Megbízó", "~y~Ezt a csomagot~w~ vidd el a kikötõbe és várj az átvevõre.");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 4000, 0, "i", playerid);
			    DialogDet[playerid]++;
			}
			else if(DialogDet[playerid] == 6)
			{
                #if defined ACTORS
			    DestroyQuestActor();
			    #endif
			    DialogText(playerid, 3000, "~r~", GetPlayerNameEx(playerid), "Meglesz.");
                SetQuestDialogState(playerid, false);
			    SetQuestPart(playerid, 2, 2);
			    CreateQuestCP(playerid, -2948.1531,480.1698,4.8935);
			    SetTimerEx("QuestTimerAll", 3000, 0, "iii", playerid, 2, 0);
			}
		}
		if(QuestPart[playerid] == 2)
		{
		    if(DialogDet[playerid] == 1)
			{
			    #if defined ACTORS
			    CreateQuestActor("vevo");
			    #endif
			    DialogText(playerid, 4000, "~r~", "Vevõ", "Pszt... Héj... Te vagy John futárja?");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 4000, 0, "i", playerid);
			    DialogDet[playerid]++;
			}
			else if(DialogDet[playerid] == 2)
			{
			    DialogText(playerid, 3000, "~r~", GetPlayerNameEx(playerid), "John? Persze... Én vagyok.");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 3000, 0, "i", playerid);
			    DialogDet[playerid]++;
			}
			else if(DialogDet[playerid] == 3)
			{
			    DialogText(playerid, 4000, "~r~", "Vevõ", "Tessék a pénz. Add a csomagot aztán szívódj fel...");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 4000, 0, "i", playerid);
			    DialogDet[playerid]++;
			}
			else if(DialogDet[playerid] == 4)
			{
			    #if defined ACTORS
				DestroyQuestActor("vevo");
				#endif
			    TextDrawForPlayer(playerid, 5000, "Küldetés végrehajtva. Menj vissza a ~y~bázisra.");
			    SetQuestDialogState(playerid, false);
			    SetQuestPart(playerid, 2, 3);
       			CreateQuestCP(playerid, -2145.5195,-246.4585,36.5156);
			}
		}
		if(QuestPart[playerid] == 3)
		{
		    if(DialogDet[playerid] == 1)
			{
			    DialogText(playerid, 3000, "~r~", GetPlayerNameEx(playerid), "Persze. Itt a pénz.");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 3000, 0, "i", playerid);
			    DialogDet[playerid]++;
			}
			else if(DialogDet[playerid] == 2)
			{
			    DialogText(playerid, 3000, "~r~", "John", "Tartsd meg. Kösz a szállítást.");
			    SetQuestDialogState(playerid, false);
			    QuestInt[playerid] = 0;
			    GivePlayerMoneyEx(playerid, 150000, "Küldetés");
			    GiveEXP(playerid, QUEST2_EXP);
			    EndQuest(playerid, QuestID[playerid]);
			    PlayerPlaySound(playerid, 1185, 0, 0, 0);
			    SetTimerEx("MusicEndTimer", 10000, 0, "i", playerid);
			}
		}
	}
    else if(QuestID[playerid] == 1)
	{
	    if(QuestPart[playerid] == 1)
	    {
	        if(DialogDet[playerid] == 1)
	        {
			    DialogText(playerid, 3000, "~r~", GetPlayerNameEx(playerid), "Van itt valaki?");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 1500, 0, "i", playerid);
			    DialogDet[playerid]++;
	        }
	        else if(DialogDet[playerid] == 2)
	        {
	            DialogText(playerid, 3000, "~r~", "Megbízó", "Itt vagyok. Várj egy kicsit.");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 5000, 0, "i", playerid);
			    DialogDet[playerid]++;
	        }
	        else if(DialogDet[playerid] == 3)
	        {
	            #if defined ACTORS
	            CreateQuestActor();
				#endif
	            DialogText(playerid, 3500, "~r~", "Megbízó", "Üdv. Kaptunk egy fülest rólad, hogy most érkeztél a városba és vállalsz szállítást.");
				DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 3500, 0, "i", playerid);
				DialogDet[playerid]++;
	        }
	        else if(DialogDet[playerid] == 4)
	        {
			    DialogText(playerid, 3000, "~r~", GetPlayerNameEx(playerid), "Hát... Ez nem így van.");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 2000, 0, "i", playerid);
				DialogDet[playerid]++;
	        }
	        else if(DialogDet[playerid] == 5)
	        {
			    DialogText(playerid, 3000, "~r~", "Megbízó", "Nem?! Akkor félreinformáltak minket. Nem baj. Ha már itt vagy legyél hasznunkra.");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 3000, 0, "i", playerid);
				DialogDet[playerid]++;
	        }
	        else if(DialogDet[playerid] == 6)
	        {
	            DialogText(playerid, 5000, "~r~", "Megbízó", "Tanulj bele a szakmába. Kint az udvaron találsz kamionokat. Szállíts le 5 rakományt és gyere vissza ide.");
			    DialogTimer[playerid] = SetTimerEx("QuestTimerDialog", 5000, 0, "i", playerid);
				DialogDet[playerid]++;
	        }
	        else if(DialogDet[playerid] == 7)
	        {
	            #if defined ACTORS
	            DestroyQuestActor();
	            #endif
			    DialogText(playerid, 3000, "~r~", GetPlayerNameEx(playerid), "Meglesz fõnök.");
				SetQuestDialogState(playerid, false);
			    SetQuestPart(playerid, 1, 2);
			    QuestInt[playerid] = 0;
	        }
		}
		if(QuestPart[playerid] == 3)
		{
		    DialogText(playerid, 3000, "~r~", GetPlayerNameEx(playerid), "Persze.");
		    SetQuestDialogState(playerid, false);
		    QuestInt[playerid] = 0;
		    GivePlayerMoneyEx(playerid, 300000, "Küldetés");
		    GiveEXP(playerid, QUEST1_EXP);
		    EndQuest(playerid, QuestID[playerid]);
		    PlayerPlaySound(playerid, 1185, 0, 0, 0);
		    SetTimerEx("MusicEndTimer", 10000, 0, "i", playerid);
		}
	}
}

forward MusicEndTimer(playerid);
public MusicEndTimer(playerid)
{
    PlayerPlaySound(playerid, 1085, 0, 0, 0);
    PlayerPlaySound(playerid,1063,0.0,0.0,0.0);
}

public OnPlayerEnterCheckpoint(playerid)
{
    GangOnPlayerEnterCheckpoint(playerid);

	if(cGetPlayerTeam(playerid) == TEAM_HOTDOG)
	{
	    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 588)
	    {
		    if(GetPVarInt(playerid, "hotdogmunka") == 1)
		    {
		        SetPVarInt(playerid, "hotdogmunka", 2);
			    DisablePlayerCheckpoint(playerid);
			    SendClientMessage(playerid, COLOR_HOTDOG, "Felvetted a hotdogokat. Most szállítsd ki õket!");
			    new rand = random(sizeof(hotdogcp));
    			SetPlayerCheckpoint(playerid, hotdogcp[rand][0], hotdogcp[rand][1], hotdogcp[rand][2], 4);
			}
			else if(GetPVarInt(playerid, "hotdogmunka") == 2)
			{
			    DisablePlayerCheckpoint(playerid);
				GivePlayerMoneyEx(playerid, 40000, "Hotdog munka");
				GiveEXP(playerid, HOTDOG_EXP);
			    SendClientMessage(playerid, COLOR_HOTDOG, "Kiszállítottad a hotdogot és megkaptad a 40.000$-t!");
			    SendClientMessage(playerid, COLOR_HOTDOG, "Menj vissza az étterembe és vegyed fel a következõ adagot!");
			    SetPVarInt(playerid, "hotdogmunka", 1);
			    SetPlayerCheckpoint(playerid, -2328.5940,-172.2441,35.2236, 4);
			}
		}
	}
	if(cGetPlayerTeam(playerid) == TEAM_UTTISZTITO)
	{
	    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 574)
	    {
			new rand = random(sizeof(UtCP));
			new randmoney = 4000+random(6000);
			SetPlayerCheckpoint(playerid, UtCP[rand][0],UtCP[rand][1],UtCP[rand][2], 4);
			GivePlayerMoneyEx(playerid, randmoney, "Úttisztító munka");
			GiveEXP(playerid, UTTISZTITO_EXP);
		}
	}
	/*if(cGetPlayerTeam(playerid) == TEAM_TERRORISTA)
	{
	    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 609)
	    {
	        if(GetPVarInt(playerid, "drogmunka") == 1)
	        {
	            SetPVarInt(playerid, "drogmunka", 2);
	            DisablePlayerCheckpoint(playerid);
	            SendClientMessage(playerid, COLOR_TERRORISTA, "Felvetted a szállítmányt! Most szállítsd ki a drogot!");
                new rand = random(sizeof(drogcp));
    			SetPlayerCheckpoint(playerid, drogcp[rand][0], drogcp[rand][1], drogcp[rand][2], 4);
			}
	        else if(GetPVarInt(playerid, "drogmunka") == 2)
	        {
	            DisablePlayerCheckpoint(playerid);
	            GivePlayerMoneyEx(playerid, 150000);
	            SendClientMessage(playerid, COLOR_TERRORISTA, "Kiszállítottad a drogot! Megkaptad a 150.000$ fizetést!");
	            SendClientMessage(playerid, COLOR_TERRORISTA, "Menj vissza a bázisra hogy felvedd a következõ szállítmányt!");
	            SetPVarInt(playerid, "drogmunka", 1);
		        SetPlayerCheckpoint(playerid, -2265.6042,-139.4614,35.3143, 4);
	        }
	    }
	}*/
	if(cGetPlayerTeam(playerid) == TEAM_BANKOS && GetPVarInt(playerid, "Bankoskuldi") == 1)
	{
	    if(IsPlayerInSecuricar(playerid) == 0) return SendClientMessage(playerid, COLOR_BANKOS, "HIBA: A pénzszállító autóban kéne lenned!");

		if(GetPVarInt(playerid, "BankosTP") <= 20) GivePlayerMoneyEx(playerid,10000, "Bankos munka");
        else if(GetPVarInt(playerid, "BankosTP") <= 40) GivePlayerMoneyEx(playerid,20000, "Bankos munka");
        else if(GetPVarInt(playerid, "BankosTP") <= 60) GivePlayerMoneyEx(playerid,30000, "Bankos munka");
        else if(GetPVarInt(playerid, "BankosTP") <= 80) GivePlayerMoneyEx(playerid,40000, "Bankos munka");
        else if(GetPVarInt(playerid, "BankosTP") <= 200) GivePlayerMoneyEx(playerid,50000, "Bankos munka");
        else if(GetPVarInt(playerid, "BankosTP") <= 20000) GivePlayerMoneyEx(playerid,60000, "Bankos munka");
        GiveEXP(playerid, BANKOS_EXP);
        SetPVarInt(playerid, "BankosTP", GetPVarInt(playerid, "BankosTP")+1);
        new str[64];
        format(str, sizeof(str), "~g~+ Bankos TP (%d TP)", GetPVarInt(playerid, "BankosTP"));
		TextDraw2ForPlayer(playerid,6000,str);
		SetPVarInt(playerid, "Bankoskuldi", 0);
		DisablePlayerCheckpoint(playerid);
	}

	if(cGetPlayerTeam(playerid) == TEAM_RABLO && GetPVarInt(playerid, "Rablokuldi") == 1)
	{
	    if(IsPlayerInFurgon(playerid) == 0) return SendClientMessage(playerid, COLOR_BANKOS, "HIBA: A furgonban kéne lenned!");
		SendClientMessage(playerid, COLOR_RABLO, "Várnod kell egy percet a rablás elvégzésére!");
		SetTimerEx("Rablas", 1*60*1000, false, "i", playerid);
		DisablePlayerCheckpoint(playerid);
	}

	if(cGetPlayerTeam(playerid) == TEAM_RABLO && GetPVarInt(playerid, "Rablokuldi") == 2)
	{
	    if(IsPlayerInFurgon(playerid) == 0) return SendClientMessage(playerid, COLOR_BANKOS, "HIBA: A furgonban kéne lenned!");
		GivePlayerMoneyEx(playerid,40000, "Rabló munka");
		GiveEXP(playerid, RABLO_EXP);
		SetPVarInt(playerid, "RabloTP", GetPVarInt(playerid, "RabloTP")+5);
		TextDraw2ForPlayer(playerid,6000,"~g~+5 Rabló TP");
		DisablePlayerCheckpoint(playerid);
	}
	if(cGetPlayerTeam(playerid) == TEAM_KAMIONOS)
	{
		if(GetPVarInt(playerid, "Kamionkuldi") == 1)
		{
			if(IsPlayerInKamion(playerid) == 0) return SendClientMessage(playerid, COLOR_KAMIONOS, "HIBA: A kamionban kéne lenned!");
			if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_KAMIONOS, "HIBA: Hol az utánfutó?");
			if(GetPVarInt(playerid, "KamhosszuTP") <= 10) GivePlayerMoneyEx(playerid, 90000, "Kamion munka");
			else if(GetPVarInt(playerid, "KamhosszuTP") <= 30) GivePlayerMoneyEx(playerid, 100000, "Kamion munka");
		 	else if(GetPVarInt(playerid, "KamhosszuTP") <= 45) GivePlayerMoneyEx(playerid, 110000, "Kamion munka");
			else if(GetPVarInt(playerid, "KamhosszuTP") <= 60) GivePlayerMoneyEx(playerid, 120000, "Kamion munka");
			else if(GetPVarInt(playerid, "KamhosszuTP") <= 150) GivePlayerMoneyEx(playerid, 130000, "Kamion munka");
			else if(GetPVarInt(playerid, "KamhosszuTP") <= 20000) GivePlayerMoneyEx(playerid, 150000, "Kamion munka");
			GiveEXP(playerid, KAMIONOSH_EXP);
			SetPVarInt(playerid, "KamhosszuTP", GetPVarInt(playerid, "KamhosszuTP")+1);
			new str[64];
	        format(str, sizeof(str), "~g~+ Kamionos TP(hosszú) (%d TP)", GetPVarInt(playerid, "KamhosszuTP"));
			TextDraw2ForPlayer(playerid,6000,str);
			if(QuestID[playerid] == 1 && QuestPart[playerid] == 2) QuestInt[playerid]++;
			SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
			DisablePlayerCheckpoint(playerid);
		}
		if(GetPVarInt(playerid, "Kamionkuldi") == 2)
		{
			if(IsPlayerInKamion(playerid) == 0) return SendClientMessage(playerid, COLOR_KAMIONOS, "HIBA: A kamionban kéne lenned!");
			if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_KAMIONOS, "HIBA: Hol az utánfutó?");
			if(GetPVarInt(playerid, "KamrovidTP") <= 20) GivePlayerMoneyEx(playerid, 30000, "Kamion munka");
			else if(GetPVarInt(playerid, "KamrovidTP") <= 40) GivePlayerMoneyEx(playerid, 40000, "Kamion munka");
		 	else if(GetPVarInt(playerid, "KamrovidTP") <= 60) GivePlayerMoneyEx(playerid, 50000, "Kamion munka");
			else if(GetPVarInt(playerid, "KamrovidTP") <= 80) GivePlayerMoneyEx(playerid, 60000, "Kamion munka");
			else if(GetPVarInt(playerid, "KamrovidTP") <= 200) GivePlayerMoneyEx(playerid, 70000, "Kamion munka");
			else if(GetPVarInt(playerid, "KamrovidTP") <= 20000) GivePlayerMoneyEx(playerid, 80000, "Kamion munka");
			GiveEXP(playerid, KAMIONOSR_EXP);
			new str[64];
			SetPVarInt(playerid, "KamrovidTP", GetPVarInt(playerid, "KamrovidTP")+1);
	        format(str, sizeof(str), "~g~+ Kamionos TP(rövid) (%d TP)", GetPVarInt(playerid, "KamrovidTP"));
			TextDraw2ForPlayer(playerid,6000,str);
			if(QuestID[playerid] == 1 && QuestPart[playerid] == 2) QuestInt[playerid]++;
			SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
			DisablePlayerCheckpoint(playerid);
		}
		if(QuestInt[playerid] == 5)
		{
		    DialogText(playerid, 3000, "~r~", GetPlayerNameEx(playerid), "Küldetés végrehajtva. Vissza a bázisra.");
		    SetQuestPart(playerid, 1, 3);
			CreateQuestCP(playerid, -2145.5195,-246.4585,36.5156);
		}
		else SendFormatMessage(playerid, QUEST_COLOR, "Még %d szállítás van hátra...", 5-QuestInt[playerid]);
	}
	switch ( SetHidrCP [ playerid ] )
	{
		case HIDRAULIKA:
		{
		    if(PlayerInfo[playerid][ishidrauliking] == 1)
            {
	            if(IsPlayerInAnyVehicle(playerid))
	            {
	                if(GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), GetVehicleComponentType(1087)) != 1087)
					{
						TextDrawForPlayer(playerid,4000,"Muszáj a jármûvedben lenni hidraulikának.");
						KillTimer(htimer[playerid]);
						Hidraulics[playerid][htime] = 0;
						Hidraulics[playerid][hscore] = 0;
						Hidraulics[playerid][hstarted] = 0;
						Hidraulics[playerid][hneedkey] = 0;
						DisablePlayerCheckpoint(playerid);
			   	        SetHidrCP[playerid]=-1;
			   	        return 1;
					}
		            new hvehicle = GetPlayerVehicleID(playerid);
		            DisablePlayerCheckpoint(playerid);
		            AddVehicleComponent(hvehicle,1087);
		            Hidraulics[playerid][hstarted] = 1;
		            SetPlayerHKey(playerid);
		            htimer[playerid] = SetTimerEx("EndH",2000,0, "i", playerid);
		            Hidraulics[playerid][htime] = 60;
					}else{
		            TextDrawForPlayer(playerid,4000,"Muszáj kocsiban lenned.");
	            }
            }
		}
	}
	return 1;
}

forward Rablas(playerid);
public Rablas(playerid)
{
	SetPVarInt(playerid, "Rablokuldi", 2);
	TogglePlayerControllable(playerid,1);
	SendClientMessage(playerid, COLOR_RABLO, "Menj vissza a raktárba hogy megkapd a pénzt!");
	SetPlayerCheckpoint ( playerid, -1822.3306,-182.2082,9.3984, 6.0 );
	SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+1);
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(racecp[playerid] >= 1)
	{
	    racecp[playerid]++;
	    format(query, sizeof(query), "SELECT CPType, CPX, CPY, CPZ, NCPX, NCPY, NCPZ, Moneywin, EXPwin, CPSize FROM races WHERE RaceID = %d AND RCPID = %d", fraceid, racecp[playerid]);
	    mysql_query(query);
	    mysql_store_result();
	    if(mysql_num_rows() != 0)
	    {
	        if(lastcp[playerid] == false)
		 	{
				mysql_fetch_row(linen);
				new cpt;
				new Float:ncpx, Float:ncpy, Float:ncpz;
				new Float:nncpx, Float:nncpy, Float:nncpz;
				new cpsyze;
				sscanf(linen, "p<|>iffffff{ii}i", cpt, ncpx, ncpy, ncpz, nncpx, nncpy, nncpz, cpsyze);
				mysql_free_result();
				SetPlayerRaceCheckpoint(playerid, cpt, ncpx, ncpy, ncpz, nncpx, nncpy, nncpz, cpsyze);
				PlayerPlaySound(playerid, 1056, 0, 0, 0);
				if(cpt == 1 || cpt == 4) lastcp[playerid] = true;
				return 1;
			}
		}
		if(lastcp[playerid] == true)
		{
		    if(GetGVarInt("racealone") == 1)
		    {
		        racecp[playerid] = 0;
		        DisablePlayerRaceCheckpoint(playerid);
			    inrace[playerid] = false;
			    lastcp[playerid] = false;
			    rmoneywin = rmoneywin/2;
			    rexpwin = rexpwin/2;
			    format(racestring, sizeof(racestring), "%s megnyerte a versenyt egyedül, így nem dönthet rekordot. Nyereménye %s$! Idõ: %02d:%02d", GetPlayerNameEx(playerid), convertFormattedNumber(rmoneywin, "."), minu[playerid], sec[playerid]);
				SendClientMessageToAll(COLOR_YELLOW, racestring);
				GivePlayerMoneyEx(playerid, rmoneywin, "Versenyt nyert");
				minu[playerid] = 0;
				sec[playerid] = 0;
				GiveEXP(playerid, rexpwin);
				SetGVarInt("racealone", 0);
		    }
		    else
		    {
			    racecp[playerid] = 0;
			    DisablePlayerRaceCheckpoint(playerid);
			    inrace[playerid] = false;
			    lastcp[playerid] = false;
			    format(racefile, sizeof(racefile), "brl/rekordok.ini");
			    new rekordminstr[20], rekordsecstr[20], rekordnamestr[24], rekordversenystr[50];
			    format(rekordminstr, sizeof(rekordminstr), "Verseny%dmin", fraceid);
	      		format(rekordsecstr, sizeof(rekordsecstr), "Verseny%dsec", fraceid);
	      		format(rekordnamestr, sizeof(rekordnamestr), "Verseny%dnev", fraceid);
	      		format(rekordversenystr, sizeof(rekordversenystr), "Verseny%dneve", fraceid);
	      		if(strlen(dini_Get(racefile, rekordversenystr)) <= 3)
	      		{
	      		    dini_IntSet(racefile, rekordminstr, 999);
					dini_IntSet(racefile, rekordsecstr, 999);
	      		}
	      		dini_Set(racefile, rekordversenystr, fracename);
			    if(rhelyezes[0] == false)
			    {
			        rhelyezes[0] = true;
			        if(dini_Int(racefile, rekordminstr) <= minu[playerid])
			        {
						if(dini_Int(racefile, rekordsecstr) <= sec[playerid])
						{
					        format(racestring, sizeof(racestring), "%s megnyerte a versenyt! Nyereménye %s$! Idõ: %02d:%02d Rekord idõ: %02d:%02d", GetPlayerNameEx(playerid), convertFormattedNumber(rmoneywin, "."), minu[playerid], sec[playerid], dini_Int(racefile, rekordminstr), dini_Int(racefile, rekordsecstr));
							SendClientMessageToAll(COLOR_YELLOW, racestring);
							GivePlayerMoneyEx(playerid, rmoneywin, "Versenyt nyert");
							minu[playerid] = 0;
							sec[playerid] = 0;
							GiveEXP(playerid, rexpwin);

							UnlockAchievement(playerid, "ld_drv:gold", "1. helyezett versenyzésben", "Verseny");
							GiveAchievement(playerid, "Racegold", 1);
							return 1;
						}
					}
					if(dini_Int(racefile, rekordminstr) < minu[playerid])
			        {
						if(dini_Int(racefile, rekordsecstr) > sec[playerid])
						{
					        format(racestring, sizeof(racestring), "%s megnyerte a versenyt! Nyereménye %s$! Idõ: %02d:%02d Rekord idõ: %02d:%02d", GetPlayerNameEx(playerid), convertFormattedNumber(rmoneywin, "."), minu[playerid], sec[playerid], dini_Int(racefile, rekordminstr), dini_Int(racefile, rekordsecstr));
							SendClientMessageToAll(COLOR_YELLOW, racestring);
							GivePlayerMoneyEx(playerid, rmoneywin, "Versenyt nyert");
							minu[playerid] = 0;
							sec[playerid] = 0;
							GiveEXP(playerid, rexpwin);

							UnlockAchievement(playerid, "ld_drv:gold", "1. helyezett versenyzésben", "Verseny");
							GiveAchievement(playerid, "Racegold", 1);
							return 1;
						}
					}
					if(dini_Int(racefile, rekordminstr) >= minu[playerid])
			        {
			            if(dini_Int(racefile, rekordsecstr) > sec[playerid])
			            {
					        format(racestring, sizeof(racestring), "%s megnyerte a versenyt! Nyereménye %s$! Idõ: %02d:%02d  ÚJ REKORD!!", GetPlayerNameEx(playerid), convertFormattedNumber(rmoneywin, "."), minu[playerid], sec[playerid]);
							SendClientMessageToAll(COLOR_YELLOW, racestring);
							GivePlayerMoneyEx(playerid, rmoneywin, "Versenyt nyert");
							dini_IntSet(racefile, rekordminstr, minu[playerid]);
							dini_IntSet(racefile, rekordsecstr, sec[playerid]);
							dini_Set(racefile, rekordnamestr, GetPlayerNameEx(playerid));
							minu[playerid] = 0;
							sec[playerid] = 0;
							GiveEXP(playerid, rexpwin);

							UnlockAchievement(playerid, "ld_drv:gold", "új versenyrekord felállítása", "Versenyrekord");
							GiveAchievement(playerid, "RaceRecords", 1);
							return 1;
						}
					}
					if(dini_Int(racefile, rekordminstr) >= minu[playerid])
			        {
			            if(dini_Int(racefile, rekordsecstr) < sec[playerid])
			            {
					        format(racestring, sizeof(racestring), "%s megnyerte a versenyt! Nyereménye %s$! Idõ: %02d:%02d  ÚJ REKORD!!", GetPlayerNameEx(playerid), convertFormattedNumber(rmoneywin, "."), minu[playerid], sec[playerid]);
							SendClientMessageToAll(COLOR_YELLOW, racestring);
							GivePlayerMoneyEx(playerid, rmoneywin, "Versenyt nyert");
							dini_IntSet(racefile, rekordminstr, minu[playerid]);
							dini_IntSet(racefile, rekordsecstr, sec[playerid]);
							dini_Set(racefile, rekordnamestr, GetPlayerNameEx(playerid));
							minu[playerid] = 0;
							sec[playerid] = 0;
							GiveEXP(playerid, rexpwin);

							UnlockAchievement(playerid, "ld_drv:gold", "új versenyrekord felállítása", "Versenyrekord");
							GiveAchievement(playerid, "RaceRecords", 1);
							return 1;
						}
					}
					return 1;
				}
		  		if(rhelyezes[1] == false)
			    {
			        rhelyezes[1] = true;
			        format(racestring, sizeof(racestring), "%s második helyezést ért el! Nyereménye %s$! Idõ: %02d:%02d", GetPlayerNameEx(playerid), convertFormattedNumber(rmoneywin/2, "."), minu[playerid], sec[playerid]);
		            SendClientMessageToAll(COLOR_GREY, racestring);
		            GivePlayerMoneyEx(playerid, rmoneywin/2, "Verseny 2. hely");
		            minu[playerid] = 0;
					sec[playerid] = 0;
					GiveEXP(playerid, rexpwin/2);

					UnlockAchievement(playerid, "ld_drv:nawtxt", "2. helyezett versenyzésben", "Verseny");
					GiveAchievement(playerid, "Racesilver", 1);
		            return 1;
				}
		  		if(rhelyezes[2] == false)
			    {
			        rhelyezes[2] = true;
			        format(racestring, sizeof(racestring), "%s harmadik helyezést ért el! Nyereménye %s$! Idõ: %02d:%02d", GetPlayerNameEx(playerid), convertFormattedNumber(rmoneywin/4, "."), minu[playerid], sec[playerid]);
		            SendClientMessageToAll(COLOR_BROWN, racestring);
		            GivePlayerMoneyEx(playerid, rmoneywin/4, "Verseny 3. hely");
		            minu[playerid] = 0;
					sec[playerid] = 0;
					GiveEXP(playerid, rexpwin/4);

					UnlockAchievement(playerid, "ld_drv:bronze", "3. helyezett versenyzésben", "Verseny");
					GiveAchievement(playerid, "Racebronze", 1);
		            return 1;
				}
			}
		}
		PlayerPlaySound(playerid, 1056, 0, 0, 0);
	}
	
	if(stuntcp[playerid] >= 1)
	{
	    stuntcp[playerid]++;
	    format(query, sizeof(query), "SELECT CPType, CPX, CPY, CPZ, NCPX, NCPY, NCPZ, Moneywin, EXPwin, CPsize FROM stunts WHERE StuntID = %d AND RCPID = %d", fraceid, stuntcp[playerid]);
	    mysql_query(query);
	    mysql_store_result();
	    if(mysql_num_rows() != 0)
	    {
	        if(lastcp[playerid] == false)
		 	{
				mysql_fetch_row(linen);
				new cpt;
				new Float:ncpx, Float:ncpy, Float:ncpz;
				new Float:nncpx, Float:nncpy, Float:nncpz;
				new cpsyze;
				sscanf(linen, "p<|>iffffff{ii}i", cpt, ncpx, ncpy, ncpz, nncpx, nncpy, nncpz,cpsyze);
				mysql_free_result();
				SetPlayerRaceCheckpoint(playerid, cpt, ncpx, ncpy, ncpz, nncpx, nncpy, nncpz, cpsyze);
				PlayerPlaySound(playerid, 1056, 0, 0, 0);
				if(cpt == 1 || cpt == 4) lastcp[playerid] = true;
				return 1;
			}
		}
		if(lastcp[playerid] == true)
		{
		    if(GetGVarInt("racealone") == 1)
		    {
		        stuntcp[playerid] = 0;
		        DisablePlayerRaceCheckpoint(playerid);
			    instunt[playerid] = false;
			    lastcp[playerid] = false;
			    rmoneywin = rmoneywin/2;
			    rexpwin = rexpwin/2;
			    format(racestring, sizeof(racestring), "%s megnyerte a stuntot egyedül, így nem dönthet rekordot. Nyereménye %s$! Idõ: %02d:%02d Rekord idõ: %02d:%02d", GetPlayerNameEx(playerid), convertFormattedNumber(rmoneywin, "."), minu[playerid], sec[playerid]);
				SendClientMessageToAll(COLOR_YELLOW, racestring);
				GivePlayerMoneyEx(playerid, rmoneywin, "Stuntot nyert");
				minu[playerid] = 0;
				sec[playerid] = 0;
				GiveEXP(playerid, rexpwin);
				SetGVarInt("racealone", 0);
		    }
		    else
			{
			    stuntcp[playerid] = 0;
			    DisablePlayerRaceCheckpoint(playerid);
			    instunt[playerid] = false;
			    lastcp[playerid] = false;
			    format(racefile, sizeof(racefile), "brl/rekordok.ini");
			    new rekordminstr[20], rekordsecstr[20], rekordnamestr[24], rekordversenystr[50];
			    format(rekordminstr, sizeof(rekordminstr), "Stunt%dmin", fraceid);
	      		format(rekordsecstr, sizeof(rekordsecstr), "Stunt%dsec", fraceid);
	      		format(rekordnamestr, sizeof(rekordnamestr), "Stunt%dnev", fraceid);
	      		format(rekordversenystr, sizeof(rekordversenystr), "Stunt%dneve", fraceid);
	      		if(strlen(dini_Get(racefile, rekordversenystr)) <= 3)
	      		{
	      		    dini_IntSet(racefile, rekordminstr, 999);
					dini_IntSet(racefile, rekordsecstr, 999);
	      		}
	      		dini_Set(racefile, rekordversenystr, fracename);
			    if(shelyezes[0] == false)
			    {
			        shelyezes[0] = true;
			        if(dini_Int(racefile, rekordminstr) <= minu[playerid])
			        {
						if(dini_Int(racefile, rekordsecstr) <= sec[playerid])
						{
					        format(racestring, sizeof(racestring), "%s megnyerte a stuntot! Nyereménye %s$! Idõ: %02d:%02d Rekord idõ: %02d:%02d", GetPlayerNameEx(playerid), convertFormattedNumber(rmoneywin, "."), minu[playerid], sec[playerid], dini_Int(racefile, rekordminstr), dini_Int(racefile, rekordsecstr));
							SendClientMessageToAll(COLOR_YELLOW, racestring);
							GivePlayerMoneyEx(playerid, rmoneywin, "Stuntot nyert");
							minu[playerid] = 0;
							sec[playerid] = 0;
							GiveEXP(playerid, rexpwin);

							UnlockAchievement(playerid, "ld_drv:gold", "1. helyezett versenyzésben", "Verseny");
							GiveAchievement(playerid, "Racegold", 1);
							return 1;
						}
					}
					if(dini_Int(racefile, rekordminstr) < minu[playerid])
			        {
						if(dini_Int(racefile, rekordsecstr) > sec[playerid])
						{
					        format(racestring, sizeof(racestring), "%s megnyerte a stuntot! Nyereménye %s$! Idõ: %02d:%02d Rekord idõ: %02d:%02d", GetPlayerNameEx(playerid), convertFormattedNumber(rmoneywin, "."), minu[playerid], sec[playerid], dini_Int(racefile, rekordminstr), dini_Int(racefile, rekordsecstr));
							SendClientMessageToAll(COLOR_YELLOW, racestring);
							GivePlayerMoneyEx(playerid, rmoneywin, "Stuntot nyert");
							minu[playerid] = 0;
							sec[playerid] = 0;
							GiveEXP(playerid, rexpwin);

							UnlockAchievement(playerid, "ld_drv:gold", "1. helyezett versenyzésben", "Verseny");
							GiveAchievement(playerid, "Racegold", 1);
							return 1;
						}
					}
					if(dini_Int(racefile, rekordminstr) >= minu[playerid])
			        {
			            if(dini_Int(racefile, rekordsecstr) > sec[playerid])
			            {
					        format(racestring, sizeof(racestring), "%s megnyerte a stuntot! Nyereménye %s$! Idõ: %02d:%02d  ÚJ REKORD!!", GetPlayerNameEx(playerid), convertFormattedNumber(rmoneywin, "."), minu[playerid], sec[playerid]);
							SendClientMessageToAll(COLOR_YELLOW, racestring);
							GivePlayerMoneyEx(playerid, rmoneywin, "Stuntot nyert");
							dini_IntSet(racefile, rekordminstr, minu[playerid]);
							dini_IntSet(racefile, rekordsecstr, sec[playerid]);
							dini_Set(racefile, rekordnamestr, GetPlayerNameEx(playerid));
							minu[playerid] = 0;
							sec[playerid] = 0;
							GiveEXP(playerid, rexpwin);

							UnlockAchievement(playerid, "ld_drv:gold", "új versenyrekord felállítása", "Versenyrekord");
							GiveAchievement(playerid, "RaceRecords", 1);
							return 1;
						}
					}
					if(dini_Int(racefile, rekordminstr) >= minu[playerid])
			        {
			            if(dini_Int(racefile, rekordsecstr) < sec[playerid])
			            {
					        format(racestring, sizeof(racestring), "%s megnyerte a stuntot! Nyereménye %s$! Idõ: %02d:%02d  ÚJ REKORD!!", GetPlayerNameEx(playerid), convertFormattedNumber(rmoneywin, "."), minu[playerid], sec[playerid]);
							SendClientMessageToAll(COLOR_YELLOW, racestring);
							GivePlayerMoneyEx(playerid, rmoneywin, "Stuntot nyert");
							dini_IntSet(racefile, rekordminstr, minu[playerid]);
							dini_IntSet(racefile, rekordsecstr, sec[playerid]);
							dini_Set(racefile, rekordnamestr, GetPlayerNameEx(playerid));
							minu[playerid] = 0;
							sec[playerid] = 0;
							GiveEXP(playerid, rexpwin);

							UnlockAchievement(playerid, "ld_drv:gold", "új versenyrekord felállítása", "Versenyrekord");
							GiveAchievement(playerid, "RaceRecords", 1);
							return 1;
						}
					}
					return 1;
				}
		  		if(shelyezes[1] == false)
			    {
			        shelyezes[1] = true;
			        format(racestring, sizeof(racestring), "%s második helyezést ért el! Nyereménye %s$! Idõ: %02d:%02d", GetPlayerNameEx(playerid), convertFormattedNumber(rmoneywin/2, "."), minu[playerid], sec[playerid]);
		            SendClientMessageToAll(COLOR_GREY, racestring);
		            GivePlayerMoneyEx(playerid, rmoneywin/2, "Stunt 2. hely");
		            minu[playerid] = 0;
					sec[playerid] = 0;
					GiveEXP(playerid, rexpwin/2);

					//UnlockAchievement(playerid, "ld_drv:nawtxt", "2. helyezett versenyzésben", "Verseny");
					//GiveAchievement(playerid, "Racesilver", 1);
		            return 1;
				}
		  		if(shelyezes[2] == false)
			    {
			        shelyezes[2] = true;
			        format(racestring, sizeof(racestring), "%s harmadik helyezést ért el! Nyereménye %s$! Idõ: %02d:%02d", GetPlayerNameEx(playerid), convertFormattedNumber(rmoneywin/4, "."), minu[playerid], sec[playerid]);
		            SendClientMessageToAll(COLOR_BROWN, racestring);
		            GivePlayerMoneyEx(playerid, rmoneywin/4, "Stunt 3. hely");
		            minu[playerid] = 0;
					sec[playerid] = 0;
					GiveEXP(playerid, rexpwin/4);

					//UnlockAchievement(playerid, "ld_drv:bronze", "3. helyezett versenyzésben", "Verseny");
					//GiveAchievement(playerid, "Racebronze", 1);
		            return 1;
				}
			}
		}
		PlayerPlaySound(playerid, 1056, 0, 0, 0);
	}
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
    if(pickupid == hpickup)
	{
		ShowMenuForPlayer(hmenu, playerid);
	}
	if(pickupid == rcarsp1)
	{
	    new rdialog[512];
	    format(rdialog, sizeof(rdialog), "%s%s%s%s%s%s",
		"Üdv a Ryuuzaki's cars-ban!\n",
		"Nálunk tudsz vásárolni jármûveket, vásárolhatsz rá tuningot, rendszámot, neont.\n",
		"Autót vehetsz a boltban. Ha vásárolni szeretnél, menj a balra lévõ pickupba\n",
		"és írd be a jármû teljes nevét vagy ID-jét amit venni szeretnél és kapsz róla rövid info-t.\n",
		"Ha nem találsz benne valamit, az valószínüleg nincs még beleírva a rendszerbe.\n",
		"Miután megvetted az autódat, a /autoszerkeszt paranccsal szerkesztheted.\n",
		"Köszönjük hogy betértél ide!");
		ShowPlayerDialog(playerid, DIALOGID+125, DIALOG_STYLE_MSGBOX, "Üdv a Ryuuzaki's cars-ban!", rdialog, "Rendben", "");
	}
	if(pickupid == rcarsp2)
	{
     	ShowPlayerDialog(playerid, RCARARAK_DIALOG, DIALOG_STYLE_INPUT, "Írd be a jármû nevét!", "Írd be a jármû nevét, amelyik info-jára kíváncsi vagy! Ha van benne szóköz azt '_' jellel jelöld!", "Tovább", "Kilép");
		SetPlayerPos(playerid, -1653.3105,1207.8264+2,21.1563);
	}
	//if(pickupid == bkvp) ShowPlayerDialog(playerid,DIALOGID+1,DIALOG_STYLE_MSGBOX,"Munkavállalás","Szeretnél belépni a BKV-hoz?","Igen","Nem");
	if(pickupid == mavp) ShowPlayerDialog(playerid,DIALOGID+2,DIALOG_STYLE_MSGBOX,"Munkavállalás","Szeretnél belépni a MÁV-hoz?","Igen","Nem");
	if(pickupid == taxip) ShowPlayerDialog(playerid,DIALOGID+3,DIALOG_STYLE_MSGBOX,"Munkavállalás","Szeretnél taxisként dolgozni?","Igen","Nem");
	if(pickupid == mentosp) ShowPlayerDialog(playerid,DIALOGID+4,DIALOG_STYLE_MSGBOX,"Munkavállalás","Szeretnél mentõsként dolgozni?","Igen","Nem");
	if(pickupid == bankosp)
	{
		if(cGetPlayerTeam(playerid) != TEAM_BANKOS) ShowPlayerDialog(playerid,DIALOGID+5,DIALOG_STYLE_MSGBOX,"Munkavállalás","Szeretnél bankosként dolgozni?","Igen","Nem");
        else if(cGetPlayerTeam(playerid) == TEAM_BANKOS) ShowPlayerDialog(playerid, DIALOGID+51, DIALOG_STYLE_LIST, "Melyik bankba szeretnéd a pénzt vinni?","Budapest Bank\nErste Bank","Oké","Mégse");
	}
	if(pickupid == rablop)
	{
	    if(cGetPlayerTeam(playerid) != TEAM_RABLO) ShowPlayerDialog(playerid,DIALOGID+6,DIALOG_STYLE_MSGBOX,"Munkavállalás","Szeretnél bankrakbóként dolgozni?","Igen","Nem");
	}
	if(pickupid == rablop2)
	{
		if(cGetPlayerTeam(playerid) == TEAM_RABLO) ShowPlayerDialog(playerid, DIALOGID+7, DIALOG_STYLE_LIST, "Melyik bankot szeretnéd kirabolni?","Nemzeti Bank\nBudapest Bank\nErste Bank","Oké","Mégse");
		else SendClientMessage(playerid, COLOR_WHITE, "HIBA: Nem vagy bankrabló!");
	}
	if(pickupid == kamionp)
	{
		if(cGetPlayerTeam(playerid) != TEAM_KAMIONOS) ShowPlayerDialog(playerid,DIALOGID+8,DIALOG_STYLE_MSGBOX,"Munkavállalás","Szeretnél kamionosként dolgozni?","Igen","Nem");
		else if(cGetPlayerTeam(playerid) == TEAM_KAMIONOS) ShowPlayerDialog(playerid, DIALOGID+9, DIALOG_STYLE_LIST, "Milyen utat akarsz menni:","Hosszú\nRövid","Oké","Mégse");
	}
	if(pickupid == rendorp) ShowPlayerDialog(playerid,DIALOGID+10,DIALOG_STYLE_MSGBOX,"Munkavállalás","Rendõrségi tagfelvétel a fórumon! www.brl.ucoz.net","Kilép",""); //ShowPlayerDialog(playerid,DIALOGID+10,DIALOG_STYLE_MSGBOX,"Munkavállalás","Szeretnél rendõrként dolgozni?","Igen","Nem");
	if(pickupid == katonap) ShowPlayerDialog(playerid,DIALOGID+10,DIALOG_STYLE_MSGBOX,"Munkavállalás","Katonasági tagfelvétel a fórumon! www.brl.ucoz.net","Kilép",""); //ShowPlayerDialog(playerid,DIALOGID+13,DIALOG_STYLE_MSGBOX,"Munkavállalás","Szeretnél katonaként dolgozni?","Igen","Nem");
	if(pickupid == politikusp) ShowPlayerDialog(playerid,DIALOGID+11,DIALOG_STYLE_MSGBOX,"Munkavállalás","Szeretnél politikusként dolgozni?","Igen","Nem");
	if(pickupid == partp) ShowPlayerDialog(playerid,DIALOGID+12,DIALOG_STYLE_LIST,"Munkavállalás - Melyik pártnál szeretnél dolgozni?","Fidesz\nMSZP\nJobbik\nLMP","Igen","Nem");
	if(pickupid == mtk) ShowPlayerDialog(playerid,DIALOGID+14,DIALOG_STYLE_MSGBOX,"Munkavállalás","Szeretnél belépni a Rifába?","Igen","Nem");
	if(pickupid == ujpest) ShowPlayerDialog(playerid,DIALOGID+15,DIALOG_STYLE_MSGBOX,"Munkavállalás","Szeretnél belépni az Triad-ba?","Igen","Nem");
	if(pickupid == vasasp) ShowPlayerDialog(playerid,DIALOGID+16,DIALOG_STYLE_MSGBOX,"Munkavállalás","Szeretnél belépni a Maffiába?","Igen","Nem");
	if(pickupid == honved) ShowPlayerDialog(playerid,DIALOGID+17,DIALOG_STYLE_MSGBOX,"Munkavállalás","Szeretnél belépni a Kispest-Honvédba?","Igen","Nem");
	if(pickupid == fradi) ShowPlayerDialog(playerid,DIALOGID+18,DIALOG_STYLE_MSGBOX,"Munkavállalás","Szeretnél belépni a Groveba?","Igen","Nem");
	if(pickupid == pap) ShowPlayerDialog(playerid,DIALOGID+20,DIALOG_STYLE_MSGBOX,"Munkavállalás","Szeretnél papként dolgozni?","Igen","Nem");
	if(pickupid == riportp) ShowPlayerDialog(playerid,DIALOGID+21,DIALOG_STYLE_MSGBOX,"Munkavállalás","Szeretnél riporterként dolgozni?","Igen","Nem");
	if(pickupid == tuzolto) ShowPlayerDialog(playerid,DIALOGID+22,DIALOG_STYLE_MSGBOX,"Munkavállalás","Szeretnél tûzoltóként dolgozni?","Igen","Nem");
    if(pickupid == hotdogp) ShowPlayerDialog(playerid,DIALOGID+23,DIALOG_STYLE_MSGBOX,"Munkavállalás","Szeretnél hotdogosként dolgozni?","Igen","Nem");
	if(pickupid == tisztitp) ShowPlayerDialog(playerid,DIALOGID+24,DIALOG_STYLE_MSGBOX,"Munkavállalás","Szeretnél úttisztítóként dolgozni?","Igen","Nem");
	if(pickupid == farmerp) ShowPlayerDialog(playerid,DIALOGID+25,DIALOG_STYLE_MSGBOX,"Munkavállalás","Szeretnél farmerként dolgozni?","Igen","Nem");
	if(pickupid == ammunation) ShowPlayerDialog(playerid,DIALOGID+60,DIALOG_STYLE_LIST, "Ammunation", "Pistols\nMicro SMGs\nShotguns\nArmours\nSMG\nAssault", "Select", "Cancel"),SetPlayerPos(playerid,294.3018,-38.2805,1001.5156),SetPlayerFacingAngle(playerid,270);

	if(pickupid == fankosbe)
	{
		SetPlayerInterior(playerid,17);
		SetPlayerPos(playerid,378.2841,-191.1111,1000.6328);
	}

	if(pickupid == fankoski)
	{
		SetPlayerInterior(playerid,0);
		SetPlayerPos(playerid,-2764.4507,793.3833,52.7813);
	}

	if(pickupid == varoshazabe)
	{
		SetPlayerInterior(playerid,3);
		SetPlayerPos(playerid,383.3972,173.4654,1008.3828);
	}

	if(pickupid == varoshazaki)
	{
		SetPlayerInterior(playerid,0);
		SetPlayerPos(playerid,-1500.7582,919.6715,7.1875);
	}

	if(pickupid == rendorsegbe)
	{
		SetPlayerInterior(playerid,10);
		SetPlayerPos(playerid,246.40,110.84,1003.22);
	}

	if(pickupid == rendorsegki)
	{
		SetPlayerInterior(playerid,0);
		SetPlayerPos(playerid,-1606.3220,717.9054,12.1223);
	}

	if(pickupid == parlamentbe)
	{
		if(cGetPlayerTeam(playerid) != TEAM_POLITIKUS) SendClientMessage(playerid, COLOR_WHITE, "HIBA: Ide csak a politikusok mehetnek be!");
		else {
			SetPlayerInterior(playerid,10);
			SetPlayerPos(playerid,1965.5138,993.1467,1020.7388+3);
		}
	}

	if(pickupid == parlamentki)
	{
		SetPlayerInterior(playerid,0);
		SetPlayerPos(playerid,-2758.6863,375.8868,4.3339);
	}

	if(pickupid == maffiabe)
	{
		SetPlayerInterior(playerid,1);
		SetPlayerPos(playerid,-794.806396,497.738037,1376.195312);
	}

	if(pickupid == maffiaki)
	{
		SetPlayerInterior(playerid,0);
		SetPlayerPos(playerid,-2558.9973,310.0448,15.9453);
	}

	if(pickupid == papbe)
	{
		SetPlayerInterior(playerid,0);
		SetPlayerPos(playerid, -2024.8918,1138.0643,18.0761);
	}

	if(pickupid == papki)
	{
		SetPlayerInterior(playerid,0);
		SetPlayerPos(playerid,-2485.9990,2404.2380,16.1672);
	}

	if(pickupid == tornabe)
	{
		SetPlayerInterior(playerid,0);
		SetPlayerPos(playerid,2317.1604,-1536.0232,25.3438);
	}

	if(pickupid == tornaki)
	{
		SetPlayerInterior(playerid,6);
		SetPlayerPos(playerid,756.2709,-20.1532,1000.5859);
	}

	if(pickupid == fbbe)
	{
	    SetPlayerPos(playerid, -2620.1245,199.1425,0.1078);
	    SetPlayerFacingAngle(playerid, 181.0982);
	    SendClientMessage(playerid, COLOR_ORANGE, "Ha vásárolni szeretnél, menj egy asztalhoz és nyomj Y gombot.");
	}

	if(pickupid == fbki)
	{
	    SetPlayerPos(playerid, -2626.5698,211.0553,4.5994);
	    SetPlayerFacingAngle(playerid, 358.4333);
	}

	if(pickupid == bankrbe)
	{
	    SetPlayerPos(playerid, -1817.5665,-169.2749,9.3984);
	    SetPlayerFacingAngle(playerid, 100.2138);
	}

	if(pickupid == bankrki)
	{
		SetPlayerPos(playerid, -1814.8839,-169.3038,4.7188);
		SetPlayerFacingAngle(playerid, 266.9088);
	}

	if(pickupid == rendorseginfo)
	{
	    new rendorstring[300];
		new rendorinfodialog[][] = {
			{"Ha rendõr szeretnél lenni akkor a tõled balra lévõ ajtón és a folyosón menj át,"},
			{"menj fel a lépcsõn,majd menj egyenesen és menj be az ajtón ami mellet ´Commander´tábla van."},
			{"Ha a rabokat szeretnéd megnézni akkor a tõled balra lévõ"},
			{"ajtón és a folyosón menj át, menj le a lépcsõn,és menj végig a folyosón."}
		};
	    format(rendorstring, sizeof(rendorstring), "%s\n %s\n%s\n %s", rendorinfodialog[0][0], rendorinfodialog[1][0], rendorinfodialog[2][0], rendorinfodialog[3][0]);
		ShowPlayerDialog(playerid, DIALOGID+125, DIALOG_STYLE_MSGBOX, "Üdvözlünk a Budapesti Rendõrfõkapitányságon!", rendorstring, "OK", "");
	}

	for(new i;i < sizeof(hp);i++)
	{
		if(pickupid == hp[i]) SetPlayerPrize(playerid);
	}

	for(new i;i < sizeof(w);i++)
	{
		if(pickupid == w[i])
		{
			if(GetPlayerWantedLevel(playerid) > 0) SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)-1);
		}
	}

	for(new i;i < sizeof(ruha);i++)
	{
		if(pickupid == ruha[i])
		{
			ShowPlayerDialog(playerid, DIALOGID+130, DIALOG_STYLE_INPUT, "Ruhabolt", "Írd be a választott ruha id-jét!\nAz idket a http://wiki.sa-mp.com/wiki/Skins:All oldalon találod!", "Megvesz", "Mégse");
	        new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x-2, y-2, z);
		}
	}

	for(new i;i < sizeof(bankp);i++)
	{
		if(pickupid == bankp[i])
		{
		    new Float:x, Float:y, Float:z;
		    new bankstr[128];
		    format(bankstr, sizeof(bankstr), "Neked %d $-od van a bankban!", GetPVarInt(playerid, "Bank"));
		    GetPlayerPos(playerid, x, y, z);
		    SetPlayerPos(playerid, x-2, y-2, z);
			ShowPlayerDialog(playerid, DIALOGID+100, DIALOG_STYLE_MSGBOX, "Bank", bankstr, "Betesz", "Kivesz");
		}
	}
	if(pickupid == ejtoernyo)
	{
	    GivePlayerWeapon(playerid, 46, 1);
	}
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(GetPlayerMoneyEx(playerid) >= 5000) GivePlayerMoneyEx(playerid, -5000);
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(GetPlayerMoneyEx(playerid) >= 1000)  GivePlayerMoneyEx(playerid, -1000);
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
    new Menu:CurrentMenu = GetPlayerMenu(playerid);
    if(CurrentMenu == hmenu)
	{
	    switch(row)
	    {
	        case 0:
	        {
		        PlayerInfo[playerid][ishidrauliking] = 1;
				Hidraulics[playerid][hscore] = 0;
				Hidraulics[playerid][hstarted] = 0;
				SetHidrCP[playerid] = HIDRAULIKA;
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid,-2968.2000,470.3964,4.9141,CHECKPOINTSIZE);
		        TextDrawForPlayer(playerid, 6000, "Menj bele az ~r~Checkpointba~w~ autóval! ~w~Hidraulikázni tudsz a ~k~~VEHICLE_TURRETUP~, ~k~~VEHICLE_TURRETDOWN~, ~k~~VEHICLE_TURRETLEFT~ és ~k~~VEHICLE_TURRETRIGHT~ gombokkal.");
		        HideMenuForPlayer(hmenu,playerid);
			}
  		}
	}
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{

if (!IsPlayerInAnyVehicle(playerid)){

	if(oldinteriorid == 0 && newinteriorid == 1)
	{
		SetTimerEx("AMMUTIMER",1000,0, "i", playerid);
	}
	if(oldinteriorid == 0 && newinteriorid == 6)
	{
		SetTimerEx("AMMUTIMER",1000,0, "i", playerid);
 	}
	if(oldinteriorid == 0 && newinteriorid == 4)
	{
		SetTimerEx("AMMUTIMER",1000,0, "i", playerid);
	}
}

return 1;
}

public AMMUTIMER(playerid)
{
	SetPlayerShopName(playerid,"FDPIZA");
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    Hid_OnPlayerKeyStateChange(playerid,newkeys,oldkeys);
    if(gPlayerUsingLoopingAnim[playerid])
	{
	//SendClientInt(playerid, RED, "ID: %d", newkeys);

		if(IsKeyJustDown(KEY_HANDBRAKE,newkeys,oldkeys)) {
		    StopLoopingAnim(playerid);
	        TextDrawHideForPlayer(playerid,txtAnimHelper);
	        animation[playerid] = 0;
	    }
    }
    
    if(PRESSED(KEY_LOOK_BEHIND))
	{
	    if(GetPlayerWeapon(playerid) == 33)
	    {
	        //if(GetPVarInt(playerid, "skill1level") == 0) TextDrawColor(Skill1Text[playerid], 0x800080AA);//lila
	        //if(GetPVarInt(playerid, "skill2level") == 0) TextDrawColor(Skill2Text[playerid], 0x800080AA);//lila
	        //if(GetPVarInt(playerid, "skill3level") == 0) TextDrawColor(Skill3Text[playerid], 0x800080AA);//lila

			SetPVarInt(playerid, "aws", GetPVarInt(playerid, "aws")+1);
			if(GetPVarInt(playerid, "aws") > 3) SetPVarInt(playerid, "aws", 1);
			
			if(GetPVarInt(playerid, "aws") == 1 && GetPVarInt(playerid, "skill1level") == 0) SetPVarInt(playerid, "aws", GetPVarInt(playerid, "aws")+1);
            if(GetPVarInt(playerid, "aws") == 2 && GetPVarInt(playerid, "skill2level") == 0) SetPVarInt(playerid, "aws", GetPVarInt(playerid, "aws")+1);
            if(GetPVarInt(playerid, "aws") == 3 && GetPVarInt(playerid, "skill3level") == 0) SetPVarInt(playerid, "aws", 1);
            if(GetPVarInt(playerid, "aws") == 1 && GetPVarInt(playerid, "skill1level") == 0) SetPVarInt(playerid, "aws", GetPVarInt(playerid, "aws")+1);
			if(GetPVarInt(playerid, "skill1level") >= 1 && GetPVarInt(playerid, "aws") == 1)
			{
			    SetSkillColors(playerid, 1, 2, 2);
				//TextDrawColor(Skill1Text[playerid], -16776961);//zöld //Teleport
				//TextDrawColor(Skill2Text[playerid], 16711935);//piros //Robbantás
				//TextDrawColor(Skill3Text[playerid], 16711935);//piros //Vonzás
			}
			else if(GetPVarInt(playerid, "skill2level") >= 1 && GetPVarInt(playerid, "aws") == 2)
			{
				SetSkillColors(playerid, 2, 1, 2);
			}
			else if(GetPVarInt(playerid, "skill3level") >= 1 && GetPVarInt(playerid, "aws") == 3)
			{
				SetSkillColors(playerid, 2, 2, 1);
			}
			
			if(GetPVarInt(playerid, "skill1level") == 0) SetSkillColor(playerid, 1, 0);//lila
	        if(GetPVarInt(playerid, "skill2level") == 0) SetSkillColor(playerid, 2, 0);//lila
	        if(GetPVarInt(playerid, "skill3level") == 0) SetSkillColor(playerid, 3, 0);//0x800080AA//lila
		}
	}
    if(PRESSED(KEY_NO))
	{
	    if(elkapni[playerid] == true)
	    {
	        //if(fishingscore[playerid] >= 100) { fishingscore[playerid] = 100; return 1; }
	        fishingscore[playerid] += 1.5;
	        new str[20];
			format(str, sizeof(str), "~b~%0.1f", fishingscore[playerid]);
		 	GameTextForPlayer(playerid, str, 1000, 4);
		 	ApplyAnimation(playerid, "SWORD", "SWORD_BLOCK", 4.0,1,1,1,1,0);
	    }

        #if defined FUEL_SYSTEM
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    if(fuelvalue[GetPlayerVehicleID(playerid)] > 0)
		    {
			    new vehicleid, engine, lights, alarm, doors, bonnet, boot, objective;
			    vehicleid = GetPlayerVehicleID(playerid);
			    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			    if(engine == 0) SetVehicleParamsEx(vehicleid, 1, lights, alarm, doors, bonnet, boot, objective);
			    else SetVehicleParamsEx(vehicleid, 0, lights, alarm, doors, bonnet, boot, objective);
			}
		}
		#endif
	}

    if(PRESSED(KEY_FIRE))
    {
    	if(GetPVarInt(playerid, "RCXDRobbanas") == 1 && GetVehicleModel(GetPlayerVehicleID(playerid))==441)
		{
			RCXDrobbantas(playerid);
		}
    }
    if(PRESSED(KEY_FIRE))
    {
	    if(cGetPlayerTeam(playerid) == TEAM_STUNTER && StuntWorld[playerid] == 1 && IsPlayerInAnyVehicle(playerid) && CheckNitro(GetPlayerVehicleID(playerid)) )
	    {
	    AddVehicleComponent(GetPlayerVehicleID(playerid),1010);
	    }
    }
    if(PRESSED(KEY_YES))
    {
		if(IsPlayerInRangeOfPoint(playerid, 1, -2619.8362,196.2584,0.1078))//9mm
		{
			//if(GetPlayerJob(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ha munkás vagy nem lehet fegyvered!");
	        if(GetPlayerMoneyEx(playerid) >= 300)
	        {
	            GivePlayerMoneyEx(playerid, -300);
	            GivePlayerWeapon(playerid, 22, 90);
	            SendClientMessage(playerid, COLOR_GREEN, "Vettél egy 9mm-t 300$-ért.");
			}
			else SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
		}
	    else if(IsPlayerInRangeOfPoint(playerid, 1, -2619.8362,193.9020,0.1078))//9mm hangtompítós//
	    {
     		//if(GetPlayerJob(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ha munkás vagy nem lehet fegyvered!");
	        if(GetPlayerMoneyEx(playerid) >= 500)
	        {
	            GivePlayerMoneyEx(playerid, -500);
	            GivePlayerWeapon(playerid, 23, 90);
	            SendClientMessage(playerid, COLOR_GREEN, "Vettél egy 9mm hangtompítóst 500$-ért.");
			}
			else SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
		}
	    else if(IsPlayerInRangeOfPoint(playerid, 1, -2619.8359,191.2234,0.1078))//Deagle//
	    {
	        //if(GetPlayerJob(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ha munkás vagy nem lehet fegyvered!");
	        if(GetPlayerMoneyEx(playerid) >= 1500)
	        {
	            GivePlayerMoneyEx(playerid, -1500);
	            GivePlayerWeapon(playerid, 24, 70);
	            SendClientMessage(playerid, COLOR_GREEN, "Vettél egy Desert Eagle-t 1500$-ért.");
			}
			else SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
		}
	    else if(IsPlayerInRangeOfPoint(playerid, 1, -2624.0491,190.5348,0.1078))//Pump shotgun//
	    {
	        //if(GetPlayerJob(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ha munkás vagy nem lehet fegyvered!");
	        if(GetPlayerMoneyEx(playerid) >= 700)
	        {
	            GivePlayerMoneyEx(playerid, -700);
	            GivePlayerWeapon(playerid, 25, 30);
	            SendClientMessage(playerid, COLOR_GREEN, "Vettél egy Pumpálós Shotgun-t 700$-ért.");
			}
			else SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
		}
	    else if(IsPlayerInRangeOfPoint(playerid, 1, -2626.9180,190.5383,0.10789))//Sawnoff shotgun//
	    {
	        //if(GetPlayerJob(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ha munkás vagy nem lehet fegyvered!");
	        if(GetPlayerMoneyEx(playerid) >= 400)
	        {
	            GivePlayerMoneyEx(playerid, -400);
	            GivePlayerWeapon(playerid, 26, 40);
	            SendClientMessage(playerid, COLOR_GREEN, "Vettél egy Sawnoff Shotgun-t 400$-ért.");
			}
			else SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
		}
	    else if(IsPlayerInRangeOfPoint(playerid, 1, -2629.4370,190.5444,0.1078)) //Combat shotgun//
	    {
	        //if(GetPlayerJob(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ha munkás vagy nem lehet fegyvered!");
	        if(GetPlayerMoneyEx(playerid) >= 2000)
	        {
	            GivePlayerMoneyEx(playerid, -2000);
	            GivePlayerWeapon(playerid, 27, 90);
	            SendClientMessage(playerid, COLOR_GREEN, "Vettél egy Combat Shotgun-t 2000$-ért.");
			}
			else SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
		}
	    else if(IsPlayerInRangeOfPoint(playerid, 1, -2632.4585,190.5370,0.1078))//Micro SMG
	    {
	        //if(GetPlayerJob(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ha munkás vagy nem lehet fegyvered!");
	    	if(GetPlayerMoneyEx(playerid) >= 200)
	        {
	            GivePlayerMoneyEx(playerid, -200);
	            GivePlayerWeapon(playerid, 28, 100);
	            SendClientMessage(playerid, COLOR_GREEN, "Vettél egy Micro SMG-t 200$-ért.");
			}
			else SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
		}
	    else if(IsPlayerInRangeOfPoint(playerid, 1, -2633.7639,192.2296,0.1078))//tec
	    {
	        //if(GetPlayerJob(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ha munkás vagy nem lehet fegyvered!");
	    	if(GetPlayerMoneyEx(playerid) >= 150)
	        {
	            GivePlayerMoneyEx(playerid, -150);
	            GivePlayerWeapon(playerid, 32, 100);
	            SendClientMessage(playerid, COLOR_GREEN, "Vettél egy Tec-t 150$-ért.");
			}
			else SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
		}
	    else if(IsPlayerInRangeOfPoint(playerid, 1, -2633.7642,195.1601,0.1078))//SMG
	    {
	        //if(GetPlayerJob(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ha munkás vagy nem lehet fegyvered!");
	    	if(GetPlayerMoneyEx(playerid) >= 100)
	        {
	            GivePlayerMoneyEx(playerid, -100);
	            GivePlayerWeapon(playerid, 29, 100);
	            SendClientMessage(playerid, COLOR_GREEN, "Vettél egy SMG-t 100$-ért.");
			}
			else SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
		}
	    else if(IsPlayerInRangeOfPoint(playerid, 1, -2631.6733,197.5399,0.1078))//Armour
	    {
	        //if(GetPlayerJob(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ha munkás vagy nem lehet fegyvered!");
	        if(GetPlayerMoneyEx(playerid) >= 200)
	        {
	            GivePlayerMoneyEx(playerid, -200);
	            SetPlayerArmour(playerid, 100);
	            SendClientMessage(playerid, COLOR_GREEN, "Vettél egy armourt 200$-ért.");
			}
			else SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
		}
	    else if(IsPlayerInRangeOfPoint(playerid, 1, -2628.4482,197.7493,0.1078))//M4
	    {
	        //if(GetPlayerJob(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ha munkás vagy nem lehet fegyvered!");
	    	if(GetPlayerMoneyEx(playerid) >= 900)
	        {
	            GivePlayerMoneyEx(playerid, -900);
	            GivePlayerWeapon(playerid, 30, 90);
	            SendClientMessage(playerid, COLOR_GREEN, "Vettél egy AK-47-t 900$-ért.");
			}
			else SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
		}
	    else if(IsPlayerInRangeOfPoint(playerid, 1, -2630.6252,197.7593,0.1078))//AK-47
	    {
	        //if(GetPlayerJob(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ha munkás vagy nem lehet fegyvered!");
	    	if(GetPlayerMoneyEx(playerid) >= 1000)
	        {
	            GivePlayerMoneyEx(playerid, -1000);
	            GivePlayerWeapon(playerid, 31, 100);
	            SendClientMessage(playerid, COLOR_GREEN, "Vettél egy M4-t 1000$-ért.");
			}
			else SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1, -2022.5594,-864.8543,31.8879))//Paintball bejárat 1
		{
		    new teamc, teamc2;
			for(new i; i < MAX_PLAYERS; i++)
			{
			    if(GetPVarInt(i, "pbcsapat") == 1)
			    {
			        teamc++;
			    }
			    else if(GetPVarInt(i, "pbcsapat") == 2)
			    {
			        teamc2++;
			    }
			}
			if(teamc2 < teamc) return SendClientMessage(playerid, COLOR_RED, "Ebben a csapatban többen vannak mint a másikban. Kérlek menj a másik oldali ajtóhoz!");
		    if(IsPlayerInAnyVehicle(playerid)) return 1;
		    SetPlayerPos(playerid,-2022.5037,-866.2480,31.6087);
			for(new i; i < 13; i++)
		    {
		        GetPlayerWeaponData(playerid, i, pweap[playerid][i], pammo[playerid][i]);
		    }
		    ResetPlayerWeapons(playerid);
		    GivePlayerWeapon(playerid, 23, 10000);
		    SendClientMessage(playerid, COLOR_YELLOW, "Beléptél a paintball zónába. Fegyvereid elvéve, paintballhoz való felszerelés megadva!");
			SetPVarInt(playerid, "paintball", 1);
			SetPVarInt(playerid, "poles", 0);
			SetPVarInt(playerid, "phalal", 0);
			SetPVarInt(playerid, "pbcsapat", 1);
			SetPVarInt(playerid, "pskin", GetPlayerSkin(playerid));
			SetPlayerSkin(playerid, 24);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1, -2022.5037,-866.2480,31.6087))//Paintball kijárat 1
		{
		    if(IsPlayerInAnyVehicle(playerid)) return 1;
			SetPlayerPos(playerid, -2022.5594,-864.8543,31.8879);
			ResetPlayerWeapons(playerid);
			for(new i; i < 13; i++)
		    {
		        GivePlayerWeapon(playerid, pweap[playerid][i], pammo[playerid][i]);
			}
			SendClientMessage(playerid, COLOR_YELLOW, "Kiléptél a paintball zónából. Felszerelésed visszaadva!");
			SetPVarInt(playerid, "paintball", 0);
			SetPVarInt(playerid, "poles", 0);
			SetPVarInt(playerid, "phalal", 0);
			SetPVarInt(playerid, "pbcsapat", 0);
			SetPlayerSkin(playerid, GetPVarInt(playerid, "pskin"));
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1, -2022.5818,-945.7154,31.6087))//Paintball bejárat 2
		{
		    new teamc, teamc2;
			for(new i; i < MAX_PLAYERS; i++)
			{
			    if(GetPVarInt(i, "pbcsapat") == 1)
			    {
			        teamc++;
			    }
			    else if(GetPVarInt(i, "pbcsapat") == 2)
			    {
			        teamc2++;
			    }
			}
			if(teamc < teamc2) return SendClientMessage(playerid, COLOR_RED, "Ebben a csapatban többen vannak mint a másikban. Kérlek menj a másik oldali ajtóhoz!");
		    if(IsPlayerInAnyVehicle(playerid)) return 1;
		    SetPlayerPos(playerid,-2022.5911,-944.3606,31.6087);
			for(new i; i < 13; i++)
		    {
		        GetPlayerWeaponData(playerid, i, pweap[playerid][i], pammo[playerid][i]);
		    }
		    ResetPlayerWeapons(playerid);
		    GivePlayerWeapon(playerid, 23, 10000);
		    SendClientMessage(playerid, COLOR_YELLOW, "Beléptél a paintball zónába. Fegyvereid elvéve, paintballhoz való felszerelés megadva!");
			SetPVarInt(playerid, "paintball", 1);
			SetPVarInt(playerid, "poles", 0);
			SetPVarInt(playerid, "phalal", 0);
			SetPVarInt(playerid, "pbcsapat", 2);
			SetPVarInt(playerid, "pskin", GetPlayerSkin(playerid));
			SetPlayerSkin(playerid, 25);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1, -2022.5911,-944.3606,31.6087))//Paintball kijárat 2
		{
		    if(IsPlayerInAnyVehicle(playerid)) return 1;
			SetPlayerPos(playerid, -2022.5818,-945.7154,31.6087);
			ResetPlayerWeapons(playerid);
			for(new i; i < 13; i++)
		    {
		        GivePlayerWeapon(playerid, pweap[playerid][i], pammo[playerid][i]);
			}
			SendClientMessage(playerid, COLOR_YELLOW, "Kiléptél a paintball zónából. Felszerelésed visszaadva!");
			SetPVarInt(playerid, "paintball", 0);
			SetPVarInt(playerid, "poles", 0);
			SetPVarInt(playerid, "phalal", 0);
			SetPVarInt(playerid, "pbcsapat", 0);
			SetPlayerSkin(playerid, GetPVarInt(playerid, "pskin"));
		}
		if(GetPVarInt(playerid, "garazsban") != 0)
		{
			format(query, sizeof(query), "SELECT autoX, autoY, autoZ, AutoA FROM garages WHERE ID = '%d'", GetPVarInt(playerid, "garazsban"));
   			mysql_query(query);
			mysql_store_result();
			if(mysql_num_rows() != 0)
			{
			    mysql_fetch_row(linen);
			    new Float:outpos[4];
			    sscanf(linen, "p<|>ffff", outpos[0], outpos[1], outpos[2], outpos[3]);
			    mysql_free_result();
				if(!IsPlayerInAnyVehicle(playerid))
				{
				    SetPlayerPos(playerid, outpos[0], outpos[1], outpos[2]);
				    SetPlayerVirtualWorld(playerid, 0);
			     	SetPVarInt(playerid, "garazsban", 0);
				}
				else
				{
				    SetVehiclePos(GetPlayerVehicleID(playerid), outpos[0], outpos[1], outpos[2]);
				    SetVehicleZAngle(GetPlayerVehicleID(playerid), outpos[3]);
				    SetPlayerVirtualWorld(playerid, 0);
				    for(new i = 0; i < MAX_PLAYERS; i++)
				    {
				        if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid) && i != playerid)
				        {
				            SetPlayerVirtualWorld(i, 0);
				            ObjectLoader(i, 3000);
				            SetPVarInt(i, "garazsban", 0);
				        }
				    }
				    SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
				    ObjectLoader(playerid, 3000);
				    SetPVarInt(playerid, "garazsban", 0);
				}
			}
		}
		if(GetPVarInt(playerid, "hazban") != 0)
		{
		    if(GetPVarInt(playerid, "mostvett") == 1) return SendClientMessage(playerid, COLOR_RED, "HIBA: Miközben szerkesztesz nem mehetsz ki a házból!");
			format(query, sizeof(query), "SELECT X, Y, Z FROM houses WHERE ID = '%d'", GetPVarInt(playerid, "hazban"));
   			mysql_query(query);
			mysql_store_result();
			if(mysql_num_rows() != 0)
			{
			    mysql_fetch_row(linen);
			    new Float:tarolo[3];
			    sscanf(linen, "p<|>fff", tarolo[0], tarolo[1], tarolo[2]);
			    SetPlayerPos(playerid, tarolo[0], tarolo[1], tarolo[2]);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				ObjectLoader(playerid, 3000);
				SetPVarInt(playerid, "hazban", 0);
			}
		}
		mysql_query("SELECT ID, Tulaj, Tarstulaj, Locked, X, Y, Z, Interior, VW, IntX, IntY, IntZ FROM houses");
		mysql_store_result();
		if(mysql_num_rows() != 0)
		{
			while(mysql_fetch_row(linen))
			{
				new Float:tarolo[3];
				new tarolo2[3];
				new tarolo3[24];
				new tarolo4[24];
				new Float:IntPos[3];
				new i;
				sscanf(linen, "p<|>is[24]s[24]ifffiifff", i, tarolo3, tarolo4, tarolo2[0], tarolo[0], tarolo[1], tarolo[2], tarolo2[1], tarolo2[2], IntPos[0], IntPos[1], IntPos[2]);
				if(IsPlayerInRangeOfPoint(playerid, 1, tarolo[0], tarolo[1], tarolo[2]))
				{
					if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Autóban nem használhatod ezt a parancsot!");
					if(GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid, COLOR_RED, "HIBA: Csak 0-ás Virtuális világban mehetsz be egy házba!");
	    			if(GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_RED, "HIBA: Csak 0-ás interior-ban mehetsz be egy házba!");
					/*if(!strcmp(tarolo3, "ELADO"))
					{
						SendClientMessage(playerid, COLOR_RED, "HIBA: Ebbe a házba nem mehetsz be!");
						break;
					}*/
					else if(!strcmp(tarolo3, GetPlayerNameEx(playerid)) || !strcmp(tarolo4, GetPlayerNameEx(playerid)))
					{
					    SetPlayerPos(playerid, IntPos[0], IntPos[1], IntPos[2]);
					    SetPlayerInterior(playerid, tarolo2[1]);
					    SetPlayerVirtualWorld(playerid, tarolo2[2]);
					    SetPVarInt(playerid, "hazban", i);
					    ObjectLoader(playerid, 3000);
					    SendClientMessage(playerid, COLOR_GREEN, "Házmenü: /housemenu");
					}
					else if(strcmp(tarolo3, GetPlayerNameEx(playerid)) && strcmp(tarolo4, GetPlayerNameEx(playerid)))
					{
						if(tarolo2[0] == 0)
						{
						    SetPlayerPos(playerid, IntPos[0], IntPos[1], IntPos[2]);
						    SetPlayerInterior(playerid, tarolo2[1]);
						    SetPlayerVirtualWorld(playerid, tarolo2[2]);
							SetPVarInt(playerid, "hazban", i);
							ObjectLoader(playerid, 3000);
						}
						else SendClientMessage(playerid, COLOR_RED, "Ez a ház zárva van, nem tudsz belépni!");
					}
				}
			}
			mysql_free_result();
		}
		mysql_query("SELECT ID, Tulaj, size, OutX, OutY, OutZ, VW FROM garages");
		mysql_store_result();
		if(mysql_num_rows() != 0)
		{
			while(mysql_fetch_row(linen))
			{
				new Float:tarolo[3];
				new tarolo2;
				new tarolo3;
				new tulaj[24];
				new i;
				sscanf(linen, "p<|>is[24]ifffd", i, tulaj, tarolo2, tarolo[0], tarolo[1], tarolo[2], tarolo3);
				if(IsPlayerInRangeOfPoint(playerid, 3.5, tarolo[0], tarolo[1], tarolo[2]))
				{
				    if(GetPlayerVirtualWorld(playerid) != 0) return 1;
				    if(GetPlayerInterior(playerid) != 0) return 1;
				    if(!strcmp("ELADO", tulaj)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ebbe a garázsba nem mehetsz be!");
					if(tarolo2 == 1)
					{
					    if(!IsPlayerInAnyVehicle(playerid))
					    {
					        SetPlayerPos(playerid, -1314.6, -247.5, 14.1);
					        SetPlayerVirtualWorld(playerid, tarolo3);
						}
						else
						{
						    SetVehiclePos(GetPlayerVehicleID(playerid), -1314.6, -247.5, 14.1);
						    SetVehicleZAngle(GetPlayerVehicleID(playerid), 136);
						    SetPlayerVirtualWorld(playerid, tarolo3);
                            for(new it = 0; it < MAX_PLAYERS; it++)
						    {
						        if(GetPlayerVehicleID(it) == GetPlayerVehicleID(playerid) && i != playerid)
						        {
						            SetPlayerVirtualWorld(it, tarolo3);
						            SetPVarInt(it, "garazsban", i);
						        }
						    }
						    SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), tarolo3);
						}
						SetPVarInt(playerid, "garazsban", i);
					}
					else if(tarolo2 == 2)
					{
						if(!IsPlayerInAnyVehicle(playerid))
					    {
					        SetPlayerPos(playerid, -1278.6, -233.5, 14.1);
					        SetPlayerVirtualWorld(playerid, tarolo3);
						}
						else
						{
						    SetVehiclePos(GetPlayerVehicleID(playerid), -1278.6, -233.5, 14.1);
						    SetVehicleZAngle(GetPlayerVehicleID(playerid), 134.49);
						    SetPlayerVirtualWorld(playerid, tarolo3);
						    for(new it = 0; it < MAX_PLAYERS; it++)
						    {
						        if(GetPlayerVehicleID(it) == GetPlayerVehicleID(playerid))
						        {
						            SetPlayerVirtualWorld(it, tarolo3);
						            SetPVarInt(it, "garazsban", i);
						            break;
						        }
						    }
						    SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), tarolo3);
						}
						SetPVarInt(playerid, "garazsban", i);
					}
				}
			}
			mysql_free_result();
		}
	}
	return 1;
}

//============================HIDRAULIKA========================================
SetPlayerHKey(playerid)
{
switch(random(4))
{
case 0: GameTextForPlayer(playerid,"~u~",2000,6) , Hidraulics[playerid][hneedkey] = KEY_ANALOG_UP;
case 1: GameTextForPlayer(playerid,"~d~",2000,6) , Hidraulics[playerid][hneedkey] = KEY_ANALOG_DOWN;
case 2: GameTextForPlayer(playerid,"~<~",2000,6) , Hidraulics[playerid][hneedkey] = KEY_ANALOG_LEFT;
case 3: GameTextForPlayer(playerid,"~>~",2000,6) , Hidraulics[playerid][hneedkey] = KEY_ANALOG_RIGHT;
}
return 1;
}

public EndH(playerid)
{
	if(Hidraulics[playerid][hstarted] == 1)
	{
	TextDraw2ForPlayer(playerid,2000,"~r~Bad!");
	SetPlayerHKey(playerid);
	htimer[playerid] = SetTimerEx("EndH",2000,0, "i", playerid);
	}
}

public Hid_OnPlayerKeyStateChange(playerid,newkeys,oldkeys)
{
if(Hidraulics[playerid][hstarted] == 1)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
   if(newkeys == KEY_ANALOG_UP)
   {
   if(Hidraulics[playerid][hneedkey] == KEY_ANALOG_UP)
   {
   Hidraulics[playerid][hscore]++;
   TextDraw2ForPlayer(playerid,2000,"~b~Good!");
   KillTimer(htimer[playerid]);
   SetPlayerHKey(playerid);
   htimer[playerid] = SetTimerEx("EndH",2000,0, "i", playerid);
   }else{
   TextDraw2ForPlayer(playerid,2000,"~r~Bad!");
   KillTimer(htimer[playerid]);
   SetPlayerHKey(playerid);
   htimer[playerid] = SetTimerEx("EndH",2000,0, "i", playerid);
   }
   }

   if(newkeys == KEY_ANALOG_DOWN)
   {
   if(Hidraulics[playerid][hneedkey] == KEY_ANALOG_DOWN)
   {
   Hidraulics[playerid][hscore]++;
   TextDraw2ForPlayer(playerid,2000,"~b~Good!");
   KillTimer(htimer[playerid]);
   SetPlayerHKey(playerid);
   htimer[playerid] = SetTimerEx("EndH",2000,0, "i", playerid);
   }else{
   TextDraw2ForPlayer(playerid,2000,"~r~Bad!");
   KillTimer(htimer[playerid]);
   SetPlayerHKey(playerid);
   htimer[playerid] = SetTimerEx("EndH",2000,0, "i", playerid);
   }
   }

   if(newkeys == KEY_ANALOG_RIGHT)
   {
   if(Hidraulics[playerid][hneedkey] == KEY_ANALOG_RIGHT)
   {
   Hidraulics[playerid][hscore]++;
   TextDraw2ForPlayer(playerid,2000,"~b~Good!");
   KillTimer(htimer[playerid]);
   SetPlayerHKey(playerid);
   htimer[playerid] = SetTimerEx("EndH",2000,0, "i", playerid);
   }else{
   TextDraw2ForPlayer(playerid,2000,"~r~Bad!");
   KillTimer(htimer[playerid]);
   SetPlayerHKey(playerid);
   htimer[playerid] = SetTimerEx("EndH",2000,0, "i", playerid);
   }
   }

   if(newkeys == KEY_ANALOG_LEFT)
   {
   if(Hidraulics[playerid][hneedkey] == KEY_ANALOG_LEFT)
   {
   Hidraulics[playerid][hscore]++;
   TextDraw2ForPlayer(playerid,2000,"~b~Good!");
   KillTimer(htimer[playerid]);
   SetPlayerHKey(playerid);
   htimer[playerid] = SetTimerEx("EndH",2000,0, "i", playerid);
   }else{
   TextDraw2ForPlayer(playerid,2000,"~r~Bad!");
   KillTimer(htimer[playerid]);
   SetPlayerHKey(playerid);
   htimer[playerid] = SetTimerEx("EndH",2000,0, "i", playerid);
   }
   }
}
   return 1;
}

public HidraulicTime(playerid)
{
	new pom[128], file[128];
    if(Hidraulics[playerid][hstarted] == 1)
    {
    if(Hidraulics[playerid][htime]>0)
    {
        Hidraulics[playerid][htime]--;
		format(pom,sizeof(pom),"Time:~r~%d~n~~w~~w~Score:~g~%d",Hidraulics[playerid][htime],Hidraulics[playerid][hscore]);
   	    TextDrawForPlayer(playerid,1000,pom);
   	    if(Hidraulics[playerid][htime]==0)
   	    {
            new string[128],rname[24];
            GetPlayerName(playerid,rname,24);
            format(file, sizeof(file), "brl/rekordok.ini");
            
            if(Hidraulics[playerid][hscore] <= dini_Int(file, "Hidrapont")) format(string,sizeof(string),"%s befejezte a Hidraulika versenyt. Eredmény: %d. Rekord: %d, csúcstartó: %s", rname, Hidraulics[playerid][hscore], dini_Int(file, "Hidrapont"), dini_Get(file, "Hidratarto"));
			else if(Hidraulics[playerid][hscore] > dini_Int(file, "Hidrapont"))
			{
				format(string,sizeof(string),"%s befejezte a Hidraulika versenyt. Eredmény: %d. Új rekord!", rname, Hidraulics[playerid][hscore]);
                dini_IntSet(file, "Hidrapont", Hidraulics[playerid][hscore]);
	    		dini_Set(file, "Hidratarto", rname);
			}
			SendClientMessageToAll(COLOR_RED,string);
            KillTimer(htimer[playerid]);
			Hidraulics[playerid][htime] = 0;
			Hidraulics[playerid][hscore] = 0;
			Hidraulics[playerid][hstarted] = 0;
			Hidraulics[playerid][hneedkey] = 0;
			GiveEXP(playerid, HIDRA_EXP);
   	        GivePlayerMoneyEx(playerid, Hidraulics[playerid][hscore]*200+random(3000));
   	        SetHidrCP[playerid]=-1;
   	    }
    }
}
return 1;
}
//==============================================================================
#if defined ACTORS
public OnPlayerGiveDamageActor(playerid, damaged_actorid, Float: amount, weaponid, bodypart)
{
	if(damaged_actorid == johnactor || damaged_actorid == vevoactor) return 1;
	new Float:ahh;
	GetActorHealth(damaged_actorid, ahh);
    if(bodypart != 9) SetActorHealth(damaged_actorid, ahh-(amount/4));
    else SetActorHealth(damaged_actorid, ahh-(amount/2));

    if(bodypart != 9)
	{
		if(ahh-(amount/4) <= 0)
		{
			SetTimerEx("actorrespawn", 30000, 0, "i", damaged_actorid);
			GiveEXP(playerid, ACTORKILL_EXP);
			return 1;
		}

	}
	else
	{
	    if(ahh-(amount/2) <= 0)
		{
			SetTimerEx("actorrespawn", 30000, 0, "i", damaged_actorid);
			GiveEXP(playerid, ACTORKILL_EXP);
			return 1;
		}
	}

    if(damaged_actorid == fegyvera) ApplyActorAnimation(fegyvera,"PED","IDLE_CHAT",4.1,1,1,1,1,1);
	if(damaged_actorid == ryua) ApplyActorAnimation(ryua,"PED","IDLE_CHAT",4.1,1,1,1,1,1);
	if(damaged_actorid == dancinga[0]) ApplyActorAnimation(dancinga[0],"DANCING","dance_loop",4.1,1,1,1,1,1);
	if(damaged_actorid == dancinga[1]) ApplyActorAnimation(dancinga[1],"DANCING","dnce_M_a",4.1,1,1,1,1,1);
	if(damaged_actorid == dancinga[2]) ApplyActorAnimation(dancinga[2],"DANCING","dnce_M_b",4.1,1,1,1,1,1);
	if(damaged_actorid == dancinga[3]) ApplyActorAnimation(dancinga[3],"DANCING","dnce_M_c",4.1,1,1,1,1,1);
	if(damaged_actorid == dancinga[4]) ApplyActorAnimation(dancinga[4],"DANCING","dnce_M_d",4.1,1,1,1,1,1);
	if(damaged_actorid == dja) ApplyActorAnimation(dja,"DANCING","dnce_M_e",4.1,1,1,1,1,1);

    //if(ahh-(amount/4) <= 0) SetTimerEx("actorrespawn", 30000, 0, "i", damaged_actorid);
	return 1;
}

forward actorrespawn(actorid);
public actorrespawn(actorid)
{
    SetActorHealth(actorid, 100);
    if(actorid == fegyvera) ApplyActorAnimation(fegyvera,"PED","IDLE_CHAT",4.1,1,1,1,1,1);
	if(actorid == ryua) ApplyActorAnimation(ryua,"PED","IDLE_CHAT",4.1,1,1,1,1,1);
	if(actorid == dancinga[0]) ApplyActorAnimation(dancinga[0],"DANCING","dance_loop",4.1,1,1,1,1,1);
	if(actorid == dancinga[1]) ApplyActorAnimation(dancinga[1],"DANCING","dnce_M_a",4.1,1,1,1,1,1);
	if(actorid == dancinga[2]) ApplyActorAnimation(dancinga[2],"DANCING","dnce_M_b",4.1,1,1,1,1,1);
	if(actorid == dancinga[3]) ApplyActorAnimation(dancinga[3],"DANCING","dnce_M_c",4.1,1,1,1,1,1);
	if(actorid == dancinga[4]) ApplyActorAnimation(dancinga[4],"DANCING","dnce_M_d",4.1,1,1,1,1,1);
	if(actorid == dja) ApplyActorAnimation(dja,"DANCING","dnce_M_e",4.1,1,1,1,1,1);
}
#endif

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	//if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdminEx(playerid)) return 1;
    if(weaponid == 33)
    {
        if(IsPlayerUnallowedZone(playerid)) return 0;
        if(IsPlayerInAnyVehicle(playerid)) return 0;
        if(GetPlayerInterior(playerid) != 0) return 0;
	    if(hittype == BULLET_HIT_TYPE_PLAYER || hittype == BULLET_HIT_TYPE_PLAYER_OBJECT) return 0;
	    if(hittype == BULLET_HIT_TYPE_VEHICLE)
	    {
			if(GetPVarInt(playerid, "aws") == 1 && GetPVarInt(playerid, "skill1level") >= 1)
    	    {
    	        if(skillalw[0][playerid] == false)
    	        {
			        new Float:hx, Float:hy, Float:hz;
			        GetVehiclePos(hitid, hx, hy, hz);
			        SetPlayerPos(playerid, hx, hy, hz+1);

			        SetSkillTimer(playerid, 1);
				}
			}
			/*else if(GetPVarInt(playerid, "aws") == 2 && GetPVarInt(playerid, "skill2level") >= 1)
			{
			    if(skillalw[1][playerid] == false)
    	        {
				    new Float:hx, Float:hy, Float:hz;
				    new Float:gh;
			        GetVehiclePos(hitid, hx, hy, hz);
			        if(IsVehicleOccupied(hitid))
	                {
						GetVehicleHealth(hitid, gh);
	                }
	                
	                CreateExplosion(hx, hy, hz, 11, 0);
	                
	                if(IsVehicleOccupied(hitid))
	                {
						SetVehicleHealth(hitid, gh-100);
	                }

	                SetSkillTimer(playerid, 2);
				}
			}*/
			else if(GetPVarInt(playerid, "aws") == 3 && GetPVarInt(playerid, "skill3level") >= 1)
			{
			    if(IsVehicleOccupied(hitid)) return 0;
			    if(skillalw[2][playerid] == false)
    	        {
				    new Float:jx, Float:jy, Float:jz;
				    GetPlayerPos(playerid, jx, jy, jz);
				    GetXYInFrontOfPlayer(playerid, jx, jy, 4);
					SetVehiclePos(hitid, jx, jy, jz+0.5);
//					SetVehicleVelocity(hitid, jx, jy, jz+0.5);

					SetSkillTimer(playerid, 3);
				}
			}

	    }
 		else if(fX != 0 && fY != 0 && fZ != 0)
 		{
 		    if(GetPVarInt(playerid, "aws") == 1 && GetPVarInt(playerid, "skill1level") >= 1)
    	    {
    	        if(skillalw[0][playerid] == false)
    	        {
					SetPlayerPos(playerid, fX, fY, fZ+1);

	    	        SetSkillTimer(playerid, 1);
				}
			}
			else if(GetPVarInt(playerid, "aws") == 2 && GetPVarInt(playerid, "skill2level") >= 1)
			{
			    if(skillalw[1][playerid] == false)
    	        {
				    //CreateExplosion(fX, fY, fZ, 11, 1);
				    
				    SetSkillFire(playerid, 6, fX, fY, fZ);

				    SetSkillTimer(playerid, 2);
				}
			}
		}
		/*if(hittype == BULLET_HIT_TYPE_PLAYER_OBJECT || hittype == BULLET_HIT_TYPE_OBJECT)
		{
		    if(GetPVarInt(playerid, "aws") == 1)
		    {
			    new Float:oox, Float:ooy, Float:ooz;
			    GetDynamicObjectPos(hitid, oox, ooy, ooz);
			    SetPlayerPos(playerid, oox+fX, ooy+fY, ooz+fZ+1);
			}
			else if(GetPVarInt(playerid, "aws") == 2)
		    {
		        new Float:oox, Float:ooy, Float:ooz;
			    GetPlayerObjectPos(playerid, hitid, oox, ooy, ooz);
			    CreateExplosion(oox+fX, ooy+fY, ooz+fZ, 10, 2);
			    SendFormatMessage(playerid, COLOR_RED, "oox: %0.2f, ooy: %0.2f, ooz: %0.2f, X+X: %0.2f, Y+Y: %0.2f, Z+Z:%0.2f", oox, ooy, ooz, oox+fX, ooy+fY, ooz+fZ);
		    }
		}*/
		//new szString[144];
	    //format(szString, sizeof(szString), "Weapon %i fired. hitid: %i hittype: %i   hitid: %i   pos: %f, %f, %f", weaponid, hitid, hittype, hitid, fX, fY, fZ);
	    //SendClientMessage(playerid, -1, szString);
		return 0;
	}
	
	if(GetPlayerJob(playerid))
	{
	    if(hittype == BULLET_HIT_TYPE_PLAYER)
	    {
	        if(IsPlayerNPC(hitid)) return 1;
	    	if(GetPlayerWeapon(playerid) == 33) return 0;
		    if(cGetPlayerTeam(playerid) == 8 || cGetPlayerTeam(playerid) == 10) return 1;
		    if(GetPVarInt(playerid, "haboruban") == 1) return 1;
		    if(GetPVarInt(playerid, "paintball") == 1) return 1;
		    if(GetPVarInt(playerid, "1v1dmben") == 1) return 1;
		    if(cGetPlayerTeam(playerid) == cGetPlayerTeam(hitid)) return 0;
			/*new Float:health[2];
			GetPlayerHealth(playerid, health[0]);
			SetPlayerHealth(playerid, health[0]-amount);
			GetPlayerHealth(damagedid, health[1]);
			SetPlayerHealth(damagedid, health[1]);*/
			GameTextForPlayer(playerid, FixGameString("~r~Munkásként nem tudsz sebezni"), 3000, 4);
		    return 0;
		}
	}
	if(GetPlayerJob(hitid))
	{
	    if(hittype == BULLET_HIT_TYPE_PLAYER)
	    {
	        if(IsPlayerNPC(hitid)) return 1;
		    if(GetPlayerWeapon(playerid) == 33) return 0;
		    if(cGetPlayerTeam(playerid) == 8 || cGetPlayerTeam(playerid) == 10) return 1;
		    if(GetPVarInt(playerid, "haboruban") == 1) return 1;
	   	    if(GetPVarInt(playerid, "paintball") == 1) return 1;
	   	    if(GetPVarInt(playerid, "1v1dmben") == 1) return 1;
			if(cGetPlayerTeam(playerid) == cGetPlayerTeam(hitid)) return 0;
			/*new Float:health[2];
			GetPlayerHealth(playerid, health[0]);
			SetPlayerHealth(playerid, health[0]-amount);
			GetPlayerHealth(damagedid, health[1]);
			SetPlayerHealth(damagedid, health[1]);*/
	 		GameTextForPlayer(playerid, FixGameString("~r~Munkást nem tudsz sebezni"), 3000, 4);
	 		return 0;
		}
	}
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid)
{
    #if defined ZOMBIK
    if(IsPlayerNPC(damagedid))
	{
	    for(new i; i < MAX_ZOMBIE; i++)
	    {
			if(damagedid == npc[i])
			{
                if(!IsPlayerInDynamicArea(playerid, zzone))
		    	{
					new Float:zhealth = FCNPC_GetHealth(npc[i]);
		 			FCNPC_SetHealth(npc[i], zhealth+amount);
				}
				else
				{
				    if(weaponid == WEAPON_SAWEDOFF)
				    {
					    new Float:zhealth = FCNPC_GetHealth(npc[i]);
			 			FCNPC_SetHealth(npc[i], zhealth+amount);
				    }
				}
			}
		}
	}
	#endif
	if(GetPVarInt(damagedid, "paintball") == 1)
	{
	    if(GetPVarInt(playerid, "paintball") == 1)
	    {
	        if(GetPVarInt(damagedid, "pbcsapat") != GetPVarInt(playerid, "pbcsapat"))
	        {
		        if(weaponid == 23)
		        {
		            new pstr[128];
		            format(pstr, sizeof(pstr), "~y~Eltaláltad: %s", GetPlayerNameEx(damagedid));
		            GameTextForPlayer(playerid, FixGameString(pstr), 3*1000, 4);
		            format(pstr, sizeof(pstr), "~r~Eltalált: %s", GetPlayerNameEx(playerid));
		            GameTextForPlayer(damagedid, FixGameString(pstr), 3*1000, 4);
					SetTimerEx("paintkiesett", 4000, 0, "i", damagedid);
	                SetPlayerCameraPos(damagedid, -2011.3464,-866.1590,36.7173);
					SetPlayerCameraLookAt(damagedid, -2021.9154,-898.7953,31.6087);
					SetPlayerPos(damagedid, -2023.4825,-902.5277,1.6888);
					TogglePlayerControllable(damagedid, 0);
					SetPVarInt(playerid, "poles", GetPVarInt(playerid, "poles")+1);
					SetPVarInt(damagedid, "phalal", GetPVarInt(damagedid, "phalal")+1);
					format(pstr, sizeof(pstr), "Paintball stat:\nÖlések: ~r~%d\n~w~Halálok: ~r~%d", GetPVarInt(playerid, "poles"), GetPVarInt(playerid, "phalal"));
					TextDrawForPlayer(playerid,5*1000, pstr);
				}
			}
			else
			{
			    new Float:health;
			    GetPlayerHealth(damagedid, health);
			    SetPlayerHealth(damagedid, health + amount);
			}
		}
	}
	/*if(GetPVarInt(playerid, "haboruban") == 1)
	{
	    if(GetPVarInt(damagedid, "haboruban") == 1)
	    {
			if(!strcmp(GetPVarStringEx(playerid, "Clan"), GetPVarStringEx(damagedid, "Clan")))
			{
			    new Float:health;
			    GetPlayerHealth(damagedid, health);
			    SetPlayerHealth(damagedid, health);
			}
			if(strcmp(GetPVarStringEx(playerid, "Clan"), GetPVarStringEx(damagedid, "Clan")))
			{
			    if(cGetPlayerTeam(playerid) == cGetPlayerTeam(damagedid))
			    {
					new Float:health;
				    GetPlayerHealth(damagedid, health);
				    SetPlayerHealth(damagedid, health - amount);
			    }
			}
	    }
	    return 1;
	}*/
	return 1;
}

forward paintkiesett(playerid);
public paintkiesett(playerid)
{
	if(GetPVarInt(playerid, "pbcsapat") == 1)
	{
		SetPlayerPos(playerid, -2015.4148,-867.1895,31.6087);
		SetPlayerFacingAngle(playerid, 144.1388);
	}
	else if(GetPVarInt(playerid, "pbcsapat") == 2)
	{
		SetPlayerPos(playerid, -2029.1749,-943.0891,31.6087);
		SetPlayerFacingAngle(playerid, 319.8970);
	}
	SetPlayerHealth(playerid, 100);
	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, 1);
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

public OnPlayerUpdate(playerid)
{
	Streamer_Update(playerid);
	new cop = GetClosestCop(playerid);
	if(GetDistanceBetweenPlayers(playerid,cop) > 10 && GetPVarInt(playerid,"Cuffed") == 1)
	{
	     SendClientMessage(playerid,0xFFFFFFAA,"Bilincs automatikusan leszedve!");
	     SetPVarInt(playerid,"Cuffed",0);
	     TogglePlayerControllable(playerid,1);
	}

	if(cGetPlayerTeam(playerid) == TEAM_FARMER)
	{
	    new farmstring[50];
	    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 531)
	    {
	        new Float:x, Float:y, Float:z;
	        GetPlayerPos(playerid, x, y, z);
	        new randm = 500+random(500);
	        if(GetVehicleSpeed(GetPlayerVehicleID(playerid)) >= 30)
	        {
		        if(IsPlayerInRangeOfPoint(playerid, 6, -1183.5519,-1054.9865,129.1835)) if(termes[0] == false) farmero[0] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[0] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
	    		if(IsPlayerInRangeOfPoint(playerid, 6, -1167.6981,-1054.3802,129.1849)) if(termes[1] == false) farmero[1] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[1] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1152.4171,-1053.7953,129.1845)) if(termes[2] == false) farmero[2] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[2] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1135.6046,-1053.7517,129.1850)) if(termes[3] == false) farmero[3] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[3] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1117.7072,-1053.9763,129.1847)) if(termes[4] == false) farmero[4] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[4] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1098.3572,-1054.1947,129.1778)) if(termes[5] == false) farmero[5] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[5] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1080.7191,-1054.3911,129.1775)) if(termes[6] == false) farmero[6] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[6] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1062.2578,-1054.5985,129.1776)) if(termes[7] == false) farmero[7] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[7] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1043.4667,-1054.8080,129.1789)) if(termes[8] == false) farmero[8] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[8] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1023.2281,-1055.0355,129.1842)) if(termes[9] == false) farmero[9] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[9] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1010.2349,-1041.4084,129.1843)) if(termes[10] == false) farmero[10] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[10] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1025.0237,-1033.9352,129.1851)) if(termes[11] == false) farmero[11] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[11] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1043.9934,-1034.4164,129.1815)) if(termes[12] == false) farmero[12] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[12] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1065.1969,-1034.9250,129.1829)) if(termes[13] == false) farmero[13] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[13] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1089.2543,-1035.6810,129.1849)) if(termes[14] == false) farmero[14] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[14] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1109.6615,-1036.3212,129.1780)) if(termes[15] == false) farmero[15] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[15] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1130.0370,-1036.3624,129.1854)) if(termes[16] == false) farmero[16] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[16] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
			 	if(IsPlayerInRangeOfPoint(playerid, 6, -1152.1692,-1036.9218,129.1845)) if(termes[17] == false) farmero[17] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[17] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
			 	if(IsPlayerInRangeOfPoint(playerid, 6, -1168.8176,-1037.0679,129.1844)) if(termes[18] == false) farmero[18] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[18] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1187.9274,-1037.2360,129.1839)) if(termes[19] == false) farmero[19] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[19] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1180.6846,-1022.8049,129.1849)) if(termes[20] == false) farmero[20] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[20] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1164.5671,-1022.1387,129.1848)) if(termes[21] == false) farmero[21] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[21] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1146.1155,-1021.8901,129.1844)) if(termes[22] == false) farmero[22] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[22] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1126.6324,-1021.6470,129.1844)) if(termes[23] == false) farmero[23] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[23] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1104.6741,-1021.4325,129.1849)) if(termes[24] == false) farmero[24] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[24] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1081.9093,-1021.2112,129.1848)) if(termes[25] == false) farmero[25] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[25] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1060.4587,-1021.0026,129.1785)) if(termes[26] == false) farmero[26] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[26] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1040.0400,-1020.8041,129.1780)) if(termes[27] == false) farmero[27] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[27] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1015.1166,-1020.5613,129.1778)) if(termes[28] == false) farmero[28] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[28] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1024.9966,-1005.2695,129.1786)) if(termes[29] == false) farmero[29] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[29] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1047.5652,-1004.9423,129.1777)) if(termes[30] == false) farmero[30] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[30] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1073.5341,-1004.1971,129.1850)) if(termes[31] == false) farmero[31] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[31] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1099.0071,-1003.7556,129.1842)) if(termes[32] == false) farmero[32] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[32] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1123.4176,-1003.6339,129.1847)) if(termes[33] == false) farmero[33] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[33] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1151.7623,-1003.7237,129.1851)) if(termes[34] == false) farmero[34] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[34] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1177.6036,-1003.6548,129.1844)) if(termes[35] == false) farmero[35] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[35] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1176.3779,-993.5178,129.1840)) if(termes[36] == false) farmero[36] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[36] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1155.9259,-992.7031,129.1849)) if(termes[37] == false) farmero[37] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[37] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1132.1453,-992.5126,129.1848)) if(termes[38] == false) farmero[38] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[38] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1109.6290,-992.0496,129.1847)) if(termes[39] == false) farmero[39] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[39] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1081.3733,-992.1886,129.1848)) if(termes[40] == false) farmero[40] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[40] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1060.1118,-992.1455,129.1857)) if(termes[41] == false) farmero[41] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[41] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1036.1176,-992.0972,129.1848)) if(termes[42] == false) farmero[42] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[42] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1015.6730,-992.0580,129.1809)) if(termes[43] == false) farmero[43] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[43] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1017.1425,-975.8542,129.1841)) if(termes[44] == false) farmero[44] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[44] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1035.2568,-975.3405,129.1842)) if(termes[45] == false) farmero[45] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[45] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
			 	if(IsPlayerInRangeOfPoint(playerid, 6, -1056.4532,-974.5044,129.1844)) if(termes[46] == false) farmero[46] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[46] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1078.9691,-973.6579,129.1847)) if(termes[47] == false) farmero[47] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[47] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1108.8042,-972.8907,129.1851)) if(termes[48] == false) farmero[48] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[48] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1135.3695,-972.4650,129.1842)) if(termes[49] == false) farmero[49] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[49] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1159.3840,-971.8103,129.1831)) if(termes[50] == false) farmero[50] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[50] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1183.3181,-970.6920,129.1774)) if(termes[51] == false) farmero[51] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[51] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1172.7549,-956.7744,129.1781)) if(termes[52] == false) farmero[52] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[52] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1151.1472,-956.4411,129.1850)) if(termes[53] == false) farmero[53] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[53] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
			 	if(IsPlayerInRangeOfPoint(playerid, 6, -1128.2759,-955.9688,129.1850)) if(termes[54] == false) farmero[54] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[54] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1103.5446,-955.4579,129.1849)) if(termes[55] == false) farmero[55] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[55] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1083.4677,-955.0433,129.1841)) if(termes[56] == false) farmero[56] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[56] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1062.5239,-954.6108,129.1848)) if(termes[57] == false) farmero[57] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[57] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1041.3392,-954.1732,129.1839)) if(termes[58] == false) farmero[58] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[58] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1015.9543,-954.0955,129.1843)) if(termes[59] == false) farmero[59] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[59] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1016.2773,-939.8528,129.1848)) if(termes[60] == false) farmero[60] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[60] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1031.4772,-939.7371,129.1831)) if(termes[61] == false) farmero[61] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[61] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1051.0159,-939.4668,129.1861)) if(termes[62] == false) farmero[62] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[62] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1073.9437,-938.9712,129.1846)) if(termes[63] == false) farmero[63] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[63] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1094.1449,-939.2248,129.1849)) if(termes[64] == false) farmero[64] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[64] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1114.7325,-938.9506,129.1849)) if(termes[65] == false) farmero[65] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[65] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1140.6227,-939.0438,129.1850)) if(termes[66] == false) farmero[66] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[66] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1166.7542,-938.6656,129.1841)) if(termes[67] == false) farmero[67] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[67] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1162.0399,-923.9988,129.1848)) if(termes[68] == false) farmero[68] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[68] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1143.4486,-923.2825,129.1858)) if(termes[69] == false) farmero[69] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[69] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1119.8591,-923.3797,129.1849)) if(termes[70] == false) farmero[70] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[70] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1095.3042,-923.1683,129.1846)) if(termes[71] == false) farmero[71] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[71] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1071.9133,-922.9677,129.1848)) if(termes[72] == false) farmero[72] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[72] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1047.7235,-922.7600,129.1846)) if(termes[73] == false) farmero[73] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[73] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1014.4443,-922.4728,129.1795)) if(termes[74] == false) farmero[74] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[74] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
	            if(IsPlayerInRangeOfPoint(playerid, 6, -1037.9655,-962.1214,129.1861)) if(termes[75] == false) farmero[75] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[75] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1059.2953,-964.8296,129.1844)) if(termes[76] == false) farmero[76] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[76] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1073.4991,-981.8232,129.1842)) if(termes[77] == false) farmero[77] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[77] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1112.5883,-962.1846,129.1841)) if(termes[78] == false) farmero[78] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[78] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1138.1796,-961.4315,129.1849)) if(termes[79] == false) farmero[79] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[79] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1165.8931,-965.4009,129.1805)) if(termes[80] == false) farmero[80] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[80] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1177.1470,-978.9286,129.1847)) if(termes[81] == false) farmero[81] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[81] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1183.7584,-999.5105,129.1848)) if(termes[82] == false) farmero[82] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[82] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1182.4783,-1022.7123,129.1847)) if(termes[83] == false) farmero[83] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[83] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1156.1704,-1023.1103,129.1848)) if(termes[84] == false) farmero[84] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[84] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1129.5414,-1034.2950,129.1842)) if(termes[85] == false) farmero[85] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[85] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1106.8055,-1002.4098,129.1847)) if(termes[86] == false) farmero[86] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[86] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1072.8958,-1028.7650,129.1843)) if(termes[87] == false) farmero[87] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[87] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1052.6863,-1027.3573,129.1791)) if(termes[88] == false) farmero[88] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[88] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1030.9623,-1027.8345,129.1846)) if(termes[89] == false) farmero[89] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[89] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1170.2854,-964.9733,129.1762)) if(termes[90] == false) farmero[90] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[90] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1179.0076,-939.4896,129.1847)) if(termes[91] == false) farmero[91] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[91] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1143.0084,-929.7001,129.1850)) if(termes[92] == false) farmero[92] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[92] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1115.6240,-929.4716,129.1843)) if(termes[93] == false) farmero[93] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[93] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1093.8177,-929.8651,129.1842)) if(termes[94] == false) farmero[94] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[94] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1063.5922,-930.6878,129.1848)) if(termes[95] == false) farmero[95] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[95] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1037.0306,-923.5284,129.1841)) if(termes[96] == false) farmero[96] = CreateDynamicObject(647, x, y, z, 0, 0, 0), termes[96] = true, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
			}
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 532)
	    {
	        new Float:x, Float:y, Float:z;
	        GetPlayerPos(playerid, x, y, z);
	        new randm = 500+random(450);
	        if(GetVehicleSpeed(GetPlayerVehicleID(playerid)) >= 30)
	        {
		        if(IsPlayerInRangeOfPoint(playerid, 6, -1183.5519,-1054.9865,129.1835)) if(termes[0] == true) DestroyDynamicObject(farmero[0]), termes[0] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
	    		if(IsPlayerInRangeOfPoint(playerid, 6, -1167.6981,-1054.3802,129.1849)) if(termes[1] == true) DestroyDynamicObject(farmero[1]), termes[1] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1152.4171,-1053.7953,129.1845)) if(termes[2] == true) DestroyDynamicObject(farmero[2]), termes[2] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1135.6046,-1053.7517,129.1850)) if(termes[3] == true) DestroyDynamicObject(farmero[3]), termes[3] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1117.7072,-1053.9763,129.1847)) if(termes[4] == true) DestroyDynamicObject(farmero[4]), termes[4] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1098.3572,-1054.1947,129.1778)) if(termes[5] == true) DestroyDynamicObject(farmero[5]), termes[5] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1080.7191,-1054.3911,129.1775)) if(termes[6] == true) DestroyDynamicObject(farmero[6]), termes[6] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1062.2578,-1054.5985,129.1776)) if(termes[7] == true) DestroyDynamicObject(farmero[7]), termes[7] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1043.4667,-1054.8080,129.1789)) if(termes[8] == true) DestroyDynamicObject(farmero[8]), termes[8] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1023.2281,-1055.0355,129.1842)) if(termes[9] == true) DestroyDynamicObject(farmero[9]), termes[9] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1010.2349,-1041.4084,129.1843)) if(termes[10] == true) DestroyDynamicObject(farmero[10]), termes[10] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1025.0237,-1033.9352,129.1851)) if(termes[11] == true) DestroyDynamicObject(farmero[11]), termes[11] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1043.9934,-1034.4164,129.1815)) if(termes[12] == true) DestroyDynamicObject(farmero[12]), termes[12] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1065.1969,-1034.9250,129.1829)) if(termes[13] == true) DestroyDynamicObject(farmero[13]), termes[13] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1089.2543,-1035.6810,129.1849)) if(termes[14] == true) DestroyDynamicObject(farmero[14]), termes[14] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1109.6615,-1036.3212,129.1780)) if(termes[15] == true) DestroyDynamicObject(farmero[15]), termes[15] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1130.0370,-1036.3624,129.1854)) if(termes[16] == true) DestroyDynamicObject(farmero[16]), termes[16] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
			 	if(IsPlayerInRangeOfPoint(playerid, 6, -1152.1692,-1036.9218,129.1845)) if(termes[17] == true) DestroyDynamicObject(farmero[17]), termes[17] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
			 	if(IsPlayerInRangeOfPoint(playerid, 6, -1168.8176,-1037.0679,129.1844)) if(termes[18] == true) DestroyDynamicObject(farmero[18]), termes[18] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1187.9274,-1037.2360,129.1839)) if(termes[19] == true) DestroyDynamicObject(farmero[19]), termes[19] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1180.6846,-1022.8049,129.1849)) if(termes[20] == true) DestroyDynamicObject(farmero[20]), termes[20] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1164.5671,-1022.1387,129.1848)) if(termes[21] == true) DestroyDynamicObject(farmero[21]), termes[21] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1146.1155,-1021.8901,129.1844)) if(termes[22] == true) DestroyDynamicObject(farmero[22]), termes[22] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1126.6324,-1021.6470,129.1844)) if(termes[23] == true) DestroyDynamicObject(farmero[23]), termes[23] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1104.6741,-1021.4325,129.1849)) if(termes[24] == true) DestroyDynamicObject(farmero[24]), termes[24] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1081.9093,-1021.2112,129.1848)) if(termes[25] == true) DestroyDynamicObject(farmero[25]), termes[25] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1060.4587,-1021.0026,129.1785)) if(termes[26] == true) DestroyDynamicObject(farmero[26]), termes[26] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1040.0400,-1020.8041,129.1780)) if(termes[27] == true) DestroyDynamicObject(farmero[27]), termes[27] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1015.1166,-1020.5613,129.1778)) if(termes[28] == true) DestroyDynamicObject(farmero[28]), termes[28] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1024.9966,-1005.2695,129.1786)) if(termes[29] == true) DestroyDynamicObject(farmero[29]), termes[29] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1047.5652,-1004.9423,129.1777)) if(termes[30] == true) DestroyDynamicObject(farmero[30]), termes[30] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1073.5341,-1004.1971,129.1850)) if(termes[31] == true) DestroyDynamicObject(farmero[31]), termes[31] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1099.0071,-1003.7556,129.1842)) if(termes[32] == true) DestroyDynamicObject(farmero[32]), termes[32] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1123.4176,-1003.6339,129.1847)) if(termes[33] == true) DestroyDynamicObject(farmero[33]), termes[33] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1151.7623,-1003.7237,129.1851)) if(termes[34] == true) DestroyDynamicObject(farmero[34]), termes[34] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1177.6036,-1003.6548,129.1844)) if(termes[35] == true) DestroyDynamicObject(farmero[35]), termes[35] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1176.3779,-993.5178,129.1840)) if(termes[36] == true) DestroyDynamicObject(farmero[36]), termes[36] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1155.9259,-992.7031,129.1849)) if(termes[37] == true) DestroyDynamicObject(farmero[37]), termes[37] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1132.1453,-992.5126,129.1848)) if(termes[38] == true) DestroyDynamicObject(farmero[38]), termes[38] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1109.6290,-992.0496,129.1847)) if(termes[39] == true) DestroyDynamicObject(farmero[39]), termes[39] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1081.3733,-992.1886,129.1848)) if(termes[40] == true) DestroyDynamicObject(farmero[40]), termes[40] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1060.1118,-992.1455,129.1857)) if(termes[41] == true) DestroyDynamicObject(farmero[41]), termes[41] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1036.1176,-992.0972,129.1848)) if(termes[42] == true) DestroyDynamicObject(farmero[42]), termes[42] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1015.6730,-992.0580,129.1809)) if(termes[43] == true) DestroyDynamicObject(farmero[43]), termes[43] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1017.1425,-975.8542,129.1841)) if(termes[44] == true) DestroyDynamicObject(farmero[44]), termes[44] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1035.2568,-975.3405,129.1842)) if(termes[45] == true) DestroyDynamicObject(farmero[45]), termes[45] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
			 	if(IsPlayerInRangeOfPoint(playerid, 6, -1056.4532,-974.5044,129.1844)) if(termes[46] == true) DestroyDynamicObject(farmero[46]), termes[46] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1078.9691,-973.6579,129.1847)) if(termes[47] == true) DestroyDynamicObject(farmero[47]), termes[47] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1108.8042,-972.8907,129.1851)) if(termes[48] == true) DestroyDynamicObject(farmero[48]), termes[48] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1135.3695,-972.4650,129.1842)) if(termes[49] == true) DestroyDynamicObject(farmero[49]), termes[49] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1159.3840,-971.8103,129.1831)) if(termes[50] == true) DestroyDynamicObject(farmero[50]), termes[50] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1183.3181,-970.6920,129.1774)) if(termes[51] == true) DestroyDynamicObject(farmero[51]), termes[51] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1172.7549,-956.7744,129.1781)) if(termes[52] == true) DestroyDynamicObject(farmero[52]), termes[52] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1151.1472,-956.4411,129.1850)) if(termes[53] == true) DestroyDynamicObject(farmero[53]), termes[53] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
			 	if(IsPlayerInRangeOfPoint(playerid, 6, -1128.2759,-955.9688,129.1850)) if(termes[54] == true) DestroyDynamicObject(farmero[54]), termes[54] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1103.5446,-955.4579,129.1849)) if(termes[55] == true) DestroyDynamicObject(farmero[55]), termes[55] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1083.4677,-955.0433,129.1841)) if(termes[56] == true) DestroyDynamicObject(farmero[56]), termes[56] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1062.5239,-954.6108,129.1848)) if(termes[57] == true) DestroyDynamicObject(farmero[57]), termes[57] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1041.3392,-954.1732,129.1839)) if(termes[58] == true) DestroyDynamicObject(farmero[58]), termes[58] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1015.9543,-954.0955,129.1843)) if(termes[59] == true) DestroyDynamicObject(farmero[59]), termes[59] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1016.2773,-939.8528,129.1848)) if(termes[60] == true) DestroyDynamicObject(farmero[60]), termes[60] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1031.4772,-939.7371,129.1831)) if(termes[61] == true) DestroyDynamicObject(farmero[61]), termes[61] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1051.0159,-939.4668,129.1861)) if(termes[62] == true) DestroyDynamicObject(farmero[62]), termes[62] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1073.9437,-938.9712,129.1846)) if(termes[63] == true) DestroyDynamicObject(farmero[63]), termes[63] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1094.1449,-939.2248,129.1849)) if(termes[64] == true) DestroyDynamicObject(farmero[64]), termes[64] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1114.7325,-938.9506,129.1849)) if(termes[65] == true) DestroyDynamicObject(farmero[65]), termes[65] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1140.6227,-939.0438,129.1850)) if(termes[66] == true) DestroyDynamicObject(farmero[66]), termes[66] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1166.7542,-938.6656,129.1841)) if(termes[67] == true) DestroyDynamicObject(farmero[67]), termes[67] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1162.0399,-923.9988,129.1848)) if(termes[68] == true) DestroyDynamicObject(farmero[68]), termes[68] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1143.4486,-923.2825,129.1858)) if(termes[69] == true) DestroyDynamicObject(farmero[69]), termes[69] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1119.8591,-923.3797,129.1849)) if(termes[70] == true) DestroyDynamicObject(farmero[70]), termes[70] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1095.3042,-923.1683,129.1846)) if(termes[71] == true) DestroyDynamicObject(farmero[71]), termes[71] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1071.9133,-922.9677,129.1848)) if(termes[72] == true) DestroyDynamicObject(farmero[72]), termes[72] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1047.7235,-922.7600,129.1846)) if(termes[73] == true) DestroyDynamicObject(farmero[73]), termes[73] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1014.4443,-922.4728,129.1795)) if(termes[74] == true) DestroyDynamicObject(farmero[74]), termes[74] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
	            if(IsPlayerInRangeOfPoint(playerid, 6, -1037.9655,-962.1214,129.1861)) if(termes[75] == true) DestroyDynamicObject(farmero[75]), termes[75] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1059.2953,-964.8296,129.1844)) if(termes[76] == true) DestroyDynamicObject(farmero[76]), termes[76] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1073.4991,-981.8232,129.1842)) if(termes[77] == true) DestroyDynamicObject(farmero[77]), termes[77] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1112.5883,-962.1846,129.1841)) if(termes[78] == true) DestroyDynamicObject(farmero[78]), termes[78] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1138.1796,-961.4315,129.1849)) if(termes[79] == true) DestroyDynamicObject(farmero[79]), termes[79] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1165.8931,-965.4009,129.1805)) if(termes[80] == true) DestroyDynamicObject(farmero[80]), termes[80] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1177.1470,-978.9286,129.1847)) if(termes[81] == true) DestroyDynamicObject(farmero[81]), termes[81] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1183.7584,-999.5105,129.1848)) if(termes[82] == true) DestroyDynamicObject(farmero[82]), termes[82] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1182.4783,-1022.7123,129.1847)) if(termes[83] == true) DestroyDynamicObject(farmero[83]), termes[83] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1156.1704,-1023.1103,129.1848)) if(termes[84] == true) DestroyDynamicObject(farmero[84]), termes[84] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1129.5414,-1034.2950,129.1842)) if(termes[85] == true) DestroyDynamicObject(farmero[85]), termes[85] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1106.8055,-1002.4098,129.1847)) if(termes[86] == true) DestroyDynamicObject(farmero[86]), termes[86] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1072.8958,-1028.7650,129.1843)) if(termes[87] == true) DestroyDynamicObject(farmero[87]), termes[87] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1052.6863,-1027.3573,129.1791)) if(termes[88] == true) DestroyDynamicObject(farmero[88]), termes[88] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1030.9623,-1027.8345,129.1846)) if(termes[89] == true) DestroyDynamicObject(farmero[89]), termes[89] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1170.2854,-964.9733,129.1762)) if(termes[90] == true) DestroyDynamicObject(farmero[90]), termes[90] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1179.0076,-939.4896,129.1847)) if(termes[91] == true) DestroyDynamicObject(farmero[91]), termes[91] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1143.0084,-929.7001,129.1850)) if(termes[92] == true) DestroyDynamicObject(farmero[92]), termes[92] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1115.6240,-929.4716,129.1843)) if(termes[93] == true) DestroyDynamicObject(farmero[93]), termes[93] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1093.8177,-929.8651,129.1842)) if(termes[94] == true) DestroyDynamicObject(farmero[94]), termes[94] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1063.5922,-930.6878,129.1848)) if(termes[95] == true) DestroyDynamicObject(farmero[95]), termes[95] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
				if(IsPlayerInRangeOfPoint(playerid, 6, -1037.0306,-923.5284,129.1841)) if(termes[96] == true) DestroyDynamicObject(farmero[96]), termes[96] = false, GivePlayerMoneyEx(playerid, randm), format(farmstring, sizeof(farmstring), "~g~%d$", randm), GameTextForPlayer(playerid, farmstring, 3000, 1), GiveEXP(playerid, FARMER_EXP);
			}
		}
	}
	if(cGetPlayerTeam(playerid) == TEAM_STUNTER && StuntWorld[playerid]==1)
	{
	SetPlayerHealth(playerid,1000.0);
	if(IsPlayerInAnyVehicle(playerid)) RepairVehicle(GetPlayerVehicleID(playerid));
	}


 	GangOnPlayerUpdate(playerid);
	if(IsPlayerAttachedObjectSlotUsed(playerid,0) && GetPVarInt(playerid, "Jedi") != 0)
	{
	    if(GetPVarInt(playerid, "oJedi") != 0 && GetPVarInt(playerid, "Jedi") == 0) SetPVarInt(playerid, "oJedi",0);
	    if(GetPlayerWeapon(playerid) != 8)
	    {
	   		SetPVarInt(playerid, "oJedi",GetPVarInt(playerid, "Jedi"));
			RemovePlayerAttachedObject(playerid, 8);
		} else {
		    if(GetPVarInt(playerid, "oJedi") != 0)
		    {
			    switch(GetPVarInt(playerid, "oJedi"))
			    {
			        case 0:
			        {
			            SetPlayerAttachedObject(playerid, 0, 18649, 6, 0.07000, 0.03000, 0.80000, 90.000000, 0.000000, 0.000000, 1.3, 0.7, 2.3);
					    SetPVarInt(playerid,"Jedi",1);
						GivePlayerWeapon(playerid, 8, 1);
			        }
			        case 1:
			        {
			            SetPlayerAttachedObject(playerid, 0, 18650, 6, 0.07000, 0.03000, 0.80000, 90.000000, 0.000000, 0.000000, 1.3, 0.7, 2.3);
					    SetPVarInt(playerid,"Jedi",2);
						GivePlayerWeapon(playerid, 8, 1);
			        }
			        case 2:
			        {
			            SetPlayerAttachedObject(playerid, 0, 18648, 6, 0.07000, 0.03000, 0.80000, 90.000000, 0.000000, 0.000000, 1.3, 0.7, 2.3);
					    SetPVarInt(playerid,"Jedi",3);
						GivePlayerWeapon(playerid, 8, 1);
			        }
			        case 3:
			        {
			            SetPlayerAttachedObject(playerid, 0, 18647, 6, 0.07000, 0.03000, 0.80000, 90.000000, 0.000000, 0.000000, 1.3, 0.7, 2.3);
					    SetPVarInt(playerid,"Jedi",4);
						GivePlayerWeapon(playerid, 8, 1);
					}
					case 4:
					{
					    SetPlayerAttachedObject(playerid, 0, 18652, 6, 0.07000, 0.03000, 0.80000, 90.000000, 0.000000, 0.000000, 1.3, 0.7, 2.3);
					    SetPVarInt(playerid,"Jedi",5);
						GivePlayerWeapon(playerid, 8, 1);
					}
					case 5:
					{
					    SetPlayerAttachedObject(playerid, 0, 18651, 6, 0.07000, 0.03000, 0.80000, 90.000000, 0.000000, 0.000000, 1.3, 0.7, 2.3);
					    SetPVarInt(playerid,"Jedi",6);
						GivePlayerWeapon(playerid, 8, 1);
					}
				}
				SetPVarInt(playerid, "oJedi",0);
		    }
		}
	}
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(dialogid == SKILLS_DIALOG)
	{
	    if(response)
	    {
	        if(GetPVarInt(playerid, "skillpoints") == 0) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs képességpontod.");
	        else
	        {
	            new listr[50];
	            format(listr, sizeof(listr), "Skill%dLevel", listitem+1);
				if(GetPVarInt(playerid, listr) == 5) return SendClientMessage(playerid, COLOR_RED, "Ez a képesség elérte a maximum szintet.");
				SetPVarInt(playerid, listr, GetPVarInt(playerid, listr)+1);
				SetPVarInt(playerid, "skillpoints", GetPVarInt(playerid, "skillpoints")-1);
	            format(query, sizeof(query), "UPDATE skills SET Skill%dLevel = %d, Skillpoints = %d  WHERE Name = '%s'", listitem+1, GetPVarInt(playerid, listr), GetPVarInt(playerid, "skillpoints"), GetPlayerNameEx(playerid));
	            mysql_query(query);
				SendClientMessage(playerid, COLOR_YELLOW, "Sikeresen fejlesztetted ezt a képességet.");
	        }
		}
	}
	if(dialogid == QUEST_DIALOG)
	{
	    if(response)
	    {
	        if(!strcmp(inputtext, "Jelenleg nincs elfogadható küldetésed.", true)) return 1;
	        format(query, sizeof(query), "UPDATE quests SET QuestPart = 1 WHERE QuestName = '%s' AND Name = '%s'", inputtext, GetPlayerNameEx(playerid));
			mysql_query(query);
	        format(query, sizeof(query), "SELECT QuestID, QuestPart FROM quests WHERE Name = '%s' AND QuestPart != 0 AND QuestPart != 999", GetPlayerNameEx(playerid));
			mysql_query(query);
			mysql_store_result();
			if(mysql_num_rows() != 0)
			{
			    mysql_fetch_row(linen);
			    new questid, questpart;
			    sscanf(linen, "p<|>ii", questid, questpart);
			    mysql_free_result();
			    QuestPart[playerid] = questpart;
		    	QuestID[playerid] = questid;
			    if(QuestID[playerid] == 1)
			    {
			        CreateQuestCP(playerid, -2145.5195,-246.4585,36.5156);
			    }
			    else if(QuestID[playerid] == 2)
			    {
			        CreateQuestCP(playerid, -2145.5195,-246.4585,36.5156);
			    }
			    else if(QuestID[playerid] == 3)
			    {
			        CreateQuestCP(playerid, -2145.5195,-246.4585,36.5156);
			    }
			    else if(QuestID[playerid] == 4)
			    {
			        CreateQuestCP(playerid, -2145.5195,-246.4585,36.5156);
			    }
			}
			SendClientMessage(playerid, COLOR_GREEN, "Küldetés elfogadva.");
	    }
	}
	if(dialogid == RENDORSZ1_DIALOG)
	{
	    if(response)
	    {
			if(listitem == 0) ShowPlayerDialog(playerid, RENDORSZ2_DIALOG, DIALOG_STYLE_INPUT, "Rendõr számítógép", "Írd be annak a játékosnak az ID-jét akinek kíváncsi vagy az adataira!", "Tovább", "Vissza");
		}
	}
	if(dialogid == RENDORSZ2_DIALOG)
	{
	    if(response)
	    {
	        if(!IsPlayerConnected(strval(inputtext))) return ShowPlayerDialog(playerid, RENDORSZ2_DIALOG, DIALOG_STYLE_INPUT, "Rendõr számítógép", "Lehetne az hogy olyan ID-t írsz, ami létezik is?", "Tovább", "Vissza");
			if(strlen(inputtext) == 0) return ShowPlayerDialog(playerid, RENDORSZ2_DIALOG, DIALOG_STYLE_INPUT, "Rendõr számítógép", "Lehetne az hogy olyan ID-t írsz, ami létezik is?", "Tovább", "Vissza");
			new leadernames2[][] = {"Nem", "Rendõr", "Terrorista", "Hacker", "OBKK", "Ryuuzaki's cars", "Rodney team", "Katonaság"};
			new rendorszdialog[300];

			format(rendorszdialog, sizeof(rendorszdialog), "Játékos neve: %s[%d], Pénz: %d, Bank: %d\nÖlések: %d, Halálok: %d, Admin: %d, VIP: %d, Skin: %d\nRendõrTP: %d, KatonaTP: %d\nÓra: %d, Perc: %d, Leader: %s\nKlán: %s, Klánrang: %d\nSzint: %d, EXP: %d/%d",
			GetPlayerNameEx(strval(inputtext)),
			strval(inputtext),
			GetPlayerMoneyEx(strval(inputtext)),
			GetPVarInt(strval(inputtext), "Bank"),
			GetPVarInt(strval(inputtext), "Kills"),
			GetPVarInt(strval(inputtext), "Deaths"),
			GetPVarInt(strval(inputtext), "Admin"),
			GetPVarInt(strval(inputtext), "VIP"),
			GetPVarInt(strval(inputtext), "Skin"),
			GetPVarInt(strval(inputtext), "RendorTP"),
			GetPVarInt(strval(inputtext), "KatonaTP"),
			GetPVarInt(strval(inputtext), "Ora"),
			GetPVarInt(strval(inputtext), "Perc"),
			leadernames2[GetPVarInt(strval(inputtext), "Leader")],
			GetPVarStringEx(strval(inputtext), "Clan"),
			GetPVarInt(strval(inputtext), "ClanRank"),
			GetPVarInt(strval(inputtext), "Szint"),
			levelexp[GetPVarInt(strval(inputtext), "Szint")][expvalue],
			GetPVarInt(strval(inputtext), "EXP"));

			ShowPlayerDialog(playerid, RENDORSZ3_DIALOG, DIALOG_STYLE_MSGBOX, "Hacker számítógép", rendorszdialog, "Vissza", "Kilép");
	    }
	    else ShowPlayerDialog(playerid, RENDORSZ1_DIALOG, DIALOG_STYLE_LIST, "Rendõr számítógép", "Játékos adatainak megtekintése", "Kiválaszt", "Kilép");
	}
	if(dialogid == RENDORSZ3_DIALOG) if(response) { ShowPlayerDialog(playerid, RENDORSZ2_DIALOG, DIALOG_STYLE_INPUT, "Rendõr számítógép", "Írd be annak a játékosnak az ID-jét akinek kíváncsi vagy az adataira!", "Tovább", "Vissza"); }
	if(dialogid == KERESKEDES_DIALOG)
	{
	    if(response)
	    {
	        if(eladastipus[playerid] == DROG_ELADAS)
	        {
	            new string[128];
			    format(string,sizeof(string),"%s drogot vett tõled!",GetPlayerNameEx(playerid));
				SendClientMessage(eladoid[playerid],COLOR_GREEN,string);
				format(string,sizeof(string),"Drogot vettél %s -tól/tõl.",GetPlayerNameEx(eladoid[playerid]));
				SendClientMessage(playerid,COLOR_GREEN,string);
				ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
				SetPlayerWeather(playerid, 1982);
				SetTimerEx("drogtimer", 60000, 0, "i", playerid);

				GivePlayerMoneyEx(playerid, -10000, "Drog vétel");
			    GivePlayerMoneyEx(eladoid[playerid], 10000, "Drog eladás");
	        }
	        if(eladastipus[playerid] == CIGI_ELADAS)
	        {
	            new string[128];
			    format(string,sizeof(string),"%s vett tõled egy doboz cigit!",GetPlayerNameEx(playerid));
				SendClientMessage(eladoid[playerid],COLOR_GREEN,string);
				format(string,sizeof(string),"Vettél egy doboz cigit %s -tól/tõl.",GetPlayerNameEx(eladoid[playerid]));
				SendClientMessage(playerid,COLOR_GREEN,string);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);

				GivePlayerMoneyEx(playerid, -5000, "Cigi vétel");
			    GivePlayerMoneyEx(eladoid[playerid], 5000, "Cigi eladás");
	        }
	        if(eladastipus[playerid] == PIA_ELADAS)
	        {
	            new string[128];
			    format(string,sizeof(string),"%s vett tõled egy üveg piát!",GetPlayerNameEx(playerid));
				SendClientMessage(eladoid[playerid],COLOR_GREEN,string);
				format(string,sizeof(string),"Vettél egy üveg piát %s -tól/tõl.",GetPlayerNameEx(eladoid[playerid]));
				SendClientMessage(playerid,COLOR_GREEN,string);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);

				GivePlayerMoneyEx(playerid, -3000, "Pia vétel");
			    GivePlayerMoneyEx(eladoid[playerid], 3000, "Pia eladás");
	        }
	        if(eladastipus[playerid] == VONALJEGY_ELADAS)
			{
			    new string[128];
			    format(string,sizeof(string),"%s vett tõled egy vonaljegyet!",GetPlayerNameEx(playerid));
				SendClientMessage(eladoid[playerid],COLOR_GREEN,string);
				format(string,sizeof(string),"Vettél egy vonaljegyet 3300$-ért. Eladó: %s",GetPlayerNameEx(eladoid[playerid]));
				SendClientMessage(playerid,COLOR_GREEN,string);

				GivePlayerMoneyEx(playerid, -3300, "Vonaljegy vétel");
			    GivePlayerMoneyEx(eladoid[playerid], 3300, "Vonaljegy eladás");
			}
			if(eladastipus[playerid] == KULONJEGY_ELADAS)
			{
			    new string[128];
			    format(string,sizeof(string),"%s vett tõled egy különjegyet!",GetPlayerNameEx(playerid));
				SendClientMessage(eladoid[playerid],COLOR_GREEN,string);
				format(string,sizeof(string),"Vettél egy különjegyet 6120$-ért. Eladó: %s",GetPlayerNameEx(eladoid[playerid]));
				SendClientMessage(playerid,COLOR_GREEN,string);

				GivePlayerMoneyEx(playerid, -6120, "Különjegy vétel");
			    GivePlayerMoneyEx(eladoid[playerid], 6120, "Különjegy eladás");
			}
			if(eladastipus[playerid] == HOTDOG_ELADAS)
			{
			    SendFormatMessage(eladoid[playerid], COLOR_GREEN, "Hotdogot adtál el %s-nek 10000$-ért!", GetPlayerNameEx(playerid));
				SendFormatMessage(playerid, COLOR_GREEN, "%s hotdogot adott neked 10000$-ért!", GetPlayerNameEx(eladoid[playerid]));
				new string[128];
				format(string,sizeof(string),"%s hotdogot adott el %s-nek.", GetPlayerNameEx(eladoid[playerid]), GetPlayerNameEx(playerid));
				SendClientMessageToAll(COLOR_GREEN, string);
				new Float:health;
				GivePlayerMoneyEx(eladoid[playerid], 10000, "Hotdog eladás");
			    GivePlayerMoneyEx(playerid, -10000, "Hotdog vétel");
				GetPlayerHealth(playerid, health);
				SetPlayerHealth(playerid, health+40.0);
				SetTimerEx("hotdogad", 60000, 0, "i", eladoid[playerid]);
				SetPVarInt(eladoid[playerid], "hotdogad", 1);
			}
	    }
	    if(!response) SendClientMessage(eladoid[playerid], COLOR_RED, "Nem fogadta el tõled a tárgyat.");
	}
	if(dialogid == 009)
	{
		if(response == 1)
		{
		    switch(listitem)
		    {
		        case 0:
		        {
		            SetPlayerAttachedObject(playerid, 8, 18649, 6, 0.07000, 0.03000, 0.80000, 90.000000, 0.000000, 0.000000, 1.3, 0.7, 2.3);
				    SetPVarInt(playerid,"Jedi",1);
					GivePlayerWeapon(playerid, 8, 1);
		        }
		        case 1:
		        {
		            SetPlayerAttachedObject(playerid, 8, 18650, 6, 0.07000, 0.03000, 0.80000, 90.000000, 0.000000, 0.000000, 1.3, 0.7, 2.3);
				    SetPVarInt(playerid,"Jedi",2);
					GivePlayerWeapon(playerid, 8, 1);
		        }
		        case 2:
		        {
		            SetPlayerAttachedObject(playerid, 8, 18648, 6, 0.07000, 0.03000, 0.80000, 90.000000, 0.000000, 0.000000, 1.3, 0.7, 2.3);
				    SetPVarInt(playerid,"Jedi",3);
					GivePlayerWeapon(playerid, 8, 1);
		        }
		        case 3:
		        {
		            SetPlayerAttachedObject(playerid, 8, 18647, 6, 0.07000, 0.03000, 0.80000, 90.000000, 0.000000, 0.000000, 1.3, 0.7, 2.3);
				    SetPVarInt(playerid,"Jedi",4);
					GivePlayerWeapon(playerid, 8, 1);
				}
				case 4:
				{
				    SetPlayerAttachedObject(playerid, 8, 18652, 6, 0.07000, 0.03000, 0.80000, 90.000000, 0.000000, 0.000000, 1.3, 0.7, 2.3);
				    SetPVarInt(playerid,"Jedi",5);
					GivePlayerWeapon(playerid, 8, 1);
				}
				case 5:
				{
				    SetPlayerAttachedObject(playerid, 8, 18651, 6, 0.07000, 0.03000, 0.80000, 90.000000, 0.000000, 0.000000, 1.3, 0.7, 2.3);
				    SetPVarInt(playerid,"Jedi",6);
					GivePlayerWeapon(playerid, 8, 1);
				}
			}
		}
		return 1;
	}
	if(response == 1)
	{
		if(dialogid == DIALOGID+1) SetTeam(playerid, TEAM_BKV);
		if(dialogid == DIALOGID+2) SetTeam(playerid, TEAM_MAV);
		if(dialogid == DIALOGID+3) SetTeam(playerid, TEAM_TAXI);
		if(dialogid == DIALOGID+4) SetTeam(playerid, TEAM_MENTOS);
		if(dialogid == DIALOGID+5) SetTeam(playerid, TEAM_BANKOS);
		if(dialogid == DIALOGID+51)
		{
		    SetPVarInt(playerid, "Bankoskuldi", 1);
		    SendClientMessage(playerid, COLOR_BANKOS, "Szállj be egy pénzszállítóba és menj a kijelölt bankhoz!");
			switch(listitem)
		    {
				case 0: SetPlayerCheckpoint ( playerid, -1596.7775,857.9039,7.5391, 6.0 );
				case 1: SetPlayerCheckpoint ( playerid, -2712.7107,127.7547,4.3359, 6.0 );
		    }
		}
		if(dialogid == DIALOGID+6)
		{
			SetTeam(playerid, TEAM_RABLO);
		}
		if(dialogid == DIALOGID+7)
		{
		    SetPVarInt(playerid, "Rablokuldi", 1);
		    SendClientMessage(playerid, COLOR_RABLO, "Szállj be egy furgonba és menj a kijelölt bankhoz!");
		    switch(listitem)
		    {
				case 0: SetPlayerCheckpoint ( playerid, -2426.9431,505.2778,29.9297, 6.0 );
				case 1: SetPlayerCheckpoint ( playerid, -1596.7775,857.9039,7.5391, 6.0 );
				case 2: SetPlayerCheckpoint ( playerid, -2712.7107,127.7547,4.3359, 6.0 );
		    }
		}
		if(dialogid == DIALOGID+9)
		{
			switch(listitem)
			{
			    case 0:
			    {
			        SetPVarInt(playerid, "Kamionkuldi", 1);
					switch(random(4))
					{
					    case 0:
					    {
					        SetPlayerCheckpoint(playerid, 2765.6072,-2402.0437,13.6328, 6.0);
						}
						case 1:
						{
						    SetPlayerCheckpoint(playerid, 354.6914,882.6033,20.4063, 6.0);
						}
						case 2:
						{
						    SetPlayerCheckpoint(playerid, 2573.6453,2779.8499,10.8203, 6.0);
						}
						case 3:
						{
						    SetPlayerCheckpoint(playerid, 1097.7253,1864.5248,10.8203, 6.0);
						}
					}
					SendClientMessage(playerid, COLOR_KAMIONOS, "Most szállj be egy kamionba, vegyél fel egy utánfutót és menj a CP-be!");
				}
				case 1:
				{
					SetPVarInt(playerid, "Kamionkuldi", 2);
				    switch(random(5))
				    {
				        case 0:
				        {
				            SetPlayerCheckpoint(playerid, -544.6884,-188.4729,78.4047, 6.0);
						}
						case 1:
				        {
				            SetPlayerCheckpoint(playerid, -1004.9703,-666.1567,32.0078, 6.0);
						}
						case 2:
				        {
				            SetPlayerCheckpoint(playerid, -2696.4634,1410.3107,6.6704, 6.0);
						}
						case 3:
				        {
				            SetPlayerCheckpoint(playerid, -2433.1379,952.5629,44.8591, 6.0);
						}
						case 4:
				        {
				            SetPlayerCheckpoint(playerid, -1695.5177,399.5767,7.1797, 6.0);
						}
					}
					SendClientMessage(playerid, COLOR_KAMIONOS, "Most szállj be egy kamionba, vegyél fel egy utánfutót és menj a CP-be!");
				}
			}
		}
		if(dialogid == DIALOGID+8) SetTeam(playerid, TEAM_KAMIONOS);

		//if(dialogid == DIALOGID+10) SetTeam(playerid, TEAM_ZSARU);
		if(dialogid == DIALOGID+11) SetTeam(playerid, TEAM_POLITIKUS);

		//if(dialogid == DIALOGID+13) SetTeam(playerid, TEAM_KATONA);
		if(dialogid == DIALOGID+14) SetTeam(playerid, TEAM_MTK);
		if(dialogid == DIALOGID+15) SetTeam(playerid, TEAM_UJPEST);
		if(dialogid == DIALOGID+16) SetTeam(playerid, TEAM_VASAS);
		if(dialogid == DIALOGID+17) SetTeam(playerid, TEAM_HONVED);
		if(dialogid == DIALOGID+18) SetTeam(playerid, TEAM_FRADI);
		if(dialogid == DIALOGID+20) SetTeam(playerid, TEAM_PAP);
  		if(dialogid == DIALOGID+21) SetTeam(playerid, TEAM_RIPORT);
		if(dialogid == DIALOGID+22) SetTeam(playerid, TEAM_TUZOLTO);
		if(dialogid == DIALOGID+23) SetTeam(playerid, TEAM_HOTDOG);
		if(dialogid == DIALOGID+24) SetTeam(playerid, TEAM_UTTISZTITO);
		if(dialogid == DIALOGID+25) SetTeam(playerid, TEAM_FARMER);
	}


        	if(dialogid == DIALOGID+60)
        	{
		    if(response)
		    {
			if(listitem == 0)
			{
			ShowPlayerDialog(playerid, DIALOGID+61, DIALOG_STYLE_LIST, "Pistols", "9mm (200$)\nSilenced 9mm (600$)\nDesert Eagle (1200$)", "Select", "Cancel");
            }
           	if(listitem == 1)
			{
			ShowPlayerDialog(playerid, DIALOGID+62, DIALOG_STYLE_LIST, "Micro SMGs", "Tec9 (300$)\nMicro SMG (500$)", "Select", "Cancel");
			}
            if(listitem == 2)
			{
			ShowPlayerDialog(playerid, DIALOGID+63, DIALOG_STYLE_LIST, "Shotguns", "Shotgun (600$)\nSawnoff Shotgun (800$)\nCombat Shotgun (1000$)", "Select", "Cancel");
			}
			if(listitem == 3)
			{
			ShowPlayerDialog(playerid, DIALOGID+64, DIALOG_STYLE_LIST, "Armours", "Armour (200$)", "Select", "Cancel");
            }
            if(listitem == 4)
			{
			ShowPlayerDialog(playerid, DIALOGID+65, DIALOG_STYLE_LIST, "SMG", "MP5 (2000$)", "Select", "Cancel");
            }
            if(listitem == 5)
			{
			ShowPlayerDialog(playerid, DIALOGID+66, DIALOG_STYLE_LIST, "Assault", "AK47 (3500$)\nM4 (4500$)", "Select", "Cancel");
            }
            }
	        }

        	if(dialogid == DIALOGID+61)
	        {
	        if(response)
		    {
			if(listitem == 0)
			{
            if(GetPlayerMoneyEx(playerid) <200)
	        return SendClientMessage(playerid, COLOR_RED, "Nincs elég pénzed!");
	        GivePlayerMoneyEx(playerid, -200);
	        GivePlayerWeapon(playerid,22,30);
	        SendClientMessage(playerid, COLOR_GREEN, "Vettél egy fegyvert: 9mm! ($200)");
	        ShowPlayerDialog(playerid, DIALOGID, DIALOG_STYLE_LIST, "AmmuNation", "Pistols\nMicro SMGs\nShotguns\nArmours\nSMG\nAssault", "Select", "Cancel");
			}
			if(listitem == 1)
			{
            if(GetPlayerMoneyEx(playerid) <600)
	        return SendClientMessage(playerid, COLOR_RED, "Nincs elég pénzed!");
	        GivePlayerMoneyEx(playerid, -600);
	        GivePlayerWeapon(playerid,23,30);
	        SendClientMessage(playerid, COLOR_GREEN, "Vettél egy fegyvert: Silenced 9mm! ($600)");
	        ShowPlayerDialog(playerid, DIALOGID, DIALOG_STYLE_LIST, "AmmuNation", "Pistols\nMicro SMGs\nShotguns\nArmours\nSMG\nAssault", "Select", "Cancel");
			}
			if(listitem == 2)
			{
            if(GetPlayerMoneyEx(playerid) <1200)
	        return SendClientMessage(playerid, COLOR_RED, "Nincs elég pénzed!");
	        GivePlayerMoneyEx(playerid, -1200);
	        GivePlayerWeapon(playerid,24,30);
	        SendClientMessage(playerid, COLOR_GREEN, "Vettél egy fegyvert: Desert Eagle! ($1200)");
	        ShowPlayerDialog(playerid, DIALOGID, DIALOG_STYLE_LIST, "AmmuNation", "Pistols\nMicro SMGs\nShotguns\nArmours\nSMG\nAssault", "Select", "Cancel");
			}
            }
	        }

	        if(dialogid == DIALOGID+62)
	        {
	        if(response)
		    {
	        if(listitem == 0)
			{
            if(GetPlayerMoneyEx(playerid) <300)
	        return SendClientMessage(playerid, COLOR_RED, "Nincs elég pénzed!");
	        GivePlayerMoneyEx(playerid, -300);
	        GivePlayerWeapon(playerid,32,30);
	        SendClientMessage(playerid, COLOR_GREEN, "Vettél egy fegyvert: Tec9! ($300)");
	        ShowPlayerDialog(playerid, DIALOGID, DIALOG_STYLE_LIST, "AmmuNation", "Pistols\nMicro SMGs\nShotguns\nArmours\nSMG\nAssault", "Select", "Cancel");
			}
            if(listitem == 1)
			{
            if(GetPlayerMoneyEx(playerid) <500)
	        return SendClientMessage(playerid, COLOR_RED, "Nincs elég pénzed!");
	        GivePlayerMoneyEx(playerid, -500);
	        GivePlayerWeapon(playerid,28,30);
	        SendClientMessage(playerid, COLOR_GREEN, "Vettél egy fegyvert: Micro SMG! ($500)");
	        ShowPlayerDialog(playerid, DIALOGID, DIALOG_STYLE_LIST, "AmmuNation", "Pistols\nMicro SMGs\nShotguns\nArmours\nSMG\nAssault", "Select", "Cancel");
			}
   			}
	        }

            if(dialogid == DIALOGID+63)
	        {
	        if(response)
		    {
	        if(listitem == 0)
			{
            if(GetPlayerMoneyEx(playerid) <600)
	        return SendClientMessage(playerid, COLOR_RED, "Nincs elég pénzed!");
	        GivePlayerMoneyEx(playerid, -600);
	        GivePlayerWeapon(playerid,25,15);
	        SendClientMessage(playerid, COLOR_GREEN, "Vettél egy fegyvert: Shotgun! ($600)");
	        ShowPlayerDialog(playerid, DIALOGID, DIALOG_STYLE_LIST, "AmmuNation", "Pistols\nMicro SMGs\nShotguns\nArmours\nSMG\nAssault", "Select", "Cancel");
			}
            if(listitem == 1)
			{
            if(GetPlayerMoneyEx(playerid) <800)
	        return SendClientMessage(playerid, COLOR_RED, "Nincs elég pénzed!");
	        GivePlayerMoneyEx(playerid, -800);
	        GivePlayerWeapon(playerid,26,15);
	        SendClientMessage(playerid, COLOR_GREEN, "Vettél egy fegyvert: Sawnoff Shotgun (800$)");
	        ShowPlayerDialog(playerid, DIALOGID, DIALOG_STYLE_LIST, "AmmuNation", "Pistols\nMicro SMGs\nShotguns\nArmours\nSMG\nAssault", "Select", "Cancel");
			}
            if(listitem == 2)
			{
            if(GetPlayerMoneyEx(playerid) <1000)
	        return SendClientMessage(playerid, COLOR_RED, "Nincs elég pénzed!");
	        GivePlayerMoneyEx(playerid, -1000);
	        GivePlayerWeapon(playerid,27,15);
	        SendClientMessage(playerid, COLOR_GREEN, "Vettél egy fegyvert: Combat Shotgun (1000$)");
	        ShowPlayerDialog(playerid, DIALOGID, DIALOG_STYLE_LIST, "AmmuNation", "Pistols\nMicro SMGs\nShotguns\nArmours\nSMG\nAssault", "Select", "Cancel");
			}
			}
	        }

	        if(dialogid == DIALOGID+64)
	        {
	        if(response)
		    {
	        if(listitem == 0)
			{
            if(GetPlayerMoneyEx(playerid) <200)
	        return SendClientMessage(playerid, COLOR_RED, "Nincs elég pénzed!");
	        GivePlayerMoneyEx(playerid, -200);
			SetPlayerArmour(playerid, 100);
	        SendClientMessage(playerid, COLOR_GREEN, "Vettél egy fegyvert: Armour! ($200)");
	        ShowPlayerDialog(playerid, DIALOGID, DIALOG_STYLE_LIST, "AmmuNation", "Pistols\nMicro SMGs\nShotguns\nArmours\nSMG\nAssault", "Select", "Cancel");
			}
			}
	        }

	        if(dialogid == DIALOGID+65)
	        {
	        if(response)
		    {
	        if(listitem == 0)
			{
            if(GetPlayerMoneyEx(playerid) <2000)
	        return SendClientMessage(playerid, COLOR_RED, "Nincs elég pénzed!");
	        GivePlayerMoneyEx(playerid, -2000);
	        GivePlayerWeapon(playerid,29,30);
	        SendClientMessage(playerid, COLOR_GREEN, "Vettél egy fegyvert: MP5 (2000$)");
	        ShowPlayerDialog(playerid, DIALOGID, DIALOG_STYLE_LIST, "AmmuNation", "Pistols\nMicro SMGs\nShotguns\nArmours\nSMG\nAssault", "Select", "Cancel");
			}
			}
	        }

            if(dialogid == DIALOGID+66)
	        {
	        if(response)
		    {
	        if(listitem == 0)
			{
            if(GetPlayerMoneyEx(playerid) <3500)
	        return SendClientMessage(playerid, COLOR_RED, "Nincs elég pénzed!");
	        GivePlayerMoneyEx(playerid, -3500);
	        GivePlayerWeapon(playerid,30,120);
	        SendClientMessage(playerid, COLOR_GREEN, "Vettél egy fegyvert: AK47 (3500$)");
	        ShowPlayerDialog(playerid, DIALOGID, DIALOG_STYLE_LIST, "AmmuNation", "Pistols\nMicro SMGs\nShotguns\nArmours\nSMG\nAssault", "Select", "Cancel");
			}
            if(listitem == 1)
			{
            if(GetPlayerMoneyEx(playerid) <4500)
	        return SendClientMessage(playerid, COLOR_RED, "Nincs elég pénzed!");
	        GivePlayerMoneyEx(playerid, -4500);
	        GivePlayerWeapon(playerid,31,120);
	        SendClientMessage(playerid, COLOR_GREEN, "Vettél egy fegyvert: M4 (4500$)");
	        ShowPlayerDialog(playerid, DIALOGID, DIALOG_STYLE_LIST, "AmmuNation", "Pistols\nMicro SMGs\nShotguns\nArmours\nSMG\nAssault", "Select", "Cancel");
			}
			}
	        }

	        if(dialogid == DIALOGID+71)
	        {
	        if(response)
		    {
		    if(listitem == 0)
			{
			ShowPlayerDialog(playerid,DIALOGID+72,DIALOG_STYLE_LIST,"Stunt jármûvek","NRG-500\nFreeway\nFaggio\nInfernus\nBullet\nTurismo\nCabbie\nSandking\nBMX\nMointain Bike\nMonster\nVortex","Rendben","Mégsem");
			}
			if(listitem == 1)
			{
			ShowPlayerDialog(playerid,DIALOGID+73,DIALOG_STYLE_LIST,"Segéd jármûvek","Packer\nRhino\nMaverick\nBus\nAmbulance\nNews Chopper\nCaddie","Rendben","Mégsem");
			}
			}
			}

			if(dialogid == DIALOGID+73)
	        {
	        if(response)
		    {

		    if(listitem == 0)
			{
			new Float:x,Float:y,Float:z,Float:a,newcar;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			newcar = CreateVehicle(443,x,y,z,a,1,1,300);
			SetVehicleVirtualWorld(newcar, 1);
			PutPlayerInVehicle(playerid,newcar,0);
			SendClientMessage(playerid,COLOR_YELLOW,"Jármû lerakva!");
			}

			if(listitem == 1)
			{
			new Float:x,Float:y,Float:z,Float:a,newcar;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			newcar = CreateVehicle(432,x,y,z,a,1,1,300);
			SetVehicleVirtualWorld(newcar, 1);
			PutPlayerInVehicle(playerid,newcar,0);
			SendClientMessage(playerid,COLOR_YELLOW,"Jármû lerakva!");
			}

			if(listitem == 2)
			{
			new Float:x,Float:y,Float:z,Float:a,newcar;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			newcar = CreateVehicle(487,x,y,z,a,1,1,300);
			SetVehicleVirtualWorld(newcar, 1);
			PutPlayerInVehicle(playerid,newcar,0);
			SendClientMessage(playerid,COLOR_YELLOW,"Jármû lerakva!");
			}

			if(listitem == 3)
			{
			new Float:x,Float:y,Float:z,Float:a,newcar;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			newcar = CreateVehicle(431,x,y,z,a,1,1,300);
			SetVehicleVirtualWorld(newcar, 1);
			PutPlayerInVehicle(playerid,newcar,0);
			SendClientMessage(playerid,COLOR_YELLOW,"Jármû lerakva!");
			}

			if(listitem == 4)
			{
			new Float:x,Float:y,Float:z,Float:a,newcar;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			newcar = CreateVehicle(416,x,y,z,a,1,1,300);
			SetVehicleVirtualWorld(newcar, 1);
			PutPlayerInVehicle(playerid,newcar,0);
			SendClientMessage(playerid,COLOR_YELLOW,"Jármû lerakva!");
			}

			if(listitem == 5)
			{
			new Float:x,Float:y,Float:z,Float:a,newcar;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			newcar = CreateVehicle(488,x,y,z,a,1,1,300);
			SetVehicleVirtualWorld(newcar, 1);
			PutPlayerInVehicle(playerid,newcar,0);
			SendClientMessage(playerid,COLOR_YELLOW,"Jármû lerakva!");
			}

			if(listitem == 6)
			{
			new Float:x,Float:y,Float:z,Float:a,newcar;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			newcar = CreateVehicle(457,x,y,z,a,1,1,300);
			SetVehicleVirtualWorld(newcar, 1);
			PutPlayerInVehicle(playerid,newcar,0);
			SendClientMessage(playerid,COLOR_YELLOW,"Jármû lerakva!");
			}



			}
			}


			if(dialogid == DIALOGID+72)
	        {
	        if(response)
		    {

		    if(listitem == 0)
			{
			new Float:x,Float:y,Float:z,Float:a,newcar;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			newcar = CreateVehicle(522,x,y,z,a,1,1,300);
			SetVehicleVirtualWorld(newcar, 1);
			PutPlayerInVehicle(playerid,newcar,0);
			SendClientMessage(playerid,COLOR_YELLOW,"Jármû lerakva!");
			}
			if(listitem == 1)
			{
			new Float:x,Float:y,Float:z,Float:a,newcar;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			newcar = CreateVehicle(463,x,y,z,a,1,1,300);
			SetVehicleVirtualWorld(newcar, 1);
			PutPlayerInVehicle(playerid,newcar,0);
			SendClientMessage(playerid,COLOR_YELLOW,"Jármû lerakva!");
			}
			if(listitem == 2)
			{
			new Float:x,Float:y,Float:z,Float:a,newcar;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			newcar = CreateVehicle(462,x,y,z,a,1,1,300);
			SetVehicleVirtualWorld(newcar, 1);
			PutPlayerInVehicle(playerid,newcar,0);
			SendClientMessage(playerid,COLOR_YELLOW,"Jármû lerakva!");
			}
			if(listitem == 3)
			{
			new Float:x,Float:y,Float:z,Float:a,newcar;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			newcar = CreateVehicle(411,x,y,z,a,1,1,300);
			SetVehicleVirtualWorld(newcar, 1);
			PutPlayerInVehicle(playerid,newcar,0);
			SendClientMessage(playerid,COLOR_YELLOW,"Jármû lerakva!");
			}
			if(listitem == 4)
			{
			new Float:x,Float:y,Float:z,Float:a,newcar;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			newcar = CreateVehicle(541,x,y,z,a,1,1,300);
			SetVehicleVirtualWorld(newcar, 1);
			PutPlayerInVehicle(playerid,newcar,0);
			SendClientMessage(playerid,COLOR_YELLOW,"Jármû lerakva!");
			}
			if(listitem == 5)
			{
			new Float:x,Float:y,Float:z,Float:a,newcar;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			newcar = CreateVehicle(451,x,y,z,a,1,1,300);
			SetVehicleVirtualWorld(newcar, 1);
			PutPlayerInVehicle(playerid,newcar,0);
			SendClientMessage(playerid,COLOR_YELLOW,"Jármû lerakva!");
			}
			if(listitem == 6)
			{
			new Float:x,Float:y,Float:z,Float:a,newcar;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			newcar = CreateVehicle(438,x,y,z,a,1,1,300);
			SetVehicleVirtualWorld(newcar, 1);
			PutPlayerInVehicle(playerid,newcar,0);
			SendClientMessage(playerid,COLOR_YELLOW,"Jármû lerakva!");
			}
			if(listitem == 7)
			{
			new Float:x,Float:y,Float:z,Float:a,newcar;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			newcar = CreateVehicle(495,x,y,z,a,1,1,300);
			SetVehicleVirtualWorld(newcar, 1);
			PutPlayerInVehicle(playerid,newcar,0);
			SendClientMessage(playerid,COLOR_YELLOW,"Jármû lerakva!");
			}
			if(listitem == 8)
			{
			new Float:x,Float:y,Float:z,Float:a,newcar;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			newcar = CreateVehicle(481,x,y,z,a,1,1,300);
			SetVehicleVirtualWorld(newcar, 1);
			PutPlayerInVehicle(playerid,newcar,0);
			SendClientMessage(playerid,COLOR_YELLOW,"Jármû lerakva!");
			}
			if(listitem == 9)
			{
			new Float:x,Float:y,Float:z,Float:a,newcar;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			newcar = CreateVehicle(510,x,y,z,a,1,1,300);
			SetVehicleVirtualWorld(newcar, 1);
			PutPlayerInVehicle(playerid,newcar,0);
			SendClientMessage(playerid,COLOR_YELLOW,"Jármû lerakva!");
			}
			if(listitem == 10)
			{
			new Float:x,Float:y,Float:z,Float:a,newcar;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			newcar = CreateVehicle(444,x,y,z,a,1,1,300);
			SetVehicleVirtualWorld(newcar, 1);
			PutPlayerInVehicle(playerid,newcar,0);
			SendClientMessage(playerid,COLOR_YELLOW,"Jármû lerakva!");
			}
			if(listitem == 11)
			{
			new Float:x,Float:y,Float:z,Float:a,newcar;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			newcar = CreateVehicle(539,x,y,z,a,1,1,300);
			SetVehicleVirtualWorld(newcar, 1);
			PutPlayerInVehicle(playerid,newcar,0);
			SendClientMessage(playerid,COLOR_YELLOW,"Jármû lerakva!");
			}


			}
			}


	        if(dialogid == DIALOGID+70)
	        {
	        if(response)
		    {

	        if(listitem == 0)
			{
			if(IsPlayerInAnyVehicle(playerid))
			{
			SetVehiclePos(GetPlayerVehicleID(playerid),1546.4661,-2213.9661,13.5547);
			SetVehicleZAngle(GetPlayerVehicleID(playerid),0);
			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 1);
			}else{
			SetPlayerPos(playerid,1546.4661,-2213.9661,13.5547);
			SetPlayerFacingAngle(playerid,0);
			}
			SendClientMessage(playerid,COLOR_YELLOW,"Sikeresen elteleportáltál!");
			}

			if(listitem == 1)
			{
			if(IsPlayerInAnyVehicle(playerid))
			{
			SetVehiclePos(GetPlayerVehicleID(playerid),-1926.5413,259.1435,41.0391);
			SetVehicleZAngle(GetPlayerVehicleID(playerid),180);
			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 1);
			}else{
			SetPlayerPos(playerid,-1926.5413,259.1435,41.0391);
			SetPlayerFacingAngle(playerid,180);
			}
			SendClientMessage(playerid,COLOR_YELLOW,"Sikeresen elteleportáltál!");
			}

			if(listitem == 2)
			{
			if(IsPlayerInAnyVehicle(playerid))
			{
			SetVehiclePos(GetPlayerVehicleID(playerid),2134.9990,1000.5773,10.8203);
			SetVehicleZAngle(GetPlayerVehicleID(playerid),270);
			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 1);
			}else{
			SetPlayerPos(playerid,2134.9990,1000.5773,10.8203);
			SetPlayerFacingAngle(playerid,270);
			}
			SendClientMessage(playerid,COLOR_YELLOW,"Sikeresen elteleportáltál!");
			}

			if(listitem == 3)
			{
			if(IsPlayerInAnyVehicle(playerid))
			{
			SetVehiclePos(GetPlayerVehicleID(playerid),384.1322,2532.8628,16.5391);
			SetVehicleZAngle(GetPlayerVehicleID(playerid),180);
			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 1);
			}else{
			SetPlayerPos(playerid,384.1322,2532.8628,16.5391);
			SetPlayerFacingAngle(playerid,180);
			}
			SendClientMessage(playerid,COLOR_YELLOW,"Sikeresen elteleportáltál!");
			}

			if(listitem == 4)
			{
			if(IsPlayerInAnyVehicle(playerid))
			{
			SetVehiclePos(GetPlayerVehicleID(playerid),-53.6448,-9.9859,3.1172);
			SetVehicleZAngle(GetPlayerVehicleID(playerid),335);
			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 1);
			}else{
			SetPlayerPos(playerid,-53.6448,-9.9859,3.1172);
			SetPlayerFacingAngle(playerid,335);
			}
			SendClientMessage(playerid,COLOR_YELLOW,"Sikeresen elteleportáltál!");
			}

			if(listitem == 5)
			{
			if(IsPlayerInAnyVehicle(playerid))
			{
			SetVehiclePos(GetPlayerVehicleID(playerid),-2093.9714,-2370.0579,30.6250);
			SetVehicleZAngle(GetPlayerVehicleID(playerid),53);
			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 1);
			}else{
			SetPlayerPos(playerid,-2093.9714,-2370.0579,30.6250);
			SetPlayerFacingAngle(playerid,53);
			}
			SendClientMessage(playerid,COLOR_YELLOW,"Sikeresen elteleportáltál!");
			}


			}
			}


	if(dialogid == DIALOGID+100)
	{
	    new bstr[128];
		format(bstr, sizeof(bstr), "Neked %d $-od van a bankban! Írd be hogy mennyit szeretnél betenni!", GetPVarInt(playerid, "Bank"));
		format(bstr, sizeof(bstr), "Neked %d $-od van a bankban! Írd be hogy mennyit szeretnél kivenni!", GetPVarInt(playerid, "Bank"));
	    if(response == 1) ShowPlayerDialog(playerid, DIALOGID+101, DIALOG_STYLE_INPUT, "Bank", bstr, "OK", "Mégse");
	    if(response == 0) ShowPlayerDialog(playerid, DIALOGID+102, DIALOG_STYLE_INPUT, "Bank", bstr, "OK", "Mégse");
	}

	if(dialogid == DIALOGID+101)
	{
	    if(response == 1)
	    {
			if(0 < strval(inputtext) <= GetPlayerMoneyEx(playerid))
			{
				SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank")+strval(inputtext));
				GivePlayerMoneyEx(playerid, -strval(inputtext), "Bankba tett pénzt");
				SendFormatMessage(playerid, COLOR_GREEN, "A bankban %d$ van.", GetPVarInt(playerid, "Bank"));
			} else SendClientMessage(playerid, COLOR_WHITE, "HIBA: Nem rakhatsz be több pénzt mint ami nálad van!");
		}
	}

	if(dialogid == DIALOGID+102)
	{
	    if(response == 1)
	    {
			if(0 < strval(inputtext) <= GetPVarInt(playerid, "Bank"))
			{
				SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank")-strval(inputtext));
				GivePlayerMoneyEx(playerid, strval(inputtext), "Bankból kivett pénzt");
				SendFormatMessage(playerid, COLOR_GREEN, "A bankban még %d$ van.", GetPVarInt(playerid, "Bank"));
			} else SendClientMessage(playerid, COLOR_WHITE, "HIBA: Nem vehetsz ki több pénzt mint amid a bankban van!");
		}
	}

	if(dialogid == DIALOGID+130)
	{
	    if(response == 1)
	    {
	        if( -1< strval(inputtext) < 300)
			{
		        SetPlayerSkin(playerid, strval(inputtext));
		        SetPVarInt(playerid, "Skin", strval(inputtext));
		        if(GetPlayerMoneyEx(playerid) >= 5000) GivePlayerMoneyEx(playerid, -5000);
			} else ShowPlayerDialog(playerid, DIALOGID+130, DIALOG_STYLE_INPUT, "Ruhabolt", "Az id csak 0 és 299 között lehet!\nAz idket a http://wiki.sa-mp.com/wiki/Skins:All oldalon találod!", "Megvesz", "Mégse");
		}
	}
	if(dialogid == RCARARAK_DIALOG)
	{
	    if(response)
	    {
			format(query, sizeof(query), "SELECT Name, vehid, ar FROM autoadatok WHERE Name = '%s' OR vehid = '%s'", inputtext, inputtext);
   			mysql_query(query);
			mysql_store_result();
			if(mysql_num_rows() != 0)
			{
				mysql_fetch_row(linen);
				new tarolo[24];
				new tarolo2;
				new tarolo3;
				new adatstr[128];
				sscanf(linen, "p<|>s[24]ii", tarolo, tarolo2, tarolo3);
				mysql_free_result();
			    format(adatstr, sizeof(adatstr), "Név: %s\nID:%d\nÁr: %s$", tarolo, tarolo2, convertFormattedNumber(tarolo3, "."));
                TextDrawSetPreviewModel(modeltext[playerid], tarolo2);
                TextDrawSetPreviewRot(modeltext[playerid], -16.0, 0.0, -55.0);
				TextDrawShowForPlayer(playerid, modeltext[playerid]);
				SetPVarInt(playerid, "carid", tarolo2);
				SetPVarInt(playerid, "carar", tarolo3);
				ShowPlayerDialog(playerid, CARINFOVETEL_DIALOG, DIALOG_STYLE_MSGBOX, "Az autó adatai", adatstr, "Megvesz", "Kilép");
			}
			else
			{
				ShowPlayerDialog(playerid, RCARARAK_DIALOG, DIALOG_STYLE_INPUT, "Írd be a jármû nevét!", "Ez az autó nem található a rendszerben, vagy elírtál valamit!\nHa az elsõ betüt kisbetûvel írtad, próbáld meg naggyal!", "Tovább", "Kilép");
			}
		}
	}
	if(dialogid == CARINFO_DIALOG)
	{
	    if(response)
	    {
			ShowPlayerDialog(playerid, RCARARAK_DIALOG, DIALOG_STYLE_INPUT, "Írd be a jármû nevét!", "Írd be a jármû nevét, amelyik info-jára kíváncsi vagy!\nHa van benne szóköz, azt '_' jellel jelöld, pl Super_GT!", "Tovább", "Kilép");
		}
	}
	if(dialogid == CARINFOVETEL_DIALOG)
	{
	    TextDrawHideForPlayer(playerid, modeltext[playerid]);
	    if(response)
		{
		    if(GetPVarInt(playerid, "Szint") < 1) return SendClientMessage(playerid, COLOR_RED, "Szinthiba: Az autóvásárlás 1-es szinttõl válik elérhetõvé.");
		    new autok;
		    format(query, sizeof(query), "SELECT * FROM cars WHERE Tulaj = '%s'", GetPlayerNameEx(playerid));
		    mysql_query(query);
		    mysql_store_result();
		    if(mysql_num_rows() != 0)
		    {
		        while(mysql_fetch_row(linen))
		        {
					autok++;
				}
				mysql_free_result();
		    }
			if(autok >= MAX_OWNCARS) return SendClientMessage(playerid, COLOR_GREY, "HIBA: Max 10 jármûved lehet!");
		    if(GetPlayerMoneyEx(playerid) >= GetPVarInt(playerid, "carar"))
		    {
				ShowPlayerDialog(playerid, CARSZINEK_DIALOG, DIALOG_STYLE_LIST, "Milyen színû autót szeretnél? Szín1", "Fekete\nFehér\nVilágosék\nSötétkék\nPiros\nSzürke\nZöld\nBarna\nSárga\nRózsaszín", "Megvesz", "Mégse");
			}
			else SendClientMessage(playerid, COLOR_GREY, "HIBA: Erre az autóra nincs pénzed!");
		}
	}
	if(dialogid == CARSZINEK_DIALOG)
	{
	    if(!response) return 1;
	    if(listitem == 0) SetPVarInt(playerid, "szin1", 0), ShowPlayerDialog(playerid, CARSZINEK2_DIALOG, DIALOG_STYLE_LIST, "Milyen színû autót szeretnél? Szín2", "Fekete\nFehér\nVilágosék\nSötétkék\nPiros\nSzürke\nZöld\nBarna\nSárga\nRózsaszín", "Megvesz", "Mégse");
        if(listitem == 1) SetPVarInt(playerid, "szin1", 1), ShowPlayerDialog(playerid, CARSZINEK2_DIALOG, DIALOG_STYLE_LIST, "Milyen színû autót szeretnél? Szín2", "Fekete\nFehér\nVilágosék\nSötétkék\nPiros\nSzürke\nZöld\nBarna\nSárga\nRózsaszín", "Megvesz", "Mégse");
        if(listitem == 2) SetPVarInt(playerid, "szin1", 2), ShowPlayerDialog(playerid, CARSZINEK2_DIALOG, DIALOG_STYLE_LIST, "Milyen színû autót szeretnél? Szín2", "Fekete\nFehér\nVilágosék\nSötétkék\nPiros\nSzürke\nZöld\nBarna\nSárga\nRózsaszín", "Megvesz", "Mégse");
        if(listitem == 3) SetPVarInt(playerid, "szin1", 53), ShowPlayerDialog(playerid, CARSZINEK2_DIALOG, DIALOG_STYLE_LIST, "Milyen színû autót szeretnél? Szín2", "Fekete\nFehér\nVilágosék\nSötétkék\nPiros\nSzürke\nZöld\nBarna\nSárga\nRózsaszín", "Megvesz", "Mégse");
        if(listitem == 4) SetPVarInt(playerid, "szin1", 3), ShowPlayerDialog(playerid, CARSZINEK2_DIALOG, DIALOG_STYLE_LIST, "Milyen színû autót szeretnél? Szín2", "Fekete\nFehér\nVilágosék\nSötétkék\nPiros\nSzürke\nZöld\nBarna\nSárga\nRózsaszín", "Megvesz", "Mégse");
        if(listitem == 5) SetPVarInt(playerid, "szin1", 24), ShowPlayerDialog(playerid, CARSZINEK2_DIALOG, DIALOG_STYLE_LIST, "Milyen színû autót szeretnél? Szín2", "Fekete\nFehér\nVilágosék\nSötétkék\nPiros\nSzürke\nZöld\nBarna\nSárga\nRózsaszín", "Megvesz", "Mégse");
        if(listitem == 6) SetPVarInt(playerid, "szin1", 44), ShowPlayerDialog(playerid, CARSZINEK2_DIALOG, DIALOG_STYLE_LIST, "Milyen színû autót szeretnél? Szín2", "Fekete\nFehér\nVilágosék\nSötétkék\nPiros\nSzürke\nZöld\nBarna\nSárga\nRózsaszín", "Megvesz", "Mégse");
        if(listitem == 7) SetPVarInt(playerid, "szin1", 66), ShowPlayerDialog(playerid, CARSZINEK2_DIALOG, DIALOG_STYLE_LIST, "Milyen színû autót szeretnél? Szín2", "Fekete\nFehér\nVilágosék\nSötétkék\nPiros\nSzürke\nZöld\nBarna\nSárga\nRózsaszín", "Megvesz", "Mégse");
        if(listitem == 8) SetPVarInt(playerid, "szin1", 6), ShowPlayerDialog(playerid, CARSZINEK2_DIALOG, DIALOG_STYLE_LIST, "Milyen színû autót szeretnél? Szín2", "Fekete\nFehér\nVilágosék\nSötétkék\nPiros\nSzürke\nZöld\nBarna\nSárga\nRózsaszín", "Megvesz", "Mégse");
        if(listitem == 9) SetPVarInt(playerid, "szin1", 126), ShowPlayerDialog(playerid, CARSZINEK2_DIALOG, DIALOG_STYLE_LIST, "Milyen színû autót szeretnél? Szín2", "Fekete\nFehér\nVilágosék\nSötétkék\nPiros\nSzürke\nZöld\nBarna\nSárga\nRózsaszín", "Megvesz"	, "Mégse");
	}
	if(dialogid == CARSZINEK2_DIALOG)
	{
	    if(!response) return 1;
	    if(listitem == 0) SetPVarInt(playerid, "szin2", 0);
	    if(listitem == 1) SetPVarInt(playerid, "szin2", 1);
	    if(listitem == 2) SetPVarInt(playerid, "szin2", 2);
	    if(listitem == 3) SetPVarInt(playerid, "szin2", 53);
	    if(listitem == 4) SetPVarInt(playerid, "szin2", 3);
	    if(listitem == 5) SetPVarInt(playerid, "szin2", 24);
	    if(listitem == 6) SetPVarInt(playerid, "szin2", 44);
	    if(listitem == 7) SetPVarInt(playerid, "szin2", 66);
	    if(listitem == 8) SetPVarInt(playerid, "szin2", 6);
	    if(listitem == 9) SetPVarInt(playerid, "szin2", 126);
        for(new i; i < MAX_SLOTS; i++)
        {
			format(query, sizeof(query), "SELECT * FROM cars WHERE slot = '%d'", i);
			mysql_query(query);
			mysql_store_result();
			if(mysql_num_rows() == 0)
			{
			    new Float:app[4];
			    if(IsVehiclePlane(GetPVarInt(playerid, "carid"))) carplay[i] = CreateVehicle(GetPVarInt(playerid, "carid"), -1671.7217,1211.1257,32.9486,269.3057, GetPVarInt(playerid, "szin1"), GetPVarInt(playerid, "szin2"), -1);
			    else
				{
				    new rand = random(sizeof(newCarPos));
				    app[0] = newCarPos[rand][0];
				    app[1] = newCarPos[rand][1];
				    app[2] = newCarPos[rand][2];
				    app[3] = newCarPos[rand][3];
					carplay[i] = CreateVehicle(GetPVarInt(playerid, "carid"), app[0],app[1],app[2],app[3], GetPVarInt(playerid, "szin1"), GetPVarInt(playerid, "szin2"), -1);
    			}
				mysql_free_result();
				new carstring[150];
				format(carstring, sizeof(carstring), "Megvetted az autót %d$-ért. Az üzlet elõtt megtalálod. Az autód slot-ja: %d, a /mycars paranccsal bármikor megnézheted.", GetPVarInt(playerid, "carar"), i);
				SendClientMessage(playerid, COLOR_GREEN, carstring);
				SendClientMessage(playerid, COLOR_GREEN, "Parkold le valahol az autódat, hogy odamész egy helyre, és beírod /parkol");
				SendClientMessage(playerid, COLOR_GREEN, "FIGYELEM! Ha nem parkolod el az autóbolt elöl a jármûvedet törlésre kerül!");
				if(GetPVarInt(playerid, "carid") == 511 || GetPVarInt(playerid, "carid") == 513 || GetPVarInt(playerid, "carid") == 593 || GetPVarInt(playerid, "carid") == 519 || GetPVarInt(playerid, "carid") == 417) format(query, sizeof(query), "INSERT INTO cars (slot, Tulaj, Tarstulaj, VehID, X, Y, Z, A, color1, color2, paintjob) VALUES (%d, '%s', 'Nincs', %d, -1671.7217,1211.1257,32.9486,269.3057, %d, %d, 5)",
				i, GetPlayerNameEx(playerid), GetPVarInt(playerid, "carid"), GetPVarInt(playerid, "szin1"), GetPVarInt(playerid, "szin2"));
				else format(query, sizeof(query), "INSERT INTO cars (slot, Tulaj, Tarstulaj, VehID, X, Y, Z, A, color1, color2, paintjob) VALUES (%d, '%s', 'Nincs', %d, %0.4f,%0.4f,%0.4f,%0.4f, %d, %d, 5)", i, GetPlayerNameEx(playerid), GetPVarInt(playerid, "carid"), app[0],app[1],app[2],app[3], GetPVarInt(playerid, "szin1"), GetPVarInt(playerid, "szin2"));
 				mysql_query(query);
				GivePlayerMoneyEx(playerid, -GetPVarInt(playerid, "carar"), "Jármûvet vett");
				format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('0', '%s', %d, %d, NOW(), 'Vett a cégnél')", GetPlayerNameEx(playerid), i, GetPVarInt(playerid, "carid"));
 				mysql_query(query);
 				if(GetAchievement(playerid, "elsokocsi") == 0)
			    {
					UnlockAchievement(playerid, "", "Elsõ jármû megvétele", "Elsõ jármû");
					GiveAchievement(playerid, "elsokocsi", 1);
					GiveEXP(playerid, ELSOKOCSI_EXP);
			    }
				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_GREY, "Sajnálom, de az összes jármû elfogyott!");
	}
	/*if(dialogid == AUTOSZEREL_DIALOG)
	{
	    if(response)
	    {
	    	if(listitem == 0)
	    	{
    	 		ShowPlayerDialog(playerid, AUTOSLOT_DIALOG, DIALOG_STYLE_INPUT, "Autó slotja", "Írd be melyik azt az autóslot-ot amivel dolgozni fogsz!", "Tovább", "Vissza");
			}
			if(listitem == 1)
			{
				ShowPlayerDialog(playerid, AUTOTUNING_DIALOG, DIALOG_STYLE_LIST, "Autó tuningja", "Tuning beírása ID szerint\nTuningok", "Kiválszt", "Vissza");
			}
			if(listitem == 2)
			{
			    ShowPlayerDialog(playerid, AUTOREND_DIALOG, DIALOG_STYLE_INPUT, "Autó rendszáma", "Írd be mi legyen a jármû rendszáma!", "Tovább", "Vissza");
			}
			if(listitem == 3)
			{
			    ShowPlayerDialog(playerid, AUTOCOLOR12_DIALOG, DIALOG_STYLE_INPUT, "Autó színe", "Írd be hogy az 1-es vagy a 2-es színt akarod átfesteni!", "Tovább", "Vissza");
			}
			if(listitem == 4)
			{
			    ShowPlayerDialog(playerid, AUTOPAINT_DIALOG, DIALOG_STYLE_INPUT, "Autó paintjob-ja", "Írd be hogy melyik paintjob-ra akarod átfesteni az autót!(0, 1, 2)\nHa le akarod venni, írj 5-öt!", "Tovább", "Vissza");
			}
			if(listitem == 5)
			{
			    DestroyVehicle(carplay[GetPVarInt(playerid, "szerelslot")]);
			    carplay[GetPVarInt(playerid, "szerelslot")] = 0;
    			format(query, sizeof(query), "SELECT * FROM cars WHERE slot = '%d'", GetPVarInt(playerid, "szerelslot"));
		     	mysql_query(query);
			   	mysql_store_result();
				if(mysql_num_rows() != 0)
				{
					mysql_fetch_row(linen);
					new tarolo[6];
					new tuning[10];
					new Float:tarolo2[4];
					new tarolo3[15];
					new Float:tarolo4[6];
					new Float:tarolo5[6];
					new vwtarolo;
					sscanf(linen, "p<|>{ds[24]s[24]}dffffdddddddddddddddds[15]{dddddddddddddddddddddd}ffffffffffff{s[60]}",
					tarolo[0], Float:tarolo2[0], Float:tarolo2[1], Float:tarolo2[2], Float:tarolo2[3], vwtarolo, tarolo[1], tarolo[2],
				 	tuning[0], tuning[1], tuning[2], tuning[3], tuning[4], tuning[5], tuning[6], tuning[7], tuning[8],
				 	tuning[9], tarolo[3], tarolo[4], tarolo[5], tarolo3, Float:tarolo4[0], Float:tarolo4[1],
				 	Float:tarolo4[2], Float:tarolo4[3], Float:tarolo4[4],Float:tarolo4[5], Float:tarolo5[0], Float:tarolo5[1], Float:tarolo5[2], Float:tarolo5[3],
				   	Float:tarolo5[4], Float:tarolo5[5]);
					carplay[GetPVarInt(playerid, "szerelslot")] = CreateVehicle(tarolo[0], tarolo2[0], tarolo2[1], tarolo2[2], tarolo2[3], tarolo[1], tarolo[2], -1);
					SetVehicleVirtualWorld(carplay[GetPVarInt(playerid, "szerelslot")], vwtarolo);
					AddVehicleComponent(carplay[GetPVarInt(playerid, "szerelslot")], tuning[0]);
					AddVehicleComponent(carplay[GetPVarInt(playerid, "szerelslot")], tuning[1]);
					AddVehicleComponent(carplay[GetPVarInt(playerid, "szerelslot")], tuning[2]);
					AddVehicleComponent(carplay[GetPVarInt(playerid, "szerelslot")], tuning[3]);
					AddVehicleComponent(carplay[GetPVarInt(playerid, "szerelslot")], tuning[4]);
					AddVehicleComponent(carplay[GetPVarInt(playerid, "szerelslot")], tuning[5]);
					AddVehicleComponent(carplay[GetPVarInt(playerid, "szerelslot")], tuning[6]);
					AddVehicleComponent(carplay[GetPVarInt(playerid, "szerelslot")], tuning[7]);
					AddVehicleComponent(carplay[GetPVarInt(playerid, "szerelslot")], tuning[8]);
					AddVehicleComponent(carplay[GetPVarInt(playerid, "szerelslot")], tuning[9]);
					if(tarolo[3] != 0)
					{
						objects[GetPVarInt(playerid, "szerelslot")] = CreateDynamicObject(tarolo[3], 0, 0, -50, 0, 0, 0);
						AttachDynamicObjectToVehicle(objects[GetPVarInt(playerid, "szerelslot")], carplay[GetPVarInt(playerid, "szerelslot")], Float:tarolo4[0], Float:tarolo4[1], Float:tarolo4[2], Float:tarolo4[3], Float:tarolo4[4], Float:tarolo4[5]);
					}
					if(tarolo[4] != 0)
					{
						objects2[GetPVarInt(playerid, "szerelslot")] = CreateDynamicObject(tarolo[4], 0, 0, -50, 0, 0, 0);
						AttachDynamicObjectToVehicle(objects2[GetPVarInt(playerid, "szerelslot")], carplay[GetPVarInt(playerid, "szerelslot")], tarolo5[0], tarolo5[1], tarolo5[2], tarolo5[3], tarolo5[4], tarolo5[5]);
					}
					ChangeVehiclePaintjob(carplay[GetPVarInt(playerid, "szerelslot")], tarolo[5]);
					SetVehicleNumberPlate(carplay[GetPVarInt(playerid, "szerelslot")], tarolo3);
					mysql_free_result();
				}
			}
			if(listitem == 6)
			{
			    format(query, sizeof(query), "SELECT slot, Tulaj, Tarstulaj, VehID, X, Y, Z, A, VW, color1, color2, tuning1, tuning2, tuning3, tuning4, tuning5, tuning6, tuning7, tuning8, tuning9, tuning10, object1, object2, paintjob, rendszam FROM cars WHERE slot = '%d'", GetPVarInt(playerid, "szerelslot"));
       			mysql_query(query);
			    mysql_store_result();
			    if(mysql_num_rows() != 0)
			    {
			        mysql_fetch_row(linen);
			        new tarolo[15];
			        new tuning[11];
			        new tulajtarolo[2][24];
			        new Float:postarolo[4];
			        new rendsztarolo[15];
			        sscanf(linen, "p<|>ds[24]s[24]dffffdddddddddddddddds[15]", tarolo[0], tulajtarolo[0], tulajtarolo[1], tarolo[1], postarolo[0], postarolo[1], postarolo[2], postarolo[3], tarolo[2], tarolo[3], tarolo[4], tuning[0], tuning[1], tuning[2], tuning[3], tuning[4], tuning[5], tuning[6], tuning[7], tuning[8], tuning[9], tarolo[5], tarolo[6], tarolo[7], rendsztarolo);
			        mysql_free_result();
			        new adatdialog[500];
				  	format(adatdialog, sizeof(adatdialog), "Slot: %d\nTulaj: %s, Társtulaj: %s, JármûModelID: %d\nX: %0.2f, Y: %0.2f, Z: %0.2f, A(ngle): %0.2f, VirtualWorld: %d\nSzín1: %d, Szín2: %d\nTuning1: %d(%s), Tuning2: %d(%s), Tuning3: %d(%s),\n Tuning4: %d(%s), Tuning5: %d(%s), Tuning6: %d(%s),\n Tuning7: %d(%s), Tuning8: %d(%s), Tuning9: %d(%s), Tuning10: %d(%s)\nObject1: %d, Object2: %d\nPaintjob: %d, Rendszám: %s",
					tarolo[0], tulajtarolo[0], tulajtarolo[1], tarolo[1], postarolo[0], postarolo[1], postarolo[2], postarolo[3],
				 	tarolo[2], tarolo[3], tarolo[4],
				 	tuning[0], GetComponentName(tuning[0]), tuning[1], GetComponentName(tuning[1]), tuning[2], GetComponentName(tuning[2]),
				  	tuning[3], GetComponentName(tuning[3]), tuning[4], GetComponentName(tuning[4]), tuning[5], GetComponentName(tuning[5]),
			  		tuning[6], GetComponentName(tuning[6]), tuning[7], GetComponentName(tuning[7]), tuning[8], GetComponentName(tuning[8]),
				  	tuning[9], GetComponentName(tuning[9]),
				  	tarolo[5], tarolo[6], tarolo[7], rendsztarolo);
				 	ShowPlayerDialog(playerid, AUTOADAT_DIALOG, DIALOG_STYLE_MSGBOX, "A jármû adatai", adatdialog, "Vissza", "");
			    }
			}
		}
	}
	if(dialogid == AUTOADAT_DIALOG)
	{
	    if(response)
	    {
	        ShowSzerelDialog(playerid);
		}
	}
	if(dialogid == AUTOSLOT_DIALOG)
	{
	    if(response)
	    {
	        format(query, sizeof(query), "SELECT * FROM cars WHERE slot = '%d'", strval(inputtext));
			mysql_query(query);
			mysql_store_result();
			if(mysql_num_rows() == 0)
			{
				ShowPlayerDialog(playerid, AUTOSLOT_DIALOG, DIALOG_STYLE_INPUT, "Autó slotja", "A slot nincs létrehozva!\nÍrd be melyik azt az autóslot-ot amivel dolgozni fogsz!", "Tovább", "Vissza");
				mysql_free_result();
				return 1;
			}
	        SetPVarInt(playerid, "szerelslot", strval(inputtext));
			ShowSzerelDialog(playerid);
	    }
	    if(!response)
	    {
			ShowSzerelDialog(playerid);
	    }
	}
	if(dialogid == AUTOTUNING_DIALOG)
	{
	    if(response)
		{
		    if(listitem == 0)
		    {
				ShowPlayerDialog(playerid, AUTOTUNINGSLOT1_DIALOG, DIALOG_STYLE_INPUT, "Autó tuningja", "Írd be azt a tuningslot-ot, amelyikre rá akarod tenni a tuningot!", "Tovább", "Vissza");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, AUTOTUNINGSLOT2_DIALOG, DIALOG_STYLE_INPUT, "Autó tuningja", "Írd be azt a tuningslot-ot, amelyikre rá akarod tenni a tuningot!", "Tovább", "Vissza");
			}
		}
		if(!response)
		{
			ShowSzerelDialog(playerid);
		}
	}
	if(dialogid == AUTOTUNINGSLOT1_DIALOG)
	{
	    if(response)
		{
	    	if(1 > strval(inputtext) || strval(inputtext) > 10) return ShowPlayerDialog(playerid, AUTOTUNINGSLOT1_DIALOG, DIALOG_STYLE_INPUT, "Autó tuningja", "A tuningslot-nak 1 és 10 közt kell lennie!\nÍrd be azt a tuningslot-ot, amelyikre rá akarod tenni a tuningot!", "Tovább", "Vissza");
			SetPVarInt(playerid, "tuningslot", strval(inputtext));
			ShowPlayerDialog(playerid, AUTOTUNINGID_DIALOG, DIALOG_STYLE_INPUT, "Autó tuningja", "Írd be azt a tuningID-t, amit rá akarsz tenni a jármûre!", "Tovább", "Vissza");
		}
		if(!response)
		{
			ShowSzerelDialog(playerid);
		}
	}
	if(dialogid == AUTOTUNINGSLOT2_DIALOG)
	{
 		if(response)
		{
	    	if(1 > strval(inputtext) || strval(inputtext) > 10) return ShowPlayerDialog(playerid, AUTOTUNINGSLOT2_DIALOG, DIALOG_STYLE_INPUT, "Autó tuningja", "A tuningslot-nak 1 és 10 közt kell lennie!\nÍrd be azt a tuningslot-ot, amelyikre rá akarod tenni a tuningot!", "Tovább", "Vissza");
			SetPVarInt(playerid, "tuningslot", strval(inputtext));
			ShowPlayerDialog(playerid, AUTOTUNINGSEL_DIALOG, DIALOG_STYLE_LIST, "Autó tuningja", "Nitro\nHidraulika\nImport felni\nAhab felni\nVirtual felni\nAccess felni\nAtomic felni\nOffroad felni\nMega felni\nGrove felni\nSwitch felni\nCutter felni\nShadow felni\nClassic felni\nWires felni\nTwist felni\nDollar felni\nTrance felni\nTetõ mélyedés(csak tuning autókra(Pl. Sultan))", "Kiválaszt", "Vissza");
		}
		if(!response)
		{
			ShowSzerelDialog(playerid);
		}
	}
	if(dialogid == AUTOTUNINGID_DIALOG)
	{
		if(response)
	    {
            format(query, sizeof(query), "UPDATE cars SET tuning%d = '%d' WHERE slot = '%d'", GetPVarInt(playerid, "tuningslot"), strval(inputtext), GetPVarInt(playerid, "szerelslot"));
   			mysql_query(query);
			ShowSzerelDialog(playerid);
			format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Tuningolt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
   			mysql_query(query);
	    }
		if(!response)
		{
			ShowSzerelDialog(playerid);
		}
	}
	if(dialogid == AUTOTUNINGSEL_DIALOG)
	{
	    if(response)
	    {
	        if(listitem == 0)//nitro
	        {
	            format(query, sizeof(query), "UPDATE cars SET tuning%d = '1010' WHERE slot = '%d'", GetPVarInt(playerid, "tuningslot"), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
				ShowSzerelDialog(playerid);
				format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Tuningolt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
	        }
	        if(listitem == 1)//hidraulika
	        {
	            format(query, sizeof(query), "UPDATE cars SET tuning%d = '1087' WHERE slot = '%d'", GetPVarInt(playerid, "tuningslot"), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
				ShowSzerelDialog(playerid);
				format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Tuningolt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
	        }
	        if(listitem == 2)//Import
	        {
	        	format(query, sizeof(query), "UPDATE cars SET tuning%d = '1082' WHERE slot = '%d'", GetPVarInt(playerid, "tuningslot"), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
				ShowSzerelDialog(playerid);
				format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Tuningolt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
	        }
	        if(listitem == 3)//Ahab
	        {
	        	format(query, sizeof(query), "UPDATE cars SET tuning%d = '1096' WHERE slot = '%d'", GetPVarInt(playerid, "tuningslot"), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
				ShowSzerelDialog(playerid);
				format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Tuningolt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
	        }
	        if(listitem == 4)//Virtual
	        {
	        	format(query, sizeof(query), "UPDATE cars SET tuning%d = '1097' WHERE slot = '%d'", GetPVarInt(playerid, "tuningslot"), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
				ShowSzerelDialog(playerid);
				format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Tuningolt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
	        }
	        if(listitem == 5)//Access
	        {
	        	format(query, sizeof(query), "UPDATE cars SET tuning%d = '1098' WHERE slot = '%d'", GetPVarInt(playerid, "tuningslot"), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
				ShowSzerelDialog(playerid);
				format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Tuningolt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
	        }
	        if(listitem == 6)//Atomic
	        {
	            format(query, sizeof(query), "UPDATE cars SET tuning%d = '1085' WHERE slot = '%d'", GetPVarInt(playerid, "tuningslot"), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
				ShowSzerelDialog(playerid);
				format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Tuningolt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
	        }
	        if(listitem == 7)//Offroad
	        {
	            format(query, sizeof(query), "UPDATE cars SET tuning%d = '1025' WHERE slot = '%d'", GetPVarInt(playerid, "tuningslot"), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
				ShowSzerelDialog(playerid);
				format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Tuningolt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
	        }
	        if(listitem == 8)//Mega
	        {
	            format(query, sizeof(query), "UPDATE cars SET tuning%d = '1074' WHERE slot = '%d'", GetPVarInt(playerid, "tuningslot"), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
				ShowSzerelDialog(playerid);
				format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Tuningolt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
	        }
	        if(listitem == 9)//Grove
	        {
	            format(query, sizeof(query), "UPDATE cars SET tuning%d = '1081' WHERE slot = '%d'", GetPVarInt(playerid, "tuningslot"), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
				ShowSzerelDialog(playerid);
				format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Tuningolt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
	        }
	        if(listitem == 10)//Switch
	        {
	            format(query, sizeof(query), "UPDATE cars SET tuning%d = '1080' WHERE slot = '%d'", GetPVarInt(playerid, "tuningslot"), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
				ShowSzerelDialog(playerid);
				format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Tuningolt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
	        }
	        if(listitem == 11)//Cutter
	        {
	            format(query, sizeof(query), "UPDATE cars SET tuning%d = '1079' WHERE slot = '%d'", GetPVarInt(playerid, "tuningslot"), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
				ShowSzerelDialog(playerid);
				format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Tuningolt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
	        }
	        if(listitem == 12)//Shadow
	        {
	            format(query, sizeof(query), "UPDATE cars SET tuning%d = '1073' WHERE slot = '%d'", GetPVarInt(playerid, "tuningslot"), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
				ShowSzerelDialog(playerid);
				format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Tuningolt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
	        }
	        if(listitem == 13)//Classic
	        {
	            format(query, sizeof(query), "UPDATE cars SET tuning%d = '1077' WHERE slot = '%d'", GetPVarInt(playerid, "tuningslot"), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
				ShowSzerelDialog(playerid);
				format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Tuningolt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
	        }
	        if(listitem == 14)//Wires
	        {
	            format(query, sizeof(query), "UPDATE cars SET tuning%d = '1076' WHERE slot = '%d'", GetPVarInt(playerid, "tuningslot"), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
				ShowSzerelDialog(playerid);
				format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Tuningolt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
	        }
	        if(listitem == 15)//Twist
	        {
	            format(query, sizeof(query), "UPDATE cars SET tuning%d = '1078' WHERE slot = '%d'", GetPVarInt(playerid, "tuningslot"), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
				ShowSzerelDialog(playerid);
				format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Tuningolt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
	        }
	        if(listitem == 16)//Dollar
	        {
	            format(query, sizeof(query), "UPDATE cars SET tuning%d = '1083' WHERE slot = '%d'", GetPVarInt(playerid, "tuningslot"), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
				ShowSzerelDialog(playerid);
				format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Tuningolt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
	        }
	        if(listitem == 17)//Trance
	        {
	            format(query, sizeof(query), "UPDATE cars SET tuning%d = '1084' WHERE slot = '%d'", GetPVarInt(playerid, "tuningslot"), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
				ShowSzerelDialog(playerid);
				format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Tuningolt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
	        }
	        if(listitem == 18)//Tetõ mélyedés
	        {
	            format(query, sizeof(query), "UPDATE cars SET tuning%d = '1032' WHERE slot = '%d'", GetPVarInt(playerid, "tuningslot"), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
				ShowSzerelDialog(playerid);
				format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Tuningolt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
	        }
	        if(listitem == 19)
	        {
	            format(query, sizeof(query), "UPDATE cars SET tuning%d = '1098' WHERE slot = '%d'", GetPVarInt(playerid, "tuningslot"), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
				ShowSzerelDialog(playerid);
				format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Tuningolt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
	        }
	        if(listitem == 20)
	        {
	            format(query, sizeof(query), "UPDATE cars SET tuning%d = '1098' WHERE slot = '%d'", GetPVarInt(playerid, "tuningslot"), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
				ShowSzerelDialog(playerid);
				format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Tuningolt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
    			mysql_query(query);
	        }
	    }
		if(!response)
		{
			ShowSzerelDialog(playerid);
		}
	}
	if(dialogid == AUTOREND_DIALOG)
	{
	    if(response)
	    {
			format(query, sizeof(query), "UPDATE cars SET rendszam = '%s' WHERE slot = '%d'", inputtext, GetPVarInt(playerid, "szerelslot"));
   			mysql_query(query);
   			SetVehicleNumberPlate(carplay[GetPVarInt(playerid, "szerelslot")], inputtext);
			ShowSzerelDialog(playerid);
		    format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Rendszámot cserélt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
   			mysql_query(query);
		}
		if(!response)
		{
			ShowSzerelDialog(playerid);
		}
	}
	if(dialogid == AUTOCOLOR12_DIALOG)
	{
		if(response)
		{
		    SetPVarInt(playerid, "szerelcolor", strval(inputtext));
		    ShowPlayerDialog(playerid, AUTOCOLOR_DIALOG, DIALOG_STYLE_INPUT, "Autó színe", "Írd be a szín számát, amelyikre festeni akarod!", "Tovább", "Vissza");
		}
		if(!response)
		{
			ShowSzerelDialog(playerid);
		}
	}
	if(dialogid == AUTOCOLOR_DIALOG)
	{
	    if(response)
	    {
	        format(query, sizeof(query), "UPDATE cars SET color%d = '%d' WHERE slot = '%d'", GetPVarInt(playerid, "szerelcolor"), strval(inputtext), GetPVarInt(playerid, "szerelslot"));
   			mysql_query(query);
			format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Színt cserélt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
   			mysql_query(query);
	    }
	    if(!response)
	    {
			ShowSzerelDialog(playerid);
	    }
	}
	if(dialogid == AUTOPAINT_DIALOG)
	{
	    if(response)
	    {
	        format(query, sizeof(query), "UPDATE cars SET paintjob = '%d' WHERE slot = '%d'", strval(inputtext), GetPVarInt(playerid, "szerelslot"));
   			mysql_query(query);
   			ChangeVehiclePaintjob(carplay[GetPVarInt(playerid, "szerelslot")], strval(inputtext));
			format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Paintot cserélt')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "szerelslot"));
   			mysql_query(query);
	    }
	    if(!response)
	    {
			ShowSzerelDialog(playerid);
	    }
	}*/
	if(dialogid == SPAWN_DIALOG)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            SetPVarInt(playerid, "Spawnhely", 0);
	            SendClientMessage(playerid, COLOR_GREEN, "Mostantól a bandahelyeden/munkahelyeden fogsz spawnolni!");
			}
			if(listitem == 1)
	        {
             	format(query, sizeof(query), "SELECT * FROM houses WHERE Tulaj = '%s' OR Tarstulaj = '%s'", GetPlayerNameEx(playerid), GetPlayerNameEx(playerid));
             	mysql_query(query);
	            mysql_store_result();
	            if(mysql_num_rows() != 0)
	            {
		            SetPVarInt(playerid, "Spawnhely", 1);
		            SendClientMessage(playerid, COLOR_GREEN, "Mostantól a házadban fogsz spawnolni!");
		            mysql_free_result();
				}
				else SendClientMessage(playerid, COLOR_RED, "HIBA: Neked nincs házad!");
			}
			if(listitem == 2)
	        {
	        	format(query, sizeof(query), "SELECT * FROM cars WHERE Tulaj = '%s' OR Tarstulaj = '%s' AND VehID = '508'", GetPlayerNameEx(playerid), GetPlayerNameEx(playerid));
             	mysql_query(query);
	            mysql_store_result();
	            if(mysql_num_rows() != 0)
	            {
		            SetPVarInt(playerid, "Spawnhely", 2);
		            SendClientMessage(playerid, COLOR_GREEN, "Mostantól a lakókocsidban fogsz spawnolni!");
		            mysql_free_result();
				}
				else SendClientMessage(playerid, COLOR_RED, "HIBA: Neked nincs lakókocsid!");
			}
		}
	}
	if(dialogid == HACKER_DIALOG)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            switch(random(3))
				{
				    case 0:
				    {
						new hstring[128];
					    SendClientMessage(playerid, COLOR_HACKER, "A bank meghackelése nem sikerült, ezért a zsaruk köröznek!");
						SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)+3);
						format(hstring, sizeof(hstring), "%s Hackerként bankot próbált hackelni!", GetPlayerNameEx(playerid));
						SendClientMessageToAdmins(COLOR_ORANGE, hstring);
					}
					case 1:
					{
					    new hstring[128];
						SendClientMessage(playerid, COLOR_HACKER, "Sikeresen meghackelted a bankot! A bankszámládra érkezett a pénz!");
				        SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank")+150000+random(200000));
				        GiveEXP(playerid, HACKER_EXP);
			            format(hstring, sizeof(hstring), "%s Hackerként bankot hackelt!", GetPlayerNameEx(playerid));
						SendClientMessageToAdmins(COLOR_ORANGE, hstring);
					}
					case 2:
					{
					    new hstring[128];
					    SendClientMessage(playerid, COLOR_HACKER, "A bank meghackelése nem sikerült, ezért a zsaruk köröznek!");
						SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)+3);
						format(hstring, sizeof(hstring), "%s Hackerként bankot próbált hackelni!", GetPlayerNameEx(playerid));
						SendClientMessageToAdmins(COLOR_ORANGE, hstring);
					}
				}
				SetGVarInt(GetPlayerNameEx(playerid), 10*60);
    		}
    		if(listitem == 1)
    		{
				ShowPlayerDialog(playerid, HACKERP_DIALOG, DIALOG_STYLE_LIST, "Hacker számítógép", "Körözés kiadása\nKörözés törlése\nHamis rendõrségi rádió beszéd", "Kiválaszt", "Vissza");
    		}
    		if(listitem == 2)
    		{
				ShowPlayerDialog(playerid, HACKER1_DIALOG, DIALOG_STYLE_INPUT, "Hacker számítógép", "Írd be annak a játékosnak az ID-jét akinek kíváncsi vagy az adataira!", "Tovább", "Vissza");
    		}
    		if(listitem == 3)
    		{
                ShowPlayerDialog(playerid, HACKER3_DIALOG, DIALOG_STYLE_INPUT, "Hacker számítógép", "Írd be annak a jármûnek a slotját amelyiknek kíváncsi vagy az adataira!", "Tovább", "Vissza");
    		}
	    }
	}
	if(dialogid == HACKERP_DIALOG)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            ShowPlayerDialog(playerid, HACKERP1_DIALOG, DIALOG_STYLE_INPUT, "Hacker számítógép", "Írd be annak a játékosnak az ID-jét, akire körözést akarsz adni!", "Tovább", "Vissza");
	        }
	        if(listitem == 1)
	        {
	            ShowPlayerDialog(playerid, HACKERP2_DIALOG, DIALOG_STYLE_INPUT, "Hacker számítógép", "Írd be annak a játékosnak az ID-jét, aki körözését törölni akarod!", "Tovább", "Vissza");
	        }
	        if(listitem == 2)
	        {
	            ShowPlayerDialog(playerid, HACKERP3_DIALOG, DIALOG_STYLE_INPUT, "Hacker számítógép", "Írd be annak a rendõrnek az ID-jét, aki nevében beszélni akarsz a rendõrségi rádióban!", "Tovább", "Vissza");
	        }
	    }
	    else ShowPlayerDialog(playerid, HACKER_DIALOG, DIALOG_STYLE_LIST, "Hacker számítógép", "Bank meghackelése\nRendõrség meghackelése\nJátékos adatainak megtekintése\nAutó adatainak megtekintése", "Kiválaszt", "Kilép");
	}
	if(dialogid == HACKERP1_DIALOG)
	{
	    if(response)
	    {
	        if(!IsPlayerConnected(strval(inputtext))) return ShowPlayerDialog(playerid, HACKERP1_DIALOG, DIALOG_STYLE_INPUT, "Hacker számítógép", "Lehetne az hogy olyan ID-t írsz, ami létezik is?", "Tovább", "Vissza");
            if(strlen(inputtext) == 0) return ShowPlayerDialog(playerid, HACKERP1_DIALOG, DIALOG_STYLE_INPUT, "Hacker számítógép", "Lehetne az hogy olyan ID-t írsz, ami létezik is?", "Tovább", "Vissza");
			switch(random(3))
			{
	            case 0:
	            {
                    new hstring[128];
				    SendClientMessage(playerid, COLOR_HACKER, "Az SFPD meghackelése nem sikerült, ezért a zsaruk köröznek!");
					SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)+3);
					format(hstring, sizeof(hstring), "%s Hackerként megpróbálta meghackelni az SFPD-t!", GetPlayerNameEx(playerid));
					SendClientMessageToAdmins(COLOR_ORANGE, hstring);
				}
				case 1:
				{
				    new hstring[128];
					format(hstring, sizeof(hstring), "Sikeresen meghackelted az SFPD-t! Körözést adtál ki %s-re!", GetPlayerNameEx(strval(inputtext)));
			        SendClientMessage(playerid, COLOR_HACKER, hstring);
			        SetPlayerWantedLevel(strval(inputtext), GetPlayerWantedLevel(strval(inputtext))+1);
			        format(hstring, sizeof(hstring), "%s Hackerként meghackelte az SFPD-t!", GetPlayerNameEx(playerid));
					SendClientMessageToAdmins(COLOR_ORANGE, hstring);
				}
				case 2:
				{
				    new hstring[128];
				    SendClientMessage(playerid, COLOR_HACKER, "Az SFPD meghackelése nem sikerült, ezért a zsaruk köröznek!");
					SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)+3);
					format(hstring, sizeof(hstring), "%s Hackerként megpróbálta meghackelni az SFPD-t!", GetPlayerNameEx(playerid));
					SendClientMessageToAdmins(COLOR_ORANGE, hstring);
				}
			}
			SetGVarInt(GetPlayerNameEx(playerid), 10*60);
	    }
	    else ShowPlayerDialog(playerid, HACKERP_DIALOG, DIALOG_STYLE_LIST, "Hacker számítógép", "Körözés kiadása\nKörözés törlése\nHamis rendõrségi rádió beszéd", "Kiválaszt", "Vissza");
	}
	if(dialogid == HACKERP2_DIALOG)
	{
	    if(response)
	    {
	        if(!IsPlayerConnected(strval(inputtext))) return ShowPlayerDialog(playerid, HACKERP2_DIALOG, DIALOG_STYLE_INPUT, "Hacker számítógép", "Lehetne az hogy olyan ID-t írsz, ami létezik is?", "Tovább", "Vissza");
            if(strlen(inputtext) == 0) return ShowPlayerDialog(playerid, HACKERP2_DIALOG, DIALOG_STYLE_INPUT, "Hacker számítógép", "Lehetne az hogy olyan ID-t írsz, ami létezik is?", "Tovább", "Vissza");
			new hstring[128];
			format(hstring, sizeof(hstring), "Sikeresen meghackelted az SFPD-t! Ha volt %s-nek körözése, törölted!", GetPlayerNameEx(strval(inputtext)));
	        SendClientMessage(playerid, COLOR_HACKER, hstring);
	        SetPlayerWantedLevel(strval(inputtext), 0);
	        format(hstring, sizeof(hstring), "%s Hackerként meghackelte az SFPD-t!", GetPlayerNameEx(playerid));
			SendClientMessageToAdmins(COLOR_ORANGE, hstring);
		}
		else ShowPlayerDialog(playerid, HACKERP_DIALOG, DIALOG_STYLE_LIST, "Hacker számítógép", "Körözés kiadása\nKörözés törlése\nHamis rendõrségi rádió beszéd", "Kiválaszt", "Vissza");
	}
	if(dialogid == HACKERP3_DIALOG)
	{
	    if(response)
	    {
	        if(!IsPlayerConnected(strval(inputtext))) return ShowPlayerDialog(playerid, HACKERP3_DIALOG, DIALOG_STYLE_INPUT, "Hacker számítógép", "Lehetne az hogy olyan ID-t írsz, ami létezik is?", "Tovább", "Vissza");
            if(strlen(inputtext) == 0) return ShowPlayerDialog(playerid, HACKERP3_DIALOG, DIALOG_STYLE_INPUT, "Hacker számítógép", "Lehetne az hogy olyan ID-t írsz, ami létezik is?", "Tovább", "Vissza");
			if(cGetPlayerTeam(strval(inputtext)) != TEAM_ZSARU) return ShowPlayerDialog(playerid, HACKERP3_DIALOG, DIALOG_STYLE_INPUT, "Hacker számítógép", "Lehetne az hogy olyan ID-t írsz, aki rendõr?", "Tovább", "Vissza");
			SetPVarInt(playerid, "rendorid", strval(inputtext));
			ShowPlayerDialog(playerid, HACKERP4_DIALOG, DIALOG_STYLE_INPUT, "Hacker számítógép", "Rendben. Most Írd be a szöveget amit akarsz hogy mondjon!", "Tovább", "Vissza");
		}
		else ShowPlayerDialog(playerid, HACKERP_DIALOG, DIALOG_STYLE_LIST, "Hacker számítógép", "Körözés kiadása\nKörözés törlése\nHamis rendõrségi rádió beszéd", "Kiválaszt", "Vissza");
	}
	if(dialogid == HACKERP4_DIALOG)
	{
	    if(response)
	    {
	        switch(random(2))
	        {
	            case 0:
	            {
	                new hstring[128];
	                format(hstring, sizeof(hstring), "Sikeresen meghackelted az SFPD-t! %s nevében üzenetet írtál!", GetPlayerNameEx(GetPVarInt(playerid, "rendorid")));
			        SendClientMessage(playerid, COLOR_HACKER, hstring);
			        format(hstring, sizeof(hstring), "%s Hackerként meghackelte az SFPD-t!", GetPlayerNameEx(playerid));
					SendClientMessageToAdmins(COLOR_ORANGE, hstring);
			        for(new i; i < MAX_PLAYERS; i++)
			        {
			            if(cGetPlayerTeam(i) == TEAM_ZSARU)
			            {
			                new fakestring[200];
				        	format(fakestring, sizeof(fakestring),"[ TEAM ] %s: %s", GetPlayerNameEx(GetPVarInt(playerid, "rendorid")), inputtext);
	 						SendClientMessage(i, COLOR_TEAMCHAT, fakestring);
						}
					}
				}
				case 1:
				{
				    new hstring[128];
				    SendClientMessage(playerid, COLOR_HACKER, "Az SFPD meghackelése nem sikerült, ezért a zsaruk köröznek!");
					SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)+3);
					format(hstring, sizeof(hstring), "%s Hackerként megpróbálta meghackelni az SFPD-t!", GetPlayerNameEx(playerid));
					SendClientMessageToAdmins(COLOR_ORANGE, hstring);
				}
			}
			SetGVarInt(GetPlayerNameEx(playerid), 10*60);
	    }
	    else ShowPlayerDialog(playerid, HACKERP_DIALOG, DIALOG_STYLE_LIST, "Hacker számítógép", "Körözés kiadása\nKörözés törlése\nHamis rendõrségi rádió beszéd", "Kiválaszt", "Vissza");
	}
	if(dialogid == HACKER1_DIALOG)
	{
	    if(response)
	    {
	        if(!IsPlayerConnected(strval(inputtext))) return ShowPlayerDialog(playerid, HACKER1_DIALOG, DIALOG_STYLE_INPUT, "Hacker számítógép", "Lehetne az hogy olyan ID-t írsz, ami létezik is?", "Tovább", "Vissza");
			if(strlen(inputtext) == 0) return ShowPlayerDialog(playerid, HACKER1_DIALOG, DIALOG_STYLE_INPUT, "Hacker számítógép", "Lehetne az hogy olyan ID-t írsz, ami létezik is?", "Tovább", "Vissza");
			new leadernames[][] = {"Nem", "Rendõr", "Terrorista", "Hacker", "OBKK", "Ryuuzaki's cars", "Rodney team", "Katonaság"};
			new hackerdialog[300];

			format(hackerdialog, sizeof(hackerdialog), "Játékos neve: %s[%d], Pénz: %d, Bank: %d\nÖlések: %d, Halálok: %d, Admin: %d, VIP: %d, Skin: %d\nRendõrTP: %d, KatonaTP: %d\nÓra: %d, Perc: %d, Leader: %s\nKlán: %s, Klánrang: %d\nSzint: %d, EXP: %d/%d",
			GetPlayerNameEx(strval(inputtext)),
			strval(inputtext),
			GetPlayerMoneyEx(strval(inputtext)),
			GetPVarInt(strval(inputtext), "Bank"),
			GetPVarInt(strval(inputtext), "Kills"),
			GetPVarInt(strval(inputtext), "Deaths"),
			GetPVarInt(strval(inputtext), "Admin"),
			GetPVarInt(strval(inputtext), "VIP"),
			GetPVarInt(strval(inputtext), "Skin"),
			GetPVarInt(strval(inputtext), "RendorTP"),
			GetPVarInt(strval(inputtext), "KatonaTP"),
			GetPVarInt(strval(inputtext), "Ora"),
			GetPVarInt(strval(inputtext), "Perc"),
			leadernames[GetPVarInt(strval(inputtext), "Leader")],
			GetPVarStringEx(strval(inputtext), "Clan"),
			GetPVarInt(strval(inputtext), "ClanRank"),
			GetPVarInt(strval(inputtext), "Szint"),
			levelexp[GetPVarInt(strval(inputtext), "Szint")][expvalue],
			GetPVarInt(strval(inputtext), "EXP"));

			ShowPlayerDialog(playerid, HACKER2_DIALOG, DIALOG_STYLE_MSGBOX, "Hacker számítógép", hackerdialog, "Vissza", "Kilép");
		}
	    else ShowPlayerDialog(playerid, HACKER_DIALOG, DIALOG_STYLE_LIST, "Hacker számítógép", "Bank meghackelése\nRendõrség meghackelése\nJátékos adatainak megtekintése\nAutó adatainak megtekintése", "Kiválaszt", "Kilép");
	}
	if(dialogid == HACKER3_DIALOG)
	{
	    if(response)
	    {
	        format(query, sizeof(query), "SELECT slot, Tulaj, Tarstulaj, VehID, X, Y, Z, A, VW, color1, color2, tuning1, tuning2, tuning3, tuning4, tuning5, tuning6, tuning7, tuning8, tuning9, tuning10, object1, object2, paintjob, rendszam FROM cars WHERE slot = '%d'", strval(inputtext));
   			mysql_query(query);
		    mysql_store_result();
		    if(mysql_num_rows() != 0)
		    {
		        mysql_fetch_row(linen);
		        new tarol[15];
		        new tunin[11];
		        new tulajtarol[2][24];
		        new Float:postarolo[4];
		        new rendsztarolo[15];
		        sscanf(linen, "p<|>ds[24]s[24]dffffdddddddddddddddds[15]", tarol[0], tulajtarol[0], tulajtarol[1], tarol[1], postarolo[0], postarolo[1], postarolo[2], postarolo[3], tarol[2], tarol[3], tarol[4], tunin[0], tunin[1], tunin[2], tunin[3], tunin[4], tunin[5], tunin[6], tunin[7], tunin[8], tunin[9], tarol[5], tarol[6], tarol[7], rendsztarolo);
		        mysql_free_result();
		        new hackerdialog[300];
		        format(hackerdialog, sizeof(hackerdialog), "Slot: %d\nTulaj: %s, Társtulaj: %s, JármûModelID: %d\nX: %0.2f, Y: %0.2f, Z: %0.2f, A(ngle): %0.2f, VirtualWorld: %d\nSzín1: %d, Szín2: %d\nTuning1: %d, Tuning2: %d, Tuning3: %d, Tuning4: %d, Tuning5: %d, Tuning6: %d, Tuning7: %d, Tuning8: %d, Tuning9: %d, Tuning10: %d\nObject1: %d, Object2: %d\nPaintjob: %d, Rendszám: %s",
				tarol[0], tulajtarol[0], tulajtarol[1], tarol[1], postarolo[0], postarolo[1], postarolo[2], postarolo[3],
			 	tarol[2], tarol[3], tarol[4], tunin[0], tunin[1], tunin[2], tunin[3], tunin[4], tunin[5], tunin[6],
			 	tunin[7], tunin[8], tunin[9], tarol[5], tarol[6], tarol[7], rendsztarolo);
			 	ShowPlayerDialog(playerid, HACKER2_DIALOG, DIALOG_STYLE_MSGBOX, "A jármû adatai", hackerdialog, "Vissza", "Kilép");
		    }
	    }
	}
	if(dialogid == HACKER2_DIALOG) { if(response) return ShowPlayerDialog(playerid, HACKER_DIALOG, DIALOG_STYLE_LIST, "Hacker számítógép", "Bank meghackelése\nRendõrség meghackelése\nJátékos adatainak megtekintése\nAutó adatainak megtekintése", "Kiválaszt", "Kilép"); }
	if(dialogid == AUTOSZERKESZT_DIALOG)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            format(query, sizeof(query), "SELECT slot, Tulaj, Tarstulaj, VehID, X, Y, Z, A, VW, color1, color2, tuning1, tuning2, tuning3, tuning4, tuning5, tuning6, tuning7, tuning8, tuning9, tuning10, object1, object2, paintjob, rendszam, siren FROM cars WHERE slot = '%d'", GetPVarInt(playerid, "szerkesztslot"));
       			mysql_query(query);
			    mysql_store_result();
			    if(mysql_num_rows() != 0)
			    {
			        mysql_fetch_row(linen);
			        new taroloS[15];
			        new tuningS[11];
			        new tulajtaroloS[2][24];
			        new Float:postarolo[4];
			        new rendsztarolo[15];
			        new sirent;
			        sscanf(linen, "p<|>ds[24]s[24]dffffdddddddddddddddds[15]d", taroloS[0], tulajtaroloS[0], tulajtaroloS[1], taroloS[1], postarolo[0], postarolo[1], postarolo[2], postarolo[3], taroloS[2], taroloS[3], taroloS[4], tuningS[0], tuningS[1], tuningS[2], tuningS[3], tuningS[4], tuningS[5], tuningS[6], tuningS[7], tuningS[8], tuningS[9], taroloS[5], taroloS[6], taroloS[7], rendsztarolo, sirent);
			        mysql_free_result();
			        new adatdialog[500];
			        format(adatdialog, sizeof(adatdialog), "Slot: %d\nTulaj: %s, Társtulaj: %s, JármûModelID: %d\nX: %0.2f, Y: %0.2f, Z: %0.2f, A(ngle): %0.2f, VirtualWorld: %d\nSzín1: %d, Szín2: %d\n\nTuning1: %d(%s), Tuning2: %d(%s), Tuning3: %d(%s),\n Tuning4: %d(%s), Tuning5: %d(%s), Tuning6: %d(%s),\n Tuning7: %d(%s), Tuning8: %d(%s), Tuning9: %d(%s), Tuning10: %d(%s)\nObject1: %d, Object2: %d\nPaintjob: %d, Rendszám: %s, Sziréna: %s",
					taroloS[0], tulajtaroloS[0], tulajtaroloS[1], taroloS[1], postarolo[0], postarolo[1], postarolo[2], postarolo[3],
				 	taroloS[2], taroloS[3], taroloS[4],
				 	tuningS[0], GetComponentName(tuningS[0]), tuningS[1], GetComponentName(tuningS[1]), tuningS[2], GetComponentName(tuningS[2]),
				 	tuningS[3], GetComponentName(tuningS[3]), tuningS[4], GetComponentName(tuningS[4]), tuningS[5], GetComponentName(tuningS[5]),
				 	tuningS[6], GetComponentName(tuningS[6]), tuningS[7], GetComponentName(tuningS[7]), tuningS[8], GetComponentName(tuningS[8]),
				 	tuningS[9], GetComponentName(tuningS[9]),
				 	taroloS[5], taroloS[6], taroloS[7], rendsztarolo, (sirent) ? ("van") : ("nincs"));
				 	/*format(adatdialog, sizeof(adatdialog), "Slot: %d\nTulaj: %s, Társtulaj: %s, JármûModelID: %d\nX: %0.2f, Y: %0.2f, Z: %0.2f, A(ngle): %0.2f, VirtualWorld: %d\nSzín1: %d, Szín2: %d\n\nTuning1: %d, Tuning2: %d, Tuning3: %d, Tuning4: %d, Tuning5: %d, Tuning6: %d, Tuning7: %d, Tuning8: %d, Tuning9: %d, Tuning10: %d\nObject1: %d, Object2: %d\nPaintjob: %d, Rendszám: %s",
					taroloS[0], tulajtaroloS[0], tulajtaroloS[1], taroloS[1], postarolo[0], postarolo[1], postarolo[2], postarolo[3],
				 	taroloS[2], taroloS[3], taroloS[4],
				 	tuningS[0], tuningS[1], tuningS[2],
				 	tuningS[3], tuningS[4], tuningS[5],
				 	tuningS[6], tuningS[7], tuningS[8],
				 	tuningS[9],
				 	taroloS[5], taroloS[6], taroloS[7], rendsztarolo);*/
				 	ShowPlayerDialog(playerid, AUTOADAT2_DIALOG, DIALOG_STYLE_MSGBOX, "A jármû adatai", adatdialog, "Vissza", "");
				}
		    }
	        if(listitem == 1)
	        {
	            if(GetPlayerMoneyEx(playerid) < 300000) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
				ShowPlayerDialog(playerid, AUTORENDSZAM_DIALOG, DIALOG_STYLE_INPUT, "Rendszám átírása", "Írd be az autó új rendszámát.\nFigyelem: Ha a rendszám hosszabb mint 8 karakter, lehet nem fog kiférni!", "Átír", "Vissza");
	        }
	        if(listitem == 2)
	        {
				ShowPlayerDialog(playerid, AUTOSZIN_DIALOG, DIALOG_STYLE_LIST, "Autószín átírása", "1-es autószín(külsõ)\n2-es autószín(belsõ, csíkok, stb)", "Kiválaszt", "Kilép");
	        }
	        if(listitem == 3)
	        {
	            if(GetPlayerMoneyEx(playerid) < 500000) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
	            ShowPlayerDialog(playerid, AUTOSZPAINT_DIALOG, DIALOG_STYLE_INPUT, "Autó paintjob", "Írd be hanyas paintjob-ot akarod rátenni az autóra.\nFigyelem: Nem minden autóra lehet paintjobot tenni!\nSzámok: 0, 1, 2, HA le akarod szedni 5-öt írj.", "Festés", "Vissza");
	        }
	        if(listitem == 4)
			{
   				AutoUpdate(GetPVarInt(playerid, "szerkesztslot"));
			}
			if(listitem == 5)
			{
			    SetPVarInt(playerid, "eladasiar", 0);
		        format(query, sizeof(query), "SELECT VehID, tuning1, tuning2, tuning3, tuning4, tuning5, tuning6, tuning7, tuning8, tuning9, tuning10, object1, object2, rendszam FROM cars WHERE slot = %d", GetPVarInt(playerid, "szerkesztslot"));
		        mysql_query(query);
		        mysql_store_result();
		        if(mysql_num_rows() != 0)
		        {
		            mysql_fetch_row(linen);
		            new data[13];
					new data2[15];
		            sscanf(linen, "p<|>iiiiiiiiiiiiis[15]", data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12], data2);
		            mysql_free_result();
		            format(query, sizeof(query), "SELECT ar FROM autoadatok WHERE vehid = %d", data[0]);
					mysql_query(query);
					mysql_store_result();
					if(mysql_num_rows() != 0)
					{
					    mysql_fetch_row(linen);
						new data3;
					    sscanf(linen, "i", data3);
					    mysql_free_result();
						if(data[1] != 0) SetPVarInt(playerid, "eladasiar", GetPVarInt(playerid, "eladasiar")+250000);
						if(data[2] != 0) SetPVarInt(playerid, "eladasiar", GetPVarInt(playerid, "eladasiar")+250000);
						if(data[3] != 0) SetPVarInt(playerid, "eladasiar", GetPVarInt(playerid, "eladasiar")+250000);
						if(data[4] != 0) SetPVarInt(playerid, "eladasiar", GetPVarInt(playerid, "eladasiar")+250000);
						if(data[5] != 0) SetPVarInt(playerid, "eladasiar", GetPVarInt(playerid, "eladasiar")+250000);
						if(data[6] != 0) SetPVarInt(playerid, "eladasiar", GetPVarInt(playerid, "eladasiar")+250000);
                        if(data[7] != 0) SetPVarInt(playerid, "eladasiar", GetPVarInt(playerid, "eladasiar")+250000);
                        if(data[8] != 0) SetPVarInt(playerid, "eladasiar", GetPVarInt(playerid, "eladasiar")+250000);
                        if(data[9] != 0) SetPVarInt(playerid, "eladasiar", GetPVarInt(playerid, "eladasiar")+250000);
                        if(data[10] != 0) SetPVarInt(playerid, "eladasiar", GetPVarInt(playerid, "eladasiar")+250000);
                        if(data[11] != 0) SetPVarInt(playerid, "eladasiar", GetPVarInt(playerid, "eladasiar")+600000);
                        if(data[12] != 0) SetPVarInt(playerid, "eladasiar", GetPVarInt(playerid, "eladasiar")+600000);
						if(strlen(data2) != 0) SetPVarInt(playerid, "eladasiar", GetPVarInt(playerid, "eladasiar")+150000);
						SetPVarInt(playerid, "eladasiar", GetPVarInt(playerid, "eladasiar")+data3/2);
						new estring[128];
						format(estring, sizeof(estring), "Szeretnéd eladni ezt az autót %s$-ért?", convertFormattedNumber(GetPVarInt(playerid, "eladasiar"), "."));
						SetPVarInt(playerid, "autoeladslot", GetPVarInt(playerid, "szerkesztslot"));
						ShowPlayerDialog(playerid, AUTOELAD_DIALOG, DIALOG_STYLE_MSGBOX, "Autó eladás", estring, "Elad", "Vissza");
					}
		        }
			}
			if(listitem == 6)
			{
			    if(GetPlayerMoneyEx(playerid) < 500000) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
			    ShowPlayerDialog(playerid, AUTOSZTUNING_DIALOG, DIALOG_STYLE_LIST, "Autó tuningja", "Nitro\nHidraulika\nFelnik\nEgyedi tuningok\nFelni eladása\nNitro eladása\nHidraulika eladása", "Megvesz", "Vissza");
			}
			if(listitem == 7)
			{
				new neostr[128], neos[2][50];
				format(query, sizeof(query), "SELECT object1, object2 FROM cars WHERE slot = %d", GetPVarInt(playerid, "szerkesztslot"));
			    mysql_query(query);
			    mysql_store_result();
			    if(mysql_num_rows() != 0)
			    {
			        new neono[2];
			        mysql_fetch_row(linen);
			        sscanf(linen, "p<|>ii", neono[0], neono[1]);
			        mysql_free_result();
			        for(new i; i < sizeof(neono); i++)
			        {
			            if(neono[i] == 18648) neos[i] = "Kék neoncsík";
			            else if(neono[i] == 18647) neos[i] = "Piros neoncsík";
			            else if(neono[i] == 18649) neos[i] = "Zöld neoncsík";
			            else if(neono[i] == 18650) neos[i] = "Sárga neoncsík";
			            else if(neono[i] == 18652) neos[i] = "Fehér neoncsík";
			            else if(neono[i] == 18651) neos[i] = "Rózsaszín neoncsík";
			            else if(neono[i] == 18646) neos[i] = "Villogó";
			            else if(neono[i] == 19419) neos[i] = "Rendõr sziréna(villog)";
			            else if(neono[i] == 19420) neos[i] = "Rendõr sziréna(nem villog)";
			            else neos[i] = "Nincs neon";
					}
			        format(neostr, sizeof(neostr), "Egyes neonslot (%s)\nKettes neonslot (%s)", neos[0], neos[1]);
       			}
			    ShowPlayerDialog(playerid, AUTONEON1_DIALOG, DIALOG_STYLE_LIST, "Autó neon", neostr, "Kiválaszt", "Vissza");
			}
			if(listitem == 8)
			{
			    if(GetPlayerMoneyEx(playerid) < 400000) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
			    format(query, sizeof(query), "UPDATE cars SET siren = 1 WHERE slot = %d", GetPVarInt(playerid, "szerkesztslot"));
			    mysql_query(query);
			    GivePlayerMoneyEx(playerid, -400000, "Szirénahangot vett");
			    SendClientMessage(playerid, COLOR_GREEN, "Sikeresen vettél a jármûvedbe szirénát. 400.000$ levonva.");
			}
			if(listitem == 9)
			{
			    new adialog[800];
			    format(adialog, sizeof(adialog), "%s%s%s%s%s%s",
				"A jármûvedre vett neont magadnak kell elhelyezned. Helyezni az alábbi parancsal tudsz:\n",
				"/neon [X, Y, Z, RX, RY, RZ] [autóslot] [object] [Koordináta]\n",
				"Nézzük az autó felülnézetét. Az X tengely vízszintes, az Y tengely függõleges, és a Z tengely (már 3D) magasság.\n",
				"A többi parancs a forgatást segíti elõ.\n",
				"Vannak alaphelyzetek a neonoknak, pl. a legkedveltebb a jármû két oldalán. A koordináták hozzá: X: 1 VAGY -1(attól függ melyik oldal), Y: 0, Z: -0.5\n",
				"Amint észrevehetted, nem nagy számokban kell gondolkozni, és tört számokat is lehet, ezredeket is.\n",
				"A nehéz része hogy megnézd hogy jól áll e a neon, frissíteni kell a jármûvet.");
				ShowPlayerDialog(playerid, DIALOGID+125, DIALOG_STYLE_MSGBOX, "Neon helyezése segítség", adialog, "Rendben", "");
			}
			if(listitem == 10)
			{
				new ldialog[200];
				if(GetVehicleLevel(GetPVarInt(playerid, "szerkesztslot")) < MAX_VLEVEL)
				{
					format(ldialog, sizeof(ldialog), "A jármûved jelenleg %d szintû. A következõ szinthez minimum %d szint és %d$ kell.\nSzeretnéd fejleszteni?", GetVehicleLevel(GetPVarInt(playerid, "szerkesztslot")), updatefuel[GetVehicleLevel(GetPVarInt(playerid, "szerkesztslot"))][minlevel], updatefuel[GetVehicleLevel(GetPVarInt(playerid, "szerkesztslot"))][mindollar]);
                    ShowPlayerDialog(playerid, AUTOLEVELUP_DIALOG, DIALOG_STYLE_MSGBOX, "Jármû fejlesztése", ldialog, "Fejleszt", "Mégsem");
				}
				else
				{
				    format(ldialog, sizeof(ldialog), "A jármûved jelenleg %d szintû. Jelenleg nem tudod tovább fejleszteni a jármûvet.", GetVehicleLevel(GetPVarInt(playerid, "szerkesztslot")));
                    ShowPlayerDialog(playerid, AUTOLEVELUP2_DIALOG, DIALOG_STYLE_MSGBOX, "Jármû fejlesztése", ldialog, "Oké", "");
				}
			}
	    }
	}
	if(dialogid == AUTOLEVELUP_DIALOG)
	{
	    if(!response) ShowSzerkesztDialog(playerid);
	    if(response)
	    {
	        if(GetPVarInt(playerid, "Szint") < updatefuel[GetVehicleLevel(GetPVarInt(playerid, "szerkesztslot"))][minlevel])
	        {
	            ShowSzerkesztDialog(playerid);
	            SendClientMessage(playerid, COLOR_RED, "Nincs meg a kellõ szinted hogy fejleszthesd a jármûvet.");
	        }
	        else if(GetPlayerMoneyEx(playerid) < updatefuel[GetVehicleLevel(GetPVarInt(playerid, "szerkesztslot"))][mindollar])
	        {
	            ShowSzerkesztDialog(playerid);
	            SendClientMessage(playerid, COLOR_RED, "Nincs elég pénzed hogy fejleszthesd a jármûvet.");
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREEN, "Sikeresen fejlesztetted a jármûvet!");
	            GivePlayerMoneyEx(playerid, -updatefuel[GetVehicleLevel(GetPVarInt(playerid, "szerkesztslot"))][mindollar], "Jármûvet fejlesztett");
				format(query, sizeof(query), "UPDATE cars SET Level = Level + 1 WHERE slot = %d", GetPVarInt(playerid, "szerkesztslot"));
				mysql_query(query);
			}
	    }
	}
	if(dialogid == AUTOLEVELUP2_DIALOG) ShowSzerkesztDialog(playerid);
	if(dialogid == AUTONEON1_DIALOG)
	{
	    if(!response) ShowSzerkesztDialog(playerid);
	    if(response)
	    {
	    	SetPVarInt(playerid, "neonslot", listitem + 1);
	    	ShowPlayerDialog(playerid, AUTONEON2_DIALOG, DIALOG_STYLE_LIST, "Autó neon", "Kék neoncsík\nPiros neoncsík\nZöld neoncsík\nSárga neoncsík\nFehér neoncsík\nRózsaszín neoncsík\nVillogó\nRendõr sziréna(Villog)\nRendõr sziréna(Nem villog)\nNeon eladása", "Megvesz", "Vissza");
		}
	}
	if(dialogid == AUTONEON2_DIALOG)
	{
	    if(!response) ShowSzerkesztDialog(playerid);
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            if(GetPlayerMoneyEx(playerid) < 1200000) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
	            format(query, sizeof(query), "UPDATE cars SET object%d = 18648 WHERE slot = %d", GetPVarInt(playerid, "neonslot"), GetPVarInt(playerid, "szerkesztslot"));
    			mysql_query(query);
    			SendClientMessage(playerid, COLOR_GREEN, "Neon sikeresen rárakva a kiválasztott neonslotra. 1.200.000$ levonva.");
	        	GivePlayerMoneyEx(playerid, -1200000, "Neont rakott");
	        	SendClientMessage(playerid, COLOR_GREEN, "A neon helyezésérõl a 'Neon helyezése' menüpontban olvashatsz.");
	        }
	        if(listitem == 1)
	        {
	            if(GetPlayerMoneyEx(playerid) < 1200000) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
	            format(query, sizeof(query), "UPDATE cars SET object%d = 18647 WHERE slot = %d", GetPVarInt(playerid, "neonslot"), GetPVarInt(playerid, "szerkesztslot"));
    			mysql_query(query);
    			SendClientMessage(playerid, COLOR_GREEN, "Neon sikeresen rárakva a kiválasztott neonslotra. 1.200.000$ levonva.");
	        	GivePlayerMoneyEx(playerid, -1200000, "Neont rakott");
	        	SendClientMessage(playerid, COLOR_GREEN, "A neon helyezésérõl a 'Neon helyezése' menüpontban olvashatsz.");
	        }
	        if(listitem == 2)
	        {
	            if(GetPlayerMoneyEx(playerid) < 1200000) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
	            format(query, sizeof(query), "UPDATE cars SET object%d = 18649 WHERE slot = %d", GetPVarInt(playerid, "neonslot"), GetPVarInt(playerid, "szerkesztslot"));
    			mysql_query(query);
    			SendClientMessage(playerid, COLOR_GREEN, "Neon sikeresen rárakva a kiválasztott neonslotra. 1.200.000$ levonva.");
	        	GivePlayerMoneyEx(playerid, -1200000, "Neont rakott");
	        	SendClientMessage(playerid, COLOR_GREEN, "A neon helyezésérõl a 'Neon helyezése' menüpontban olvashatsz.");
	        }
	        if(listitem == 3)
	        {
	            if(GetPlayerMoneyEx(playerid) < 1200000) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
	            format(query, sizeof(query), "UPDATE cars SET object%d = 18650 WHERE slot = %d", GetPVarInt(playerid, "neonslot"), GetPVarInt(playerid, "szerkesztslot"));
    			mysql_query(query);
    			SendClientMessage(playerid, COLOR_GREEN, "Neon sikeresen rárakva a kiválasztott neonslotra. 1.200.000$ levonva.");
	        	GivePlayerMoneyEx(playerid, -1200000, "Neont rakott");
	        	SendClientMessage(playerid, COLOR_GREEN, "A neon helyezésérõl a 'Neon helyezése' menüpontban olvashatsz.");
	        }
	        if(listitem == 4)
	        {
	            if(GetPlayerMoneyEx(playerid) < 1200000) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
	            format(query, sizeof(query), "UPDATE cars SET object%d = 18652 WHERE slot = %d", GetPVarInt(playerid, "neonslot"), GetPVarInt(playerid, "szerkesztslot"));
    			mysql_query(query);
    			SendClientMessage(playerid, COLOR_GREEN, "Neon sikeresen rárakva a kiválasztott neonslotra. 1.200.000$ levonva.");
	        	GivePlayerMoneyEx(playerid, -1200000, "Neont rakott");
	        	SendClientMessage(playerid, COLOR_GREEN, "A neon helyezésérõl a 'Neon helyezése' menüpontban olvashatsz.");
	        }
	        if(listitem == 5)
	        {
	            if(GetPlayerMoneyEx(playerid) < 1200000) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
	            format(query, sizeof(query), "UPDATE cars SET object%d = 18651 WHERE slot = %d", GetPVarInt(playerid, "neonslot"), GetPVarInt(playerid, "szerkesztslot"));
    			mysql_query(query);
    			SendClientMessage(playerid, COLOR_GREEN, "Neon sikeresen rárakva a kiválasztott neonslotra. 1.200.000$ levonva.");
	        	GivePlayerMoneyEx(playerid, -1200000, "Neont rakott");
	        	SendClientMessage(playerid, COLOR_GREEN, "A neon helyezésérõl a 'Neon helyezése' menüpontban olvashatsz.");
	        }
	        if(listitem == 6)
	        {
	            if(GetPlayerMoneyEx(playerid) < 1200000) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
	            format(query, sizeof(query), "UPDATE cars SET object%d = 18646 WHERE slot = %d", GetPVarInt(playerid, "neonslot"), GetPVarInt(playerid, "szerkesztslot"));
    			mysql_query(query);
    			SendClientMessage(playerid, COLOR_GREEN, "Neon sikeresen rárakva a kiválasztott neonslotra. 1.200.000$ levonva.");
	        	GivePlayerMoneyEx(playerid, -1200000, "Neont rakott");
	        	SendClientMessage(playerid, COLOR_GREEN, "A neon helyezésérõl a 'Neon helyezése' menüpontban olvashatsz.");
	        }
	        if(listitem == 7)
	        {
	            if(GetPlayerMoneyEx(playerid) < 1200000) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
	            format(query, sizeof(query), "UPDATE cars SET object%d = 19419 WHERE slot = %d", GetPVarInt(playerid, "neonslot"), GetPVarInt(playerid, "szerkesztslot"));
    			mysql_query(query);
    			SendClientMessage(playerid, COLOR_GREEN, "Neon sikeresen rárakva a kiválasztott neonslotra. 1.200.000$ levonva.");
	        	GivePlayerMoneyEx(playerid, -1200000, "Neont rakott");
	        	SendClientMessage(playerid, COLOR_GREEN, "A neon helyezésérõl a 'Neon helyezése' menüpontban olvashatsz.");
	        }
	        if(listitem == 8)
	        {
	            if(GetPlayerMoneyEx(playerid) < 1200000) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
	            format(query, sizeof(query), "UPDATE cars SET object%d = 19420 WHERE slot = %d", GetPVarInt(playerid, "neonslot"), GetPVarInt(playerid, "szerkesztslot"));
    			mysql_query(query);
    			SendClientMessage(playerid, COLOR_GREEN, "Neon sikeresen rárakva a kiválasztott neonslotra. 1.200.000$ levonva.");
	        	GivePlayerMoneyEx(playerid, -1200000, "Neont rakott");
	        	SendClientMessage(playerid, COLOR_GREEN, "A neon helyezésérõl a 'Neon helyezése' menüpontban olvashatsz.");
	        }
	        if(listitem == 9)
	        {
	            format(query, sizeof(query), "SELECT object%d FROM cars WHERE slot = %d", GetPVarInt(playerid, "neonslot"), GetPVarInt(playerid, "szerkesztslot"));
	            mysql_query(query);
	            mysql_store_result();
	            if(mysql_num_rows() != 0)
	            {
					mysql_fetch_row(linen);
					new neono;
					sscanf(linen, "d", neono);
					mysql_free_result();
					if(neono == 0) return SendClientMessage(playerid, COLOR_RED, "Ezen a neonsloton nincsen neon.");
					else ShowPlayerDialog(playerid, AUTONEONELAD_DIALOG, DIALOG_STYLE_MSGBOX, "Neon eladása", "Biztosan el szedetnéd adni a neont 600.000$-ért?", "Igen", "Nem");
	            }
			}
	    }
	}
	if(dialogid == AUTONEONELAD_DIALOG)
	{
	    if(response)
	    {
			format(query, sizeof(query), "UPDATE cars SET object%d = 0 WHERE slot = %d", GetPVarInt(playerid, "neonslot"), GetPVarInt(playerid, "szerkesztslot"));
			mysql_query(query);
			SendClientMessage(playerid, COLOR_GREEN, "Neon eladva.");
			GivePlayerMoneyEx(playerid, 600000, "Neont adott el");
		}
	}
	if(dialogid == AUTOADAT2_DIALOG) ShowSzerkesztDialog(playerid);
	if(dialogid == AUTOSZTUNING_DIALOG)
	{
	    if(!response) ShowSzerkesztDialog(playerid);
	    if(response)
	    {
	        if(listitem == 0)//nitro
	        {
	            format(query, sizeof(query), "UPDATE cars SET tuning1 = '1010' WHERE slot = '%d'", GetPVarInt(playerid, "szerkesztslot"));
    			mysql_query(query);
    			SendClientMessage(playerid, COLOR_GREEN, "Autó sikeresen tuningolva az egyes tuningslotra. 500.000$ levonva.");
	        	GivePlayerMoneyEx(playerid, -500000, "Jármûvet tuningolt");
	        	AddVehicleComponent(carplay[GetPVarInt(playerid, "szerkesztslot")], 1010);
	        }
	        if(listitem == 1)//hidraulika
	        {
	            format(query, sizeof(query), "UPDATE cars SET tuning2 = '1087' WHERE slot = '%d'", GetPVarInt(playerid, "szerkesztslot"));
    			mysql_query(query);
    			SendClientMessage(playerid, COLOR_GREEN, "Autó sikeresen tuningolva a kettes tuningslotra. 500.000$ levonva.");
	        	GivePlayerMoneyEx(playerid, -500000, "Jármûvet tuningolt");
	        	AddVehicleComponent(carplay[GetPVarInt(playerid, "szerkesztslot")], 1087);
	        }
	        if(listitem == 2) //kerekek
	        {
	            ShowPlayerDialog(playerid, AUTOKEREK_DIALOG, DIALOG_STYLE_LIST, "Felnik", "Import felni\nAhab felni\nVirtual felni\nAccess felni\nAtomic felni\nOffroad felni\nMega felni\nGrove felni\nSwitch felni\nCutter felni\nShadow felni\nClassic felni\nWires felni\nTwist felni\nDollar felni\nTrance felni", "Megvesz", "Vissza");
	        }
	        if(listitem == 3) //egyedi tuningok
	        {
	            if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560) //Sultan
	            {
	            	ShowPlayerDialog(playerid, AUTOSULTAN_DIALOG, DIALOG_STYLE_LIST, "Sultan tuningok", "Alien oldalszegély\nX-Flow oldalszegély\nAlien kipufogó\nX-Flow kipufogó\nAlien Tetõ\nX-Flow tetõ\nAlien légterelõ\nX-Flow légterelõ\nElsõ lökhárító Alien\nElsõ lökhárító X-Flow\nHátsó lökhárító Alien\nHátsó lökhárító X-Flow", "Megvesz", "Vissza");
				}
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562) //Elegy
	            {
	            	ShowPlayerDialog(playerid, AUTOELEGY_DIALOG, DIALOG_STYLE_LIST, "Elegy tuningok", "Alien kipufogó\nX-Flow kipufogó\nAlien tetõ\nX-Flow tetõ\nAlien oldalszegély\nX-Flow oldalszegély\nAlien légterelõ\nX-Flow légterelõ\nElsõ lökárító Alien\nElsõ lökhárító X-Flow\nHátsó lökhárító Alien\nHátsó lökhárító X-Flow", "Megvesz", "Vissza");
				}
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 496) //Blista compact
				{
				    ShowPlayerDialog(playerid, AUTOBLISTA_DIALOG, DIALOG_STYLE_LIST, "Blista tuningok", "Iker kipufogó\nNagy kipufogó\nMotorháztetõ\nOvális motorháztetõ nyílás\nTetõ nyílás\nWin légterelõ\nDrag légterelõ\nAlpha légterelõ\nFury légterelõ\nOldalszegély", "Megvesz", "Vissza");
				}
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 567) //Savanna
				{
				    ShowPlayerDialog(playerid, AUTOSAVANNA_DIALOG, DIALOG_STYLE_LIST, "Savanna tuningok", "Krómozott oldalszegély\nKrómozott kipufogó\nSlamin kipufogó\nKemény tetõ\nVászon tetõ\nSlamin elsõ lökhárító\nKrómozott elsõ lökhárító\nSlamin hátsó lökhárító\nKrómozott hátsó lökhárító", "Megvesz", "Vissza");
				}
	        }
	        if(listitem == 4)
	        {
				format(query, sizeof(query), "SELECT tuning3 FROM cars WHERE slot = %d", GetPVarInt(playerid, "szerkesztslot"));
				mysql_query(query);
				mysql_store_result();
				if(mysql_num_rows() != 0)
				{
				    mysql_fetch_row(linen);
				    new tuning3;
				    sscanf(linen, "d", tuning3);
				    mysql_free_result();
				    if(tuning3 != 0)
				    {
				        ShowPlayerDialog(playerid, FELNIELAD_DIALOG, DIALOG_STYLE_MSGBOX, "Felni eladása", "Biztosan el akarod adni a felnit?", "Igen", "Nem");
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_RED, "Ezen a jármûvön nincs felni!");
				        ShowSzerkesztDialog(playerid);
				    }
				}
	        }
	        if(listitem == 5)
	        {
				format(query, sizeof(query), "SELECT tuning1 FROM cars WHERE slot = %d", GetPVarInt(playerid, "szerkesztslot"));
				mysql_query(query);
				mysql_store_result();
				if(mysql_num_rows() != 0)
				{
				    mysql_fetch_row(linen);
				    new tuning1;
				    sscanf(linen, "d", tuning1);
				    mysql_free_result();
				    if(tuning1 != 0)
				    {
				        ShowPlayerDialog(playerid, NITROELAD_DIALOG, DIALOG_STYLE_MSGBOX, "Nitro eladása", "Biztosan el akarod adni a nitrót?", "Igen", "Nem");
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_RED, "Ezen a jármûvön nincs nitro!");
				        ShowSzerkesztDialog(playerid);
				    }
				}
	        }
	        if(listitem == 6)
	        {
				format(query, sizeof(query), "SELECT tuning2 FROM cars WHERE slot = %d", GetPVarInt(playerid, "szerkesztslot"));
				mysql_query(query);
				mysql_store_result();
				if(mysql_num_rows() != 0)
				{
				    mysql_fetch_row(linen);
				    new tuning2;
				    sscanf(linen, "d", tuning2);
				    mysql_free_result();
				    if(tuning2 != 0)
				    {
				        ShowPlayerDialog(playerid, HIDRAELAD_DIALOG, DIALOG_STYLE_MSGBOX, "Hidraulika eladása", "Biztosan el akarod adni a hidraulikát?", "Igen", "Nem");
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_RED, "Ezen a jármûvön nincs hidraulika!");
				        ShowSzerkesztDialog(playerid);
				    }
				}
	        }
	    }
	}
	if(dialogid == NITROELAD_DIALOG)
	{
	    if(response)
	    {
	        format(query, sizeof(query), "UPDATE cars SET tuning1 = 0 WHERE slot = %d", GetPVarInt(playerid, "szerkesztslot"));
			mysql_query(query);
			GivePlayerMoneyEx(playerid, 250000, "Nitrót adott el");
			SendClientMessage(playerid, COLOR_GREEN, "Nitró eladva. +250.000$");
	    }
	    else ShowSzerkesztDialog(playerid);
	}
	if(dialogid == HIDRAELAD_DIALOG)
	{
	    if(response)
	    {
	        format(query, sizeof(query), "UPDATE cars SET tuning2 = 0 WHERE slot = %d", GetPVarInt(playerid, "szerkesztslot"));
			mysql_query(query);
			GivePlayerMoneyEx(playerid, 250000, "Hidraulikát adott el");
			SendClientMessage(playerid, COLOR_GREEN, "Hidraulika eladva. +250.000$");
	    }
	    else ShowSzerkesztDialog(playerid);
	}
	if(dialogid == FELNIELAD_DIALOG)
	{
	    if(response)
	    {
	        format(query, sizeof(query), "UPDATE cars SET tuning3 = 0 WHERE slot = %d", GetPVarInt(playerid, "szerkesztslot"));
			mysql_query(query);
			GivePlayerMoneyEx(playerid, 250000, "Felnit adott el");
			SendClientMessage(playerid, COLOR_GREEN, "Felni eladva. +250.000$");
	    }
	    else ShowSzerkesztDialog(playerid);
	}
	if(dialogid == AUTOSAVANNA_DIALOG)
	{
        if(!response) ShowPlayerDialog(playerid, AUTOSZTUNING_DIALOG, DIALOG_STYLE_LIST, "Autó tuningja", "Nitro\nHidraulika\nFelnik\nEgyedi tuningok\nFelni eladása", "Megvesz", "Vissza");
        if(response)
	    {
	        new tuningok[] = {1102, 1129, 1132, 1130, 1131, 1188, 1189, 1186, 1187};
	        new tuningslot;
	        if(listitem == 0) tuningslot = 4;
	        if(listitem == 1 || listitem == 2) tuningslot = 5;
	        if(listitem == 3 || listitem == 4) tuningslot = 6;
	        if(listitem == 5 || listitem == 6) tuningslot = 7;
	        if(listitem == 7 || listitem == 8) tuningslot = 8;
	        format(query, sizeof(query), "UPDATE cars SET tuning%d = '%d' WHERE slot = '%d'", tuningslot, tuningok[listitem], GetPVarInt(playerid, "szerkesztslot"));
			mysql_query(query);
			SendClientMessage(playerid, COLOR_GREEN, "Autó sikeresen tuningolva. 500.000$ levonva.");
        	GivePlayerMoneyEx(playerid, -500000, "Jármûvet tuningolt");
		}
	}
	if(dialogid == AUTOSULTAN_DIALOG)
	{
	    if(!response) ShowPlayerDialog(playerid, AUTOSZTUNING_DIALOG, DIALOG_STYLE_LIST, "Autó tuningja", "Nitro\nHidraulika\nFelnik\nEgyedi tuningok\nFelni eladása", "Megvesz", "Vissza");
	    if(response)
	    {
	        new tuningok[] = {1026, 1031, 1028, 1029, 1032, 1033, 1138, 1139, 1169, 1170, 1141, 1140};
	        new tuningslot;
	        if(listitem == 0 || listitem == 1) tuningslot = 4;
	        if(listitem == 2 || listitem == 3) tuningslot = 5;
	        if(listitem == 4 || listitem == 5) tuningslot = 6;
	        if(listitem == 6 || listitem == 7) tuningslot = 7;
	        if(listitem == 8 || listitem == 9) tuningslot = 8;
	        if(listitem == 10 || listitem == 11) tuningslot = 9;
       		format(query, sizeof(query), "UPDATE cars SET tuning%d = '%d' WHERE slot = '%d'", tuningslot, tuningok[listitem], GetPVarInt(playerid, "szerkesztslot"));
			mysql_query(query);
			SendClientMessage(playerid, COLOR_GREEN, "Autó sikeresen tuningolva. 500.000$ levonva.");
        	GivePlayerMoneyEx(playerid, -500000, "Jármûvet tuningolt");
	    }
	}
	if(dialogid == AUTOELEGY_DIALOG)
	{
	    if(!response) ShowPlayerDialog(playerid, AUTOSZTUNING_DIALOG, DIALOG_STYLE_LIST, "Autó tuningja", "Nitro\nHidraulika\nFelnik\nEgyedi tuningok\nFelni eladása", "Megvesz", "Vissza");
	    if(response)
	    {
	        ////////4 = kipufogó, 5 = tetõ, 6 = oldalszegély, 7 = légterelõ, 8 = elsõ lökhárító, 9 = hátsó lökhárító
	        new tuningok[] = {1034, 1037, 1035, 1038, 1036, 1041, 1147, 1146, 1171, 1172, 1149, 1148};
			new tuningslot;
	        if(listitem == 0 || listitem == 1) tuningslot = 4;
	        if(listitem == 2 || listitem == 3) tuningslot = 5;
	        if(listitem == 4 || listitem == 5) tuningslot = 6;
	        if(listitem == 6 || listitem == 7) tuningslot = 7;
	        if(listitem == 8 || listitem == 9) tuningslot = 8;
	        if(listitem == 10 || listitem == 11) tuningslot = 9;
       		format(query, sizeof(query), "UPDATE cars SET tuning%d = '%d' WHERE slot = '%d'", tuningslot, tuningok[listitem], GetPVarInt(playerid, "szerkesztslot"));
			mysql_query(query);
			SendClientMessage(playerid, COLOR_GREEN, "Autó sikeresen tuningolva. 500.000$ levonva.");
        	GivePlayerMoneyEx(playerid, -500000, "Jármûvet tuningolt");
	    }
	}
	if(dialogid == AUTOBLISTA_DIALOG)
	{
	    if(!response) ShowPlayerDialog(playerid, AUTOSZTUNING_DIALOG, DIALOG_STYLE_LIST, "Autó tuningja", "Nitro\nHidraulika\nFelnik\nEgyedi tuningok\nFelni eladása", "Megvesz", "Vissza");
	    if(response)
	    {
	        ///////4 = kipufogó, 5 = tetõ, 6 = oldalszegély, 7 = légterelõ, 8 = elsõ lökhárító, 9 = hátsó lökhárító
	        new tuningok[] = {1019, 1020, 1011, 1143, 1006, 1001, 1002, 1003, 1023, 1007};
	        new tuningslot;
	        if(listitem == 0 || listitem == 1) tuningslot = 4;
	        if(listitem == 2) tuningslot = 5;
	        if(listitem == 3) tuningslot = 6;
	        if(listitem == 4) tuningslot = 7;
	        if(listitem == 5 || listitem == 6 || listitem == 7 || listitem == 8) tuningslot = 8;
	        if(listitem == 9) tuningslot = 9;
       		format(query, sizeof(query), "UPDATE cars SET tuning%d = '%d' WHERE slot = '%d'", tuningslot, tuningok[listitem], GetPVarInt(playerid, "szerkesztslot"));
			mysql_query(query);
			SendClientMessage(playerid, COLOR_GREEN, "Autó sikeresen tuningolva. 500.000$ levonva.");
        	GivePlayerMoneyEx(playerid, -500000, "Jármûvet tuningolt");
	    }
	}
	if(dialogid == AUTOKEREK_DIALOG)
	{
		if(!response) ShowPlayerDialog(playerid, AUTOSZTUNING_DIALOG, DIALOG_STYLE_LIST, "Autó tuningja", "Nitro\nHidraulika\nFelnik\nEgyedi tuningok", "Megvesz", "Vissza");
	    if(response)
	    {
	        if(listitem == 0) SetPVarInt(playerid, "tuncomp", 1082); //Import
	        if(listitem == 1) SetPVarInt(playerid, "tuncomp", 1096);//Ahab
	        if(listitem == 2) SetPVarInt(playerid, "tuncomp", 1097);//Virtual
	        if(listitem == 3) SetPVarInt(playerid, "tuncomp", 1098);//Access
	        if(listitem == 4) SetPVarInt(playerid, "tuncomp", 1085);//Atomic
	        if(listitem == 5) SetPVarInt(playerid, "tuncomp", 1025);//Offroad
	        if(listitem == 6) SetPVarInt(playerid, "tuncomp", 1074);//Mega
	        if(listitem == 7) SetPVarInt(playerid, "tuncomp", 1081);//Grove
	        if(listitem == 8) SetPVarInt(playerid, "tuncomp", 1080);//Switch
	        if(listitem == 9) SetPVarInt(playerid, "tuncomp", 1079);//Cutter
	        if(listitem == 10) SetPVarInt(playerid, "tuncomp", 1073);//Shadow
	        if(listitem == 11) SetPVarInt(playerid, "tuncomp", 1077);//Classic
	        if(listitem == 12) SetPVarInt(playerid, "tuncomp", 1076);//Wires
	        if(listitem == 13) SetPVarInt(playerid, "tuncomp", 1078);//Twist
	        if(listitem == 14) SetPVarInt(playerid, "tuncomp", 1083);//Dollar
	        if(listitem == 15) SetPVarInt(playerid, "tuncomp", 1084);//Trance

			format(query, sizeof(query), "UPDATE cars SET tuning3 = '%d' WHERE slot = '%d'", GetPVarInt(playerid, "tuncomp"), GetPVarInt(playerid, "szerkesztslot"));
			mysql_query(query);
			SendClientMessage(playerid, COLOR_GREEN, "Autó sikeresen tuningolva a hármas tuningslotra. 500.000$ levonva.");
        	GivePlayerMoneyEx(playerid, -500000, "Jármûvet tuningolt");
		}
	}
	if(dialogid == AUTOELAD_DIALOG)
	{
	    if(!response) ShowSzerkesztDialog(playerid);
	    if(response)
	    {
	        format(query, sizeof(query), "DELETE FROM cars WHERE slot = %d", GetPVarInt(playerid, "autoeladslot"));
	        mysql_query(query);
			format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('AUTOELADAS', '%s', %d, %d, NOW(), 'Eladta az autóját')", GetPlayerNameEx(playerid), GetPVarInt(playerid, "autoeladslot"), 0);
			mysql_query(query);
	        AutoUpdate(GetPVarInt(playerid, "autoeladslot"));
	        GivePlayerMoneyEx(playerid, GetPVarInt(playerid, "eladasiar"), "Autót adott el");
	    }
	}
	if(dialogid == AUTORENDSZAM_DIALOG)
	{
	    if(!response) ShowSzerkesztDialog(playerid);
	    if(response)
	    {
	        format(query, sizeof(query), "UPDATE cars SET rendszam = '%s' WHERE slot = %d", inputtext, GetPVarInt(playerid, "szerkesztslot"));
         	mysql_query(query);
         	SetVehicleNumberPlate(carplay[GetPVarInt(playerid, "szerelslot")], inputtext);
	        SendClientMessage(playerid, COLOR_GREEN, "Rendszám sikeresen átírva. 300.000$ levonva.");
	        GivePlayerMoneyEx(playerid, -300000, "Rendszámot vett");
	    }
	}
	if(dialogid == AUTOSZIN_DIALOG)
	{
	    if(!response) ShowSzerkesztDialog(playerid);
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            if(GetPlayerMoneyEx(playerid) < 300000) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
	            ShowPlayerDialog(playerid, AUTOSZIN1_DIALOG, DIALOG_STYLE_INPUT, "Autó 1-es színe", "Írd be a színID-t hogy milyen színûre akarod festeni az autódat.\nAlapok:\n0 - fekete, 1 - fehér, 2 - világoskék, 3 - piros, 4 - sötétzöld, 5 - rózsaszín, 6 - sárga, 24 - szürke, 86 - világoszöld", "Színezés", "Kilép");
	        }
	        if(listitem == 1)
	        {
	            if(GetPlayerMoneyEx(playerid) < 300000) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
	            ShowPlayerDialog(playerid, AUTOSZIN2_DIALOG, DIALOG_STYLE_INPUT, "Autó 2-es színe", "Írd be a színID-t hogy milyen színûre akarod festeni az autódat.\nAlapok:\n0 - fekete, 1 - fehér, 2 - világoskék, 3 - piros, 4 - sötétzöld, 5 - rózsaszín, 6 - sárga, 24 - szürke, 86 - világoszöld", "Színezés", "Kilép");
	        }
	    }
	}
	if(dialogid == AUTOSZIN1_DIALOG)
	{
	    if(!response) ShowSzerkesztDialog(playerid);
	    if(response)
	    {
	        if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Számot kell beírnod!");
			format(query, sizeof(query), "UPDATE cars SET color1 = %d WHERE slot = %d", strval(inputtext), GetPVarInt(playerid, "szerkesztslot"));
   			mysql_query(query);
			SendClientMessage(playerid, COLOR_GREEN, "Autó sikeresen átszínezve. 300.000$ levonva.");
	        GivePlayerMoneyEx(playerid, -300000, "Jármûvet színezett");
		}
	}
	if(dialogid == AUTOSZIN2_DIALOG)
	{
	    if(!response) ShowSzerkesztDialog(playerid);
	    if(response)
	    {
	        if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Számot kell beírnod!");
			format(query, sizeof(query), "UPDATE cars SET color2 = %d WHERE slot = %d", strval(inputtext), GetPVarInt(playerid, "szerkesztslot"));
   			mysql_query(query);
			SendClientMessage(playerid, COLOR_GREEN, "Autó sikeresen átszínezve. 300.000$ levonva.");
	        GivePlayerMoneyEx(playerid, -300000, "Jármûvet színezett");
		}
	}
	if(dialogid == AUTOSZPAINT_DIALOG)
	{
	    if(!response) ShowSzerkesztDialog(playerid);
	    if(response)
	    {
	        if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Számot kell beírnod!");
			format(query, sizeof(query), "UPDATE cars SET paintjob = %d WHERE slot = %d", strval(inputtext), GetPVarInt(playerid, "szerkesztslot"));
   			mysql_query(query);
			ChangeVehiclePaintjob(carplay[GetPVarInt(playerid, "szerelslot")], strval(inputtext));
			SendClientMessage(playerid, COLOR_GREEN, "Autó sikeresen átfestve. 500.000$ levonva.");
	        GivePlayerMoneyEx(playerid, -500000, "Paintjobot tett");
		}
	}
	if(dialogid == HAZBERENDEZES_DIALOG)
	{
	    if(response)
		{
		    if(listitem == 0)
		    {
				format(query, sizeof(query), "SELECT * FROM houseobjects WHERE houseID = %d", GetPVarInt(playerid, "hazban"));
 				mysql_query(query);
				mysql_store_result();
				if(mysql_num_rows() >= MAX_HSLOTS)
				{
				    SendClientMessage(playerid, COLOR_ERROR, "HIBA: A háztárgyaid száma elérte a maxot!");
					return 1;
				}
				/*new str[1500];
				for(new i = 0; i < 500; i++)
				{
				    format(query, sizeof(query), "SELECT Nev FROM targyadatok WHERE ID = %d", i);
     				mysql_query(query);
					mysql_store_result();
					if(mysql_num_rows() != 0)
					{
						mysql_fetch_row(linen);
						new data[64];
						sscanf(linen, "p<|>s[64]", data);
						mysql_free_result();
					    format(str, sizeof(str), "%s%s\n", str, data);
					    if(strlen(str) >= 1450)
			        	{
			        	    format(str, sizeof str, "%sTovább", str);
			        	    SetPVarInt(playerid, "haz", i);
			        	    break;
			        	}
					}
				}
				ShowPlayerDialog(playerid, HAZRENDEZ_DIALOG, DIALOG_STYLE_LIST, "Ház berendezés", str, "Kiválaszt", "Kilép");*/
				
				new str[500];
				mysql_query("SELECT Kategoria FROM targyadatok GROUP BY Kategoria ASC");
				mysql_store_result();
				if(mysql_num_rows() != 0)
				{
				    while(mysql_fetch_row(linen))
				    {
				        format(str, sizeof(str), "%s%s\n", str, linen);
					}
					mysql_free_result();
				}
				ShowPlayerDialog(playerid, HAZKATEG_DIALOG, DIALOG_STYLE_LIST, "Ház berendezés", str, "Kiválaszt", "Kilép");
		    }
		    if(listitem == 1)
		    {
		        new str[1500];
		        /*for(new i; i < MAX_HSLOTS; i++)
		        {
			        format(query, sizeof(query), "SELECT Nev FROM houseobjects WHERE houseID = %d AND slot = %d ORDER BY Nev ASC", GetPVarInt(playerid, "hazban"), i);
           			mysql_query(query);
			        mysql_store_result();
			        if(mysql_num_rows() != 0)
			        {
			            mysql_fetch_row(linen);
			            new data[64];
						sscanf(linen, "p<|>s[64]", data);
						mysql_free_result();
						format(str, sizeof(str), "%s%s\n", str, data);
			        }
				}*/
				
		        format(query, sizeof(query), "SELECT Nev FROM houseobjects WHERE houseID = %d ORDER BY Nev ASC", GetPVarInt(playerid, "hazban"));
       			mysql_query(query);
		        mysql_store_result();
		        if(mysql_num_rows() != 0)
		        {
		            while(mysql_fetch_row(linen))
		            {
						format(str, sizeof(str), "%s%s\n", str, linen);
					}
					mysql_free_result();
		        }
		        
				ShowPlayerDialog(playerid, HAZTARGYAK_DIALOG, DIALOG_STYLE_LIST, "Ház berendezés", str, "Kiválaszt", "Vissza");
			}
			if(listitem == 2)
			{
				for(new i; i < MAX_HSLOTS; i++)
				{
				    new Float:hx, Float:hy, Float:hz;
					GetDynamicObjectPos(hobject[GetPVarInt(playerid, "hazban")][i], hx, hy, hz);
					if(IsPlayerInRangeOfPoint(playerid, 1.5, hx, hy, hz))
					{
					    EditDynamicObject(playerid, hobject[GetPVarInt(playerid, "hazban")][i]);
		                GetDynamicObjectPos(hobject[GetPVarInt(playerid, "hazban")][i], ox[playerid], oy[playerid], oz[playerid]);
			            GetDynamicObjectRot(hobject[GetPVarInt(playerid, "hazban")][i], orx[playerid], ory[playerid], orz[playerid]);
						EditDynamicObject(playerid, hobject[GetPVarInt(playerid, "hazban")][i]);
						SetPVarInt(playerid, "oslot", i);
						SetPVarInt(playerid, "oszerkeszt", 1);
						SendClientMessage(playerid, COLOR_GREEN, #HLIME#"Ha az eredeti helyére akarod visszatenni a tárgyat, nyomj ESC gombot.");
						SendClientMessage(playerid, COLOR_GREEN, #HLIME#"Ha a tárgyat megfelelõen elrendezted, kattints a mentés(flopy lemez) ikonra.");
						SendClientMessage(playerid, COLOR_GREEN, #HLIME#"Ha a kamerát akarod forgatni, tartsd lenyomva a futás gombot és mozgasd az egeret.");
						break;
					}
				}
			}
			if(listitem == 3)
			{
			    SelectObject(playerid);
			    SendClientMessage(playerid, COLOR_GREEN, #HLIME#"Válaszd ki azt a tárgyat amit szerkeszteni szeretnél.");
			    SendClientMessage(playerid, COLOR_GREEN, #HLIME#"Ha ki szeretnél lépni a szeresztésbõl nyomj ESC gombot.");
			}
		}
	}
	if(dialogid == HAZKATEG_DIALOG)
	{
	    if(response)
	    {
	        new str[1500];
	        SetPVarString(playerid, "hazkateg", inputtext);
	        format(query, sizeof(query), "SELECT Nev, ID FROM targyadatok WHERE Kategoria = '%s' ORDER BY Nev ASC", inputtext);
			mysql_query(query);
			mysql_store_result();
			if(mysql_num_rows() != 0)
			{
				while(mysql_fetch_row(linen))
				{
					new data[64], i;
					sscanf(linen, "p<|>s[64]i", data, i);
				    format(str, sizeof(str), "%s%s\n", str, data);
				    if(strlen(str) >= 1450)
		        	{
		        	    format(str, sizeof str, "%sTovább", str);
		        	    SetPVarInt(playerid, "haz", i);
		        	    break;
		        	}
				}
				mysql_free_result();
			}
			ShowPlayerDialog(playerid, HAZRENDEZ_DIALOG, DIALOG_STYLE_LIST, "Ház berendezés", str, "Kiválaszt", "Kilép");
	    }
	    else
	    {
	        format(query, sizeof(query), "SELECT * FROM houses WHERE ID = %d AND Tulaj = '%s'", GetPVarInt(playerid, "hazban"), GetPlayerNameEx(playerid));
			mysql_query(query);
			mysql_store_result();
			if(mysql_num_rows() == 0) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ez nem a te házad!"), mysql_free_result();
	        if(GetPVarInt(playerid, "oszerkeszt") == 1 || GetPVarInt(playerid, "mostvett") == 1) return SendClientMessage(playerid, COLOR_RED, "HIBA: Elõször a mostani tárgyakkal csinálj valamit.");
			ShowPlayerDialog(playerid, HAZBERENDEZES_DIALOG, DIALOG_STYLE_LIST, "Ház berendezés", "Új tárgy vásárlása\nMeglévõ tárgyak\nLegközelebbi tárgy szerkesztése\nSzerkesztés választás szerint", "Kiválaszt", "Kilép");
		    szam[playerid] = 0;
	    }
	}
	if(dialogid == HAZTARGYAK_DIALOG)
	{
		if(response)
		{
			szam[playerid] = 0;
			oldszam[playerid] = 0;
			ertek[playerid] = 0;
		    SetPVarString(playerid, "oneve", inputtext);
		    for(new i; i < MAX_HSLOTS; i++)
		    {
		    	/*format(query, sizeof(query), "SELECT slot, ID FROM houseobjects WHERE houseID = %d AND Nev = '%s'", GetPVarInt(playerid, "hazban"), GetPVarStringEx(playerid, "oneve"));
       			mysql_query(query);
			    mysql_store_result();
			    if(mysql_num_rows() != 0)
			    {
			        mysql_fetch_row(linen);
			        new data[2];
					sscanf(linen, "p<|>ii", data[0], data[1]);
					mysql_free_result();
					SetPVarInt(playerid, "oslot", data[0]);
					SetPVarInt(playerid, "oid", data[1]);
			    }*/
			    format(query, sizeof(query), "SELECT * FROM houseobjects WHERE houseID = %d AND Nev = '%s' AND slot = %d", GetPVarInt(playerid, "hazban"), GetPVarStringEx(playerid, "oneve"), i);
       			mysql_query(query);
			    mysql_store_result();
			    if(mysql_num_rows() != 0)
			    {
					szam[playerid] = i;
					oldszam[playerid] = szam[playerid];
					break;
			    }
			}
		    SetPVarInt(playerid, "oslot", szam[playerid]), ShowPlayerDialog(playerid, HAZTARGYAK2_DIALOG, DIALOG_STYLE_LIST, "Ház berendezés", "Tárgy mozgatása\nTárgy eladása\nKövetkezõ tárgy(ha több van belõle)", "Kiválaszt", "Kilép");
		    //if(szam[playerid] > 1) SetPVarInt(playerid, "oslot", szam[playerid]), ShowPlayerDialog(playerid, HAZTARGYAK2_DIALOG, DIALOG_STYLE_LIST, "Ház berendezés", "Tárgy mozgatása\nTárgy eladása\nKövetkezõ tárgy", "Kiválaszt", "Kilép");
		}
		else ShowPlayerDialog(playerid, HAZBERENDEZES_DIALOG, DIALOG_STYLE_LIST, "Ház berendezés", "Új tárgy vásárlása\nMeglévõ tárgyak\nLegközelebbi tárgy szerkesztése\nSzerkesztés választás szerint", "Kiválaszt", "Kilép");
	}
	if(dialogid == HAZTARGYAK2_DIALOG)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            GetDynamicObjectPos(hobject[GetPVarInt(playerid, "hazban")][GetPVarInt(playerid, "oslot")], ox[playerid], oy[playerid], oz[playerid]);
	            GetDynamicObjectRot(hobject[GetPVarInt(playerid, "hazban")][GetPVarInt(playerid, "oslot")], orx[playerid], ory[playerid], orz[playerid]);
				EditDynamicObject(playerid, hobject[GetPVarInt(playerid, "hazban")][GetPVarInt(playerid, "oslot")]);
				SetPVarInt(playerid, "oszerkeszt", 1);
				SendClientMessage(playerid, COLOR_GREEN, #HLIME#"Ha az eredeti helyére akarod visszatenni a tárgyat, nyomj ESC gombot.");
				SendClientMessage(playerid, COLOR_GREEN, #HLIME#"Ha a tárgyat megfelelõen elrendezted, kattints a mentés(flopy lemez) ikonra.");
				SendClientMessage(playerid, COLOR_GREEN, #HLIME#"Ha a kamerát akarod forgatni, tartsd lenyomva a futás gombot és mozgasd az egeret.");
	        }
	        if(listitem == 1)
	        {
         		format(query, sizeof(query), "SELECT Ar FROM targyadatok WHERE Nev = '%s'", GetPVarStringEx(playerid, "oneve"));
             	mysql_query(query);
	            mysql_store_result();
				if(mysql_num_rows() != 0)
				{
				    mysql_fetch_row(linen);
				    new ar;
				    sscanf(linen, "i", ar);
				    mysql_free_result();
				    new tstring[128];
		            format(tstring, sizeof(tstring), #HGOLD#"Tárgy neve: "#HLIME#"%s\n"#HGOLD#"Eladási ár:"#HLIME#" %s$", GetPVarStringEx(playerid, "oneve"), convertFormattedNumber(ar/2, "."));
					ShowPlayerDialog(playerid, TARGYELAD_DIALOG, DIALOG_STYLE_MSGBOX, "Tárgy eladása", tstring, "Elad", "Kilép");
				    SetPVarInt(playerid, "oar", ar/2);
				}
			}
			if(listitem == 2)
			{
			    for(new i = ertek[playerid]; i < MAX_HSLOTS; i++)
		    	{
				    format(query, sizeof(query), "SELECT * FROM houseobjects WHERE houseID = %d AND Nev = '%s' AND slot = %d", GetPVarInt(playerid, "hazban"), GetPVarStringEx(playerid, "oneve"), i);
        			mysql_query(query);
				    mysql_store_result();
				    if(mysql_num_rows() != 0)
				    {
				        szam[playerid] = i;
				        if(szam[playerid] == oldszam[playerid])
						{
							oldszam[playerid] = szam[playerid];
							continue;
						}
				        if(szam[playerid] != oldszam[playerid])
						{
							oldszam[playerid] = szam[playerid];
							ertek[playerid] = i+1;
							break;
						}
				    }
				}
				SetPVarInt(playerid, "oslot", szam[playerid]), ShowPlayerDialog(playerid, HAZTARGYAK2_DIALOG, DIALOG_STYLE_LIST, "Ház berendezés", "Tárgy mozgatása\nTárgy eladása\nKövetkezõ tárgy(ha több van belõle)", "Kiválaszt", "Kilép");
			}
	    }
		else
		{
		    new str[1500];
	        format(query, sizeof(query), "SELECT Nev FROM houseobjects WHERE houseID = %d ORDER BY Nev ASC", GetPVarInt(playerid, "hazban"));
   			mysql_query(query);
	        mysql_store_result();
	        if(mysql_num_rows() != 0)
	        {
	            while(mysql_fetch_row(linen))
	            {
					format(str, sizeof(str), "%s%s\n", str, linen);
				}
				mysql_free_result();
	        }
			ShowPlayerDialog(playerid, HAZTARGYAK_DIALOG, DIALOG_STYLE_LIST, "Ház berendezés", str, "Kiválaszt", "Vissza");
		}
	}
	if(dialogid == TARGYELAD_DIALOG)
	{
	    if(response)
	    {
	        DestroyDynamicObject(hobject[GetPVarInt(playerid, "hazban")][GetPVarInt(playerid, "oslot")]);
	        format(query, sizeof(query), "DELETE FROM houseobjects WHERE houseID = %d AND slot = %d", GetPVarInt(playerid, "hazban"), GetPVarInt(playerid, "oslot"));
   			mysql_query(query);
			GivePlayerMoneyEx(playerid, GetPVarInt(playerid, "oar"), "Háztárgyat adott el");
	        SendClientMessage(playerid, COLOR_GREEN, #HLIME#"Tárgy eladva.");
	    }
	}
	if(dialogid == HAZRENDEZ_DIALOG)
	{
	    if(response)
	    {
	        format(query, sizeof(query), "SELECT objectID, Ar FROM targyadatok WHERE Nev = '%s'", inputtext);
         	mysql_query(query);
	        mysql_store_result();
	        if(mysql_num_rows() != 0)
	        {
				mysql_fetch_row(linen);
				new data[2];
				sscanf(linen, "p<|>ii", data[0], data[1]);
				mysql_free_result();
				new tstring[128];
				format(tstring, sizeof(tstring), #HGOLD#"Tárgy neve: "#HLIME#"%s\n"#HGOLD#"TárgyID:"#HLIME#" %d\n"#HGOLD#"Ár:"#HLIME#" %s$", inputtext, data[0], convertFormattedNumber(data[1], "."));
                TextDrawSetPreviewModel(modeltext[playerid], data[0]);
                TextDrawSetPreviewRot(modeltext[playerid], -16.0, 0.0, 183.0);
				TextDrawShowForPlayer(playerid, modeltext[playerid]);
				ShowPlayerDialog(playerid, TARGYMEGVESZ1_DIALOG, DIALOG_STYLE_MSGBOX, "Tárgy adatai", tstring, "Megvesz", "Vissza");
				SetPVarString(playerid, "objectnev", inputtext);
				SetPVarInt(playerid, "objectid", data[0]);
				SetPVarInt(playerid, "objectar", data[1]);
			}
			if(!strcmp(inputtext, "Tovább"))
			{
				new str[1000];
				format(query, sizeof(query), "SELECT Nev FROM targyadatok WHERE ID >= %d AND Kategoria = '%s'", GetPVarInt(playerid, "haz"), GetPVarStringEx(playerid, "hazkateg"));
				mysql_query(query);
				mysql_store_result();
				if(mysql_num_rows() != 0)
				{
					while(mysql_fetch_row(linen))
					{
						new data[64], i;
						sscanf(linen, "p<|>s[64]i", data, i);
					    format(str, sizeof(str), "%s%s\n", str, data);
					    if(strlen(str) >= 950)
			        	{
			        	    format(str, sizeof str, "%sTovább", str);
			        	    SetPVarInt(playerid, "haz", i);
			        	    break;
			        	}
					}
					mysql_free_result();
				}
				ShowPlayerDialog(playerid, HAZRENDEZ_DIALOG, DIALOG_STYLE_LIST, "Ház berendezés", str, "Kiválaszt", "Kilép");
			}
	    }
        else
	    {
	        new str[500];
			mysql_query("SELECT Kategoria FROM targyadatok GROUP BY Kategoria ASC");
			mysql_store_result();
			if(mysql_num_rows() != 0)
			{
			    while(mysql_fetch_row(linen))
			    {
			        format(str, sizeof(str), "%s%s\n", str, linen);
				}
				mysql_free_result();
			}
			ShowPlayerDialog(playerid, HAZKATEG_DIALOG, DIALOG_STYLE_LIST, "Ház berendezés", str, "Kiválaszt", "Kilép");
	    }
	}
	if(dialogid == TARGYMEGVESZ1_DIALOG)
	{
	    TextDrawHideForPlayer(playerid, modeltext[playerid]);
	    if(response)
		{
		    if(GetPlayerMoneyEx(playerid) < GetPVarInt(playerid, "objectar")) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elég pénzed!");
		    new Float:x, Float:y, Float:z;
            GetPlayerPos(playerid, x, y, z);
			GetXYInFrontOfPlayer(playerid, x, y, 4);
			editobject[playerid] = CreateDynamicObject(GetPVarInt(playerid, "objectid"), x, y, z, 0, 0, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
			SetTimerEx("oszerk", 2000, 0, "i", playerid);
			new Float:nx, Float:ny, Float:nz;
			GetPlayerPos(playerid, nx, ny, nz);
			SetPlayerPos(playerid, nx+0.1, ny, nz);
			SetPVarInt(playerid, "mostvett", 1);
			SendClientMessage(playerid, COLOR_GREEN, #HLIME#"Megvetted a tárgyat, most tedd le ahova szeretnéd.");
			SendClientMessage(playerid, COLOR_GREEN, #HLIME#"Ha mégse ezt a tárgyat akarod megvenni, nyomj ESC gombot.");
			SendClientMessage(playerid, COLOR_GREEN, #HLIME#"Ha a tárgyat megfelelõen elrendezted, kattints a mentés(flopy lemez) ikonra.");
			SendClientMessage(playerid, COLOR_GREEN, #HLIME#"Ha a kamerát akarod forgatni, tartsd lenyomva a futás gombot és mozgasd az egeret.");
		}
		else
		{
	    	new str[1500];
	        format(query, sizeof(query), "SELECT Nev, ID FROM targyadatok WHERE Kategoria = '%s' ORDER BY Nev ASC", GetPVarStringEx(playerid, "hazkateg"));
			mysql_query(query);
			mysql_store_result();
			if(mysql_num_rows() != 0)
			{
				while(mysql_fetch_row(linen))
				{
					new data[64], i;
					sscanf(linen, "p<|>s[64]i", data, i);
				    format(str, sizeof(str), "%s%s\n", str, data);
				    if(strlen(str) >= 1450)
		        	{
		        	    format(str, sizeof str, "%sTovább", str);
		        	    SetPVarInt(playerid, "haz", i);
		        	    break;
		        	}
				}
				mysql_free_result();
			}
			ShowPlayerDialog(playerid, HAZRENDEZ_DIALOG, DIALOG_STYLE_LIST, "Ház berendezés", str, "Kiválaszt", "Kilép");
		}
	}
	if(dialogid == TARGYMEGVESZ2_DIALOG)
	{
	    if(response)
	    {
	        for(new i; i < MAX_HSLOTS; i++)
	        {
	            format(query, sizeof(query), "SELECT * FROM houseobjects WHERE slot = %d AND houseID = %d", i, GetPVarInt(playerid, "hazban"));
             	mysql_query(query);
	            mysql_store_result();
	            if(mysql_num_rows() == 0)
	            {
			        format(query, sizeof(query), "INSERT INTO houseobjects (ID, slot, houseID, objectID, VW, Nev, X, Y, Z, rX, rY, rZ) VALUES (0, %d, %d, %d, %d, '%s', %0.2f, %0.f, %0.2f, %0.2f, %0.2f, %0.2f)",
					i, GetPVarInt(playerid, "hazban"), GetPVarInt(playerid, "objectid"), GetPlayerVirtualWorld(playerid),
					GetPVarStringEx(playerid, "objectnev"), GetPVarFloat(playerid, "objectX"),GetPVarFloat(playerid, "objectY"), GetPVarFloat(playerid, "objectZ"),
					GetPVarFloat(playerid, "objectrX"), GetPVarFloat(playerid, "objectrY"), GetPVarFloat(playerid, "objectrZ"));
     				mysql_query(query);
					hobject[GetPVarInt(playerid, "hazban")][i] = editobject[playerid];
					editobject[playerid] = 0;
					GivePlayerMoneyEx(playerid, -GetPVarInt(playerid, "objectar"), "Háztárgyat vett");
					break;
				}
			}
		}
	    else
	    {
	        DestroyDynamicObject(editobject[playerid]);
		    SetPVarInt(playerid, "mostvett", 0);
		    SendClientMessage(playerid, COLOR_GREEN, #HLIME#"A tárgyat eladtad.");
		    CancelEdit(playerid);
	    }
	}
	if(dialogid == HOUSEMENU_DIALOG)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
//	            if(strcmp("Ryuuzaki", GetPlayerNameEx(playerid))) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ez a funkció jelenleg javítás alatt van.");
	            format(query, sizeof(query), "SELECT * FROM houses WHERE ID = %d AND Tulaj = '%s'", GetPVarInt(playerid, "hazban"), GetPlayerNameEx(playerid));
    			mysql_query(query);
				mysql_store_result();
				if(mysql_num_rows() == 0) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ez nem a te házad!"), mysql_free_result();
		        if(GetPVarInt(playerid, "oszerkeszt") == 1 || GetPVarInt(playerid, "mostvett") == 1) return SendClientMessage(playerid, COLOR_RED, "HIBA: Elõször a mostani tárgyakkal csinálj valamit.");
				ShowPlayerDialog(playerid, HAZBERENDEZES_DIALOG, DIALOG_STYLE_LIST, "Ház berendezés", "Új tárgy vásárlása\nMeglévõ tárgyak\nLegközelebbi tárgy szerkesztése\nSzerkesztés választás szerint", "Kiválaszt", "Kilép");
			    szam[playerid] = 0;
			}
			if(listitem == 1)
			{
			    format(query, sizeof(query), "UPDATE houses SET Locked = '0' WHERE Tulaj = '%s' OR Tarstulaj = '%s'", GetPlayerNameEx(playerid), GetPlayerNameEx(playerid));
    			mysql_query(query);
				SendClientMessage(playerid, COLOR_GREEN, "Kinyitottad a házadat!");
			}
			if(listitem == 2)
			{
			    format(query, sizeof(query), "UPDATE houses SET Locked = '1' WHERE Tulaj = '%s' OR Tarstulaj = '%s'", GetPlayerNameEx(playerid), GetPlayerNameEx(playerid));
    			mysql_query(query);
				SendClientMessage(playerid, COLOR_GREEN, "Bezártad a házadat!");
			}
			if(listitem == 3)
			{
			    ShowPlayerDialog(playerid, HAZNEV_DIALOG, DIALOG_STYLE_INPUT, "Ház neve", "Írd be a nevet amit szeretnél a házadnak.\nSzínkódok engedettek.", "Oké", "Kilép");
			}
	    }
	}
	if(dialogid == HAZNEV_DIALOG)
	{
	    if(response)
	    {
	        if(strlen(inputtext) == 0) return ShowPlayerDialog(playerid, HAZNEV_DIALOG, DIALOG_STYLE_INPUT, "Ház neve", "Írd be a nevet amit szeretnél a házadnak.\nSzínkódok engedettek.", "Oké", "Kilép");
	        format(query, sizeof(query), "UPDATE houses SET HouseName = '%s' WHERE ID = %d", inputtext, GetPVarInt(playerid, "hazban"));
         	mysql_query(query);
	        HazFrissites();
	    }
	}
	if(dialogid == CLANPANEL_DIALOG)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
			    new clanstr[500];
			    format(query, sizeof(query), "SELECT Name FROM users WHERE Clan = '%s'", GetPVarStringEx(playerid, "Clan"));
				mysql_query(query);
				mysql_store_result();
				if(mysql_num_rows() != 0)
				{
				    while(mysql_fetch_row(linen))
				    {
						format(clanstr, sizeof clanstr, "%s%s\n", clanstr, linen);
				    }
				    mysql_free_result();
				}
			    ShowPlayerDialog(playerid, CLANTAGOK_DIALOG, DIALOG_STYLE_LIST, "Tagok", clanstr, "Kiválaszt", "Vissza");
			}
			if(listitem == 1)
			{
			    new rangstr[24*10+50+100];
				for(new x = 1; x < MAX_CLANRANK; x++)
				{
					format(query, sizeof(query), "SELECT ClanRank%d, ClanSkin%d FROM clans WHERE ClanName = '%s'", x, x, GetPVarStringEx(playerid, "Clan"));
     				mysql_query(query);
					mysql_store_result();
					if(mysql_num_rows() != 0)
					{
						mysql_fetch_row(linen);
						new data[MAX_CLANRANK][24];
						new data2[MAX_CLANRANK];
						new trs[30];
						sscanf(linen, "p<|>s[24]d", data[x], data2[x]);
						format(trs, sizeof(trs), "ClanRank%d", x);
						SetPVarString(playerid, trs, data[x]);
						mysql_free_result();
	                    format(rangstr, sizeof(rangstr), "%s%s [Skin: %d]\n", rangstr, data[x], data2[x]);
					}
				}
				ShowPlayerDialog(playerid, CLANRANGOK_DIALOG, DIALOG_STYLE_LIST, "Rangok szerkesztése", rangstr, "Kiválaszt", "Vissza");
			}
			if(listitem == 2)
			{
			    if(GetPVarInt(playerid, "ClanRank") != MAX_CLANRANK-1)
				{
					SendClientMessage(playerid, COLOR_ERROR, "HIBA: Csak a klánvezér oszthat jogokat!");
 			 		ShowClanPanel(playerid);
					return 1;
				}
				new cstring[150];
				format(cstring, sizeof(cstring), "Meghívó jog[%d]\nKirúgás jog[%d]\nAutóparkolás jog[%d]\nRangadás jog[%d]\nKihívás jog[%d]", GetClanRangJog(GetPVarStringEx(playerid, "Clan"), "invitejog"), GetClanRangJog(GetPVarStringEx(playerid, "Clan"), "kickjog"), GetClanRangJog(GetPVarStringEx(playerid, "Clan"), "parkoljog"), GetClanRangJog(GetPVarStringEx(playerid, "Clan"), "rangadjog"), GetClanRangJog(GetPVarStringEx(playerid, "Clan"), "kihivjog"));
				ShowPlayerDialog(playerid, CLANJOGOK_DIALOG, DIALOG_STYLE_LIST, "Klánjogok", cstring, "Kiválaszt", "Vissza");
			}
			if(listitem == 3)
			{
			        if(GetPVarInt(playerid, "ClanRank") == MAX_CLANRANK-1)
					{
						SendClientMessage(playerid, COLOR_ERROR, "HIBA: Te klánvezér vagy, ezért nem hagyhatod el a klánodat!");
					    ShowClanPanel(playerid);
						return 1;
					}
					ShowPlayerDialog(playerid, CLANELHAGY_DIALOG, DIALOG_STYLE_MSGBOX, "Klán elhagyása", "Valóban el szeretnéd hagyni a klánt?", "Igen", "Nem");
			}
			if(listitem == 4)
			{
			    if(GetPVarInt(playerid, "ClanRank") != MAX_CLANRANK-1)
				{
					SendClientMessage(playerid, COLOR_ERROR, "HIBA: Csak a klánvezér oszlathatja fel a klánt!");
 			 		ShowClanPanel(playerid);
					return 1;
				}
				ShowPlayerDialog(playerid, CLANFELOSZLAT_DIALOG, DIALOG_STYLE_MSGBOX, "Klán feloszlatása", "Valóban fel szeretnéd oszlatni a klánt?", "Igen", "Nem");
			}
			if(listitem == 5)
			{
			    if(GetPVarInt(playerid, "ClanRank") < GetClanRangJog(GetPVarStringEx(playerid, "Clan"), "kihivjog"))
				{
					SendClientMessage(playerid, COLOR_ERROR, "HIBA: Nincs meg a kellõ rangod ehhez a joghoz!");
        			ShowClanPanel(playerid);
					return 1;
				}
				if(GetGVarInt("klanhaboru") == 1)
				{
					SendClientMessage(playerid, COLOR_ERROR, "HIBA: Most éppen zajlik egy háború, ezért nem indíthatsz!");
        			ShowClanPanel(playerid);
					return 1;
				}
				ShowPlayerDialog(playerid, CLANKIHIV1_DIALOG, DIALOG_STYLE_LIST, "Klán kihívása", "TDM párbaj", "Tovább", "Vissza");
			}
			if(listitem == 6)
			{
				ShowPlayerDialog(playerid, CLANMONEY_DIALOG, DIALOG_STYLE_LIST, "Klán kassza", "Pénz berakása\nPénz kivétele\nPénz elköltése", "Kiválaszt", "Vissza");
			}
			if(listitem == 7)
			{
				new clancarsslot[1000];
			    format(query, sizeof(query), "SELECT slot, vehid FROM clancars WHERE ClanTulaj = '%s'", GetPVarStringEx(playerid, "Clan"));
			    mysql_query(query);
			    mysql_store_result();
			    if(mysql_num_rows() != 0)
			    {
				    while(mysql_fetch_row(linen))
				    {
				        new vehid, vehslot;
				        sscanf(linen, "p<|>dd", vehslot, vehid);
						format(clancarsslot, sizeof clancarsslot, "%sSlot: %d, Vehid: %d\n", clancarsslot, vehslot, vehid);
				    }
				    mysql_free_result();
			    }
			    else clancarsslot = "Nincsenek klánautók";
			    ShowPlayerDialog(playerid, CLANAUTOSLOT_DIALOG, DIALOG_STYLE_LIST, "Klán autók slotja (Slot | Vehid)", clancarsslot, "Vissza", "");
			}
		}
	}
	if(dialogid == CLANAUTOSLOT_DIALOG) ShowClanPanel(playerid);
	if(dialogid == CLANJOGOK_DIALOG)
	{
	    if(response)
	    {
	        if(listitem == 0) SetPVarString(playerid, "clanjog", "invitejog");
	        if(listitem == 1) SetPVarString(playerid, "clanjog", "kickjog");
	        if(listitem == 2) SetPVarString(playerid, "clanjog", "parkoljog");
	        if(listitem == 3) SetPVarString(playerid, "clanjog", "rangadjog");
            if(listitem == 4) SetPVarString(playerid, "clanjog", "kihivjog");
			new rangstr3[200];
			for(new z = 1; z < MAX_CLANRANK; z++)
			{
				format(query, sizeof(query), "SELECT ClanRank%d FROM clans WHERE ClanName = '%s'", z, GetPVarStringEx(playerid, "Clan"));
    			mysql_query(query);
				mysql_store_result();
				if(mysql_num_rows() != 0)
				{
					mysql_fetch_row(linen);
					new tarolo4[MAX_CLANRANK][24];
					sscanf(linen, "p<|>s[24]", tarolo4[z]);
					mysql_free_result();
	                format(rangstr3, sizeof(rangstr3), "%s%s\n", rangstr3, tarolo4[z]);
				}
			}
			ShowPlayerDialog(playerid, CLANJOGOK2_DIALOG, DIALOG_STYLE_LIST, "Válaszd ki hanyas rangtól lehessen a jogot használni!", rangstr3, "Kiválaszt", "Vissza");
	    }
	    else
	    {
		    ShowClanPanel(playerid);
			return 1;
	    }
	}
	if(dialogid == CLANJOGOK2_DIALOG)
	{
	    if(response)
	    {
			format(query, sizeof(query), "UPDATE clans SET %s = '%d' WHERE ClanName = '%s'", GetPVarStringEx(playerid, "clanjog"), listitem+1, GetPVarStringEx(playerid, "Clan"));
   			mysql_query(query);
			SendFormatMessage(playerid, COLOR_GREEN, #HLIME#"Sikeresen szerkesztetted ezt a jogot: %s, már "#HYELLOW#"%s[%d]"#HLIME#" rangtól használható!", GetPVarStringEx(playerid, "clanjog"), inputtext, listitem+1);
			new cstring[150];
			format(cstring, sizeof(cstring), "invitejog[%d]\nkickjog[%d]\nparkoljog[%d]\nrangadjog[%d]\nkihívásjog[%d]", GetClanRangJog(GetPVarStringEx(playerid, "Clan"), "invitejog"), GetClanRangJog(GetPVarStringEx(playerid, "Clan"), "kickjog"), GetClanRangJog(GetPVarStringEx(playerid, "Clan"), "parkoljog"), GetClanRangJog(GetPVarStringEx(playerid, "Clan"), "rangadjog"), GetClanRangJog(GetPVarStringEx(playerid, "Clan"), "kihivjog"));
			ShowPlayerDialog(playerid, CLANJOGOK_DIALOG, DIALOG_STYLE_LIST, "Klánjogok", cstring, "Kiválaszt", "Vissza");
		}
	    else
	    {
		    ShowClanPanel(playerid);
			return 1;
	    }
	}
	if(dialogid == CLANMONEY_DIALOG)
	{
	    if(response)
	    {
			if(listitem == 0)
			{
			    ShowPlayerDialog(playerid, CLANMONEY2_DIALOG, DIALOG_STYLE_INPUT, "Klán kasszába berakás", "Írd be az összeget amennyit be szeretnél rakni a klánkasszába!", "Berak", "Vissza");
			}
			if(listitem == 1)
			{
			    if(GetPVarInt(playerid, "ClanRank") != MAX_CLANRANK-1)
				{
					SendClientMessage(playerid, COLOR_ERROR, "HIBA: Csak a klánvezér vehet ki pénzt!");
 			 		ShowClanPanel(playerid);
					return 1;
				}
			    ShowPlayerDialog(playerid, CLANMONEY3_DIALOG, DIALOG_STYLE_INPUT, "Klán kasszából kivétel", "Írd be az összeget amennyit ki szeretnél venni a klánkasszából!", "Kivesz", "Vissza");
			}
			if(listitem == 2)
			{
			    if(GetPVarInt(playerid, "ClanRank") != MAX_CLANRANK-1)
				{
					SendClientMessage(playerid, COLOR_ERROR, "HIBA: Csak a klánvezér költheti a klánpénzt!");
 			 		ShowClanPanel(playerid);
					return 1;
				}
			    ShowPlayerDialog(playerid, CLANBUY_DIALOG, DIALOG_STYLE_LIST, "Klán kasszából vásárlás", "Autók és hozzátartozó dolgok", "Kiválaszt", "Vissza");
			}
	    }
	    else
		{
		    ShowClanPanel(playerid);
			return 1;
		}
	}
	if(dialogid == CLANMONEY2_DIALOG)
	{
	    if(response)
	    {
	        if(strval(inputtext) <= 0) return ShowPlayerDialog(playerid, CLANMONEY2_DIALOG, DIALOG_STYLE_INPUT, "Klán kasszába berakás", "Valós összeget írjál be!\nÍrd be az összeget amennyit be szeretnél rakni a klánkasszába!", "Berak", "Vissza");
	        if(strval(inputtext) > GetPlayerMoneyEx(playerid)) return ShowPlayerDialog(playerid, CLANMONEY2_DIALOG, DIALOG_STYLE_INPUT, "Klán kasszába berakás", "Nincs ennyi pénzed!\nÍrd be az összeget amennyit be szeretnél rakni a klánkasszába!", "Berak", "Vissza");
			GivePlayerMoneyEx(playerid, -strval(inputtext), "Klánba tett pénzt");
			format(query, sizeof(query), "UPDATE clans SET Kassza = Kassza+%d WHERE ClanName = '%s'", strval(inputtext), GetPVarStringEx(playerid, "Clan"));
   			mysql_query(query);
		    ShowClanPanel(playerid);
	    }
	    else
		{
		    ShowClanPanel(playerid);
			return 1;
		}
	}
	if(dialogid == CLANMONEY3_DIALOG)
	{
	    if(response)
	    {
	        if(strval(inputtext) <= 0) return ShowPlayerDialog(playerid, CLANMONEY3_DIALOG, DIALOG_STYLE_INPUT, "Klán kasszába berakás", "Valós összeget írjál be!\nÍrd be az összeget amennyit ki szeretnél venni a klánkasszából!", "Berak", "Vissza");
	        if(GetClanMoney(GetPVarStringEx(playerid, "Clan")) < strval(inputtext)) return ShowPlayerDialog(playerid, CLANMONEY3_DIALOG, DIALOG_STYLE_INPUT, "Klán kasszába berakás", "Nincs ennyi pénz a klánkasszában!\nÍrd be az összeget amennyit ki szeretnél venni a klánkasszából!", "Berak", "Vissza");
			GivePlayerMoneyEx(playerid, strval(inputtext), "Klánból kivett pénzt");
			format(query, sizeof(query), "UPDATE clans SET Kassza = Kassza-%d WHERE ClanName = '%s'", strval(inputtext), GetPVarStringEx(playerid, "Clan"));
			mysql_query(query);
		    ShowClanPanel(playerid);
	    }
	    else
		{
		    ShowClanPanel(playerid);
		}
	}
	if(dialogid == CLANBUY_DIALOG)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
				ShowPlayerDialog(playerid, CLANBUY2_DIALOG, DIALOG_STYLE_LIST, "Klán autók és egyebek", "Autó vásárlása\nAutó eladása", "Kiválaszt", "Vissza");
	        }
	    }
	    else
		{
		    ShowClanPanel(playerid);
		}
	}
	if(dialogid == CLANBUY2_DIALOG)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            ShowPlayerDialog(playerid, CLANAUTOBUY_DIALOG, DIALOG_STYLE_INPUT, "Autó vásárlás a klánnak", "Ha használtad már a Ryuuzaki's cars-t, ez is ugyanúgy mûködik.\nÍrd be az autó nevét/ID-jét és kiadja az adatait ha megtalálható a rendszerben!", "Keresés", "Vissza");
	        }
	        if(listitem == 1)
	        {
	            ShowPlayerDialog(playerid, CLANAUTOSEL_DIALOG, DIALOG_STYLE_INPUT, "Autó eladása", "Írd be a klánautó slotját hogy eltudd adni a fele áráért!", "Elad", "Vissza");
	        }
	    }
	    else
		{
		    ShowClanPanel(playerid);
		}
	}
	if(dialogid == CLANAUTOSEL_DIALOG)
	{
	    if(response)
	    {
	        format(query, sizeof(query), "SELECT VehID, ClanTulaj FROM clancars WHERE slot = '%d'", strval(inputtext));
         	mysql_query(query);
	        mysql_store_result();
			if(mysql_num_rows() != 0)
			{
			    mysql_fetch_row(linen);
			    new clanname[30], clantar;
			    sscanf(linen, "p<|>ds[30]", clantar, clanname);
			    mysql_free_result();
			    if(strcmp(clanname, GetPVarStringEx(playerid, "Clan"))) return ShowPlayerDialog(playerid, CLANAUTOSEL_DIALOG, DIALOG_STYLE_INPUT, "Autó eladása", "Ez az autó nem a te klánod tulajdona!\nÍrd be a klánautó slotját hogy eltudd adni a fele áráért!", "Elad", "Vissza");
			    format(query, sizeof(query), "SELECT ar FROM autoadatok WHERE vehid = '%d'", clantar);
       			mysql_query(query);
			    mysql_store_result();
			    if(mysql_num_rows() != 0)
			    {
			        mysql_fetch_row(linen);
			        new ar;
			        new estring[128];
			        sscanf(linen, "d", ar);
			        mysql_free_result();
					format(estring, sizeof(estring), "VehID: %d\nÁr fele: %d\nValóban el szeretnéd adni a jármûvet?", clantar, ar/2);
			        ShowPlayerDialog(playerid, CLANAUTOSEL2_DIALOG, DIALOG_STYLE_MSGBOX, "Autó eladása", estring, "Elad", "Vissza");
					SetPVarInt(playerid, "ar", ar);
					SetPVarInt(playerid, "slot", strval(inputtext));
			    }
			}
			else ShowPlayerDialog(playerid, CLANAUTOSEL_DIALOG, DIALOG_STYLE_INPUT, "Autó eladása", "Ez a slot nem létezik!\nÍrd be a klánautó slotját hogy eltudd adni a fele áráért!", "Elad", "Vissza");
		}
        else
		{
		    ShowClanPanel(playerid);
		}
	}
	if(dialogid == CLANAUTOSEL2_DIALOG)
	{
		if(response)
		{
		    SendFormatMessage(playerid, COLOR_GREEN, #HLIME#"Sikeresen eladtad a jármûvet ennyiért: %d$", GetPVarInt(playerid, "ar")/2);
		    format(query, sizeof(query), "UPDATE clans SET Kassza = Kassza+%d WHERE ClanName = '%s'", GetPVarInt(playerid, "ar")/2, GetPVarStringEx(playerid, "Clan"));
			mysql_query(query);
		    DestroyVehicle(clancars[GetPVarInt(playerid, "slot")]);
            clancars[GetPVarInt(playerid, "slot")] = 0;
		    format(query, sizeof(query), "DELETE FROM clancars WHERE slot = '%d'", GetPVarInt(playerid, "slot"));
      		mysql_query(query);
		}
        else
		{
		    ShowClanPanel(playerid);
		}
	}
	if(dialogid == CLANAUTOBUY_DIALOG)
	{
	    if(response)
	    {
            format(query, sizeof(query), "SELECT Name, vehid, ar FROM autoadatok WHERE Name = '%s' OR vehid = '%s'", inputtext, inputtext);
   			mysql_query(query);
			mysql_store_result();
			if(mysql_num_rows() != 0)
			{
				mysql_fetch_row(linen);
				new carname[24];
				new tarolo2;
				new tarolo3;
				sscanf(linen, "p<|>s[24]ii", carname, tarolo2, tarolo3);
				tarolo3 += 5000000;
				mysql_free_result();
				new estring[100];
			    format(estring, sizeof(estring), "Név: %s\nID:%d\nÁr: %s$", carname, tarolo2, convertFormattedNumber(tarolo3, "."));
                ShowPlayerDialog(playerid, CLANAUTOINFO_DIALOG, DIALOG_STYLE_MSGBOX, "Az autó adatai", estring, "Megvesz", "Kilép");
			    SetPVarInt(playerid, "clanautoar", tarolo3);
			    SetPVarInt(playerid, "clanautoid", tarolo2);
			}
			else
			{
			    ShowPlayerDialog(playerid, CLANAUTOBUY_DIALOG, DIALOG_STYLE_INPUT, "Autó vásárlás a klánnak", "Ez az autó nem található a rendszerben!\nHa használtad már a Ryuuzaki's cars-t, ez is ugyanúgy mûködik.\nÍrd be az autó nevét/ID-jét és kiadja az adatait ha megtalálható a rendszerben!", "Keresés", "Vissza");
				mysql_free_result();
			}
	    }
	    else
		{
		    ShowClanPanel(playerid);
		}
	}
	if(dialogid == CLANAUTOINFO_DIALOG)
	{
	    if(response)
	    {
	        if(GetClanMoney(GetPVarStringEx(playerid, "Clan")) < GetPVarInt(playerid, "clanautoar")) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Nincs elég pénz a klánkasszában!"), ShowPlayerDialog(playerid, CLANAUTOBUY_DIALOG, DIALOG_STYLE_INPUT, "Autó vásárlás a klánnak", "Ha használtad már a Ryuuzaki's cars-t, ez is ugyanúgy mûködik.\nÍrd be az autó nevét/ID-jét és kiadja az adatait ha megtalálható a rendszerben!", "Keresés", "Vissza");
			ShowPlayerDialog(playerid, CLANAUTOCOLOR1_DIALOG, DIALOG_STYLE_INPUT, "Klán autó 1-es színe", "Írd be a jármû 1-es színID-jét!", "Tovább", "Vissza");
		}
		else
		{
		    ShowClanPanel(playerid);
		}
	}
	if(dialogid == CLANAUTOCOLOR1_DIALOG)
	{
	    if(response)
	    {
	        SetPVarInt(playerid, "clancolor1", strval(inputtext));
	        ShowPlayerDialog(playerid, CLANAUTOCOLOR2_DIALOG, DIALOG_STYLE_INPUT, "Klán autó 2-es színe", "Írd be a jármû 2-es színID-jét!", "Tovább", "Vissza");
	    }
	    else
		{
		    ShowClanPanel(playerid);
		}
	}
	if(dialogid == CLANAUTOCOLOR2_DIALOG)
	{
	    if(response)
	    {
	        for(new i; i < MAX_CCSLOTS; i++)
	        {
		        format(query, sizeof(query), "SELECT * FROM clancars WHERE slot = '%d'", i);
          		mysql_query(query);
		        mysql_store_result();
		        if(mysql_num_rows() == 0)
		        {
		            new Float:pp[4];
		            GetPlayerPos(playerid, pp[0], pp[1], pp[2]);
		            GetPlayerFacingAngle(playerid, pp[3]);
					clancars[i] = CreateVehicle(GetPVarInt(playerid, "clanautoid"), pp[0], pp[1], pp[2], pp[3], GetPVarInt(playerid, "clancolor1"), strval(inputtext), -1);
					SetVehicleVirtualWorld(clancars[i], GetPlayerVirtualWorld(playerid));
					mysql_free_result();
					format(query, sizeof(query), "UPDATE clans SET Kassza = Kassza-%d WHERE ClanName = '%s'", GetPVarInt(playerid, "clanautoar"), GetPVarStringEx(playerid, "Clan"));
					mysql_query(query);
					format(query, sizeof(query), "INSERT INTO clancars (slot, ClanTulaj, VehID, X, Y, Z, A, color1, color2, VW) VALUES (%d, '%s', %d, %0.2f, %0.2f, %0.2f, %0.2f, %d, %d, %d)", i, GetPVarStringEx(playerid, "Clan"), GetPVarInt(playerid, "clanautoid"), pp[0], pp[1], pp[2], pp[3], GetPVarInt(playerid, "clancolor1"), strval(inputtext), GetPlayerVirtualWorld(playerid));
     				mysql_query(query);
					SendFormatMessage(playerid, COLOR_GREEN, "A jármûvet sikeresen megvetted a klánod számára! Slotja: %d, /clanparkol", i);
					break;
				}
			}
		}
	    else
		{
		    ShowClanPanel(playerid);
		}
	}
	if(dialogid == CLANTAGOK_DIALOG)
	{
	    if(response)
	    {
	        SetPVarString(playerid, "clantagkiv", inputtext);
	        new tstring[128];
	        format(tstring, sizeof(tstring), "Neve: %s[%d]\nRang: %s\nTag kirúgása", inputtext, GetPlayerID(inputtext), GetClanRang(inputtext));
	        ShowPlayerDialog(playerid, CLANTAGSZ_DIALOG, DIALOG_STYLE_LIST, "Tag szerkesztése", tstring, "Kiválaszt", "Vissza");
	    }
	    else
		{
		    ShowClanPanel(playerid);
			return 1;
		}
	}
	if(dialogid == CLANELHAGY_DIALOG)
	{
	    if(response)
	    {
			SendFormatMessage(playerid, COLOR_GREEN, "{00FF00}Elhagytad ezt a klánt: {FF0000}%s", GetPVarStringEx(playerid, "Clan"));
			SetPVarString(playerid, "Clan", "None");
			SetPVarInt(playerid, "ClanRank", 0);
	    }
	    else
	    {
		    ShowClanPanel(playerid);
			return 1;
		}
	}
	if(dialogid == CLANFELOSZLAT_DIALOG)
	{
	    if(response)
	    {
			format(query, sizeof(query), "UPDATE users SET Clan = 'None', ClanRank = '0' WHERE Clan = '%s'", GetPVarStringEx(playerid, "Clan"));
   			mysql_query(query);
			format(query, sizeof(query), "DELETE FROM clans WHERE ClanName = '%s' AND ClanLeader = '%s'", GetPVarStringEx(playerid, "Clan"), GetPlayerNameEx(playerid));
   			mysql_query(query);
			format(query, sizeof(query), "DELETE FROM clancars WHERE ClanTulaj = '%s'", GetPVarStringEx(playerid, "Clan"));
   			mysql_query(query);
			for(new i; i < MAX_PLAYERS; i++)
			{
			    if(!strcmp(GetPVarStringEx(playerid, "Clan"), GetPVarStringEx(i, "Clan")))
			    {
				    SetPVarString(i, "Clan", "None");
					SetPVarInt(i, "ClanRank", 0);
			    }
			}
			SendClientMessage(playerid, COLOR_GREEN, "A klán feloszlott.");
	    }
	    else
	    {
		    ShowClanPanel(playerid);
			return 1;
	    }
	}
	if(dialogid == CLANKIHIV1_DIALOG)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            ShowPlayerDialog(playerid, CLANHMAP_DIALOG, DIALOG_STYLE_LIST, "Klánmap kiválasztása", "Montgomery\nHajóraktár", "Tovább", "Vissza");
	        	SetPVarInt(playerid, "clanhaboru", 1);
	        }
	    }
	    else
	    {
		    ShowClanPanel(playerid);
			return 1;
		}
	}
	if(dialogid == CLANHMAP_DIALOG)
	{
	    if(response)
	    {
	        if(listitem == 0) SetGVarInt("clanhmap", MONTGOMERY_MAP);
			if(listitem == 1) SetGVarInt("clanhmap", HAJORAKTAR_MAP);
			ShowPlayerDialog(playerid, CLANHSZIN_DIALOG, DIALOG_STYLE_LIST, "Klánszínek kiválasztása", "Piros - Citromsárga\nKék - Citromsárga\nPiros - Kék\nZöld - Barna\nLila - Narancssárga\nNarancssárga - Citromsárga", "Tovább", "Vissza");
	    }
	    else
	    {
		    ShowClanPanel(playerid);
			return 1;
		}
	}
	if(dialogid == CLANHSZIN_DIALOG)
	{
	    if(response)
	    {
			SetGVarInt("clanhszin", listitem+1);
			ShowPlayerDialog(playerid, CLANKIHIV2_DIALOG, DIALOG_STYLE_INPUT, "Klán kihívása", "Írd be a klán nevét akikkel háborúzni szeretnél.", "Tovább", "Vissza");
	    }
	}
	if(dialogid == CLANKIHIV2_DIALOG)
	{
	    if(response)
	    {
	        format(query, sizeof(query), "SELECT * FROM clans WHERE ClanName = '%s'", inputtext);
         	mysql_query(query);
	        mysql_store_result();
	        if(mysql_num_rows() != 0)
	        {
	            mysql_free_result();
				if(IsPlayerConnected(GetPlayerID(GetClanLeader(inputtext))))
				{
        			if(!strcmp(GetPVarStringEx(playerid, "Clan"), inputtext)) return SendClientMessage(playerid, COLOR_ERROR, "A saját klánodat nem hívhatod ki!"), ShowPlayerDialog(playerid, CLANKIHIV2_DIALOG, DIALOG_STYLE_INPUT, "Klán kihívása", "Írd be a klán nevét akikkel háborúzni szeretnél.", "Tovább", "Vissza");
				    if(GetPVarInt(playerid, "clanhaboru") == 1)
				    {
            			SendFormatMessageToAll(COLOR_GREEN, "{00FF00}A(z) {FFFF00}%s{00FF00} klán kihívta a(z) {FFFF00}%s{00FF00} klánt háborúra!", GetPVarStringEx(playerid, "Clan"), inputtext);
				    	SendFormatMessage(GetPlayerID(GetClanLeader(inputtext)), COLOR_GREEN, "{00FF00}A(z) {FFFF00}%s{00FF00} klán kihívta a klánodat egy DM párbajra!", GetPVarStringEx(playerid, "Clan"));
						SendClientMessage(GetPlayerID(GetClanLeader(inputtext)), COLOR_GREEN, "{00FF00}/clanfogad hogy elfogadd a párbajt, {FF0000}/clanutasit hogy elutasítsd!");
						SetPVarInt(GetPlayerID(GetClanLeader(inputtext)), "clankihivott", 1);
      					SetPVarString(GetPlayerID(GetClanLeader(inputtext)), "clankihivonev", GetPVarStringEx(playerid, "Clan"));
					}
				}
				else SendClientMessage(playerid, COLOR_ERROR, "HIBA: A klánvezér nem online!");
	        }
	        else SendClientMessage(playerid, COLOR_ERROR, "HIBA: A klán nem létezik!");
	    }
	}
	if(dialogid == CLANTAGSZ_DIALOG)
	{
	    if(response)
	    {
	        if(listitem == 1)
	        {
	            if(GetPVarInt(playerid, "ClanRank") < GetClanRangJog(GetPVarStringEx(playerid, "Clan"), "rangadjog")) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Nincs meg a kellõ rangod ehhez a joghoz!");
	            new rangstr2[200];
    			for(new y = 1; y < MAX_CLANRANK; y++)
				{
					format(query, sizeof(query), "SELECT ClanRank%d FROM clans WHERE ClanName = '%s'", y, GetPVarStringEx(playerid, "Clan"));
     				mysql_query(query);
					mysql_store_result();
					if(mysql_num_rows() != 0)
					{
						mysql_fetch_row(linen);
						new tarolo2[MAX_CLANRANK][24];
						sscanf(linen, "p<|>s[24]", tarolo2[y]);
						mysql_free_result();
	                    format(rangstr2, sizeof(rangstr2), "%s%s\n", rangstr2, tarolo2[y]);
					}
				}
				ShowPlayerDialog(playerid, CLANRANGAD_DIALOG, DIALOG_STYLE_LIST, "Rang adás", rangstr2, "Kiválaszt", "Vissza");
	        }
	        if(listitem == 2)
	        {
	        	if(GetPVarInt(playerid, "ClanRank") < GetClanRangJog(GetPVarStringEx(playerid, "Clan"), "kickjog")) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Nincs meg a kellõ rangod ehhez a joghoz!");
			    if(!strcmp(GetClanLeader(GetPVarStringEx(playerid, "Clan")), GetPVarStringEx(playerid, "clantagkiv")))
			    {
			        new tstring[128];
			        SendClientMessage(playerid, COLOR_ERROR, "HIBA: A klánalapítót nem rúghatod ki!");
			        format(tstring, sizeof(tstring), "Neve: %s[%d]\nRang: %s\nTag kirúgása", GetPVarStringEx(playerid, "clantagkiv"), GetPlayerID(GetPVarStringEx(playerid, "clantagkiv")), GetClanRang(GetPVarStringEx(playerid, "clantagkiv")));
			        ShowPlayerDialog(playerid, CLANTAGSZ_DIALOG, DIALOG_STYLE_LIST, "Tag szerkesztése", tstring, "Kiválaszt", "Vissza");
				}
				else ShowPlayerDialog(playerid, CLANKIRUG_DIALOG, DIALOG_STYLE_MSGBOX, "Tag kirúgása", "Valóban ki szeretnéd rúgni ezt a tagot?", "igen", "Nem");
	        }
	    }
	    else
	    {
        	new clanstr[500];
		    format(query, sizeof(query), "SELECT Name FROM users WHERE Clan = '%s'", GetPVarStringEx(playerid, "Clan"));
			mysql_query(query);
			mysql_store_result();
			if(mysql_num_rows() != 0)
			{
			    while(mysql_fetch_row(linen))
			    {
					format(clanstr, sizeof clanstr, "%s%s\n", clanstr, linen);
			    }
			    mysql_free_result();
			}
		    ShowPlayerDialog(playerid, CLANTAGOK_DIALOG, DIALOG_STYLE_LIST, "Tagok", clanstr, "Kiválaszt", "Vissza");
	    }
	}
	if(dialogid == CLANKIRUG_DIALOG)
	{
	    if(response)
	    {
	        format(query, sizeof(query), "UPDATE users SET Clan = 'None', ClanRank = '0' WHERE Name = '%s'", GetPVarStringEx(playerid, "clantagkiv"));
         	mysql_query(query);
			SetPVarString(GetPlayerID(GetPVarStringEx(playerid, "clantagkiv")), "Clan", "None");
			SetPVarInt(GetPlayerID(GetPVarStringEx(playerid, "clantagkiv")), "ClanRank", 0);
	    }
	    else
	    {
		    ShowClanPanel(playerid);
			return 1;
	    }
	}
	if(dialogid == CLANRANGAD_DIALOG)
	{
	    if(response)
	    {
	        if(!strcmp(GetPlayerNameEx(playerid), GetPVarStringEx(playerid, "clantagkiv")))
			{
				SendClientMessage(playerid, COLOR_ERROR, "HIBA: A saját rangodat nem szerkesztheted!");
			    ShowClanPanel(playerid);
				return 1;
			}
			SendFormatMessage(playerid, COLOR_GREEN, "{00FF00}Sikeresen szerkesztetted {0000FF}%s{00FF00} rangját! Új rangja: {FFFF00}%s[%d]", GetPVarStringEx(playerid, "clantagkiv"), inputtext, listitem+1);
			SendFormatMessage(GetPlayerID(GetPVarStringEx(playerid, "clantagkiv")), COLOR_GREEN, #HBLUE#"%s"#HLIME#" megváltoztatta a rangodat! Új rangod: "#HYELLOW#"%s[%d]", GetPlayerNameEx(playerid), inputtext, listitem+1);
			format(query, sizeof(query), "UPDATE users SET ClanRank = '%d' WHERE Name = '%s'", listitem+1, GetPVarStringEx(playerid, "clantagkiv"));
   			mysql_query(query);
			SetPVarInt(GetPlayerID(GetPVarStringEx(playerid, "clantagkiv")), "ClanRank", listitem+1);
		    ShowClanPanel(playerid);
	    }
	}
	if(dialogid == CLANRANGOK_DIALOG)
	{
	    if(response)
	    {
	        if(GetPVarInt(playerid, "ClanRank") != MAX_CLANRANK-1) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: A rangok szerkesztéséhez csak a klánvezérnek van joga!");
	        SetPVarString(playerid, "rangszerkeszt", inputtext);
	        SetPVarInt(playerid, "rangszam", listitem);
			ShowPlayerDialog(playerid, RANGSZERKESZT_DIALOG, DIALOG_STYLE_LIST, "Rang szerkesztése", "Rang nevének szerkesztése\nRang skinID szerkesztése", "Kiválaszt", "Vissza");
	    }
	    else
	    {
      		ShowClanPanel(playerid);
			return 1;
	    }
	}
	if(dialogid == RANGSZERKESZT_DIALOG)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            ShowPlayerDialog(playerid, CLANRANGNEV_DIALOG, DIALOG_STYLE_INPUT, "Rang nevének szerkesztése", "Írd be a rang új nevét.", "Oké", "Vissza");
	        }
	        if(listitem == 1)
	        {
	            ShowPlayerDialog(playerid, CLANRANGSKIN_DIALOG, DIALOG_STYLE_INPUT, "Rang skinID-jének átírása", "Írd be azt a skinID-t, amit szeretnél erre a rangra tenni.", "Oké", "Vissza");
	        }
	    }
	    else
	    {
	        new rangst[24*10+50+100];
			for(new h = 1; h < MAX_CLANRANK; h++)
			{
				format(query, sizeof(query), "SELECT ClanRank%d, ClanSkin%d FROM clans WHERE ClanName = '%s'", h, h, GetPVarStringEx(playerid, "Clan"));
 				mysql_query(query);
				mysql_store_result();
				if(mysql_num_rows() != 0)
				{
					mysql_fetch_row(linen);
					new dat[MAX_CLANRANK][24];
					new dat2[MAX_CLANRANK];
					new trs[30];
					sscanf(linen, "p<|>s[24]d", dat[h], dat2[h]);
					format(trs, sizeof(trs), "ClanRank%d", h);
					SetPVarString(playerid, trs, data[h]);
					mysql_free_result();
                    format(rangst, sizeof(rangst), "%s%s [Skin: %d]\n", rangst, dat[h], dat2[h]);
				}
			}
			ShowPlayerDialog(playerid, CLANRANGOK_DIALOG, DIALOG_STYLE_LIST, "Rangok szerkesztése", rangst, "Kiválaszt", "Vissza");
	    }
	}
	if(dialogid == CLANRANGNEV_DIALOG)
	{
	    if(response)
	    {
	        if(strlen(inputtext) == 0) return ShowPlayerDialog(playerid, CLANRANGNEV_DIALOG, DIALOG_STYLE_INPUT, "Rang nevének szerkesztése", "A rangot nem törölheted ki!\nÍrd be a rang új nevét.", "Oké", "Vissza");
	        if(IsStringInSpecials(inputtext)) return ShowPlayerDialog(playerid, CLANRANGNEV_DIALOG, DIALOG_STYLE_INPUT, "Rang nevének szerkesztése", "Speciális karakterek nem lehetnek benne!\nÍrd be a rang új nevét.", "Oké", "Vissza");
          	//strdel(GetPVarStringEx(playerid, "rangszerkeszt"), strlen(GetPVarStringEx(playerid, "rangszerkeszt"))-13, strlen(GetPVarStringEx(playerid, "rangszerkeszt")));
			new del[20];
			format(del, sizeof(del), "ClanRank%d", GetPVarInt(playerid, "rangszam")+1);
			//SendFormatMessage(playerid, COLOR_GREEN, "{00FF00}Sikeresen szerkesztetted a rang nevét! Régi név: {FF0000}%s{00FF00}, új név: {FFFF00}%s", GetPVarStringEx(playerid, "rangszerkeszt"), inputtext);
			SendFormatMessage(playerid, COLOR_GREEN, "{00FF00}Sikeresen szerkesztetted a rang nevét! Régi név: {FF0000}%s{00FF00}, új név: {FFFF00}%s", GetPVarStringEx(playerid, del), inputtext);
			//format(query, sizeof(query), "UPDATE clans SET ClanRank%d = '%s' WHERE ClanRank%d = '%s' AND ClanName = '%s'", GetPVarInt(playerid, "rangszam")+1, inputtext, GetPVarInt(playerid, "rangszam")+1, GetPVarStringEx(playerid, "rangszerkeszt"), GetPVarStringEx(playerid, "Clan"));
			format(query, sizeof(query), "UPDATE clans SET ClanRank%d = '%s' WHERE ClanRank%d = '%s' AND ClanName = '%s'", GetPVarInt(playerid, "rangszam")+1, inputtext, GetPVarInt(playerid, "rangszam")+1, GetPVarStringEx(playerid, del), GetPVarStringEx(playerid, "Clan"));
   			mysql_query(query);
		    ShowClanPanel(playerid);
	    }
	}
	if(dialogid == CLANRANGSKIN_DIALOG)
	{
	    if(response)
	    {
	        if(0 > strval(inputtext) || strval(inputtext) > 299) return ShowPlayerDialog(playerid, CLANRANGSKIN_DIALOG, DIALOG_STYLE_INPUT, "Rang skinID-jének átírása", "Írd be azt a skinID-t, amit szeretnél erre a rangra tenni.", "Oké", "Vissza");
	        SendFormatMessage(playerid, COLOR_GREEN, "{00FF00}Sikeresen szerkesztetted a rang skinID-jét! új skinID: {FFFF00}%d", strval(inputtext));
			format(query, sizeof(query), "UPDATE clans SET ClanSkin%d = '%d' WHERE ClanName = '%s'", GetPVarInt(playerid, "rangszam")+1, strval(inputtext), GetPVarStringEx(playerid, "Clan"));
   			mysql_query(query);
		    ShowClanPanel(playerid);
	    }
	}
	if(dialogid == CLANRANK_DIALOG)
	{
		if(response)
		{
		    new listr[900];//egész dialog string
		    new members[24*50];//max név karakter szorozva max klántag
		    format(listr, sizeof(listr), "%s klán\nLeader: %s\nNyert háborúk: %d\t\tVesztett háborúk: %d\n\t\tArány: %0.2f\nTagok:\n"#HWHITE#"", inputtext, GetClanLeader(inputtext), GetClanWins(inputtext), GetClanLoss(inputtext), Float:GetClanWins(inputtext)/Float:GetClanLoss(inputtext));
			format(query, sizeof(query), "SELECT Name FROM users WHERE Clan = '%s'", inputtext);
			mysql_query(query);
			mysql_store_result();
			if(mysql_num_rows() != 0)
			{
			    while(mysql_fetch_row(linen))
			    {
				    format(members, sizeof(members), "%s%s%s\n", members, linen, (IsPlayerConnected(GetPlayerID(linen))) ? (#HGREEN#"[ONLINE]"#HWHITE#) : (#HRED#"[OFFLINE]"#HWHITE#));
			    }
			    mysql_free_result();
			}
			strcat(listr, members);//összeilleszti a két stringet
			ShowPlayerDialog(playerid, CLANRANK2_DIALOG, DIALOG_STYLE_MSGBOX, "Klán", listr, "Oké", "");//a végén kiiratja dialog-ba
		}
	}
	if(dialogid == EVENT_DIALOG)
	{
		if(response)
		{
		    if(listitem == 0)
		    {
		        new eventstring[1000];
				mysql_query("SELECT RaceName FROM races GROUP BY RaceName");
				mysql_store_result();
				if(mysql_num_rows() != 0)
				{
				    while(mysql_fetch_row(linen))
				    {
	       				format(eventstring, sizeof(eventstring), "%s%s\n", eventstring, linen);
					}
					mysql_free_result();
				}
				format(eventstring, sizeof(eventstring), "%sVerseny leállítása", eventstring);
				ShowPlayerDialog(playerid, EVENTRACE_DIALOG, DIALOG_STYLE_LIST, "Válassz versenyt", eventstring, "Kiválaszt", "Kilép");
			}
			if(listitem == 1)
			{
		      	new eventstring[1000];
				mysql_query("SELECT StuntName FROM stunts GROUP BY StuntName");
				mysql_store_result();
				if(mysql_num_rows() != 0)
				{
				    while(mysql_fetch_row(linen))
				    {
				        format(eventstring, sizeof(eventstring), "%s%s\n", eventstring, linen);
					}
					mysql_free_result();
				}
				format(eventstring, sizeof(eventstring), "%sStunt leállítása", eventstring);
				ShowPlayerDialog(playerid, EVENTSTUNT_DIALOG, DIALOG_STYLE_LIST, "Válassz stuntot", eventstring, "Kiválaszt", "Kilép");
			}
			if(listitem == 2)
			{
				ShowPlayerDialog(playerid, STARTTIME_DIALOG, DIALOG_STYLE_INPUT, "Elindulási idõ", "Írd be mennyi legyen az elindulási idõ:", "Átírás", "Kilép");
			}
			if(listitem == 3)
			{
				ShowPlayerDialog(playerid, NEVEZESI_DIALOG, DIALOG_STYLE_INPUT, "Nevezési díj", "Írd be mennyi legyen a nevezési díj:", "Átírás", "Kilép");
			}
			if(listitem == 4)
			{
				new dialogstring[500];
				if(GetGVarInt("autoevent") == 0)
				{
					format(dialogstring, sizeof(dialogstring), "Race event\nStunt event\nElindulási idõk: %d(Beállítás)\nNevezési díjak: %d(Beállítás)\nAutómatikus eventek: {00FF00}ON\n{FFFFFF}Ennyi idõközönként indulnak a versenyek: %d(Beállítás)\nEvent elindítása\nJátékos kizárása az eventbõl", GetGVarInt("StartRaceTime"), GetGVarInt("NevezesiDij"), GetGVarInt("autostarttime"));
					SetGVarInt("autoevent", 1);
					autoe_timer = SetTimer("autoetimer", GetGVarInt("autostarttime")*60000, 1);
				}
				else if(GetGVarInt("autoevent") == 1)
				{
					format(dialogstring, sizeof(dialogstring), "Race event\nStunt event\nElindulási idõk: %d(Beállítás)\nNevezési díjak: %d(Beállítás)\nAutómatikus eventek: {FF0000}OFF\n{FFFFFF}Ennyi idõközönként indulnak a versenyek: %d(Beállítás)\nEvent elindítása\nJátékos kizárása az eventbõl", GetGVarInt("StartRaceTime"), GetGVarInt("NevezesiDij"), GetGVarInt("autostarttime"));
                   	SetGVarInt("autoevent", 0);
					KillTimer(autoe_timer);
				}
				ShowPlayerDialog(playerid, EVENT_DIALOG, DIALOG_STYLE_LIST, "Válassz eventet", dialogstring, "Kiválaszt", "Kilép");
			}
			if(listitem == 5)
			{
			    ShowPlayerDialog(playerid, AUTOSTART_DIALOG, DIALOG_STYLE_INPUT, "Autómatikus versenyek", "Írd be mennyi idõközönként induljanak versenyek:", "Átírás", "Kilép");
			}
			if(listitem == 6)
			{
			    ShowPlayerDialog(playerid, EVENTSTART_DIALOG, DIALOG_STYLE_LIST, "Melyik eventet akarod startolni?", "Race event\nStunt event", "Kiválaszt", "Vissza");
			}
			if(listitem == 7)
			{
    			ShowPlayerDialog(playerid, KIRUGAS_DIALOG, DIALOG_STYLE_INPUT, "Játékos kirúgása az eventrõl", "Írd be a játékos ID-jét akit ki szeretnél rúgni az eventrõl:", "Kirúgás", "Vissza");
			}
		}
	}
	if(dialogid == EVENTRACE_DIALOG)
	{
	    if(response)
	    {
	        if(!strcmp(inputtext, "Verseny leállítása", true))
			{
			    format(racestring, sizeof(racestring), "%s leállította a versenyt!", GetPlayerNameEx(playerid));
			    SendClientMessageToAll(COLOR_GREEN, racestring);
			    relindult = false;
	            races = 0;
	            rhelyezes[0] = false;
	            rhelyezes[1] = false;
	            rhelyezes[2] = false;
				KillTimer(racestart_timer);
				KillTimer(ready_timer);
			    for(new i; i < MAX_PLAYERS; i++)
			    {
			        if(inrace[i] == true)
			        {
			            inrace[i] = false;
			            lastcp[i] = false;
			            readyzett[i] = false;
			            DisablePlayerRaceCheckpoint(i);
			            racecp[i] = 0;
						sec[i] = 0;
						minu[i] = 0;
					}
				}
				KillTimer(rekordt);
				racestart = GetGVarInt("StartRaceTime");
				return 1;
			}
	        if(stunts != 0) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ha egy stunt éppen aktív!");
			if(races != 0) return SendClientMessage(playerid, COLOR_RED, "HIBA: Éppen egy verseny aktív!");
			format(query, sizeof(query), "SELECT RaceID, CPType, CPX, CPY, CPZ, NCPX, NCPY, NCPZ FROM races WHERE RaceName = '%s' AND RCPID = 0", inputtext);
			mysql_query(query);
			mysql_store_result();
			if(mysql_num_rows() != 0)
			{
			    mysql_fetch_row(linen);
			    mysql_free_result();
			    sscanf(linen, "p<|>iiffffff", fraceid, fracecptype, fracecpX, fracecpY, fracecpZ, nfracecpX, nfracecpY, nfracecpZ);
			    format(racestring, sizeof(racestring), "%s elindította a(z) '%s' versenyt. /join a csatlakozáshoz. Nevezési díj: %d$", GetPlayerNameEx(playerid), inputtext, GetGVarInt("NevezesiDij"));
                SendClientMessageToAll(COLOR_GREEN, racestring);
	            races = fraceid;
	            racestart = GetGVarInt("StartRaceTime");
				racestart_timer = SetTimer("racestartt", 1000, 1);
				ready_timer = SetTimer("readytimer", 1000, 1);
				for(new i; i < MAX_PLAYERS; i++) inrace[i] = false;
				format(fracename, sizeof(fracename), "%s", inputtext);
				format(query, sizeof(query), "SELECT Moneywin, EXPwin FROM races WHERE RaceName = '%s' ORDER BY RCPID DESC LIMIT 1", inputtext);
				mysql_query(query);
				mysql_store_result();
				mysql_fetch_row(linen);
				mysql_free_result();
				sscanf(linen, "p<|>ii", rmoneywin, rexpwin);
			}
		}
	}
	if(dialogid == EVENTSTUNT_DIALOG)
	{
	    if(response)
	    {
	        if(!strcmp(inputtext, "Stunt leállítása", true))
			{
			    format(racestring, sizeof(racestring), "%s leállította a stuntot!", GetPlayerNameEx(playerid));
			    SendClientMessageToAll(COLOR_GREEN, racestring);
			    selindult = false;
	            stunts = 0;
	            shelyezes[0] = false;
	            shelyezes[1] = false;
	            shelyezes[2] = false;
				KillTimer(stuntstart_timer);
				KillTimer(ready_timer);
			    for(new i; i < MAX_PLAYERS; i++)
			    {
			        if(instunt[i] == true)
			        {
			            instunt[i] = false;
			            lastcp[i] = false;
			            readyzett[i] = false;
			            DisablePlayerRaceCheckpoint(i);
			            stuntcp[i] = 0;
						sec[i] = 0;
						minu[i] = 0;
					}
				}
				KillTimer(rekordt);
				stuntstart = GetGVarInt("StartRaceTime");
				return 1;
			}
	        if(stunts != 0) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ha egy stunt éppen aktív!");
			if(races != 0) return SendClientMessage(playerid, COLOR_RED, "HIBA: Éppen egy verseny aktív!");
			format(query, sizeof(query), "SELECT StuntID, CPType, CPX, CPY, CPZ, NCPX, NCPY, NCPZ, SugCar FROM stunts WHERE StuntName = '%s' AND RCPID = 0", inputtext);
			mysql_query(query);
			mysql_store_result();
			if(mysql_num_rows() != 0)
			{
			    mysql_fetch_row(linen);
			    mysql_free_result();
			    sscanf(linen, "p<|>iiffffffi", fraceid, fracecptype, fracecpX, fracecpY, fracecpZ, nfracecpX, nfracecpY, nfracecpZ, sugcar);
			    format(racestring, sizeof(racestring), "%s elindította a(z) '%s' stuntot. /join a csatlakozáshoz. Nevezési díj: %d$ (Ajánlott jármû: %s)", GetPlayerNameEx(playerid), inputtext, GetGVarInt("NevezesiDij"), CarName[sugcar-400]);
                SendClientMessageToAll(COLOR_GREEN, racestring);
	            stunts = fraceid;
	            stuntstart = GetGVarInt("StartRaceTime");
				stuntstart_timer = SetTimer("stuntstartt", 1000, 1);
				ready_timer = SetTimer("readytimer", 1000, 1);
				for(new i; i < MAX_PLAYERS; i++) instunt[i] = false;
				format(fracename, sizeof(fracename), "%s", inputtext);
				format(query, sizeof(query), "SELECT Moneywin, EXPwin FROM stunts WHERE StuntName = '%s' ORDER BY RCPID DESC LIMIT 1", inputtext);
				mysql_query(query);
				mysql_store_result();
				mysql_fetch_row(linen);
				mysql_free_result();
				sscanf(linen, "p<|>ii", rmoneywin, rexpwin);
			}
		}
	}
	if(dialogid == STARTTIME_DIALOG)
	{
	    if(response)
	    {
		    format(racestring, sizeof(racestring), "Sikeresen átírtad az elindulási idõt! Új elindulási idõ: %d", strval(inputtext));
		    SendClientMessage(playerid, COLOR_GREEN, racestring);
		    SetGVarInt("StartRaceTime", strval(inputtext));
	    	new dialogstring[500];
			if(GetGVarInt("autoevent") == 0) format(dialogstring, sizeof(dialogstring), "Race event\nStunt event\nElindulási idõk: %d(Beállítás)\nNevezési díjak: %d(Beállítás)\nAutómatikus eventek: {FF0000}OFF\n{FFFFFF}Ennyi idõközönként indulnak a versenyek: %d(Beállítás)\nEvent elindítása\nJátékos kizárása az eventbõl", GetGVarInt("StartRaceTime"), GetGVarInt("NevezesiDij"), GetGVarInt("autostarttime"));
			if(GetGVarInt("autoevent") == 1) format(dialogstring, sizeof(dialogstring), "Race event\nStunt event\nElindulási idõk: %d(Beállítás)\nNevezési díjak: %d(Beállítás)\nAutómatikus eventek: {00FF00}ON\n{FFFFFF}Ennyi idõközönként indulnak a versenyek: %d(Beállítás)\nEvent elindítása\nJátékos kizárása az eventbõl", GetGVarInt("StartRaceTime"), GetGVarInt("NevezesiDij"), GetGVarInt("autostarttime"));
			ShowPlayerDialog(playerid, EVENT_DIALOG, DIALOG_STYLE_LIST, "Válassz eventet", dialogstring, "Kiválaszt", "Kilép");
		}
	}
	if(dialogid == NEVEZESI_DIALOG)
	{
	    if(response)
	    {
		    format(racestring, sizeof(racestring), "Sikeresen átírtad a nevezési díjat! Új nevezési díj: %d", strval(inputtext));
		    SendClientMessage(playerid, COLOR_GREEN, racestring);
			SetGVarInt("NevezesiDij", strval(inputtext));
	    	new dialogstring[500];
			if(GetGVarInt("autoevent") == 0) format(dialogstring, sizeof(dialogstring), "Race event\nStunt event\nElindulási idõk: %d(Beállítás)\nNevezési díjak: %d(Beállítás)\nAutómatikus eventek: {FF0000}OFF\n{FFFFFF}Ennyi idõközönként indulnak a versenyek: %d(Beállítás)\nEvent elindítása\nJátékos kizárása az eventbõl", GetGVarInt("StartRaceTime"), GetGVarInt("NevezesiDij"), GetGVarInt("autostarttime"));
			if(GetGVarInt("autoevent") == 1) format(dialogstring, sizeof(dialogstring), "Race event\nStunt event\nElindulási idõk: %d(Beállítás)\nNevezési díjak: %d(Beállítás)\nAutómatikus eventek: {00FF00}ON\n{FFFFFF}Ennyi idõközönként indulnak a versenyek: %d(Beállítás)\nEvent elindítása\nJátékos kizárása az eventbõl", GetGVarInt("StartRaceTime"), GetGVarInt("NevezesiDij"), GetGVarInt("autostarttime"));
			ShowPlayerDialog(playerid, EVENT_DIALOG, DIALOG_STYLE_LIST, "Válassz eventet", dialogstring, "Kiválaszt", "Kilép");
		}
	}
	if(dialogid == KIRUGAS_DIALOG)
	{
	    if(!response)
		{
			new dialogstring[500];
			if(GetGVarInt("autoevent") == 0) format(dialogstring, sizeof(dialogstring), "Race event\nStunt event\nElindulási idõk: %d(Beállítás)\nNevezési díjak: %d(Beállítás)\nAutómatikus eventek: {FF0000}OFF\n{FFFFFF}Ennyi idõközönként indulnak a versenyek: %d(Beállítás)\nEvent elindítása\nJátékos kizárása az eventbõl", GetGVarInt("StartRaceTime"), GetGVarInt("NevezesiDij"), GetGVarInt("autostarttime"));
			if(GetGVarInt("autoevent") == 1) format(dialogstring, sizeof(dialogstring), "Race event\nStunt event\nElindulási idõk: %d(Beállítás)\nNevezési díjak: %d(Beállítás)\nAutómatikus eventek: {00FF00}ON\n{FFFFFF}Ennyi idõközönként indulnak a versenyek: %d(Beállítás)\nEvent elindítása\nJátékos kizárása az eventbõl", GetGVarInt("StartRaceTime"), GetGVarInt("NevezesiDij"), GetGVarInt("autostarttime"));
			ShowPlayerDialog(playerid, EVENT_DIALOG, DIALOG_STYLE_LIST, "Válassz eventet", dialogstring, "Kiválaszt", "Kilép");
		}
		if(response)
		{
		    if(!IsPlayerConnected(strval(inputtext))) return ShowPlayerDialog(playerid, KIRUGAS_DIALOG, DIALOG_STYLE_INPUT, "Játékos kirúgása az eventrõl", "Hibás játékosID!\nÍrd be a játékos ID-jét akit ki szeretnél rúgni az eventrõl:", "Kirúgás", "Vissza");
			if(inrace[strval(inputtext)] == true)
			{
				SendFormatMessage(strval(inputtext), COLOR_GREEN, "%s kirúgott téged a versenyrõl!", GetPlayerNameEx(playerid));
                SendFormatMessage(playerid, COLOR_GREEN, "Kirúgtad %s-t a versenybõl!", GetPlayerNameEx(strval(inputtext)));
				inrace[strval(inputtext)] = false;
				lastcp[strval(inputtext)] = false;
				racecp[strval(inputtext)] = 0;
			    sec[strval(inputtext)] = 0;
				minu[strval(inputtext)] = 0;
				KillTimer(strval(inputtext));
				if(readyzett[strval(inputtext)] == true) readyzett[strval(inputtext)] = false;
	            DisablePlayerRaceCheckpoint(strval(inputtext));
			}
			else if(instunt[strval(inputtext)] == true)
			{
				SendFormatMessage(strval(inputtext), COLOR_GREEN, "%s kirúgott téged a stuntból!", GetPlayerNameEx(playerid));
                SendFormatMessage(playerid, COLOR_GREEN, "Kirúgtad %s-t a stuntból!", GetPlayerNameEx(strval(inputtext)));
				instunt[strval(inputtext)] = false;
				lastcp[strval(inputtext)] = false;
				stuntcp[strval(inputtext)] = 0;
			    sec[strval(inputtext)] = 0;
				minu[strval(inputtext)] = 0;
				KillTimer(strval(inputtext));
				if(readyzett[strval(inputtext)] == true) readyzett[strval(inputtext)] = false;
	            DisablePlayerRaceCheckpoint(strval(inputtext));
			}
			else ShowPlayerDialog(playerid, KIRUGAS_DIALOG, DIALOG_STYLE_INPUT, "Játékos kirúgása az eventrõl", "Ez a játékos nincs eventen!\nÍrd be a játékos ID-jét akit ki szeretnél rúgni az eventrõl:", "Kirúgás", "Vissza");
		}
	}
	if(dialogid == EVENTSTART_DIALOG)
	{
	    if(!response)
	    {
	        new dialogstring[500];
   			if(GetGVarInt("autoevent") == 0) format(dialogstring, sizeof(dialogstring), "Race event\nStunt event\nElindulási idõk: %d(Beállítás)\nNevezési díjak: %d(Beállítás)\nAutómatikus eventek: {FF0000}OFF\n{FFFFFF}Ennyi idõközönként indulnak a versenyek: %d(Beállítás)\nEvent elindítása\nJátékos kizárása az eventbõl", GetGVarInt("StartRaceTime"), GetGVarInt("NevezesiDij"), GetGVarInt("autostarttime"));
			if(GetGVarInt("autoevent") == 1) format(dialogstring, sizeof(dialogstring), "Race event\nStunt event\nElindulási idõk: %d(Beállítás)\nNevezési díjak: %d(Beállítás)\nAutómatikus eventek: {00FF00}ON\n{FFFFFF}Ennyi idõközönként indulnak a versenyek: %d(Beállítás)\nEvent elindítása\nJátékos kizárása az eventbõl", GetGVarInt("StartRaceTime"), GetGVarInt("NevezesiDij"), GetGVarInt("autostarttime"));
			ShowPlayerDialog(playerid, EVENT_DIALOG, DIALOG_STYLE_LIST, "Válassz eventet", dialogstring, "Kiválaszt", "Kilép");
		}
		if(response)
		{
		    if(listitem == 0)
		    {
		        if(races == 0) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs verseny event!");
		        if(relindult == true) return SendClientMessage(playerid, COLOR_RED, "HIBA: A verseny már elindult!");
				racestart = 5;
			}
			if(listitem == 1)
		    {
		        if(stunts == 0) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs stunt event!");
		        if(selindult == true) return SendClientMessage(playerid, COLOR_RED, "HIBA: A stunt már elindult!");
				stuntstart = 5;
			}
		}
	}
	if(dialogid == AUTOSTART_DIALOG)
	{
	    format(racestring, sizeof(racestring), "Sikeresen átírtad az idõközt! Új idõköz: %d", strval(inputtext));
	    SendClientMessage(playerid, COLOR_GREEN, racestring);
	    if(GetGVarInt("autoevent") == 1)
	    {
	        KillTimer(autoe_timer);
	        autoe_timer = SetTimer("autoetimer", GetGVarInt("autostarttime")*60000, 1);
		}
		SetGVarInt("autostarttime", strval(inputtext));
    	new dialogstring[500];
		if(GetGVarInt("autoevent") == 0) format(dialogstring, sizeof(dialogstring), "Race event\nStunt event\nElindulási idõk: %d(Beállítás)\nNevezési díjak: %d(Beállítás)\nAutómatikus eventek: {FF0000}OFF\n{FFFFFF}Ennyi idõközönként indulnak a versenyek: %d(Beállítás)\nEvent elindítása\nJátékos kizárása az eventbõl", GetGVarInt("StartRaceTime"), GetGVarInt("NevezesiDij"), GetGVarInt("autostarttime"));
		if(GetGVarInt("autoevent") == 1) format(dialogstring, sizeof(dialogstring), "Race event\nStunt event\nElindulási idõk: %d(Beállítás)\nNevezési díjak: %d(Beállítás)\nAutómatikus eventek: {00FF00}ON\n{FFFFFF}Ennyi idõközönként indulnak a versenyek: %d(Beállítás)\nEvent elindítása\nJátékos kizárása az eventbõl", GetGVarInt("StartRaceTime"), GetGVarInt("NevezesiDij"), GetGVarInt("autostarttime"));
		ShowPlayerDialog(playerid, EVENT_DIALOG, DIALOG_STYLE_LIST, "Válassz eventet", dialogstring, "Kiválaszt", "Kilép");
	}
	return 0;
}

forward oszerk(playerid);
public oszerk(playerid)
{
    EditDynamicObject(playerid, editobject[playerid]);
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
//	SendClientMessage(playerid, COLOR_RED, "1");
    if(response == EDIT_RESPONSE_CANCEL)
    {
        //SendClientMessage(playerid, COLOR_RED, "2");
		if(GetPVarInt(playerid, "mostvett") == 1)
		{
		//	SendClientMessage(playerid, COLOR_RED, "3");
		    DestroyDynamicObject(editobject[playerid]);
		    SetPVarInt(playerid, "mostvett", 0);
		    SendClientMessage(playerid, COLOR_GREEN, #HLIME#"A tárgyat eladtad.");
		    CancelEdit(playerid);
		}
		if(GetPVarInt(playerid, "oszerkeszt") == 1) SetPVarInt(playerid, "oszerkeszt", 0);
    }
    if(response == EDIT_RESPONSE_FINAL)
    {
    //	SendClientMessage(playerid, COLOR_RED, "4");
        if(GetPVarInt(playerid, "mostvett") == 1)
		{
		//	SendClientMessage(playerid, COLOR_RED, "5");
		    new tstring[128];
            format(tstring, sizeof(tstring), #HGOLD#"Tárgy neve: "#HLIME#"%s\n"#HGOLD#"TárgyID:"#HLIME#" %d\n"#HGOLD#"Ár:"#HLIME#" %s$", GetPVarStringEx(playerid, "objectnev"), GetPVarInt(playerid, "objectid"), convertFormattedNumber(GetPVarInt(playerid, "objectar"), "."));
			ShowPlayerDialog(playerid, TARGYMEGVESZ2_DIALOG, DIALOG_STYLE_MSGBOX, "Tárgy adatai", tstring, "Megvesz", "Kilép");
			SetPVarFloat(playerid, "objectX", x);
			SetPVarFloat(playerid, "objectY", y);
			SetPVarFloat(playerid, "objectZ", z);
			SetPVarFloat(playerid, "objectrX", rx);
			SetPVarFloat(playerid, "objectrY", ry);
			SetPVarFloat(playerid, "objectrZ", rz);
			SetPVarInt(playerid, "mostvett", 0);
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
		}
		if(GetPVarInt(playerid, "oszerkeszt") == 1)
		{
		//	SendClientMessage(playerid, COLOR_RED, "6");
		    SetPVarInt(playerid, "oszerkeszt", 0);
		    format(query, sizeof(query), "UPDATE houseobjects SET X = %0.2f, Y = %0.2f, Z = %0.2f, rX = %0.2f, rY = %0.2f, rZ = %0.2f WHERE houseID = %d AND slot = %d", x, y, z, rx, ry, rz, GetPVarInt(playerid, "hazban"), GetPVarInt(playerid, "oslot"));
      		mysql_query(query);
		    SetDynamicObjectPos(hobject[GetPVarInt(playerid, "hazban")][GetPVarInt(playerid, "oslot")], x, y, z);
			SetDynamicObjectRot(hobject[GetPVarInt(playerid, "hazban")][GetPVarInt(playerid, "oslot")], rx, ry, rz);
		}
    }
}

public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{
	SendClientMessage(playerid, COLOR_RED, "7");
	for(new i; i < MAX_HSLOTS; i++) if(hobject[GetPVarInt(playerid, "hazban")][i] == objectid) SetPVarInt(playerid, "oslot", i);
	format(query, sizeof(query), "SELECT Nev FROM targyadatok WHERE objectID = %d", modelid);
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		SendClientMessage(playerid, COLOR_RED, "8");
	    mysql_fetch_row(linen);
		new tarolo[64];
	    sscanf(linen, "s[64]", tarolo);
	    mysql_free_result();
	    SetPVarString(playerid, "oneve", tarolo);
	}
		SendClientMessage(playerid, COLOR_RED, "9");
    ShowPlayerDialog(playerid, HAZTARGYAK2_DIALOG, DIALOG_STYLE_LIST, "Ház berendezés", "Tárgy mozgatása\nTárgy eladása\nKövetkezõ tárgy(ha több van belõle)", "Kiválaszt", "Kilép");
	CancelEdit(playerid);
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	return 1;
}

CMD:futottido(playerid)
{
	SendFormatMessage(playerid, COLOR_GREEN, "A szerver %d órája, %d perce és %d másodperce megy.", sora, sperc, ssec);
	return 1;
}

CMD:futottrekordido(playerid)
{
    new futottfile[128];
	format(futottfile, sizeof(futottfile), "brl/rekordok.ini");
    SendFormatMessage(playerid, COLOR_GREEN, "A szerver futott rekordideje: %d óra, %d perc.", dini_Int(futottfile, "futottora"), dini_Int(futottfile, "futottperc"));
	return 1;
}

#if defined FUEL_SYSTEM
/*CMD:getvaluef(playerid)
{
	SendFormatMessage(playerid, COLOR_GREEN, "%d", fuelvalue[GetPlayerVehicleID(playerid)]);
	return 1;
}*/

CMD:fuelvaluemax(playerid)
{
	for(new i; i < MAX_VEHICLES; i++)
	{
	    fuelvalue[i] = 50;
	}
	return 1;
}

CMD:setfuelvaluemax(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid)) return 1;
    fuelvalue[GetPlayerVehicleID(playerid)] = 50;
	return 1;
}
#endif

/*CMD:progressbarvalue(playerid, params[])
{
	new value;
	if(!IsPlayerAdminEx(playerid)) return 0;
	if(sscanf(params, "i", value)) return SendClientMessage(playerid, COLOR_RED, "/progressbarvalue [value]");
	SetProgressBarValue(fuelbar[playerid], value);
	UpdateProgressBar(fuelbar[playerid], playerid);
	return 1;
}*/

/*CMD:giveexp(playerid, params[])
{
	new value;
	if(!IsPlayerAdminEx(playerid)) return 0;
	if(sscanf(params, "i", value)) return SendClientMessage(playerid, COLOR_RED, "/giveexp [value]");
	GiveEXP(playerid, value);
	return 1;
}
*/
CMD:hidehud(playerid)
{
	TextDrawHideForPlayer(playerid, Speedo[playerid]);
	TextDrawHideForPlayer(playerid, Ft[playerid]);
	TextDrawHideForPlayer(playerid, exp[playerid]);
	TextDrawHideForPlayer(playerid, level[playerid]);
	TextDrawHideForPlayer(playerid, Box[playerid]);
	TextDrawHideForPlayer(playerid, Clock);
	TextDrawHideForPlayer(playerid, Skill1Text[playerid]);
	TextDrawHideForPlayer(playerid, Skill2Text[playerid]);
	TextDrawHideForPlayer(playerid, Skill3Text[playerid]);
	TextDrawHideForPlayer(playerid, SkillBox[playerid]);
	TextDrawHideForPlayer(playerid, SkillBox[playerid]);
	HideProgressBarForPlayer(playerid, expbar[playerid]);
	SendClientMessage(playerid, COLOR_GREEN, "Elrejtetted a Textdrawokat. Megjelenítés: /showhud");
	return 1;
}

CMD:showhud(playerid)
{
	TextDrawShowForPlayer(playerid, Speedo[playerid]);
	TextDrawShowForPlayer(playerid, Ft[playerid]);
	TextDrawShowForPlayer(playerid, exp[playerid]);
	TextDrawShowForPlayer(playerid, level[playerid]);
	TextDrawShowForPlayer(playerid, Box[playerid]);
	TextDrawShowForPlayer(playerid, Clock);
	ShowProgressBarForPlayer(playerid, expbar[playerid]);
	SendClientMessage(playerid, COLOR_GREEN, "Megjelenítetted a Textdrawokat. Elrejtés: /hidehud");
	return 1;
}

#if defined FUEL_SYSTEM
CMD:tankol(playerid, params[])
{
	new fuelmenny;
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, "Nem vagy jármûben.");
	if(!IsPlayerInFuel(playerid)) return SendClientMessage(playerid, COLOR_RED, "Nem vagy benzinkúton.");
	if(sscanf(params, "i", fuelmenny)) return SendClientMessage(playerid, COLOR_GREEN, "Használat: /tankol [liter (l*3500)]");
	if(GetPlayerMoneyEx(playerid) < fuelmenny*3500) return SendClientMessage(playerid, COLOR_GREEN, "Nincs elég pénzed.");
	if(!IsVehicleType(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_RED, "Ezt a jármûvet nem tankolhatod meg.");
 	if(GetVehicleSpeed(GetPlayerVehicleID(playerid)) >= 5) return SendClientMessage(playerid, COLOR_RED, "Teljesen meg kell állnod a tankoláshoz.");

	if(GetAllVehicleLevel(GetPlayerVehicleID(playerid)) >= 0)
	{
	    if(fuelmenny + fuelvalue[GetPlayerVehicleID(playerid)] > fuellevel[GetAllVehicleLevel(GetPlayerVehicleID(playerid))][maxfuelvalue]) return SendClientMessage(playerid, COLOR_RED," Ennyi benzin nem fér bele.");
	}
	else
	{
	    if(fuelmenny + fuelvalue[GetPlayerVehicleID(playerid)] > 50) return SendClientMessage(playerid, COLOR_RED, "Ennyi benzin nem fér bele.");
	}
	fuelvalue[GetPlayerVehicleID(playerid)] += fuelmenny;
	GivePlayerMoneyEx(playerid, fuelmenny*-3500, "Tankolt");
	
	SetProgressBarValue(fuelbar[playerid], fuelvalue[GetPlayerVehicleID(playerid)]);
	UpdateProgressBar(fuelbar[playerid], playerid);
	
 	new fuelstr[50];
    if(GetAllVehicleLevel(GetPlayerVehicleID(playerid)) >= 0)
	{
	    format(fuelstr, sizeof(fuelstr), "Liter: %d/%d", fuellevel[GetAllVehicleLevel(GetPlayerVehicleID(playerid))][maxfuelvalue], fuelvalue[GetPlayerVehicleID(playerid)]);
	}
	else
	{
		format(fuelstr, sizeof(fuelstr), "Liter: 50/%d", fuelvalue[GetPlayerVehicleID(playerid)]);
	}
	TextDrawSetString(fuel[playerid], fuelstr);
	return 1;
}

stock IsPlayerInFuel(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 15, -1671.9441,414.8369,7.1797) || IsPlayerInRangeOfPoint(playerid, 15, -1678.9198,421.6613,7.1797) || IsPlayerInRangeOfPoint(playerid, 15, -2244.4368,-2561.2090,31.9219) || IsPlayerInRangeOfPoint(playerid, 25, -2410.0408,975.5214,45.4266)) return true;
	return false;
}
#endif
//-------------------------Szint rendszer---------------------------------------
CMD:sniper(playerid)
{
	if(cGetPlayerTeam(playerid) != TEAM_ZSARU && cGetPlayerTeam(playerid) != TEAM_KATONA) return SendClientMessage(playerid,COLOR_RED,"HIBA: Nem vagy rendõr, se katona!");
    if(GetPVarInt(playerid,"KatonaTP") < 200 && GetPVarInt(playerid, "RendorTP") < 10000) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs elegendõ katonaTP-d, vagy rendõrTP-d!");
	GivePlayerWeapon(playerid, 34, 5000);
	return 1;
}

CMD:skills(playerid)
{
	new dialogsk[300], dialogcap[50];
	format(dialogcap, sizeof(dialogcap), "Képességek (%d képességpont)", GetPVarInt(playerid, "skillpoints"));
	format(dialogsk, sizeof(dialogsk),	"Képesség neve\tSzint\n\
	Teleportálás\t%d\n\
	Égetés\t%d\n\
	Vonzás\t%d\n", GetPVarInt(playerid, "skill1level"), GetPVarInt(playerid, "skill2level"), GetPVarInt(playerid, "skill3level"));
	ShowPlayerDialog(playerid, SKILLS_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, dialogcap, dialogsk, "Fejleszt", "Kilép");
	return 1;
}

//------------------------------------------------------------------------------
//-------------------------Quest system-----------------------------------------
CMD:quests(playerid)
{
	format(query, sizeof(query), "SELECT * FROM quests WHERE Name = '%s' AND QuestPart BETWEEN 1 AND 998", GetPlayerNameEx(playerid));
	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0) return SendClientMessage(playerid, QUEST_COLOR, "Te már elfogadtál egy küldetést. Elõször csináld meg azt."), SendClientMessage(playerid, QUEST_COLOR, "Ha nem tudnád mit kell csinálnod, írd be a /questcont parancsot."), mysql_free_result();
	format(query, sizeof(query), "SELECT QuestName FROM quests WHERE Name = '%s' AND QuestPart = 0", GetPlayerNameEx(playerid));
	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		new questdstr[500];
		while(mysql_fetch_row(linen))
		{
			format(questdstr, sizeof(questdstr), "%s%s\n", questdstr, linen);
		}
		ShowPlayerDialog(playerid, QUEST_DIALOG, DIALOG_STYLE_LIST, "Küldetések", questdstr, "Elfogad", "Kilép");
	}
	else ShowPlayerDialog(playerid, QUEST_DIALOG, DIALOG_STYLE_LIST, "Küldetések", "Jelenleg nincs elfogadható küldetésed.", "Kiválaszt", "Kilép");
	return 1;
}

CMD:questcont(playerid)
{
    format(query, sizeof(query), "SELECT QuestID, QuestPart FROM quests WHERE Name = '%s' AND QuestPart BETWEEN 1 AND 998", GetPlayerNameEx(playerid));
	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    mysql_fetch_row(linen);
	    new questid, questpart;
	    sscanf(linen, "p<|>ii", questid, questpart);
	    mysql_free_result();
	    QuestPart[playerid] = questpart;
    	QuestID[playerid] = questid;
		if(QuestID[playerid] == 1)
		{
		    if(QuestPart[playerid] == 1)
		    {
		        CreateQuestCP(playerid, -2145.5195,-246.4585,36.5156);
		        SendClientMessage(playerid, QUEST_COLOR, "Menj a CP-be.");
		    }
		    if(QuestPart[playerid] == 2)
		    {
		        SendClientMessage(playerid, QUEST_COLOR, "Le kell szállítanod 5 rakományt kamionosként.");
		    }
		    if(QuestPart[playerid] == 3)
		    {
		        CreateQuestCP(playerid, -2145.5195,-246.4585,36.5156);
		        SendClientMessage(playerid, QUEST_COLOR, "Menj a CP-be.");
		    }
		}
		else if(QuestID[playerid] == 2)
		{
		    if(QuestPart[playerid] == 1)
		    {
		        CreateQuestCP(playerid, -2145.5195,-246.4585,36.5156);
		        SendClientMessage(playerid, QUEST_COLOR, "Menj a CP-be.");
		    }
		    if(QuestPart[playerid] == 2)
		    {
		        CreateQuestCP(playerid, -2948.1531,480.1698,4.8935);
		        SendClientMessage(playerid, QUEST_COLOR, "Menj a CP-be.");
		    }
		    if(QuestPart[playerid] == 3)
		    {
		        CreateQuestCP(playerid, -2145.5195,-246.4585,36.5156);
		        SendClientMessage(playerid, QUEST_COLOR, "Menj a CP-be.");
		    }
		}
		else if(QuestID[playerid] == 3)
		{
		    if(QuestPart[playerid] == 1)
		    {
		        CreateQuestCP(playerid, -2145.5195,-246.4585,36.5156);
		        SendClientMessage(playerid, QUEST_COLOR, "Menj a CP-be.");
		    }
		    if(QuestPart[playerid] == 2)
		    {
		        TextDrawForPlayer(playerid, 5000, "Menj a ~r~dokkokhoz ~w~ és hozd el a ~y~Phoenix típusú ~w~jármûvet.");
		    }
		}
		else if(QuestID[playerid] == 4)
		{
		    if(QuestPart[playerid] == 1)
		    {
		        CreateQuestCP(playerid, -2145.5195,-246.4585,36.5156);
		        SendClientMessage(playerid, QUEST_COLOR, "Menj a CP-be.");
		    }
		    if(QuestPart[playerid] == 2)
		    {
		        TextDrawForPlayer(playerid, 5000, "Rabolj ki ~y~10 boltot~w~.");
		    }
		    if(QuestPart[playerid] == 3)
		    {
		        CreateQuestCP(playerid, -2145.5195,-246.4585,36.5156);
		        SendClientMessage(playerid, QUEST_COLOR, "Menj a CP-be.");
		    }
		}
	}
	else SendClientMessage(playerid, QUEST_COLOR, "Jelenleg nincs küldetésed.");
	return 1;
}
//------------------------Clan system-------------------------------------------
CMD:createclan(playerid, params[])
{
	new clanname[30];
	if(strcmp(GetPVarStringEx(playerid, "Clan"), "None")) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Te már benne vagy egy klánban!");
    if(GetPVarInt(playerid, "Szint") < 2) return SendClientMessage(playerid, COLOR_RED, "Szinthiba: A klán alapítás 2-es szinttõl válik elérhetõvé.");
	if(GetPVarInt(playerid, "Ora") < 20) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Minimum 20 játszott órádnak kell lenni hogy klánt alapíts!");
	if(GetPlayerMoneyEx(playerid) < 1500000) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: A klán létrehozásához rendelkezned kell minimum 1.500.000$ készpénzzel!");
	if(sscanf(params, "s[30]", clanname)) return SendClientMessage(playerid, COLOR_GREEN, "Használat: /createclan [Klánnév]");
    if(strlen(clanname) < 3) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: A klánnév min 3 karakter hosszú lehet!");
	if(strlen(clanname) > 30) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: A klánnév max 30 karakter hosszú lehet!");
	/*new space;
	for(new i = 0; i < strlen(clanname); ++i)
	{
		if(clanname[i] != ' ') continue;
		space++;
	}
	if(space >= 1) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Szóközt nem tehetsz bele! Használj inkább _-t.");*/
 	if(IsStringInSpecials(clanname)) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: A név nem megengedett karaktereket tartalmaz!");
    if(IsStringInvalidBletters(clanname)) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: A névben nem lehet ékezetes betü!");
	format(query, sizeof(query), "SELECT * FROM clans WHERE ClanName = '%s'", clanname);
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Ezen a néven már létezik klán!"), mysql_free_result();
	format(query, sizeof(query), "INSERT INTO clans (ID, ClanName, ClanLeader, ClanRank1, ClanRank2, ClanRank3, ClanRank4, ClanRank5, ClanRank6, ClanRank7, ClanRank8, ClanRank9, ClanRank10, invitejog, kickjog, parkoljog, rangadjog) VALUES (0, '%s', '%s', 'Rang1', 'Rang2', 'Rang3', 'Rang4', 'Rang5', 'Rang6', 'Rang7', 'Rang8', 'Leader Helyettes', 'Leader', 10, 10, 10, 10)", clanname, GetPlayerNameEx(playerid));
 	mysql_query(query);
	SetPVarString(playerid, "Clan", clanname);
	SetPVarInt(playerid, "ClanRank", 10);
	SendFormatMessage(playerid, COLOR_GREEN, "Sikeresen létrehozad a klánodat! Neve: {FFFF00}%s", clanname);
	GivePlayerMoneyEx(playerid, -1500000, "Klánt alapított");
	if(GetAchievement(playerid, "elsoclan") == 0)
    {
		UnlockAchievement(playerid, "", "Elsõ klán alapítása", "Elsõ klán");
		GiveAchievement(playerid, "elsoclan", 1);
		GiveEXP(playerid, ELSOCLAN_EXP);
    }
	return 1;
}

CMD:claninvite(playerid, params[])
{
	new id;
	if(!strcmp(GetPVarStringEx(playerid, "Clan"), "None")) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Nem vagy klánban!");
    if(GetPVarInt(playerid, "ClanRank") < GetClanRangJog(GetPVarStringEx(playerid, "Clan"), "invitejog")) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Nincs meg a kellõ rangod ehhez a joghoz!");
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREEN, "Használat: /claninvite [ID/névrészlet]");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Rossz játékosID!");
	if(id == playerid) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Magadnak nem küldhetsz meghívót!");
	if(strcmp(GetPVarStringEx(id, "Clan"), "None")) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: A játékos már benne van egy klánban!");
	SendFormatMessage(playerid, COLOR_GREEN, "Elküldted a klán meghívót neki: {FFFF00}%s", GetPlayerNameEx(id));
	SendFormatMessage(id, COLOR_GREEN, "{FFFF00}%s[%d]{00FF00} Meghívót küldött ebbe a klánba: {FFFF00}%s", GetPlayerNameEx(playerid), playerid, GetPVarStringEx(playerid, "Clan"));
	SendClientMessage(id, COLOR_GREEN, "{FFFF00}/clanjoin {00FF00}hogy elfogadd, {FF0000}/clanreject {00FF00}hogy elutasítsd!");
	SetPVarString(id, "ClanMeghivo", GetPVarStringEx(playerid, "Clan"));
	SetPVarInt(id, "ClanMeghivott", playerid);
	SetPVarInt(id, "ClanMeghivotk", 1);
	return 1;
}

CMD:clanjoin(playerid)
{
	if(strcmp(GetPVarStringEx(playerid, "Clan"), "None")) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Te már benne vagy egy klánban!");
	if(GetPVarInt(playerid, "ClanMeghivotk") == 0) return SendClientMessage(playerid, COLOR_ERROR, "Nem kaptál sehova se meghívót!");
    SendFormatMessage(playerid, COLOR_GREEN, "{00FF00}Csatlakoztál ebbe a klánba:{FFFF00} %s", GetPVarStringEx(playerid, "ClanMeghivo"));
	SendFormatMessage(GetPVarInt(playerid, "ClanMeghivott"), COLOR_GREEN, "{FFFF00}%s[%d] {00FF00}elfogadta a klánmeghívót!", GetPlayerNameEx(playerid), playerid);
	SetPVarString(playerid, "Clan", GetPVarStringEx(playerid, "ClanMeghivo"));
	SetPVarInt(playerid, "ClanRank", 1);
	SetPVarInt(playerid, "ClanMeghivotk", 0);
	if(GetAchievement(playerid, "elsoclantag") == 0)
    {
		UnlockAchievement(playerid, "", "Elsõ klántagság", "Elsõ klántagság");
		GiveAchievement(playerid, "elsoclantag", 1);
		GiveEXP(playerid, ELSOCLANTAG_EXP);
    }
	return 1;
}

CMD:clanreject(playerid)
{
	if(GetPVarInt(playerid, "ClanMeghivotk") == 0) return SendClientMessage(playerid, COLOR_ERROR, "Nem kaptál sehova se meghívót!");
	SendFormatMessage(playerid, COLOR_GREEN, "{00FF00}Elutasítottad ennek a klánnak a meghívóját:{FFFF00} %s", GetPVarStringEx(playerid, "ClanMeghivo"));
	SendFormatMessage(GetPVarInt(playerid, "ClanMeghivott"), COLOR_GREEN, "{FFFF00}%s[%d] {00FF00}elutasította a klánmeghívót!", GetPlayerNameEx(playerid), playerid);
	SetPVarInt(playerid, "ClanMeghivotk", 0);
	return 1;
}

CMD:clanleave(playerid)
{
	if(!strcmp(GetPVarStringEx(playerid, "Clan"), "None")) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Te most sem vagy klánban!");

	return 1;
}

CMD:clanpanel(playerid)
{
    if(!strcmp(GetPVarStringEx(playerid, "Clan"), "None")) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Nem vagy klánban!");
    ShowClanPanel(playerid);
	return 1;
}

CMD:clanfogad(playerid)
{
	if(GetPVarInt(playerid, "ClanRank") != MAX_CLANRANK-1) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Nem vagy klánvezér!");
	if(GetPVarInt(playerid, "clankihivott") != 1) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Nem hívott ki egy klán sem!");
	if(GetGVarInt("klanhaboru") == 1) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Most éppen zajlik egy háború, ezért nem indíthatsz!"), SetPVarInt(playerid, "clankihivott", 0);
 SendFormatMessageToAll(COLOR_GREEN, "{00FF00}A(z) {FFFF00}%s{00FF00} klán elfogadta a(z) {FFFF00}%s{00FF00} klán kihívását!", GetPVarStringEx(playerid, "Clan"), GetPVarStringEx(playerid, "clankihivonev"));
	SetGVarInt("klanhaboru", 1);
	SetGVarString("klanname1", GetPVarStringEx(playerid, "Clan"));
	SetGVarString("klanname2", GetPVarStringEx(playerid, "clankihivonev"));
	SetGVarInt("klan1kills", 0);
	SetGVarInt("klan2kills", 0);
	SendClanMessage(GetGVarStringEx("klanname1"), 0x00ffa2AA, "A klán háborúban vesz részt. Csatlakozz te is! /clanhaboru");
	SendClanMessage(GetGVarStringEx("klanname2"), 0x00ffa2AA, "A klán háborúban vesz részt. Csatlakozz te is! /clanhaboru");
	clanhtimer = SetTimer("clanhaboruk", 1000, 1);
	return 1;
}

CMD:clans(playerid)
{
	new listr[500];
    mysql_query("SELECT ClanName FROM clans ORDER BY Wins DESC LIMIT 50");
    mysql_store_result();
    new str[32];
    while(mysql_fetch_row(str))
    {
            strcat(listr,str);
            strcat(listr, "\n");
    }
    mysql_free_result();
    ShowPlayerDialog(playerid, CLANRANK_DIALOG, DIALOG_STYLE_LIST, "Klán ranglista", listr, "Megnéz", "Kilép");
	return 1;
}

CMD:clanutasit(playerid)
{
	if(GetPVarInt(playerid, "ClanRank") != MAX_CLANRANK-1) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Nem vagy klánvezér!");
	if(GetPVarInt(playerid, "clankihivott") != 1) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Nem hívott ki egy klán sem!");
    if(GetGVarInt("klanhaboru") == 1) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Most éppen zajlik egy háború, ezért nem indíthatsz!"), SetPVarInt(playerid, "clankihivott", 0);
	SendFormatMessageToAll(COLOR_GREEN, "{FF0000}A(z) {FFFF00}%s{FF0000} klán elutasította a(z) {FFFF00}%s{FF0000} klán kihívását!", GetPVarStringEx(playerid, "Clan"), GetPVarStringEx(playerid, "clankihivonev"));
	return 1;
}

CMD:clanhaboru(playerid)
{
    if(!strcmp(GetPVarStringEx(playerid, "Clan"), "None")) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Nem vagy klánban!");
    if(GetGVarInt("klanhaboru") == 0) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Éppen nincsen háború!");
	if(strcmp(GetGVarStringEx("klanname1"), GetPVarStringEx(playerid, "Clan")) && strcmp(GetGVarStringEx("klanname2"), GetPVarStringEx(playerid, "Clan"))) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: A te klánod nem háborúzik!");
	if(GetPVarInt(playerid, "haboruban") == 1) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Már háborúban vagy!");
	if(!strcmp(GetGVarStringEx("klanname1"), GetPVarStringEx(playerid, "Clan")))
	{
		SetPVarInt(playerid, "oldteam", cGetPlayerTeam(playerid));
	    SetPVarInt(playerid, "klan1tag", 1);
	    SetPlayerVirtualWorld(playerid, 50);
	    if(GetGVarInt("clanhmap") == MONTGOMERY_MAP)
	    {
		    SetPlayerPos(playerid, 1293.3663,166.8506,20.4609);
		    SetPlayerFacingAngle(playerid, 64.1222);
		}
		if(GetGVarInt("clanhmap") == HAJORAKTAR_MAP)
	    {
		    SetPlayerPos(playerid, -2436.0608,1554.8264,2.1172);
		    SetPlayerFacingAngle(playerid, 267.8336);
		}
	    ResetPlayerWeapons(playerid);
	    SetPlayerArmour(playerid, 100);
	    SetPlayerHealth(playerid, 100);
		GivePlayerWeapon(playerid, 24, 500);
		GivePlayerWeapon(playerid, 27, 500);
		GivePlayerWeapon(playerid, 29, 500);
		GivePlayerWeapon(playerid, 31, 500);
		GivePlayerWeapon(playerid, 8, 1);
		cSetPlayerTeam(playerid, TEAM_KLAN1);
		if(GetGVarInt("clanhszin") == 1) SetPlayerColor(playerid, 0xff0000AA);
		if(GetGVarInt("clanhszin") == 2) SetPlayerColor(playerid, 0x0009ffAA);
		if(GetGVarInt("clanhszin") == 3) SetPlayerColor(playerid, 0xff0000AA);
		if(GetGVarInt("clanhszin") == 4) SetPlayerColor(playerid, 0x09ff00AA);
		if(GetGVarInt("clanhszin") == 5) SetPlayerColor(playerid, 0xd500ffAA);
		if(GetGVarInt("clanhszin") == 6) SetPlayerColor(playerid, 0xff5e00AA);
	}
	else if(!strcmp(GetGVarStringEx("klanname2"), GetPVarStringEx(playerid, "Clan")))
	{
		SetPVarInt(playerid, "oldteam", cGetPlayerTeam(playerid));
        SetPVarInt(playerid, "klan2tag", 1);
		SetPlayerVirtualWorld(playerid, 50);
		if(GetGVarInt("clanhmap") == MONTGOMERY_MAP)
	    {
			SetPlayerPos(playerid, 1408.6246,358.8268,19.2259);
			SetPlayerFacingAngle(playerid, 64.4451);
		}
		if(GetGVarInt("clanhmap") == HAJORAKTAR_MAP)
	    {
		    SetPlayerPos(playerid, -2367.2085,1541.4362,2.1172);
		    SetPlayerFacingAngle(playerid, 354.6044);
		}
		ResetPlayerWeapons(playerid);
		SetPlayerArmour(playerid, 100);
	    SetPlayerHealth(playerid, 100);
		GivePlayerWeapon(playerid, 24, 500);
		GivePlayerWeapon(playerid, 27, 500);
		GivePlayerWeapon(playerid, 29, 500);
		GivePlayerWeapon(playerid, 31, 500);
		GivePlayerWeapon(playerid, 8, 1);
		cSetPlayerTeam(playerid, TEAM_KLAN2);
		if(GetGVarInt("clanhszin") == 1) SetPlayerColor(playerid, 0xfff700AA);
		if(GetGVarInt("clanhszin") == 2) SetPlayerColor(playerid, 0xfff700AA);
		if(GetGVarInt("clanhszin") == 3) SetPlayerColor(playerid, 0x001effAA);
		if(GetGVarInt("clanhszin") == 4) SetPlayerColor(playerid, 0x824f18AA);
		if(GetGVarInt("clanhszin") == 5) SetPlayerColor(playerid, 0xff7b00AA);
		if(GetGVarInt("clanhszin") == 6) SetPlayerColor(playerid, 0xfff700AA);
	}
	SetPVarInt(playerid, "haboruban", 1);
	SendClientMessage(playerid, COLOR_GREEN, "{00FF00}Beléptél a klánháborúba. {FFFF00}/clanhaborukilep {00FF00}hogy kilépj.");
	return 1;
}

CMD:clanhaborukilep(playerid)
{
	if(GetPVarInt(playerid, "haboruban") != 1) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Nem vagy klánháborúban!");
    if(!strcmp(GetPVarStringEx(playerid, "Clan"), "None")) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Nem vagy klánban!");
	if(strcmp(GetGVarStringEx("klanname1"), GetPVarStringEx(playerid, "Clan")) && strcmp(GetGVarStringEx("klanname2"), GetPVarStringEx(playerid, "Clan"))) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: A te klánod nem háborúzik!");
	if(GetGVarInt("klanhaboru") != 1) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Éppen nincsen háború!");
    if(!strcmp(GetGVarStringEx("klanname1"), GetPVarStringEx(playerid, "Clan")))
	{
	    SetPVarInt(playerid, "klan1tag", 0);
	    //SpawnPlayer(playerid);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetTeam(playerid, GetPVarInt(playerid, "oldteam"));
	}
	else if(!strcmp(GetGVarStringEx("klanname2"), GetPVarStringEx(playerid, "Clan")))
	{
		SetPVarInt(playerid, "klan2tag", 0);
		//SpawnPlayer(playerid);
		SetPlayerVirtualWorld(playerid, 0);
		SetTeam(playerid, GetPVarInt(playerid, "oldteam"));
	}
	SetPVarInt(playerid, "haboruban", 0);
	return 1;
}
//-1640.89, -2235.56, 31.63 // faházas TDM spawn
//-1349.32, -2116.92, 30.71 // fák közti TDM spawn

//SetPVarInt(GetPlayerID(tarolo2), "clankihivott", 1);
//SetPVarString(GetPlayerID(tarolo2), "clankihivonev", GetPVarStringEx(playerid, "Clan"));

CMD:c(playerid, params[])
{
	new szoveg[128];
    if(!strcmp(GetPVarStringEx(playerid, "Clan"), "None")) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Nem vagy klánban!");
	if(sscanf(params, "s[128]", szoveg)) return SendClientMessage(playerid, COLOR_GREEN, "Használat: /c [szöveg]");
	for(new i; i < MAX_PLAYERS; i++)
	{
	    if(!strcmp(GetPVarStringEx(playerid, "Clan"), GetPVarStringEx(i, "Clan")))
	    {
			new cstring[200];
			format(cstring, sizeof(cstring), "[CC]%s[%s]: %s", GetPlayerNameEx(playerid), GetClanRang(GetPlayerNameEx(playerid)), szoveg);
			SendClientMessage(i, 0x00ffa2AA, cstring);
		}
	}
	return 1;
}

CMD:clanparkol(playerid, params[])
{
	new id;
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_GREEN, "Használat: /clanparkol [klánautó slot]");
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Nem ülsz jármûben!");
   	format(query, sizeof(query), "SELECT * FROM clancars WHERE slot = '%d'", id);
	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() == 0) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: A slot nem létezik!"), mysql_free_result();
    format(query, sizeof(query), "SELECT * FROM clancars WHERE slot = '%d' AND ClanTulaj = '%s'", id, GetPVarStringEx(playerid, "Clan"));
	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "HIBA: Ez nem a klánod jármûve!");
		mysql_free_result();
	}
	else
	{
		if(GetPVarInt(playerid, "ClanRank") < GetClanRangJog(GetPVarStringEx(playerid, "Clan"), "parkoljog")) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Nincs meg a kellõ rangod ehhez a joghoz!");
		new Float:vp[4];
		GetVehiclePos(clancars[id], vp[0], vp[1], vp[2]);
		if(IsPlayerInRangeOfPoint(playerid, 4.5, vp[0], vp[1], vp[2]))
		{
			GetVehicleZAngle(clancars[id], vp[3]);
			format(query, sizeof(query), "UPDATE clancars SET X = '%0.2f', Y = '%0.2f', Z = '%0.2f', A = '%0.2f', VW = '%d' WHERE slot = '%d'", vp[0], vp[1], vp[2], vp[3], GetPlayerVirtualWorld(playerid), id);
			mysql_query(query);
			ClanAutoUpdate(id);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "HIBA: Nem vagy az autód közelében, amit át akarsz helyezni!");
	}
	return 1;
}

forward clanhaboruk();
public clanhaboruk()
{
	if(GetGVarInt("klan1kills") >= 50)
	{
		SendFormatMessageToAll(COLOR_GREEN, "{00FF00}A(z) {FFFF00}%s{00FF00} klán megnyerte a háborút a(z) {FFFF00}%s{00FF00} klán ellen!", GetGVarStringEx("klanname1"), GetGVarStringEx("klanname2"));
        SetGVarInt("klanhaboru", 0);
		SetGVarInt("klan1kills", 0);
		SetGVarInt("klan2kills", 0);
		format(query, sizeof(query), "UPDATE clans SET Wins = Wins+1, Kassza = Kassza+100000 WHERE ID = '%d' AND ClanName = '%s'", GetClanID(GetGVarStringEx("klanname1")), GetGVarStringEx("klanname1"));
  		mysql_query(query);
		format(query, sizeof(query), "UPDATE clans SET Loss = Loss+1 WHERE ID = '%d' AND ClanName = '%s'", GetClanID(GetGVarStringEx("klanname2")), GetGVarStringEx("klanname2"));
  		mysql_query(query);
  		SendClanMessage(GetGVarStringEx("klanname1"), 0x00ffa2AA, "A klán gazdagabb lett 100.000$-al!");
		for(new i; i < MAX_PLAYERS; i++)
		{
		    if(!strcmp(GetPVarStringEx(i, "Clan"), GetGVarStringEx("klanname1"))) GiveEXP(i, KLAN_EXP);
			if(GetPVarInt(i, "haboruban") == 1)
			{
			    SetPVarInt(i, "klan1tag", 0);
			    SetPVarInt(i, "klan2tag", 0);
			    SetPVarInt(i, "haboruban", 0);
				//SpawnPlayer(i);
				SetTeam(i, GetPVarInt(i, "oldteam"));
			}
		}
		KillTimer(clanh2timer);
		KillTimer(clanhtimer);
	}
	else if(GetGVarInt("klan2kills") >= 50)
	{
		SendFormatMessageToAll(COLOR_GREEN, "{00FF00}A(z) {FFFF00}%s{00FF00} klán megnyerte a háborút a(z) {FFFF00}%s{00FF00} klán ellen!", GetGVarStringEx("klanname2"), GetGVarStringEx("klanname1"));
        SetGVarInt("klanhaboru", 0);
		SetGVarInt("klan1kills", 0);
		SetGVarInt("klan2kills", 0);
		format(query, sizeof(query), "UPDATE clans SET Wins = Wins+1, Kassza = Kassza+100000 WHERE ID = '%d' AND ClanName = '%s'", GetClanID(GetGVarStringEx("klanname2")), GetGVarStringEx("klanname2"));
  		mysql_query(query);
		format(query, sizeof(query), "UPDATE clans SET Loss = Loss+1 WHERE ID = '%d' AND ClanName = '%s'", GetClanID(GetGVarStringEx("klanname1")), GetGVarStringEx("klanname1"));
  		mysql_query(query);
  		SendClanMessage(GetGVarStringEx("klanname2"), 0x00ffa2AA, "A klán gazdagabb lett 100.000$-al!");
		for(new i; i < MAX_PLAYERS; i++)
		{
		    if(!strcmp(GetPVarStringEx(i, "Clan"), GetGVarStringEx("klanname2"))) GiveEXP(i, KLAN_EXP);
			if(GetPVarInt(i, "haboruban") == 1)
			{
			    SetPVarInt(i, "klan1tag", 0);
			    SetPVarInt(i, "klan2tag", 0);
			    SetPVarInt(i, "haboruban", 0);
				//SpawnPlayer(i);
				SetTeam(i, GetPVarInt(i, "oldteam"));
			}
		}
		KillTimer(clanh2timer);
		SetTimer("clanvegtimer", 3000, 0);
		KillTimer(clanhtimer);
	}
	new tag1, tag2;
	for(new i; i < MAX_PLAYERS; i++)
	{
	    if(GetPVarInt(i, "klan1tag") == 1)
	    {
	        tag1++;
	    }
	    if(GetPVarInt(i, "klan2tag") == 1)
	    {
	        tag2++;
	    }
	}
	if(tag1 >= 1)
	{
		if(tag2 == 0)
		{
		    SetGVarInt("szamolas", 0);
			clanh2timer = SetTimer("clanhaboruk2", 1000, 1);
			SendClanMessage(GetGVarStringEx("klanname1"), 0x00ffa2AA, "Egy ellenség sincs bent a háborúban. 20mp múlva eldõl a csata!");
			KillTimer(clanhtimer);
		}
	}
	if(tag2 >= 1)
	{
	    if(tag1 == 0)
	    {
	        SetGVarInt("szamolas", 0);
	        clanh2timer = SetTimer("clanhaboruk2", 1000, 1);
  			SendClanMessage(GetGVarStringEx("klanname2"), 0x00ffa2AA, "Egy ellenség sincs bent a háborúban. 20mp múlva eldõl a csata!");
 			KillTimer(clanhtimer);
		}
	}
	if(tag1 == 0)
	{
	    if(tag2 == 0)
	    {
	        SetGVarInt("szamolas", 0);
	        clanh2timer = SetTimer("clanhaboruk2", 1000, 1);
	        KillTimer(clanhtimer);
	    }
	}
}

forward clanvegtimer();
public clanvegtimer() KillTimer(clanh2timer);

forward clanhaboruk2();
public clanhaboruk2()
{
	new tag1, tag2;
	SetGVarInt("szamolas", GetGVarInt("szamolas")+1);
	if(GetGVarInt("szamolas") <= 19)
	{
		for(new i; i < MAX_PLAYERS; i++)
		{
		    if(GetPVarInt(i, "klan1tag") == 1)
		    {
		        tag1++;
		    }
		    if(GetPVarInt(i, "klan2tag") == 1)
		    {
		        tag2++;
		    }
		}
		if(tag1 >= 1)
		{
		    if(tag2 >= 1)
		    {
		        clanhtimer = SetTimer("clanhaboruk", 1000, 1);
		        SetGVarInt("szamolas", 0);
		        KillTimer(clanh2timer);
		    }
		}
	}
	if(GetGVarInt("szamolas") == 20)
	{
	    SetGVarInt("szamolas", 0);
	    for(new i; i < MAX_PLAYERS; i++)
		{
		    if(GetPVarInt(i, "klan1tag") == 1)
		    {
		        tag1++;
		    }
		    if(GetPVarInt(i, "klan2tag") == 1)
		    {
		        tag2++;
		    }
		}
		if(GetGVarInt("klan1kills") == 0)
		{
		    if(GetGVarInt("klan2kills") == 0)
		    {
		        SendFormatMessageToAll(COLOR_GREEN, "{00FF00}A(z) {FFFF00}%s{00FF00} és a(z) {FFFF00}%s{00FF00} klán között a háború döntetlenül végzõdött!", GetGVarStringEx("klanname2"), GetGVarStringEx("klanname1"));
                SetGVarInt("klanhaboru", 0);
				SetGVarInt("klan1kills", 0);
				SetGVarInt("klan2kills", 0);
				for(new i; i < MAX_PLAYERS; i++)
				{
					if(GetPVarInt(i, "haboruban") == 1)
					{
					    SetPVarInt(i, "klan1tag", 0);
					    SetPVarInt(i, "klan2tag", 0);
					    SetPVarInt(i, "haboruban", 0);
						//SpawnPlayer(i);
						SetTeam(i, GetPVarInt(i, "oldteam"));
					}
				}
				KillTimer(clanh2timer);
			}
		}
	    if(tag1 == 0)
	    {
	        if(tag2 == 0)
			{
				SendFormatMessageToAll(COLOR_GREEN, "{00FF00}A(z) {FFFF00}%s{00FF00} és a(z) {FFFF00}%s{00FF00} klán között a háború döntetlenül végzõdött!", GetGVarStringEx("klanname2"), GetGVarStringEx("klanname1"));
                SetGVarInt("klanhaboru", 0);
				SetGVarInt("klan1kills", 0);
				SetGVarInt("klan2kills", 0);
				for(new i; i < MAX_PLAYERS; i++)
				{
					if(GetPVarInt(i, "haboruban") == 1)
					{
					    SetPVarInt(i, "klan1tag", 0);
					    SetPVarInt(i, "klan2tag", 0);
					    SetPVarInt(i, "haboruban", 0);
						//SpawnPlayer(i);
						SetTeam(i, GetPVarInt(i, "oldteam"));
					}
				}
				KillTimer(clanh2timer);
			}
		}
		if(tag1 >= 1)
		{
		    if(tag2 == 0)
		    {
		        if(GetGVarInt("klan1kills") != 0)
		        {
   					SendFormatMessageToAll(COLOR_GREEN, "{00FF00}A(z) {FFFF00}%s{00FF00} klán megnyerte a háborút a(z) {FFFF00}%s{00FF00} klán ellen!", GetGVarStringEx("klanname1"), GetGVarStringEx("klanname2"));
                    SetGVarInt("klanhaboru", 0);
					SetGVarInt("klan1kills", 0);
					SetGVarInt("klan2kills", 0);
					format(query, sizeof(query), "UPDATE clans SET Wins = Wins+1, Kassza = Kassza+100000 WHERE ID = '%d' AND ClanName = '%s'", GetClanID(GetGVarStringEx("klanname1")), GetGVarStringEx("klanname1"));
     				mysql_query(query);
					format(query, sizeof(query), "UPDATE clans SET Loss = Loss+1 WHERE ID = '%d' AND ClanName = '%s'", GetClanID(GetGVarStringEx("klanname2")), GetGVarStringEx("klanname2"));
     				mysql_query(query);
     				SendClanMessage(GetGVarStringEx("klanname1"), 0x00ffa2AA, "A klán gazdagabb lett 100.000$-al!");
					for(new i; i < MAX_PLAYERS; i++)
					{
					    if(!strcmp(GetPVarStringEx(i, "Clan"), GetGVarStringEx("klanname1"))) GiveEXP(i, KLAN_EXP);
						if(GetPVarInt(i, "haboruban") == 1)
						{
						    SetPVarInt(i, "klan1tag", 0);
						    SetPVarInt(i, "klan2tag", 0);
						    SetPVarInt(i, "haboruban", 0);
							//SpawnPlayer(i);
							SetTeam(i, GetPVarInt(i, "oldteam"));
						}
					}
					KillTimer(clanh2timer);
				}
				else if(GetGVarInt("klan2kills") != 0)
		        {
   					SendFormatMessageToAll(COLOR_GREEN, "{00FF00}A(z) {FFFF00}%s{00FF00} klán megnyerte a háborút a(z) {FFFF00}%s{00FF00} klán ellen!", GetGVarStringEx("klanname1"), GetGVarStringEx("klanname2"));
                    SetGVarInt("klanhaboru", 0);
					SetGVarInt("klan1kills", 0);
					SetGVarInt("klan2kills", 0);
					format(query, sizeof(query), "UPDATE clans SET Wins = Wins+1, Kassza = Kassza+100000 WHERE ID = '%d' AND ClanName = '%s'", GetClanID(GetGVarStringEx("klanname1")), GetGVarStringEx("klanname1"));
     				mysql_query(query);
					format(query, sizeof(query), "UPDATE clans SET Loss = Loss+1 WHERE ID = '%d' AND ClanName = '%s'", GetClanID(GetGVarStringEx("klanname2")), GetGVarStringEx("klanname2"));
     				mysql_query(query);
     				SendClanMessage(GetGVarStringEx("klanname1"), 0x00ffa2AA, "A klán gazdagabb lett 100.000$-al!");
					for(new i; i < MAX_PLAYERS; i++)
					{
					    if(!strcmp(GetPVarStringEx(i, "Clan"), GetGVarStringEx("klanname2"))) GiveEXP(i, KLAN_EXP);
						if(GetPVarInt(i, "haboruban") == 1)
						{
						    SetPVarInt(i, "klan1tag", 0);
						    SetPVarInt(i, "klan2tag", 0);
						    SetPVarInt(i, "haboruban", 0);
							//SpawnPlayer(i);
							SetTeam(i, GetPVarInt(i, "oldteam"));
						}
					}
					KillTimer(clanh2timer);
				}
			}
		}
		if(tag2 >= 1)
		{
		    if(tag1 == 0)
		    {
		        if(GetGVarInt("klan2kills") != 0)
		        {
   					SendFormatMessageToAll(COLOR_GREEN, "{00FF00}A(z) {FFFF00}%s{00FF00} klán megnyerte a háborút a(z) {FFFF00}%s{00FF00} klán ellen!", GetGVarStringEx("klanname2"), GetGVarStringEx("klanname1"));
                    SetGVarInt("klanhaboru", 0);
					SetGVarInt("klan1kills", 0);
					SetGVarInt("klan2kills", 0);
					format(query, sizeof(query), "UPDATE clans SET Wins = Wins+1, Kassza = Kassza+100000 WHERE ID = '%d' AND ClanName = '%s'", GetClanID(GetGVarStringEx("klanname2")), GetGVarStringEx("klanname2"));
     				mysql_query(query);
					format(query, sizeof(query), "UPDATE clans SET Loss = Loss+1 WHERE ID = '%d' AND ClanName = '%s'", GetClanID(GetGVarStringEx("klanname1")), GetGVarStringEx("klanname1"));
     				mysql_query(query);
     				SendClanMessage(GetGVarStringEx("klanname2"), 0x00ffa2AA, "A klán gazdagabb lett 100.000$-al!");
					for(new i; i < MAX_PLAYERS; i++)
					{
						if(GetPVarInt(i, "haboruban") == 1)
						{
						    SetPVarInt(i, "klan1tag", 0);
						    SetPVarInt(i, "klan2tag", 0);
						    SetPVarInt(i, "haboruban", 0);
							//SpawnPlayer(i);
							SetTeam(i, GetPVarInt(i, "oldteam"));
						}
					}
					KillTimer(clanh2timer);
				}
				else if(GetGVarInt("klan1kills") != 0)
		        {
   					SendFormatMessageToAll(COLOR_GREEN, "{00FF00}A(z) {FFFF00}%s{00FF00} klán megnyerte a háborút a(z) {FFFF00}%s{00FF00} klán ellen!", GetGVarStringEx("klanname2"), GetGVarStringEx("klanname1"));
                    SetGVarInt("klanhaboru", 0);
					SetGVarInt("klan1kills", 0);
					SetGVarInt("klan2kills", 0);
					format(query, sizeof(query), "UPDATE clans SET Wins = Wins+1, Kassza = Kassza+100000 WHERE ID = '%d' AND ClanName = '%s'", GetClanID(GetGVarStringEx("klanname2")), GetGVarStringEx("klanname2"));
     				mysql_query(query);
					format(query, sizeof(query), "UPDATE clans SET Loss = Loss+1 WHERE ID = '%d' AND ClanName = '%s'", GetClanID(GetGVarStringEx("klanname1")), GetGVarStringEx("klanname1"));
     				mysql_query(query);
     				SendClanMessage(GetGVarStringEx("klanname2"), 0x00ffa2AA, "A klán gazdagabb lett 100.000$-al!");
					for(new i; i < MAX_PLAYERS; i++)
					{
						if(GetPVarInt(i, "haboruban") == 1)
						{
						    SetPVarInt(i, "klan1tag", 0);
						    SetPVarInt(i, "klan2tag", 0);
						    SetPVarInt(i, "haboruban", 0);
							//SpawnPlayer(i);
							SetTeam(i, GetPVarInt(i, "oldteam"));
						}
					}
					KillTimer(clanh2timer);
				}
			}
		}
	}
}
//-----------------------házrendszer--------------------------------------------
//35m : -1321.9182, -115.8576, 14.7495//
//30m : -1316.9276, -47.6090, 14.3435//
//27m : -1269.9098, -89.1752, 14.6526//
//26m : -1368.6405, -71.5345, 14.4414//
//25m : -1332.7755, -82.6851, 14.7495//
//24m : -1347.0013, -102.7865, 14.6526//
//23.5m : -1255.1765, -128.7399, 14.6526//
//22m : -1285.6394, -112.5604, 15.1566//
//20m : -1287.2921, -145.1051, 14.8475//
//17m : -1339.5564, -40.6425, 14.8475//
//15m : -1295.6207, -70.5531, 14.7495//
//13m : -1323.8209, -149.0414, 14.8475//
//10m : -1349.1819, -129.0263, 14.3435//

CMD:createhouse(playerid, params[])
{
	new ar, interior;
	new Float:px, Float:py, Float:pz;
 	if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdminEx(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy Fõadminisztrátor!");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Autóban nem használhatod ezt a parancsot!");
	if(sscanf(params, "iii", ar, interior)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /createhouse [Ár] [1(10m), 2(13m), 3(15m), 4(17m), 5(20m), 6(16m), 7(23.5m), 8(22m), 9(25m), 10(24m)"), SendClientMessage(playerid, COLOR_GREY, "11(27m), 12(30m), 13(35m), 14(50m)");
	if(1 > interior || interior > 100) return SendClientMessage(playerid, COLOR_GREY, "HIBA: Az interiorID-nek 1 és 10 közt kell lennie!");
	GetPlayerPos(playerid, px, py, pz);
    for(new i = 1; i < 500; i++)
    {
		format(query, sizeof(query), "SELECT * FROM houses WHERE VW = %d", i);
  		mysql_query(query);
		mysql_store_result();
		if(mysql_num_rows() == 0)
		{
			for(new o = 1; o < MAX_HOUSES; o++)
			{
			    format(query, sizeof(query), "SELECT * FROM houses WHERE ID = %d", o);
			    mysql_query(query);
			    mysql_store_result();
			    if(mysql_num_rows() == 0)
			    {
				    if(interior == 1) format(query, sizeof(query), "INSERT INTO houses (ID, Tulaj, Tarstulaj, HouseName, Ar, Locked, Interior, VW, X, Y, Z, IntX, IntY, IntZ) VALUES (%d, 'ELADO', 'Nincs', 'ELADO', %d, 0, %d, %d, %0.2f, %0.2f, %0.2f, -1349.1819, -129.0263, 14.3435)", o, ar, 1, i, px, py, pz), mysql_query(query);//
				    else if(interior == 2) format(query, sizeof(query), "INSERT INTO houses (ID, Tulaj, Tarstulaj, HouseName, Ar, Locked, Interior, VW, X, Y, Z, IntX, IntY, IntZ) VALUES (%d, 'ELADO', 'Nincs', 'ELADO', %d, 0, %d, %d, %0.2f, %0.2f, %0.2f, -1323.8209, -149.0414, 14.8475)", o, ar, 1, i, px, py, pz), mysql_query(query);//
					else if(interior == 3) format(query, sizeof(query), "INSERT INTO houses (ID, Tulaj, Tarstulaj, HouseName, Ar, Locked, Interior, VW, X, Y, Z, IntX, IntY, IntZ) VALUES (%d, 'ELADO', 'Nincs', 'ELADO', %d, 0, %d, %d, %0.2f, %0.2f, %0.2f, -1295.6207, -70.5531, 14.7495)", o, ar, 1, i, px, py, pz), mysql_query(query);//
					else if(interior == 4) format(query, sizeof(query), "INSERT INTO houses (ID, Tulaj, Tarstulaj, HouseName, Ar, Locked, Interior, VW, X, Y, Z, IntX, IntY, IntZ) VALUES (%d, 'ELADO', 'Nincs', 'ELADO', %d, 0, %d, %d, %0.2f, %0.2f, %0.2f, -1339.5564, -40.6425, 14.8475)", o, ar, 1, i, px, py, pz), mysql_query(query);//
					else if(interior == 5) format(query, sizeof(query), "INSERT INTO houses (ID, Tulaj, Tarstulaj, HouseName, Ar, Locked, Interior, VW, X, Y, Z, IntX, IntY, IntZ) VALUES (%d, 'ELADO', 'Nincs', 'ELADO', %d, 0, %d, %d, %0.2f, %0.2f, %0.2f, -1287.2921, -145.1051, 14.8475)", o, ar, 1, i, px, py, pz), mysql_query(query);//
					else if(interior == 6) format(query, sizeof(query), "INSERT INTO houses (ID, Tulaj, Tarstulaj, HouseName, Ar, Locked, Interior, VW, X, Y, Z, IntX, IntY, IntZ) VALUES (%d, 'ELADO', 'Nincs', 'ELADO', %d, 0, %d, %d, %0.2f, %0.2f, %0.2f, -1285.6394, -112.5604, 15.1566)", o, ar, 1, i, px, py, pz), mysql_query(query);//
					else if(interior == 7) format(query, sizeof(query), "INSERT INTO houses (ID, Tulaj, Tarstulaj, HouseName, Ar, Locked, Interior, VW, X, Y, Z, IntX, IntY, IntZ) VALUES (%d, 'ELADO', 'Nincs', 'ELADO', %d, 0, %d, %d, %0.2f, %0.2f, %0.2f, -1255.1765, -128.7399, 14.6526)", o, ar, 1, i, px, py, pz), mysql_query(query);//
					else if(interior == 8) format(query, sizeof(query), "INSERT INTO houses (ID, Tulaj, Tarstulaj, HouseName, Ar, Locked, Interior, VW, X, Y, Z, IntX, IntY, IntZ) VALUES (%d, 'ELADO', 'Nincs', 'ELADO', %d, 0, %d, %d, %0.2f, %0.2f, %0.2f, -1347.0013, -102.7865, 14.6526)", o, ar, 1, i, px, py, pz), mysql_query(query);//
					else if(interior == 9) format(query, sizeof(query), "INSERT INTO houses (ID, Tulaj, Tarstulaj, HouseName, Ar, Locked, Interior, VW, X, Y, Z, IntX, IntY, IntZ) VALUES (%d, 'ELADO', 'Nincs', 'ELADO', %d, 0, %d, %d, %0.2f, %0.2f, %0.2f, -1332.7755, -82.6851, 14.7495)", o, ar, 1, i, px, py, pz), mysql_query(query);//
					else if(interior == 10) format(query, sizeof(query), "INSERT INTO houses (ID, Tulaj, Tarstulaj, HouseName, Ar, Locked, Interior, VW, X, Y, Z, IntX, IntY, IntZ) VALUES (%d, 'ELADO', 'Nincs', 'ELADO', %d, 0, %d, %d, %0.2f, %0.2f, %0.2f, -1368.6405, -71.5345, 14.4414)", o, ar, 1, i, px, py, pz), mysql_query(query);//
					else if(interior == 11) format(query, sizeof(query), "INSERT INTO houses (ID, Tulaj, Tarstulaj, HouseName, Ar, Locked, Interior, VW, X, Y, Z, IntX, IntY, IntZ) VALUES (%d, 'ELADO', 'Nincs', 'ELADO', %d, 0, %d, %d, %0.2f, %0.2f, %0.2f, -1269.9098, -89.1752, 14.6526)", o, ar, 1, i, px, py, pz), mysql_query(query);//
					else if(interior == 12) format(query, sizeof(query), "INSERT INTO houses (ID, Tulaj, Tarstulaj, HouseName, Ar, Locked, Interior, VW, X, Y, Z, IntX, IntY, IntZ) VALUES (%d, 'ELADO', 'Nincs', 'ELADO', %d, 0, %d, %d, %0.2f, %0.2f, %0.2f, -1316.9276, -47.6090, 14.3435)", o, ar, 1, i, px, py, pz), mysql_query(query);//
					else if(interior == 13) format(query, sizeof(query), "INSERT INTO houses (ID, Tulaj, Tarstulaj, HouseName, Ar, Locked, Interior, VW, X, Y, Z, IntX, IntY, IntZ) VALUES (%d, 'ELADO', 'Nincs', 'ELADO', %d, 0, %d, %d, %0.2f, %0.2f, %0.2f, -1321.9182, -115.8576, 14.7495)", o, ar, 1, i, px, py, pz), mysql_query(query);//
					else if(interior == 14) format(query, sizeof(query), "INSERT INTO houses (ID, Tulaj, Tarstulaj, HouseName, Ar, Locked, Interior, VW, X, Y, Z, IntX, IntY, IntZ) VALUES (%d, 'ELADO', 'Nincs', 'ELADO', %d, 0, %d, %d, %0.2f, %0.2f, %0.2f, 1267.6632,-781.3232,1091.9062)", o, ar, 5, i, px, py, pz), mysql_query(query);//madd dog
					house[i] = true;
					SendClientMessage(playerid, COLOR_GREY, "Ház létrehozva!");
					HazFrissites();
					//break;
					return 1;
				}
			}
		}
	}
	return 1;
}

CMD:deletehouse(playerid, params[])
{
	if(!IsPlayerAdmin(playerid)) return 0;
	for(new i; i < MAX_HOUSES; i++)
	{
		format(query, sizeof(query), "SELECT X, Y, Z FROM houses WHERE ID = %d", i);
  		mysql_query(query);
		mysql_store_result();
		if(mysql_num_rows() != 0)
		{
			mysql_fetch_row(linen);
			new Float:tarolo[3];
			sscanf(linen, "p<|>fff", tarolo[0], tarolo[1], tarolo[2]);
			mysql_free_result();
			if(IsPlayerInRangeOfPoint(playerid, 1, tarolo[0], tarolo[1], tarolo[2]))
			{
				format(query, sizeof(query), "DELETE FROM houses WHERE ID = %d", i);
    			mysql_query(query);
				format(query, sizeof(query), "DELETE FROM houseobjects WHERE houseID = %d", i);
    			mysql_query(query);
    			HazFrissites();
				SendClientMessage(playerid, COLOR_GREY, "Ház törölve!");
				return 1;
			}
		}
	}
	return 1;
}

CMD:buyhouse(playerid)
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Autóban nem használhatod ezt a parancsot!");
    if(GetPVarInt(playerid, "Szint") < 3) return SendClientMessage(playerid, COLOR_RED, "Szinthiba: A házvétel 3-as szinttõl válik elérhetõvé.");
	format(query, sizeof(query), "SELECT * FROM houses WHERE Tulaj = '%s'", GetPlayerNameEx(playerid));
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() == 0)
	{
		mysql_query("SELECT ID, Tulaj, Ar, X, Y, Z FROM houses");
		mysql_store_result();
		if(mysql_num_rows() != 0)
		{
			while(mysql_fetch_row(linen))
			{
				new Float:tarolo[3];
				new tarolo2;
				new tarolo3[24];
				new i;
				sscanf(linen, "p<|>is[24]ifff", i, tarolo3, tarolo2, tarolo[0], tarolo[1], tarolo[2]);
				if(IsPlayerInRangeOfPoint(playerid, 1, tarolo[0], tarolo[1], tarolo[2]))
				{
					if(!strcmp(tarolo3, "ELADO"))
					{
						if(GetPlayerMoneyEx(playerid) >= tarolo2)
						{
						    new hstring[128];
							format(hstring, sizeof(hstring), "Sikeresen megvetted ezt a házat %d$-ért!", tarolo2);
							SendClientMessage(playerid, COLOR_GREEN, hstring);
							SendClientMessage(playerid, COLOR_GREEN, "Ha egy ház társtulaja voltál, a társtulajság törölve lett.");
							format(query, sizeof(query), "UPDATE houses SET Tarstulaj = 'Nincs' WHERE Tarstulaj = '%s'", GetPlayerNameEx(playerid));
							mysql_query(query);
							format(query, sizeof(query), "UPDATE houses SET Tulaj = '%s', HouseName = '%s háza' WHERE ID = %d", GetPlayerNameEx(playerid), GetPlayerNameEx(playerid), i);
	   						mysql_query(query);
       						format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('HAZVETEL', '%s', %d, %d, NOW(), 'Házat vett')", GetPlayerNameEx(playerid), tarolo2, i);
							mysql_query(query);
							GivePlayerMoneyEx(playerid, -tarolo2, "Házat vett");
							HazFrissites();
							SetPVarInt(playerid, "Spawnhely", 1);
						    if(GetAchievement(playerid, "elsohaz") == 0)
						    {
								UnlockAchievement(playerid, "", "Elsõ ház megvétele", "Elsõ ház");
								GiveAchievement(playerid, "elsohaz", 1);
								GiveEXP(playerid, ELSOHAZ_EXP);
						    }
							break;
						}
						else SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs pénzed erre a házra!");
					}
					else SendClientMessage(playerid, COLOR_RED, "HIBA: Ez a ház nem eladó!");
				}
			}
            mysql_free_result();
		}
	}
	else SendClientMessage(playerid, COLOR_RED, "HIBA: Neked már van egy házad!");
	return 1;
}

CMD:sellhouse(playerid)
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Autóban nem használhatod ezt a parancsot!");
	format(query, sizeof(query), "SELECT ID, Ar, X, Y, Z FROM houses WHERE Tulaj = '%s'", GetPlayerNameEx(playerid));
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		mysql_fetch_row(linen);
		new Float:tarolo[3];
		new tarolo2;
		new i;
		sscanf(linen, "p<|>iifff", i, tarolo2, tarolo[0], tarolo[1], tarolo[2]);
		mysql_free_result();
		if(IsPlayerInRangeOfPoint(playerid, 1, tarolo[0], tarolo[1], tarolo[2]))
		{
			format(hostring, sizeof(hostring), "Sikeresen eladtad a házadat %d$-ért!", tarolo2/2);
			SendClientMessage(playerid, COLOR_GREEN, hostring);
			format(query, sizeof(query), "UPDATE houses SET Tulaj = 'ELADO', Tarstulaj = 'Nincs', Locked = 0, HouseName = 'ELADO' WHERE Tulaj = '%s'", GetPlayerNameEx(playerid));
   			mysql_query(query);
			format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('HAZELADAS', '%s', %d, %d, NOW(), 'Házat eladott')", GetPlayerNameEx(playerid), tarolo2/2, i);
			mysql_query(query);
			GivePlayerMoneyEx(playerid, tarolo2/2, "Házat adott el");
			HazFrissites();
			if(GetPVarInt(playerid, "Spawnhely") == 1)
			{
				SetPVarInt(playerid, "Spawnhely", 0);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy a házadnál!");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_RED, "HIBA: Neked nincsen házad!");
	}
	return 1;
}

CMD:creategarage(playerid, params[])
{
	new size, ar;
	new Float:px, Float:py, Float:pz;
	if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdminEx(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy Fõadminisztrátor!");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Autóban nem használhatod ezt a parancsot!");
	if(sscanf(params, "ii", size, ar)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /creategarage [size[1 - 1m, 2 - 5m]] [ár]");
	if(1 > size || size > 2) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A méret csak 1 vagy 2 lehet!");
	GetPlayerPos(playerid, px, py, pz);
	for(new i = 2; i < MAX_GARAGES; i++)
	{
	    format(query, sizeof(query), "SELECT * FROM garages WHERE VW = %d", i);
	    mysql_query(query);
	    mysql_store_result();
	    if(mysql_num_rows() == 0)
	    {
	        format(query, sizeof(query), "INSERT INTO garages (ID, Tulaj, ar, size, outX, outY, outZ, VW) VALUES (0, 'ELADO', %d, %d, %0.2f, %0.2f, %0.2f, %d)", ar, size, px, py, pz, i);
		 	mysql_query(query);
			format(gstring, sizeof(gstring), "Garázs létrehozva! A kiparkolási koordinátákat is add hozzá! /addgarageauto %d", i);
			SendClientMessage(playerid, COLOR_GREEN, gstring);
	        break;
	    }
	}
	GarageUpdate();
	return 1;
}

CMD:addgarageauto(playerid, params[])
{
	new vw;
	new Float:px, Float:py, Float:pz, Float:pa;
	if(!IsPlayerAdmin(playerid)) return 0;
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Autóban kell ülnöd!");
	if(sscanf(params, "i", vw)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /addgarageauto [VW]");
	GetVehiclePos(GetPlayerVehicleID(playerid), px, py, pz);
	GetVehicleZAngle(GetPlayerVehicleID(playerid), pa);
	format(query, sizeof(query), "UPDATE garages SET autoX = '%0.2f', autoY = '%0.2f', autoZ = '%0.2f', autoA = '%0.2f' WHERE VW = '%d'", px, py, pz, pa, vw);
 	mysql_query(query);
	format(gstring, sizeof(gstring), "Sikeresen hozzáaadtad a(z) %d ID-jû garázshoz a kiparkolási koordinátákat!", vw);
	SendClientMessage(playerid, COLOR_GREEN, gstring);
	return 1;
}

CMD:deletegarage(playerid, params[])
{
	new vw;
	if(!IsPlayerAdmin(playerid)) return 0;
	if(sscanf(params, "i", vw)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /deletegarage [VW]");
	format(query, sizeof(query), "DELETE FROM garages WHERE VW = '%d'", vw);
 	mysql_query(query);
	SendClientMessage(playerid, COLOR_GREY, "Garázs törölve!");
	GarageUpdate();
	//HazFrissites();
	return 1;
}

CMD:buygarage(playerid)
{
	mysql_query("SELECT ID, Tulaj, ar, OutX, OutY, OutZ FROM garages");
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		while(mysql_fetch_row(linen))
		{
			new Float:tarolo[3];
			new tarolo2;
			new tulaj[24];
			new i;
			sscanf(linen, "p<|>is[24]ifff", i, tulaj, tarolo2, tarolo[0], tarolo[1], tarolo[2]);
			if(IsPlayerInRangeOfPoint(playerid, 3.5, tarolo[0], tarolo[1], tarolo[2]))
			{
			    if(GetPlayerVirtualWorld(playerid) != 0) return 1;
			    if(GetPlayerInterior(playerid) != 0) return 1;
			    if(strcmp("ELADO", tulaj)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ez a garázs nem eladó!");
			    if(GetPlayerMoneyEx(playerid) >= tarolo2)
				{
					format(gstring, sizeof(gstring), "Sikeresen megvetted ezt a garázst %d$-ért!", tarolo2);
					SendClientMessage(playerid, COLOR_GREEN, gstring);
					format(query, sizeof(query), "UPDATE garages SET Tulaj = '%s' WHERE ID = %d", GetPlayerNameEx(playerid), i);
					mysql_query(query);
					format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('GARAZSVETEL', '%s', %d, %d, NOW(), 'Garázst vett')", GetPlayerNameEx(playerid), tarolo2, i);
					mysql_query(query);
					GivePlayerMoneyEx(playerid, -tarolo2, "Garázst vett");
					GarageUpdate();
					break;
				}
				else SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs pénzed erre a garázsra!");
			}
		}
		mysql_free_result();
	}
	return 1;
}

CMD:sellgarage(playerid)
{
	format(query, sizeof(query), "SELECT ID, ar, OutX, OutY, OutZ FROM garages WHERE Tulaj = '%s'", GetPlayerNameEx(playerid));
	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		while(mysql_fetch_row(linen))
		{
			new Float:tarolo[3];
			new tarolo2;
			new i;
			sscanf(linen, "p<|>iifff", i, tarolo2, tarolo[0], tarolo[1], tarolo[2]);
			if(IsPlayerInRangeOfPoint(playerid, 3.5, tarolo[0], tarolo[1], tarolo[2]))
			{
			    if(GetPlayerVirtualWorld(playerid) != 0) return 1;
			    if(GetPlayerInterior(playerid) != 0) return 1;
				format(gstring, sizeof(gstring), "Sikeresen eladtad ezt a garázst %d$-ért!", tarolo2/2);
				SendClientMessage(playerid, COLOR_GREEN, gstring);
				format(query, sizeof(query), "UPDATE garages SET Tulaj = 'ELADO' WHERE ID = %d AND Tulaj = '%s'", i, GetPlayerNameEx(playerid));
				mysql_query(query);
				format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('GARAZSELADAS', '%s', %d, %d, NOW(), 'Garázst vett')", GetPlayerNameEx(playerid), tarolo2/2, i);
				mysql_query(query);
				GivePlayerMoneyEx(playerid, tarolo2/2, "Garázst adott el");
				GarageUpdate();
				break;
			}
		}
		mysql_free_result();
	}
	return 1;
}

CMD:garageupdate(playerid)
{
	GarageUpdate();
	return 1;
}

stock GarageUpdate()
{
	for(new i; i < MAX_GARAGES; i++) Delete3DTextLabel(garagetext[i]), DestroyDynamicPickup(gpickups[i]);
	new main_str[150];
    mysql_query("SELECT ID, VW, Tulaj, ar, size, outX, outY, outZ FROM garages");
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    while(mysql_fetch_row(linen))
	    {
		    new tulaj[24];
		    new ar, size, vw, i;
		    new Float:tarolo4[3];
		    sscanf(linen, "p<|>iis[24]iifff", i, vw, tulaj, ar, size, tarolo4[0], tarolo4[1], tarolo4[2]);
			if(!strcmp("ELADO", tulaj))
			{
				if(size == 1) format(main_str, sizeof(main_str), #HLIME#"Garázs\nID: %d\nTulaj: ELADÓ\n"#HYELLOW#"Ár: %s$"#HBLUE#"\nMéret: Kicsi\nMegvétel: /buygarage", vw, convertFormattedNumber(ar, "."));
				if(size == 2) format(main_str, sizeof(main_str), #HLIME#"Garázs\nID: %d\nTulaj: ELADÓ\n"#HYELLOW#"Ár: %s$"#HBLUE#"\nMéret: Nagy\nMegvétel: /buygarage", vw, convertFormattedNumber(ar, "."));
			}
			else if(strcmp("ELADO", tulaj))
			{
				if(size == 1) format(main_str, sizeof(main_str), #HLIME#"Garázs\nID: %d\nTulaj: %s\nMéret: Kicsi\nBelépés: Y", vw, tulaj);
				if(size == 2) format(main_str, sizeof(main_str), #HLIME#"Garázs\nID: %d\nTulaj: %s\nMéret: Nagy\nBelépés: Y", vw, tulaj);
			}
			gpickups[i] = CreateDynamicPickup(19132, 1, tarolo4[0], tarolo4[1], tarolo4[2]);
			garagetext[i] = Create3DTextLabel(main_str, COLOR_BLUE, tarolo4[0], tarolo4[1], tarolo4[2], 10, 0, 1);
		}
		mysql_free_result();
	}
}

CMD:lockhouse(playerid)
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Autóban nem használhatod ezt a parancsot!");
	format(query, sizeof(query), "SELECT X, Y, Z, IntX, IntY, IntZ FROM houses WHERE Tulaj = '%s' OR Tarstulaj = '%s'", GetPlayerNameEx(playerid), GetPlayerNameEx(playerid));
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    mysql_fetch_row(linen);
		new Float:position[3];
		new Float:intposition[3];
		sscanf(linen, "p<|>ffffff", position[0], position[1], position[2], intposition[0], intposition[1], intposition[2]);
		mysql_free_result();
		if(IsPlayerInRangeOfPoint(playerid, 2, position[0], position[1], position[2]) || IsPlayerInRangeOfPoint(playerid, 2, intposition[0], intposition[1], intposition[2]))
		{
			format(query, sizeof(query), "UPDATE houses SET Locked = '1' WHERE Tulaj = '%s' OR Tarstulaj = '%s'", GetPlayerNameEx(playerid), GetPlayerNameEx(playerid));
   			mysql_query(query);
			SendClientMessage(playerid, COLOR_GREEN, "Bezártad a házadat!");
		}
		else SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy a házad ajtajánál!");
	}
	else SendClientMessage(playerid, COLOR_RED, "HIBA: Neked nincsen házad!");
	return 1;
}

CMD:unlockhouse(playerid)
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Autóban nem használhatod ezt a parancsot!");
	format(query, sizeof(query), "SELECT X, Y, Z, IntX, IntY, IntZ FROM houses WHERE Tulaj = '%s' OR Tarstulaj = '%s'", GetPlayerNameEx(playerid), GetPlayerNameEx(playerid));
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    mysql_fetch_row(linen);
		new Float:position[3];
		new Float:intposition[3];
		sscanf(linen, "p<|>ffffff", position[0], position[1], position[2], intposition[0], intposition[1], intposition[2]);
		mysql_free_result();
		if(IsPlayerInRangeOfPoint(playerid, 2, position[0], position[1], position[2]) || IsPlayerInRangeOfPoint(playerid, 2, intposition[0], intposition[1], intposition[2]))
		{
			format(query, sizeof(query), "UPDATE houses SET Locked = '0' WHERE Tulaj = '%s' OR Tarstulaj = '%s'", GetPlayerNameEx(playerid), GetPlayerNameEx(playerid));
   			mysql_query(query);
			SendClientMessage(playerid, COLOR_GREEN, "Kinyitottad a házadat!");
		}
		else SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy a házad ajtajánál!");
	}
	else SendClientMessage(playerid, COLOR_RED, "HIBA: Neked nincsen házad!");
	return 1;
}

CMD:housemenu(playerid)
{
	if(GetPVarInt(playerid, "hazban") == 0) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy házban!");
	format(query, sizeof(query), "SELECT * FROM houses WHERE (Tulaj = '%s' OR Tarstulaj = '%s') AND ID = %d", GetPlayerNameEx(playerid), GetPlayerNameEx(playerid), GetPVarInt(playerid, "hazban"));
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    if(GetPVarInt(playerid, "oszerkeszt") == 1 || GetPVarInt(playerid, "mostvett") == 1) return SendClientMessage(playerid, COLOR_RED, "HIBA: Miközben tárgyat mozgatsz nem tudod ezt megnyitni.");
        SetPVarString(playerid, "oneve", "");
		SetPVarInt(playerid, "mostvett", 0);
		SetPVarInt(playerid, "oszerkeszt", 0);
		SetPVarInt(playerid, "oar", 0);
		SetPVarInt(playerid, "oslot", 0);
		SetPVarString(playerid, "objectnev","");
		SetPVarInt(playerid, "objectid", 0);
		SetPVarInt(playerid, "objectar", 0);
	    ShowPlayerDialog(playerid, HOUSEMENU_DIALOG, DIALOG_STYLE_LIST, "Házmenü", "Ház rendezése\nHáz kinyitása\nHáz bezárása\nHáz átnevezése", "Kiválaszt", "Kilép");
	}
	else SendClientMessage(playerid, COLOR_RED, "HIBA: Ez nem a te házad!");
	return 1;
}

CMD:tarstulaj(playerid, params[])
{
	if(GetPVarInt(playerid, "Logged") == 0) return 1;
	new tars;
	format(query, sizeof(query), "SELECT * FROM houses WHERE Tulaj = '%s'", GetPlayerNameEx(playerid));
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		if(sscanf(params, "i", tars)) return SendClientMessage(playerid, COLOR_GREEN, "Használat: /tarstulaj [ID]");
		else if(!IsPlayerConnected(tars)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Rossz játékosID!");
		else if(tars == playerid) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ezt a parancsot nem használhatod magadon!");
		format(hostring, sizeof(hostring), "%s társtulajjá tett a házában!", GetPlayerNameEx(playerid));
		SendClientMessage(tars, COLOR_YELLOW, hostring);
		format(hostring, sizeof(hostring), "%s-t társtulajjá tetted a házadban!", GetPlayerNameEx(tars));
		SendClientMessage(playerid, COLOR_YELLOW, hostring);
		format(query, sizeof(query), "UPDATE houses SET Tarstulaj = '%s' WHERE Tulaj = '%s'", GetPlayerNameEx(tars), GetPlayerNameEx(playerid));
  		mysql_query(query);
		HazFrissites();
	}
	else SendClientMessage(playerid, COLOR_RED, "HIBA: Neked nincsen házad!");
	return 1;
}

CMD:tarstulajelvesz(playerid, params[])
{
	if(GetPVarInt(playerid, "Logged") == 0) return 1;
	new tars, name1[24];
	format(query, sizeof(query), "SELECT * FROM houses WHERE Tulaj = '%s'", GetPlayerNameEx(playerid));
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		if(sscanf(params, "i", tars)) return SendClientMessage(playerid, COLOR_GREEN, "Használat: /tarstulaj [ID]");
		else if(!IsPlayerConnected(tars)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Rossz játékosID!");
		else if(tars == playerid) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ezt a parancsot nem használhatod magadon!");
		GetPlayerName(tars, name1, sizeof(name1));
		format(query, sizeof(query), "SELECT * FROM houses WHERE Tulaj = '%s' AND Tarstulaj = '%s'", GetPlayerNameEx(playerid), GetPlayerNameEx(tars));
  		mysql_query(query);
		mysql_store_result();
		if(mysql_num_rows() != 0)
		{
			GetPlayerName(tars, name1, sizeof(name1));
			format(hostring, sizeof(hostring), "%s elvette a társtulajodat!", GetPlayerNameEx(playerid));
			SendClientMessage(tars, COLOR_YELLOW, hostring);
			format(hostring, sizeof(hostring), "Elvetted %s társtulaját!", GetPlayerNameEx(tars));
			SendClientMessage(playerid, COLOR_YELLOW, hostring);
			mysql_free_result();
			format(query, sizeof(query), "UPDATE houses SET Tarstulaj = 'Nincs' WHERE Tulaj = '%s'", GetPlayerNameEx(playerid));
   			mysql_query(query);
			HazFrissites();
		}
		else SendClientMessage(playerid, COLOR_RED, "HIBA: Õ nem a házad társtulaja!");
	}
	else SendClientMessage(playerid, COLOR_RED, "HIBA: Neked nincsen házad!");
	return 1;
}

CMD:tarstulajkilep(playerid)
{
	format(query, sizeof(query), "SELECT * FROM houses WHERE Tarstulaj = '%s'", GetPlayerNameEx(playerid));
	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    mysql_free_result();
		format(query, sizeof(query), "UPDATE houses SET Tarstulaj = 'Nincs' WHERE Tarstulaj = '%s'", GetPlayerNameEx(playerid));
		mysql_query(query);
	    SendClientMessage(playerid, COLOR_GREEN, "Társtulaj elvéve.");
	}
	else SendClientMessage(playerid, COLOR_RED, "Nem vagy egy ház társtulaja sem.");
	return 1;
}

CMD:hazad(playerid, params[])
{
	if(GetPVarInt(playerid, "Logged") == 0) return 1;
	new tars;
	format(query, sizeof(query), "SELECT * FROM houses WHERE Tulaj = '%s'", GetPlayerNameEx(playerid));
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		if(sscanf(params, "i", tars)) return SendClientMessage(playerid, COLOR_GREEN, "Használat: /hazad [ID]");
		else if(!IsPlayerConnected(tars)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Rossz játékosID!");
		else if(tars == playerid) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ezt a parancsot nem használhatod magadon!");
		format(query, sizeof(query), "SELECT * FROM houses WHERE Tulaj = '%s'", GetPlayerNameEx(tars));
  		mysql_query(query);
		mysql_store_result();
		if(mysql_num_rows() != 0) return SendClientMessage(playerid, COLOR_RED, "HIBA: A játékosnak már van háza!"), mysql_free_result();
		format(hostring, sizeof(hostring), "%s odaadta neked a házát!", GetPlayerNameEx(playerid));
		SendClientMessage(tars, COLOR_YELLOW, hostring);
		format(hostring, sizeof(hostring), "Odaadtad %s-nek a házadat!", GetPlayerNameEx(tars));
		SendClientMessage(playerid, COLOR_YELLOW, hostring);
		format(query, sizeof(query), "UPDATE houses SET Tulaj = '%s' WHERE Tulaj = '%s'", GetPlayerNameEx(tars), GetPlayerNameEx(playerid));
  		mysql_query(query);
		HazFrissites();
	}
	else SendClientMessage(playerid, COLOR_RED, "HIBA: Neked nincsen házad!");
	return 1;
}

/*CMD:berendez(playerid)
{
    if(GetPVarInt(playerid, "hazban") == 0) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy házban!");
	format(query, sizeof(query), "SELECT * FROM houses WHERE ID = %d AND Tulaj = '%s'", GetPVarInt(playerid, "hazban"), GetPlayerNameEx(playerid));
 mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() == 0) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ez nem a te házad!"), mysql_free_result();
	if(GetPVarInt(playerid, "oszerkeszt") == 1 || GetPVarInt(playerid, "mostvett") == 1) return SendClientMessage(playerid, COLOR_RED, "HIBA: Elõször a mostani tárgyakkal csinálj valamit.");
	ShowPlayerDialog(playerid, HAZBERENDEZES_DIALOG, DIALOG_STYLE_LIST, "Ház berendezés", "Új tárgy vásárlása\nMeglévõ tárgyak", "Kiválaszt", "Kilép");
    szam[playerid] = 0;
	return 1;
}*/

CMD:hazfrissites(playerid)
{
	HazFrissites();
	return 1;
}

CMD:butorfrissites(playerid)
{
	for(new i; i < MAX_HOUSES; i++)
	{
	    for(new x; x < MAX_HSLOTS; x++)
		{
		    DestroyDynamicObject(hobject[i][x]);
		}
	}
    /*for(new i; i < MAX_HOUSES; i++)
	{
	    for(new x; x < MAX_HSLOTS; x++)
	    {
		    format(query, sizeof(query), "SELECT VW, objectID, X, Y, Z, rX, rY, rZ FROM houseobjects WHERE houseID = %d AND slot = %d", i, x);
      		mysql_query(query);
		    mysql_store_result();
			if(mysql_num_rows() != 0)
			{
			    mysql_fetch_row(linen);
			    new tarolo[2];
			    new Float:tarolo2[6];
			    sscanf(linen, "p<|>iiffffff", tarolo[0], tarolo[1], tarolo2[0], tarolo2[1], tarolo2[2], tarolo2[3], tarolo2[4], tarolo2[5]);
			    mysql_free_result();
			    hobject[i][x] = CreateDynamicObject(tarolo[1], tarolo2[0], tarolo2[1], tarolo2[2], tarolo2[3], tarolo2[4], tarolo2[5], tarolo[0]);
			}
		}
	}*/
	mysql_query("SELECT VW, objectID, X, Y, Z, rX, rY, rZ, HouseID, slot FROM houseobjects");
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    while(mysql_fetch_row(linen))
	    {
	        new tarolo[2];
		    new Float:tarolo2[6];
		    new i, x;
		    sscanf(linen, "p<|>iiffffffii", tarolo[0], tarolo[1], tarolo2[0], tarolo2[1], tarolo2[2], tarolo2[3], tarolo2[4], tarolo2[5], i, x);
		    hobject[i][x] = CreateDynamicObject(tarolo[1], tarolo2[0], tarolo2[1], tarolo2[2], tarolo2[3], tarolo2[4], tarolo2[5], tarolo[0]);
	    }
 	}
	SendClientMessage(playerid, COLOR_GREY, "kész...");
	return 1;
}

stock HazFrissites()
{
    for(new i; i < MAX_HOUSES; i++)
	{
	    DestroyDynamicMapIcon(icons[i]);
		Delete3DTextLabel(labels[i]);
		DestroyDynamicPickup(pickups[i]);
	}
    new main_str[200];
    mysql_query("SELECT * FROM houses");
    mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		while(mysql_fetch_row(linen))
		{
			new tarolo[24];
			new i;
			new nevtarolo[24];
			new tarolo2[4];
			new Float:tarolo3[3];
			new haznev[64];
			sscanf(linen, "p<|>ds[24]s[24]s[64]ddddfff", i, tarolo, nevtarolo, haznev, tarolo2[0], tarolo2[1], tarolo2[2], tarolo2[3], tarolo3[0], tarolo3[1], tarolo3[2]);
			if(!strcmp("ELADO", tarolo))
			{
			    pickups[i] = CreateDynamicPickup(1273, 1, tarolo3[0], tarolo3[1], tarolo3[2]);
				icons[i] = CreateDynamicMapIcon(tarolo3[0], tarolo3[1], tarolo3[2], 31, 0);
				format(main_str, sizeof(main_str), #HLIME#"Tulaj: ELADÓ\n"#HLIME#"Házszám: %d\n"#HYELLOW#"Ár: %s\n"#HBLUE#"Megvétel: /buyhouse", i, convertFormattedNumber(tarolo2[0], "."));
				labels[i] = Create3DTextLabel(main_str, COLOR_BLUE, tarolo3[0], tarolo3[1], tarolo3[2], 10, 0, 1);
			}
			else if(strcmp("ELADO", tarolo) && strcmp("Nincs", nevtarolo))
			{
			    pickups[i] = CreateDynamicPickup(19522, 1, tarolo3[0], tarolo3[1], tarolo3[2]);
				icons[i] = CreateDynamicMapIcon(tarolo3[0], tarolo3[1], tarolo3[2], 32, 0);
			    format(main_str, sizeof(main_str), #HLIME#"%s\n"#HLIME#"Házszám: %d\nTulaj: %s\n"#HYELLOW#"Társtulaj: %s\n"#HBLUE#"Belépés: Y gomb", haznev, i, tarolo, nevtarolo);
				labels[i] = Create3DTextLabel(main_str, COLOR_BLUE, tarolo3[0], tarolo3[1], tarolo3[2], 10, 0, 1);
			}
			else if(!strcmp("Nincs", nevtarolo))
			{
			    if(strcmp("ELADO", tarolo))
			    {
			        pickups[i] = CreateDynamicPickup(19522, 1, tarolo3[0], tarolo3[1], tarolo3[2]);
	   				icons[i] = CreateDynamicMapIcon(tarolo3[0], tarolo3[1], tarolo3[2], 32, 0);
				    format(main_str, sizeof(main_str), #HLIME#"%s\n"#HLIME#"Házszám: %d\nTulaj: %s\n"#HBLUE#"Belépés: Y gomb", haznev, i, tarolo);
					labels[i] = Create3DTextLabel(main_str, COLOR_BLUE, tarolo3[0], tarolo3[1], tarolo3[2], 10, 0, 1);
				}
			}
		}
		mysql_free_result();
	}
	return 1;
}

/*stock HazFrissites2()
{
	for(new i; i < MAX_HOUSES; i++)
	{
	    DestroyDynamicMapIcon(icons[i]);
		DestroyDynamicPickup(pickups[i]);
	    format(query, sizeof(query), "SELECT * FROM houses WHERE ID = '%d'", i);
     	mysql_query(query);
	    mysql_store_result();
		if(mysql_num_rows() != 0)
		{
			mysql_fetch_row(linen);
			new tarolo[24];
			new nevtarolo[24];
			new tarolo2[4];
			new Float:tarolo3[3];
			new haznev[64];
			new main_str[128];
			sscanf(linen, "p<|>{d}s[24]s[24]s[64]ddddfff", tarolo, nevtarolo, haznev, tarolo2[0], tarolo2[1], tarolo2[2], tarolo2[3], tarolo3[0], tarolo3[1], tarolo3[2]);
			if(!strcmp("ELADO", tarolo))
			{
				pickups[i] = CreateDynamicPickup(1273, 1, tarolo3[0], tarolo3[1], tarolo3[2]);
				icons[i] = CreateDynamicMapIcon(tarolo3[0], tarolo3[1], tarolo3[2], 31, 0);
				format(main_str, sizeof(main_str), #HLIME#"Tulaj: ELADÓ\n"#HYELLOW#"Ár: %s\n"#HBLUE#"Megvétel: /buyhouse", convertFormattedNumber(tarolo2[0], "."));
				Update3DTextLabelText(labels[i], COLOR_BLUE, main_str);
			}
			if(strcmp("ELADO", tarolo) && strcmp("Nincs", nevtarolo))
			{
				pickups[i] = CreateDynamicPickup(1272, 1, tarolo3[0], tarolo3[1], tarolo3[2]);
   				icons[i] = CreateDynamicMapIcon(tarolo3[0], tarolo3[1], tarolo3[2], 32, 0);
			    format(main_str, sizeof(main_str), #HLIME#"%s\n"#HLIME#"Házszám: %d\nTulaj: %s\n"#HYELLOW#"Társtulaj: %s\n"#HBLUE#"Belépés: Y gomb", haznev, i, tarolo, nevtarolo);
				Update3DTextLabelText(labels[i], COLOR_BLUE, main_str);
			}
			if(!strcmp("Nincs", nevtarolo))
			{
			    if(strcmp("ELADO", tarolo))
			    {
			   		pickups[i] = CreateDynamicPickup(1272, 1, tarolo3[0], tarolo3[1], tarolo3[2]);
	   				icons[i] = CreateDynamicMapIcon(tarolo3[0], tarolo3[1], tarolo3[2], 32, 0);
				    format(main_str, sizeof(main_str), #HLIME#"%s\n"#HLIME#"Házszám: %d\nTulaj: %s\n"#HBLUE#"Belépés: Y gomb", haznev, i, tarolo);
					Update3DTextLabelText(labels[i], COLOR_BLUE, main_str);
				}
			}
		}
	}
	return 1;
}*/

//-----------------------Bizniszrendszer----------------------------------------

CMD:createbiz(playerid, params[])
{
	new busname[64], ar, termeles;
	new Float:px, Float:py, Float:pz;
	//if(!IsPlayerAdmin(playerid)) return 0;
	if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdminEx(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy Fõadminisztrátor!");
	if(sscanf(params, "s[64]ii", busname, ar, termeles)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /createbiz [biznisznév] [Ár] [Termelés]");
	GetPlayerPos(playerid, px, py, pz);
	format(query, sizeof(query), "INSERT INTO business (ID, Propertyname, Tulaj, Ar, Termeles, X, Y, Z) VALUES (0, '%s', 'ELADO', %d, %d, %0.2f, %0.2f, %0.2f)", busname, ar, termeles, px, py, pz);
 	mysql_query(query);
	SendClientMessage(playerid, COLOR_GREY, "Biznisz létrehozása sikeres!");
	BizFrissites();
	return 1;
}

CMD:buybiz(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Autóban nem használhatod ezt a parancsot!");
    if(GetPVarInt(playerid, "Szint") < 6) return SendClientMessage(playerid, COLOR_RED, "Szinthiba: A bizniszvásárlás 6-os szinttõl válik elérhetõvé.");
	format(query, sizeof(query), "SELECT * FROM business WHERE Tulaj = '%s'", GetPlayerNameEx(playerid));
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() == 0)
	{
		mysql_query("SELECT ID, Propertyname, Tulaj, Ar, X, Y, Z FROM business");
		mysql_store_result();
		if(mysql_num_rows() != 0)
		{
			while(mysql_fetch_row(linen))
			{
				new tarolo[64];
				new tarolo2[24];
				new tarolo3[2];
				new Float:tarolo4[3];
				new i;
				sscanf(linen, "p<|>is[24]s[24]dfff", i, tarolo, tarolo2, tarolo3[0], tarolo4[0], tarolo4[1], tarolo4[2]);
				if(IsPlayerInRangeOfPoint(playerid, 2, tarolo4[0], tarolo4[1], tarolo4[2]))
				{
					if(!strcmp(tarolo2, "ELADO"))
					{
						if(GetPlayerMoneyEx(playerid) >= tarolo3[0])
						{
							format(bstring, sizeof(bstring), "Sikeresen megvetted a(z) '%s' a bizniszt %d$-ért!", tarolo, tarolo3[0]);
							SendClientMessage(playerid, COLOR_GREEN, bstring);
							format(query, sizeof(query), "UPDATE business SET Tulaj = '%s' WHERE ID = '%d'", GetPlayerNameEx(playerid), i);
	   						mysql_query(query);
	   						format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('BIZNISZVETEL', '%s', %d, %d, NOW(), 'Bizniszt vett')", GetPlayerNameEx(playerid), tarolo3[0], i);
							mysql_query(query);
							PlaySound(playerid, 1185);
							SetTimerEx("MusicEndTimer", 10000, 0, "i", playerid);
							GivePlayerMoneyEx(playerid, -tarolo3[0], "Bizniszt vett");
							BizFrissites();
							if(GetAchievement(playerid, "elsobiz") == 0)
						    {
								UnlockAchievement(playerid, "", "Elsõ biznisz megvétele", "Elsõ biznisz");
								GiveAchievement(playerid, "elsobiz", 1);
								GiveEXP(playerid, ELSOBIZ_EXP);
						    }
							break;
						}
						else SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs pénzed erre a bizniszre!");
					}
					else SendClientMessage(playerid, COLOR_RED, "HIBA: Ez a biznisz nem eladó!");
				}
			}
			mysql_free_result();
		}
	}
	else SendClientMessage(playerid, COLOR_RED, "HIBA: Neked már van egy bizniszed!");
	return 1;
}

CMD:sellbiz(playerid)
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Autóban nem használhatod ezt a parancsot!");
	format(query, sizeof(query), "SELECT Propertyname, Tulaj, X, Y, Z FROM business WHERE Tulaj = '%s'", GetPlayerNameEx(playerid));
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		mysql_fetch_row(linen);
		new tarolo[64];
		new tarolo2[24];
		new Float:tarolo3[3];
		sscanf(linen, "p<|>s[64]s[24]fff", tarolo, tarolo2, tarolo3[0], tarolo3[1], tarolo3[2]);
		mysql_free_result();
		if(IsPlayerInRangeOfPoint(playerid, 2, tarolo3[0], tarolo3[1], tarolo3[2]))
		{
			format(bstring, sizeof(bstring), "Sikeresen eladtad a(z) '%s' bizniszt!", tarolo);
			SendClientMessage(playerid, COLOR_GREEN, bstring);
			format(query, sizeof(query), "UPDATE business SET Tulaj = 'ELADO' WHERE Tulaj = '%s'", GetPlayerNameEx(playerid));
   			mysql_query(query);
   			format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('BIZNISZELADAS', '%s', %d, %d, NOW(), 'Bizniszt eladott')", GetPlayerNameEx(playerid), 0, 0);
			mysql_query(query);
			BizFrissites();
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy a bizniszednél!");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_RED, "HIBA: Neked nincsen bizniszed!");
	}
	return 1;
}

forward BizFrissites();
public BizFrissites()
{

    for(new i; i < MAX_BUSINESS; i++)
	{
	    DestroyDynamicMapIcon(busicons[i]);
		Delete3DTextLabel(buslabels[i]);
		DestroyDynamicArea(bustexts[i]);
		DestroyDynamicPickup(bpickups[i]);
	}
	mysql_query("SELECT * FROM business");
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    while(mysql_fetch_row(linen))
	    {
		    new tarolo[64];
		    new tarolo2[24];
		    new tarolo3[2];
			new Float:tarolo4[3];
			new tarolo5;
			new i;
		    sscanf(linen, "p<|>ds[64]s[24]ddfffd", i, tarolo, tarolo2, tarolo3[0], tarolo3[1], tarolo4[0], tarolo4[1], tarolo4[2], tarolo5);
		    new main_str[128];
		    if(!strcmp(tarolo2, "ELADO"))
		    {
				format(main_str, sizeof(main_str), "Biznisz neve: %s\nTulaj: Eladó\nÁr: %s$\n/buybiz", tarolo, convertFormattedNumber(tarolo3[0], "."));
	            busicons[i] = CreateDynamicMapIcon(tarolo4[0], tarolo4[1], tarolo4[2], 35, 0);
				buslabels[i] = Create3DTextLabel(main_str, COLOR_LIGHTGREEN, tarolo4[0], tarolo4[1], tarolo4[2], 10, 0, 1);
				bustexts[i] = CreateDynamicSphere(tarolo4[0], tarolo4[1], tarolo4[2], 2, 0, 0, -1);
				bpickups[i] = CreateDynamicPickup(19524, 1, tarolo4[0], tarolo4[1], tarolo4[2]);
//				buselado[i] = true;
			}
			else if(strcmp(tarolo2, "ELADO"))
		    {
				format(main_str, sizeof(main_str), "Biznisz neve: %s\nTulaj: %s", tarolo, tarolo2);
	            busicons[i] = CreateDynamicMapIcon(tarolo4[0], tarolo4[1], tarolo4[2], 35, 0);
				buslabels[i] = Create3DTextLabel(main_str, COLOR_LIGHTGREEN, tarolo4[0], tarolo4[1], tarolo4[2], 10, 0, 1);
				bustexts[i] = CreateDynamicSphere(tarolo4[0], tarolo4[1], tarolo4[2], 2, 0, 0, -1);
				bpickups[i] = CreateDynamicPickup(19523, 1, tarolo4[0], tarolo4[1], tarolo4[2]);
//				buselado[i] = false;
			}
		}
		mysql_free_result();
	}
}

/*forward BizFrissites2();
public BizFrissites2()
{
 	mysql_query("SELECT * FROM business");
    mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		while(mysql_fetch_row(linen))
		{
		    new tarolo[64];
		    new tarolo2[24];
		    new tarolo3[2];
			new Float:tarolo4[3];
			new tarolo5;
			new i;
		    sscanf(linen, "p<|>ds[64]s[24]ddfffd", i, tarolo, tarolo2, tarolo3[0], tarolo3[1], tarolo4[0], tarolo4[1], tarolo4[2], tarolo5);
		    new main_str[128];
		    if(!strcmp(tarolo2, "ELADO"))
		    {
				DestroyDynamicMapIcon(busicons[i]);
				busicons[i] = CreateDynamicMapIcon(tarolo4[0], tarolo4[1], tarolo4[2], 35, 0);
				format(main_str, sizeof(main_str), "Biznisz neve: %s\nTulaj: Eladó\nÁr: %s$\n/buybiz", tarolo, convertFormattedNumber(tarolo3[0], "."));
				Update3DTextLabelText(buslabels[i], COLOR_BLUE, main_str);
//				buselado[i] = true;
			}
			else if(strcmp(tarolo2, "ELADO"))
			{
		   		DestroyDynamicMapIcon(busicons[i]);
				busicons[i] = CreateDynamicMapIcon(tarolo4[0], tarolo4[1], tarolo4[2], 35, 0);
			    format(main_str, sizeof(main_str), "Biznisz neve: %s\nTulaj: %s", tarolo, tarolo2);
				Update3DTextLabelText(buslabels[i], COLOR_BLUE, main_str);
//				buselado[i] = false;
			}
		}
		mysql_free_result();
	}
	return 1;
}
*/

/*forward Bizniszfizetes();
public Bizniszfizetes()
{
	for(new i; i < MAX_BUSINESS; i++)
	{
	    if(buselado[i] == false)
	    {
	    	busmoney[i] += busterm[i];
	    	format(query, sizeof(query), "UPDATE business SET Osszeg = %d WHERE ID = %d", busmoney[i], i);
   			mysql_query(query);
		}
	}
}*/

forward szerverresi();
public szerverresi()
{
	for(new i; i < 5; i++)
	{
		SendClientMessageToAll(COLOR_RED, "Szerverrestart");
	}
	SendRconCommand("exit");
}
//-----------------------------------Event System-------------------------------
CMD:createrace(playerid, params[])
{
	if(!IsPlayerAdmin(playerid)) return 0;
	if(sscanf(params, "s[50]i", racename, raceid)) return SendClientMessage(playerid, COLOR_GREEN, "Használat: /createrace [Versenynév] [raceID]");
	format(query, sizeof(query), "SELECT * FROM races WHERE RaceName = '%s'", racename);
	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0) return SendClientMessage(playerid, COLOR_RED, "Ilyen versenynév már létezik."), mysql_free_result();
	format(query, sizeof(query), "SELECT * FROM races WHERE RaceID = %d", raceid);
	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0) return SendClientMessage(playerid, COLOR_RED, "Ilyen versenyID már létezik."), mysql_free_result();
	SendClientMessage(playerid, COLOR_GREEN, "Elkezdted a versenykészítést. /racetake egy CP letételéhez.");
	raceedit = true;
	cpcount = 0;
	return 1;
}

CMD:racetake(playerid, params[])
{
    if(!IsPlayerAdmin(playerid)) return 0;
	if(!raceedit) return SendClientMessage(playerid, COLOR_RED, "Nem vagy versenyszerkesztõben.");
	new rcptype = 0;
	sscanf(params, "I(0)", rcptype);
	if(rcptype != 0) rcptype = 3;
	GetPlayerPos(playerid, rcpx, rcpy, rcpz);
	if(cpcount == 0) GetPlayerPos(playerid, oldrcpx, oldrcpy, oldrcpz);
	else
	{
		format(query, sizeof(query), "INSERT INTO races (ID, RaceID, RCPID, RaceName, CPType, CPX, CPY, CPZ, NCPX, NCPY, NCPZ) VALUES (0, %d, %d, '%s', %d, %0.2f, %0.2f, %0.2f, %0.2f, %0.2f, %0.2f)", raceid, cpcount-1, racename, rcptype, oldrcpx, oldrcpy, oldrcpz, rcpx, rcpy, rcpz);
		mysql_query(query);
		oldrcpx = rcpx;
		oldrcpy = rcpy;
		oldrcpz = rcpz;
	}
	cpcount++;
	SendClientMessage(playerid, COLOR_GREEN, "CP letéve.");
	return 1;
}

CMD:raceend(playerid, params[])
{
    if(!IsPlayerAdmin(playerid)) return 0;
    if(!raceedit) return SendClientMessage(playerid, COLOR_RED, "Nem vagy versenyszerkesztõben.");
    new monwin, expwin, rcptype = 1;
    if(sscanf(params, "ddI(1)", monwin, expwin, rcptype)) return SendClientMessage(playerid, COLOR_GREEN, "Használat: /raceend [Pénznyeremény] [EXPnyeremény] ([légi = 1])");
	if(rcptype != 1) rcptype = 4;
	format(query, sizeof(query), "SELECT ID FROM races WHERE RaceID = %d ORDER BY ID DESC LIMIT 1", raceid);
	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    mysql_fetch_row(linen);
		mysql_free_result();
	    new nraceid;
	    sscanf(linen, "d", nraceid);
		format(query, sizeof(query), "UPDATE races SET Moneywin = %d, EXPwin = %d, CPType = %d WHERE ID = %d", monwin, expwin, rcptype, nraceid);
		mysql_query(query);
	}
	SendClientMessage(playerid, COLOR_GREEN, "Versenykészítés befejezve.");
	raceedit = false;
	return 1;
}

CMD:createstunt(playerid, params[])
{
	if(!IsPlayerAdmin(playerid)) return 0;
	if(sscanf(params, "s[50]ii", racename, raceid, racecarid)) return SendClientMessage(playerid, COLOR_GREEN, "Használat: /createstunt [Stuntnév] [stuntID] [ajánlott jármûID]");
	format(query, sizeof(query), "SELECT * FROM stunts WHERE StuntName = '%s'", racename);
	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0) return SendClientMessage(playerid, COLOR_RED, "Ilyen stuntnév már létezik."), mysql_free_result();
	format(query, sizeof(query), "SELECT * FROM stunts WHERE StuntID = %d", raceid);
	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0) return SendClientMessage(playerid, COLOR_RED, "Ilyen StuntID már létezik."), mysql_free_result();
	SendClientMessage(playerid, COLOR_GREEN, "Elkezdted a stuntkészítést. /stunttake egy CP letételéhez.");
	stuntedit = true;
	cpcount = 0;
	return 1;
}

CMD:stunttake(playerid, params[])
{
    if(!IsPlayerAdmin(playerid)) return 0;
	if(!stuntedit) return SendClientMessage(playerid, COLOR_RED, "Nem vagy stuntszerkesztõben.");
	new rcptype = 0;
	sscanf(params, "I(0)", rcptype);
	if(rcptype != 0) rcptype = 3;
	GetPlayerPos(playerid, rcpx, rcpy, rcpz);
	if(cpcount == 0) GetPlayerPos(playerid, oldrcpx, oldrcpy, oldrcpz);
	else
	{
		format(query, sizeof(query), "INSERT INTO stunts (ID, StuntID, RCPID, StuntName, CPType, CPX, CPY, CPZ, NCPX, NCPY, NCPZ, SugCar) VALUES (0, %d, %d, '%s', %d, %0.2f, %0.2f, %0.2f, %0.2f, %0.2f, %0.2f, %d)", raceid, cpcount-1, racename, rcptype, oldrcpx, oldrcpy, oldrcpz, rcpx, rcpy, rcpz, racecarid);
		mysql_query(query);
		oldrcpx = rcpx;
		oldrcpy = rcpy;
		oldrcpz = rcpz;
	}
	cpcount++;
	SendClientMessage(playerid, COLOR_GREEN, "CP letéve.");
	return 1;
}

CMD:stuntend(playerid, params[])
{
    if(!IsPlayerAdmin(playerid)) return 0;
    if(!stuntedit) return SendClientMessage(playerid, COLOR_RED, "Nem vagy stuntszerkesztõben.");
    new monwin, expwin, rcptype = 1;
    if(sscanf(params, "ddI(1)", monwin, expwin, rcptype)) return SendClientMessage(playerid, COLOR_GREEN, "Használat: /stuntend [Pénznyeremény] [EXPnyeremény] ([légi = 1])");
	if(rcptype != 1) rcptype = 4;
	format(query, sizeof(query), "SELECT ID FROM stunts WHERE StuntID = %d ORDER BY ID DESC LIMIT 1", raceid);
	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    mysql_fetch_row(linen);
		mysql_free_result();
	    new nraceid;
	    sscanf(linen, "d", nraceid);
		format(query, sizeof(query), "UPDATE stunts SET Moneywin = %d, EXPwin = %d, CPType = %d WHERE ID = %d", monwin, expwin, rcptype, nraceid);
		mysql_query(query);
	}
	SendClientMessage(playerid, COLOR_GREEN, "Versenykészítés befejezve.");
	stuntedit = false;
	return 1;
}

CMD:events(playerid)
{
	new dstring[1000];
	if(GetGVarInt("autoevent") == 0) format(dstring, sizeof(dstring), "Race event\nStunt event\nElindulási idõk: %d(Beállítás)\nNevezési díjak: %d(Beállítás)\nAutómatikus eventek: {FF0000}OFF\n{FFFFFF}Ennyi idõközönként indulnak a versenyek: %d(Beállítás)\nEvent elindítása\nJátékos kizárása az eventbõl", GetGVarInt("StartRaceTime"), GetGVarInt("NevezesiDij"), GetGVarInt("autostarttime"));
	if(GetGVarInt("autoevent") == 1) format(dstring, sizeof(dstring), "Race event\nStunt event\nElindulási idõk: %d(Beállítás)\nNevezési díjak: %d(Beállítás)\nAutómatikus eventek: {00FF00}ON\n{FFFFFF}Ennyi idõközönként indulnak a versenyek: %d(Beállítás)\nEvent elindítása\nJátékos kizárása az eventbõl", GetGVarInt("StartRaceTime"), GetGVarInt("NevezesiDij"), GetGVarInt("autostarttime"));
	if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdminEx(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy Fõadminisztrátor!");
	ShowPlayerDialog(playerid, EVENT_DIALOG, DIALOG_STYLE_LIST, "Válassz eventet", dstring, "Kiválaszt", "Kilép");
	return 1;
}

CMD:rekordok(playerid)
{
	format(racefile, sizeof(racefile), "brl/rekordok.ini");
	SendClientMessage(playerid, COLOR_GREEN, "Versenyen elért rekordok:");
	for(new i; i < 30; i++)
	{
	    new rekordminstr[20], rekordsecstr[20], rekordnamestr[24], rekordversenystr[50];
	    format(rekordminstr, sizeof(rekordminstr), "Verseny%dmin", i);
  		format(rekordsecstr, sizeof(rekordsecstr), "Verseny%dsec", i);
  		format(rekordnamestr, sizeof(rekordnamestr), "Verseny%dnev", i);
  		format(rekordversenystr, sizeof(rekordversenystr), "Verseny%dneve", i);
	    if(strlen(dini_Get(racefile, rekordversenystr)) >= 5)
	    {
		    format(racestring, sizeof(racestring), "%s: Név: %s, idõ: %02d:%02d", dini_Get(racefile, rekordversenystr), dini_Get(racefile, rekordnamestr), dini_Int(racefile, rekordminstr), dini_Int(racefile, rekordsecstr));
	        SendClientMessage(playerid, COLOR_GREEN, racestring);
		}
	}
	return 1;
}

CMD:addfakeplayerstunt(playerid)
{
	instunt[MAX_PLAYERS-1] = true;
	return 1;
}

CMD:addfakeplayerrace(playerid)
{
	inrace[MAX_PLAYERS-1] = true;
	return 1;
}

CMD:join(playerid)
{
	if(races >= 1)
	{
	    if(GetPlayerMoneyEx(playerid) < GetGVarInt("NevezesiDij")) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs annyi pénzed, mint amennyi a nevezési díj!");
		if(inrace[playerid] == true) return SendClientMessage(playerid, COLOR_RED, "HIBA: Jelenleg is versenyben vagy!");
		if(relindult == true) return SendClientMessage(playerid, COLOR_RED, "HIBA: A verseny már elindult!");
		SetPlayerRaceCheckpoint(playerid, 0, fracecpX, fracecpY, fracecpZ, nfracecpX, nfracecpY, nfracecpZ, 15);
		format(racestring, sizeof(racestring), "%s csatlakozott a(z) '%s' versenyhez!", GetPlayerNameEx(playerid), fracename);
		SendClientMessageToAll(COLOR_GREEN, racestring);
		SendClientMessage(playerid, COLOR_GREEN, "Csatlakoztál a versenyhez. Kilépés: /leave");
		inrace[playerid] = true;
		readyzett[playerid] = false;
		GivePlayerMoneyEx(playerid, -GetGVarInt("NevezesiDij"));
	}
	else if(stunts >= 1)
	{
	    if(GetPlayerMoneyEx(playerid) < GetGVarInt("NevezesiDij")) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs annyi pénzed, mint amennyi a nevezési díj!");
		if(instunt[playerid] == true) return SendClientMessage(playerid, COLOR_RED, "HIBA: Jelenleg is stuntban vagy!");
		if(selindult == true) return SendClientMessage(playerid, COLOR_RED, "HIBA: A stunt már elindult!");
		SetPlayerRaceCheckpoint(playerid, 0, fracecpX, fracecpY, fracecpZ, nfracecpX, nfracecpY, nfracecpZ, 15);
		format(racestring, sizeof(racestring), "%s csatlakozott a(z) '%s' stunthoz!", GetPlayerNameEx(playerid), fracename);
		SendClientMessageToAll(COLOR_GREEN, racestring);
		SendClientMessage(playerid, COLOR_GREEN, "Csatlakoztál a stunthoz. Kilépés: /leave");
		instunt[playerid] = true;
		readyzett[playerid] = false;
		GivePlayerMoneyEx(playerid, -GetGVarInt("NevezesiDij"));
	}
	else SendClientMessage(playerid, COLOR_RED, "HIBA: Jelenleg nincs semmilyen event!");
	return 1;
}

CMD:leave(playerid)
{
	if(inrace[playerid] == true)
	{
		racecp[playerid] = 0;
		inrace[playerid] = false;
		lastcp[playerid] = false;
  		sec[playerid] = 0;
		minu[playerid] = 0;
		DisablePlayerRaceCheckpoint(playerid);
		format(racestring, sizeof(racestring), "%s kilépett a versenybõl!", GetPlayerNameEx(playerid));
		SendClientMessageToAll(COLOR_GREEN, racestring);
		if(readyzett[playerid] == true) readyzett[playerid] = false;
	}
	else if(instunt[playerid] == true)
	{
		stuntcp[playerid] = 0;
		instunt[playerid] = false;
		lastcp[playerid] = false;
  		sec[playerid] = 0;
		minu[playerid] = 0;
		DisablePlayerRaceCheckpoint(playerid);
		format(racestring, sizeof(racestring), "%s kilépett a stuntból!", GetPlayerNameEx(playerid));
		SendClientMessageToAll(COLOR_GREEN, racestring);
		if(readyzett[playerid] == true) readyzett[playerid] = false;
	}
	else SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy eventen!");
	return 1;
}

CMD:ready(playerid)
{
	if(inrace[playerid] == true)
	{
		new versenyzik;
 		if(readyzett[playerid] == true) return SendClientMessage(playerid, COLOR_RED, "HIBA: Te már egyszer /ready-ztél!");
		if(relindult == true) return SendClientMessage(playerid, COLOR_RED, "HIBA: A verseny már elindult!");
		for(new i; i < MAX_PLAYERS; i++)
		{
		    if(inrace[i] == true)
		    {
		        versenyzik++;
			}
		}
		if(versenyzik == 1) return SendClientMessage(playerid, COLOR_RED, "HIBA: Egyedül nem indulhat a verseny!");
		format(racestring, sizeof(racestring), "%s készenáll a versenyre! Ha te is készenállsz: /ready", GetPlayerNameEx(playerid));
		SendClientMessageToAll(COLOR_GREEN, racestring);
		readyzett[playerid] = true;
	}
	else if(instunt[playerid] == true)
	{
		new versenyzik;
 		if(readyzett[playerid] == true) return SendClientMessage(playerid, COLOR_RED, "HIBA: Te már egyszer /ready-ztél!");
		if(selindult == true) return SendClientMessage(playerid, COLOR_RED, "HIBA: A stunt már elindult!");
		for(new i; i < MAX_PLAYERS; i++)
		{
		    if(instunt[i] == true)
		    {
		        versenyzik++;
			}
		}
		if(versenyzik == 1) return SendClientMessage(playerid, COLOR_RED, "HIBA: Egyedül nem indulhat a stunt!");
		format(racestring, sizeof(racestring), "%s készenáll a stuntra! Ha te is készenállsz: /ready", GetPlayerNameEx(playerid));
		SendClientMessageToAll(COLOR_GREEN, racestring);
		readyzett[playerid] = true;
	}
	else SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy eventen!");
	return 1;
}

forward racestartt();
public racestartt()
{
	racestart--;
	if(racestart == 0)
	{
		for(new x; x < MAX_PLAYERS; x++)
	    {
	        if(inrace[x] == true)
	        {
	    		versenyzok++;
			}
		}
	    if(versenyzok == 1)
		{
			/*SendClientMessageToAll(COLOR_GREEN, "A verseny nem indult el, mert nem volt elég versenyzõ!");
			for(new i; i < MAX_PLAYERS; i++)
			{
			    if(inrace[i] == true)
				{
					inrace[i] = false;
					lastcp[i] = false;
					DisablePlayerRaceCheckpoint(i);
					TogglePlayerControllable(i, 1);
				}
			}
			races = 0;
			versenyzok = 0;
			racestart = GetGVarInt("StartRaceTime");
		    KillTimer(racestart_timer);
		    KillTimer(ready_timer);*/
		    SetGVarInt("racealone", 1);
		}
		else if(versenyzok == 0)
		{
			SendClientMessageToAll(COLOR_GREEN, "A verseny nem indult el, mert nem volt elég versenyzõ!");
			for(new i; i < MAX_PLAYERS; i++)
			{
			    if(inrace[i] == true)
				{
					inrace[i] = false;
					lastcp[i] = false;
					DisablePlayerRaceCheckpoint(i);
					TogglePlayerControllable(i, 1);
				}
			}
			races = 0;
			versenyzok = 0;
			racestart = GetGVarInt("StartRaceTime");
		    KillTimer(racestart_timer);
		    KillTimer(ready_timer);
		}
		else SetGVarInt("racealone", 0);
	}
	for(new i; i < MAX_PLAYERS; i++)
	{
	    if(inrace[i] == true)
	    {
	        if(racestart > 5)
	        {
	            format(racestring, sizeof(racestring), "%d", racestart);
	        	GameTextForPlayer(i, racestring, 1000, 4);
			}
			if(racestart == 5) TogglePlayerControllable(i, 0), GameTextForPlayer(i, "5", 1000, 4), PlayerPlaySound(i, 1056, 0, 0, 0);
			if(racestart == 4) TogglePlayerControllable(i, 0), GameTextForPlayer(i, "4", 1000, 4), PlayerPlaySound(i, 1056, 0, 0, 0);
			if(racestart == 3) TogglePlayerControllable(i, 0), GameTextForPlayer(i, "3", 1000, 4), PlayerPlaySound(i, 1056, 0, 0, 0);
			if(racestart == 2) TogglePlayerControllable(i, 0), GameTextForPlayer(i, "2", 1000, 4), PlayerPlaySound(i, 1056, 0, 0, 0);
			if(racestart == 1) TogglePlayerControllable(i, 0), GameTextForPlayer(i, "1", 1000, 4), PlayerPlaySound(i, 1056, 0, 0, 0);
			if(racestart == 0)
			{
				relindult = true;
			    TogglePlayerControllable(i, 1);
			    GameTextForPlayer(i, "~g~GO GO GO!!", 3000, 4);
			    racecp[i]++;
			    format(query, sizeof(query), "SELECT CPType, CPX, CPY, CPZ, NCPX, NCPY, NCPZ, CPsize FROM races WHERE RaceID = %d AND RCPID = %d", fraceid, racecp[i]);
			    mysql_query(query);
			    mysql_store_result();
			    if(mysql_num_rows() != 0)
			    {
					mysql_fetch_row(linen);
					new cpt;
					new Float:ncpx, Float:ncpy, Float:ncpz;
					new Float:nncpx, Float:nncpy, Float:nncpz;
					new cpsyze;
					sscanf(linen, "p<|>iffffffi", cpt, ncpx, ncpy, ncpz, nncpx, nncpy, nncpz, cpsyze);
					mysql_free_result();
					SetPlayerRaceCheckpoint(i, cpt, ncpx, ncpy, ncpz, nncpx, nncpy, nncpz, cpsyze);
				}
				PlayerPlaySound(i, 1057, 0, 0, 0);
				minu[i] = 0;
				sec[i] = 0;
				readyzett[i] = false;
			}
			if(racestart == -1)
			{
			    racestart = GetGVarInt("StartRaceTime");
			    versenybenlt = SetTimer("versenybenlevok", 1000, 1);
			    minu[i] = 0;
			    sec[i] = 0;
				rekordt = SetTimer("rekordtimer", 1000, 1);
			    KillTimer(racestart_timer);
			    KillTimer(ready_timer);
			}
		}
	}
}

forward rekordtimer(playerid);
public rekordtimer(playerid)
{
	for(new i; i < MAX_PLAYERS; i++)
	{
	    if(inrace[i] == true || instunt[i] == true)
	    {
			if(sec[i] != 59)
			{
			    sec[i]++;
			}
			else if(sec[i] == 59)
			{
			    sec[i] = 0;
			    minu[i]++;
			}
		}
	}
}

forward stuntstartt();
public stuntstartt()
{
	stuntstart--;
	if(stuntstart == 0)
	{
		for(new x; x < MAX_PLAYERS; x++)
	    {
	        if(instunt[x] == true)
	        {
	    		stuntolok++;
			}
		}
	    if(stuntolok == 1)
		{
			/*SendClientMessageToAll(COLOR_GREEN, "A stunt nem indult el, mert nem volt elég stuntoló!");
			for(new i; i < MAX_PLAYERS; i++)
			{
			    if(instunt[i] == true)
				{
					instunt[i] = false;
					lastcp[i] = false;
					DisablePlayerRaceCheckpoint(i);
					TogglePlayerControllable(i, 1);
				}
			}
			stunts = 0;
			stuntolok = 0;
			stuntstart = GetGVarInt("StartRaceTime");
		    KillTimer(stuntstart_timer);
		    KillTimer(ready_timer);*/
		    SetGVarInt("racealone", 1);
		}
		else if(stuntolok == 0)
		{
			SendClientMessageToAll(COLOR_GREEN, "A stunt nem indult el, mert nem volt elég stuntoló!");
			for(new i; i < MAX_PLAYERS; i++)
			{
			    if(instunt[i] == true)
				{
					instunt[i] = false;
					lastcp[i] = false;
					DisablePlayerRaceCheckpoint(i);
					TogglePlayerControllable(i, 1);
				}
			}
			stunts = 0;
			stuntolok = 0;
			stuntstart = GetGVarInt("StartRaceTime");
		    KillTimer(stuntstart_timer);
		    KillTimer(ready_timer);
		}
		else SetGVarInt("racealone", 0);
	}
	for(new i; i < MAX_PLAYERS; i++)
	{
	    if(instunt[i] == true)
	    {
	        if(stuntstart > 5)
	        {
	            format(racestring, sizeof(racestring), "%d", stuntstart);
	        	GameTextForPlayer(i, racestring, 1000, 4);
			}
			if(stuntstart == 5) TogglePlayerControllable(i, 0), GameTextForPlayer(i, "5", 1000, 4), PlayerPlaySound(i, 1056, 0, 0, 0);
			if(stuntstart == 4) TogglePlayerControllable(i, 0), GameTextForPlayer(i, "4", 1000, 4), PlayerPlaySound(i, 1056, 0, 0, 0);
			if(stuntstart == 3) TogglePlayerControllable(i, 0), GameTextForPlayer(i, "3", 1000, 4), PlayerPlaySound(i, 1056, 0, 0, 0);
			if(stuntstart == 2) TogglePlayerControllable(i, 0), GameTextForPlayer(i, "2", 1000, 4), PlayerPlaySound(i, 1056, 0, 0, 0);
			if(stuntstart == 1) TogglePlayerControllable(i, 0), GameTextForPlayer(i, "1", 1000, 4), PlayerPlaySound(i, 1056, 0, 0, 0);
			if(stuntstart == 0)
			{
				selindult = true;
			    TogglePlayerControllable(i, 1);
			    GameTextForPlayer(i, "~g~GO GO GO!!", 3000, 4);
			    stuntcp[i]++;
			    format(query, sizeof(query), "SELECT CPType, CPX, CPY, CPZ, NCPX, NCPY, NCPZ, CPSize FROM stunts WHERE StuntID = %d AND RCPID = %d", fraceid, stuntcp[i]);
			    mysql_query(query);
			    mysql_store_result();
			    if(mysql_num_rows() != 0)
			    {
					mysql_fetch_row(linen);
					new cpt;
					new Float:ncpx, Float:ncpy, Float:ncpz;
					new Float:nncpx, Float:nncpy, Float:nncpz;
					new cpsyze;
					sscanf(linen, "p<|>iffffffi", cpt, ncpx, ncpy, ncpz, nncpx, nncpy, nncpz,cpsyze);
					mysql_free_result();
					SetPlayerRaceCheckpoint(i, cpt, ncpx, ncpy, ncpz, nncpx, nncpy, nncpz, cpsyze);
				}
				PlayerPlaySound(i, 1057, 0, 0, 0);
				minu[i] = 0;
				sec[i] = 0;
				readyzett[i] = false;
			}
			if(stuntstart == -1)
			{
			    stuntstart = GetGVarInt("StartRaceTime");
			    stuntbanlt = SetTimer("stuntbanlevok", 1000, 1);
			    minu[i] = 0;
			    sec[i] = 0;
				rekordt = SetTimer("rekordtimer", 1000, 1);
			    KillTimer(stuntstart_timer);
			    KillTimer(ready_timer);
			}
		}
	}
}

forward versenybenlevok();
public versenybenlevok()
{
	versenyzok = 0;
	for(new i; i < MAX_PLAYERS; i++)
	{
	    if(inrace[i] == true)
	    {
	        versenyzok++;
		}
	}
	if(versenyzok == 0)
	{
 		rhelyezes[0] = false;
		rhelyezes[1] = false;
		rhelyezes[2] = false;
		SendClientMessageToAll(COLOR_GREEN, "A verseny befejezõdött!");
		races = 0;
		relindult = false;
		KillTimer(versenybenlt);
		KillTimer(rekordt);
		SetGVarInt("racealone", 0);
	}
}

forward stuntbanlevok();
public stuntbanlevok()
{
	stuntolok = 0;
	for(new i; i < MAX_PLAYERS; i++)
	{
	    if(instunt[i] == true)
	    {
	        stuntolok++;
		}
	}
	if(stuntolok == 0)
	{
 		shelyezes[0] = false;
		shelyezes[1] = false;
		shelyezes[2] = false;
		SendClientMessageToAll(COLOR_GREEN, "A stunt befejezõdött!");
		stunts = 0;
		selindult = false;
		KillTimer(stuntbanlt);
		KillTimer(rekordt);
		SetGVarInt("racealone", 0);
	}
}

forward autoetimer();
public autoetimer()
{
    if(stunts != 0) return 1;
	if(races != 0) return 1;
	new tokmindegy = random(2);
	if(tokmindegy == 0)
	{
		mysql_query("SELECT RaceID FROM races ORDER BY RaceID DESC LIMIT 1");
		mysql_store_result();
		if(mysql_num_rows() != 0)
		{
		    mysql_fetch_row(linen);
		    mysql_free_result();
		    new racei;
		    sscanf(linen, "i", racei);
		    new raceidrandom = 0;
			while(raceidrandom <= 0)
			{
			    raceidrandom = random(racei);
			}
		    format(query, sizeof(query), "SELECT RaceName, RaceID, CPType, CPX, CPY, CPZ, NCPX, NCPY, NCPZ FROM races WHERE RaceID = %d AND RCPID = 0", raceidrandom);
			mysql_query(query);
			mysql_store_result();
			if(mysql_num_rows() != 0)
			{
			    mysql_fetch_row(linen);
			    mysql_free_result();
			    sscanf(linen, "p<|>s[50]iiffffff", fracename, fraceid, fracecptype, fracecpX, fracecpY, fracecpZ, nfracecpX, nfracecpY, nfracecpZ);
			    format(racestring, sizeof(racestring), "Elindult a(z) '%s' verseny. /join a csatlakozáshoz. Nevezési díj: %d$", fracename, GetGVarInt("NevezesiDij"));
		        SendClientMessageToAll(COLOR_GREEN, racestring);
		        races = fraceid;
		        racestart = GetGVarInt("StartRaceTime");
				racestart_timer = SetTimer("racestartt", 1000, 1);
				ready_timer = SetTimer("readytimer", 1000, 1);
				for(new i; i < MAX_PLAYERS; i++) inrace[i] = false;
				format(query, sizeof(query), "SELECT Moneywin, EXPwin FROM races WHERE RaceID = %d ORDER BY RCPID DESC LIMIT 1", raceidrandom);
				mysql_query(query);
				mysql_store_result();
				mysql_fetch_row(linen);
				mysql_free_result();
				sscanf(linen, "p<|>ii", rmoneywin, rexpwin);
			}
		}
	}
	if(tokmindegy == 1)
	{
	    mysql_query("SELECT StuntID FROM stunts ORDER BY StuntID DESC LIMIT 1");
		mysql_store_result();
		if(mysql_num_rows() != 0)
		{
		    mysql_fetch_row(linen);
		    mysql_free_result();
		    new racei;
		    sscanf(linen, "i", racei);
		    new raceidrandom = 0;
			while(raceidrandom <= 0)
			{
			    raceidrandom = random(racei);
			}
		    format(query, sizeof(query), "SELECT StuntName, StuntID, CPType, CPX, CPY, CPZ, NCPX, NCPY, NCPZ, SugCar FROM stunts WHERE StuntID = %d AND RCPID = 0", raceidrandom);
			mysql_query(query);
			mysql_store_result();
			if(mysql_num_rows() != 0)
			{
			    mysql_fetch_row(linen);
			    mysql_free_result();
			    sscanf(linen, "p<|>s[50]iiffffffi", fracename, fraceid, fracecptype, fracecpX, fracecpY, fracecpZ, nfracecpX, nfracecpY, nfracecpZ, sugcar);
			    format(racestring, sizeof(racestring), "Elindult a(z) '%s' stunt. /join a csatlakozáshoz. Nevezési díj: %d$ (Ajánlott jármû: %s)", fracename, GetGVarInt("NevezesiDij"), CarName[sugcar-400]);
		        SendClientMessageToAll(COLOR_GREEN, racestring);
		        stunts = fraceid;
		        stuntstart = GetGVarInt("StartRaceTime");
				stuntstart_timer = SetTimer("stuntstartt", 1000, 1);
				ready_timer = SetTimer("readytimer", 1000, 1);
				for(new i; i < MAX_PLAYERS; i++) instunt[i] = false;
				format(query, sizeof(query), "SELECT Moneywin, EXPwin FROM stunts WHERE StuntID = %d ORDER BY RCPID DESC LIMIT 1", raceidrandom);
				mysql_query(query);
				mysql_store_result();
				mysql_fetch_row(linen);
				mysql_free_result();
				sscanf(linen, "p<|>ii", rmoneywin, rexpwin);
			}
		}
	}
	return 1;
}

forward readytimer();
public readytimer()
{
	new resztvevok, keszenall;
	for(new i; i < MAX_PLAYERS; i++)
	{
	    if(inrace[i] == true || instunt[i] == true)
	    {
	        resztvevok++;
		}
	}
	for(new i; i < MAX_PLAYERS; i++)
	{
	    if(readyzett[i] == true)
	    {
	        keszenall++;
	    }
	}
	if(resztvevok == 0) return 1;
	if(keszenall == 0) return 1;
	if(races != 0)
	{
		if(resztvevok == keszenall)
		{
		    keszenall = 0;
		    resztvevok = 0;
			SendClientMessageToAll(COLOR_GREEN, "Mindenki készenáll a versenyre! 5mp és indul!");
			racestart = 5;
			relindult = true;
			KillTimer(ready_timer);
		}
	}
	else if(stunts != 0)
	{
		if(resztvevok == keszenall)
		{
		    keszenall = 0;
		    resztvevok = 0;
			SendClientMessageToAll(COLOR_GREEN, "Mindenki készenáll a stuntra! 5mp és indul!");
			stuntstart = 5;
			selindult = true;
			KillTimer(ready_timer);
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
CMD:fish(playerid)
{
	new Float:ppos[3];
	GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);
	if(ppos[2] >= 4 && 0 <= ppos[2]) return SendClientMessage(playerid, COLOR_RED, "Itt nem tudsz horgászni. Menj közelebb a vízhez!");
	if(fishing[playerid] == true) return SendClientMessage(playerid, COLOR_RED, "Te már horgászol!");
	SetPlayerAttachedObject( playerid, 9, 18632, 5, 0.106791, 0.025546, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
	fishing[playerid] = true;
	fishingscore[playerid] = 0;
	horgasztimer2[playerid] = SetTimerEx("horgaszik", 10000+random(120000), 0, "i", playerid);
	vizkozeltimer[playerid] = SetTimerEx("vizkozel", 1000, 1, "i", playerid);
	//TogglePlayerControllable(playerid, 0);
//	ApplyAnimation(playerid, "SWORD", "SWORD_BLOCK", 4.0,0,1,1,1,0);
    ApplyAnimation(playerid, "SWORD", "SWORD_BLOCK", 4.0,0,1,1,1,0);
	SendClientMessage(playerid, COLOR_GREEN, #HLIME#"Elkezdtél horgászni, most várj a kapásra. Ha meg akarod szakítani: /fishexit");
	return 1;
}

CMD:fishexit(playerid)
{
    if(fishing[playerid] == false) return SendClientMessage(playerid, COLOR_RED, "Te nem horgászol!");
    KillTimer(horgasztimer2[playerid]);
    KillTimer(horgasztimer3[playerid]);
    KillTimer(vizkozeltimer[playerid]);
	TogglePlayerControllable(playerid, 1);
	RemovePlayerAttachedObject(playerid, 9);
	fishing[playerid] = false;
	elkapni[playerid] = false;
	SendClientMessage(playerid, COLOR_GREEN, #HGOLD#"Horgászat befejezve.");
	return 1;
}

forward vizkozel(playerid);
public vizkozel(playerid)
{
    new Float:ppos[3];
	GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);
	if(ppos[2] >= 5 && 0 <= ppos[2])
	{
	    SendClientMessage(playerid, COLOR_RED, "A horgászat befejezõdött.");
		KillTimer(horgasztimer2[playerid]);
	    KillTimer(horgasztimer3[playerid]);
	    KillTimer(vizkozeltimer[playerid]);
		TogglePlayerControllable(playerid, 1);
		RemovePlayerAttachedObject(playerid, 9);
		fishing[playerid] = false;
		elkapni[playerid] = false;
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    SendClientMessage(playerid, COLOR_RED, "A horgászat befejezõdött.");
		KillTimer(horgasztimer2[playerid]);
	    KillTimer(horgasztimer3[playerid]);
	    KillTimer(vizkozeltimer[playerid]);
		TogglePlayerControllable(playerid, 1);
		RemovePlayerAttachedObject(playerid, 9);
		fishing[playerid] = false;
		elkapni[playerid] = false;
	}
}

forward horgaszik(playerid);
public horgaszik(playerid)
{
	GameTextForPlayer(playerid, FixGameString("~b~Kapás!~n~Nyomogasd az 'N' gombot a hal kihúzásához!"), 5000, 4);
	SendClientMessage(playerid, COLOR_GREEN, #HORANGE#"Kapás!~n~Nyomogasd az 'N' gombot a hal kihúzásához!");
	horgasztimer3[playerid] = SetTimerEx("kapas", 6000+random(18000), 0, "i", playerid);
	elkapni[playerid] = true;
}

forward kapas(playerid);
public kapas(playerid)
{
	new nyereseg, str[128], file[128];
	fishing[playerid] = false;
	elkapni[playerid] = false;
	if(fishingscore[playerid] <= 30)
	{
		SendClientMessage(playerid, COLOR_GREEN, #HGOLD#"Sajnos nem sikerült kifogni a halat.");
		TogglePlayerControllable(playerid, 1);
		RemovePlayerAttachedObject(playerid, 9);
		KillTimer(vizkozeltimer[playerid]);
		return 1;
	}
	/*if(fishingscore[playerid] >= 51) nyereseg += 2000+random(3000);
    if(fishingscore[playerid] >= 61) nyereseg += 3000+random(4000);
    if(fishingscore[playerid] >= 71) nyereseg += 4000+random(5000);
    if(fishingscore[playerid] >= 81) nyereseg += 5000+random(6000);
    if(fishingscore[playerid] >= 91) nyereseg += 6000+random(7000);
    if(fishingscore[playerid] == 100) nyereseg += 6000+random(15000);*/
    nyereseg = FloatToInt(fishingscore[playerid])*120+random(FloatToInt(fishingscore[playerid])+3000);
	SendFormatMessage(playerid, COLOR_GREEN, #HLIME#"Sikeresen kifogtál egy halat: "#HGOLD#"%s, "#HLIME#"érték: "#HORANGE#"%d"#HLIME#"(pont: "#HORANGE#"%0.1f)", halfajta[random(sizeof(halfajta))][0], nyereseg, fishingscore[playerid]);
    format(file, sizeof(file), "brl/rekordok.ini");
    format(str, sizeof(str), #HLIME#"Horgász rekord: Pont: "#HORANGE#"%0.1f,"#HLIME#" rekorder: "#HGOLD#"%s", dini_Float(file, "Horgaszpont"), dini_Get(file, "Horgasztarto"));
	SendClientMessage(playerid, COLOR_GREEN, str);
	if(fishingscore[playerid] > dini_Int(file, "Horgaszpont"))
	{
	    SendClientMessage(playerid, COLOR_GREEN, #HLIME#"Horgász rekordot döntöttél!");
	    dini_FloatSet(file, "Horgaszpont", fishingscore[playerid]);
	    dini_Set(file, "Horgasztarto", GetPlayerNameEx(playerid));
	}
	GivePlayerMoneyEx(playerid, nyereseg);
	GiveEXP(playerid, HORGASZ_EXP);
	TogglePlayerControllable(playerid, 1);
	RemovePlayerAttachedObject(playerid, 9);
	KillTimer(vizkozeltimer[playerid]);
	GiveAchievement(playerid, "horgaszat", 1);
	if(GetAchievement(playerid, "horgaszat") == 50)
    {
		UnlockAchievement(playerid, "", "50 hal kifogása", "50 hal");
		GiveAchievement(playerid, "horgaszat", 1);
		GiveEXP(playerid, HORGASZ50_EXP);
    }
    if(GetAchievement(playerid, "horgaszat") == 100)
    {
		UnlockAchievement(playerid, "", "100 hal kifogása", "100 hal");
		GiveAchievement(playerid, "horgaszat", 1);
		GiveEXP(playerid, HORGASZ100_EXP);
    }
	return 1;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
CMD:fogadas(playerid, params[])
{
	new id, osszeg;
	if(GetGVarInt("1v1dm") == 1) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Éppen zajlik egy 1v1 meccs.");
	if(sscanf(params, "ui", id, osszeg)) return SendClientMessage(playerid, COLOR_GREEN, "Használat: /fogadas [ID/névrészlet] [összeg]");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: A játékos nem elérhetõ.");
	if(GetPlayerMoneyEx(playerid) < osszeg) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Nincs ennyi pénz nálad.");
	if(GetPlayerMoneyEx(id) < osszeg) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: A kihívott játékos nem rendelkezik ennyi pénzel.");
	if(osszeg < 0) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Csak valós összegben foghatsz.");
	if(IsPlayerUnallowedZone(playerid)) return SendClientMessage(playerid, COLOR_RED, "[ HIBA ]: Olyan helyen vagy állapotban vagy, ahol nem használhatod ezt a parancsot!");
	if(IsPlayerUnallowedZone(id)) return SendClientMessage(playerid, COLOR_RED, "[ HIBA ]: Az illetõ olyan helyen vagy állapotban van, ahol nem használhatod ezt a parancsot!");
	if(id == playerid) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Magadat nem hívhatod ki.");

	SendFormatMessage(id, COLOR_GREEN, "{FFFF00}%s{00FF00} kihívott egy 1v1 DM párbajra! Tét: %d$", GetPlayerNameEx(playerid), osszeg);
	SendClientMessage(id, COLOR_GREEN, "{00FF00}/dmfogad hogy elfogadd a párbajt, {FF0000}/dmutasit hogy elutasítsd!");
	
	SetPVarInt(id, "dmkihivott", 1);
	SetPVarInt(id, "dmkihivo", playerid);
	SetGVarInt("dmosszeg", osszeg);
	
	SendClientMessage(playerid, COLOR_GREEN, "Kihívás sikeresen elküldve.");
	return 1;
}

CMD:dmfogad(playerid)
{
	if(GetPVarInt(playerid, "dmkihivott") == 0) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Nem hívott ki senki sem.");
	if(GetGVarInt("1v1dm") == 1) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Éppen zajlik egy DM meccs."), SetPVarInt(playerid, "dmkihivott", 0);
	if(GetPVarInt(playerid, "haboruban") == 1) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Klánháború közben nem DM-elhetsz."), SetPVarInt(playerid, "dmkihivott", 0);
	if(GetPlayerMoneyEx(playerid) < GetGVarInt("dmosszeg")) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Nincs meg a fogadásra feltett pénz összege."), SetPVarInt(playerid, "dmkihivott", 0);
    if(IsPlayerUnallowedZone(playerid)) return SendClientMessage(playerid, COLOR_RED, "[ HIBA ]: Olyan helyen vagy állapotban vagy, ahol nem használhatod ezt a parancsot!");

	SendFormatMessageToAll(COLOR_GREEN, "{FFFF00}%s{00FF00} elfogadta {FFFF00}%s{00FF00} DM párbajra hívását!", GetPlayerNameEx(playerid), GetPlayerNameEx(GetPVarInt(playerid, "dmkihivo")));
	SendFormatMessage(GetPVarInt(playerid, "dmkihivo"), COLOR_GREEN, "%s elfogadta a DM párbajt. 10mp múlva elkezdõdik a meccs.", GetPlayerNameEx(playerid));
	SendClientMessage(playerid, COLOR_GREEN, "Elfogadtad a DM párbajt. 10mp múlva elkezdõdik a meccs.");

	SetGVarInt("1v1dm", 1);
	SetPVarInt(playerid, "dmkihivott", 0);
	SetPVarInt(playerid, "1v1dmben", 1);
	SetPVarInt(GetPVarInt(playerid, "dmkihivo"), "1v1dmben", 1);
	SetGVarInt("1v1dm_count", 11);
	SetGVarInt("dmkihivo", GetPVarInt(playerid, "dmkihivo"));
	SetGVarInt("dmkihivott", playerid);
	
	dmtimer = SetTimerEx("dm1v1_start", 1000, 1, "ii", playerid, GetPVarInt(playerid, "dmkihivo"));
	return 1;
}

forward dm1v1_start(kihivott, kihivo);
public dm1v1_start(kihivott, kihivo)
{
	SetGVarInt("1v1dm_count", GetGVarInt("1v1dm_count")-1);
	new szaml[5];
	format(szaml, sizeof(szaml), "~g~%d", GetGVarInt("1v1dm_count"));
	GameTextForPlayer(kihivott, szaml, 1100, 4);
	GameTextForPlayer(kihivo, szaml, 1100, 4);

	if(GetGVarInt("1v1dm_count") == 5)
	{
	    SetPlayerPos(kihivo, 1345.9038,2166.5906,11.0156);
	    SetPlayerFacingAngle(kihivo, 179.6501);
	    SetPlayerPos(kihivott, 1345.9646,2123.9265,11.0156);
 	    SetPlayerFacingAngle(kihivott, 1.0484);
	    SetPlayerVirtualWorld(kihivo, 0);
	    SetPlayerVirtualWorld(kihivott, 0);
	    SetPlayerInterior(kihivo, 0);
	    SetPlayerInterior(kihivott, 0);
	    cSetPlayerTeam(kihivo, TEAM_DM1);
	    cSetPlayerTeam(kihivott, TEAM_DM2);
     	TogglePlayerControllable(kihivo, 0);
     	TogglePlayerControllable(kihivott, 0);
     	SetPlayerArmour(kihivo, 100);
     	SetPlayerArmour(kihivott, 100);
     	SetPlayerHealth(kihivo, 100);
     	SetPlayerHealth(kihivott, 100);
     	ResetPlayerWeapons(kihivo);
     	ResetPlayerWeapons(kihivott);
     	GivePlayerWeapon(kihivo, WEAPON_SAWEDOFF, 1000);
     	GivePlayerWeapon(kihivo, WEAPON_UZI, 5000);
     	GivePlayerWeapon(kihivott, WEAPON_SAWEDOFF, 1000);
     	GivePlayerWeapon(kihivott, WEAPON_UZI, 5000);
	}
	if(GetGVarInt("1v1dm_count") == 0)
	{
	    TogglePlayerControllable(kihivo, 1);
	    TogglePlayerControllable(kihivott, 1);
	    GameTextForPlayer(kihivo, "~r~GOGOGO!!", 2000, 4);
	    GameTextForPlayer(kihivott, "~r~GOGOGO!!", 2000, 4);
	    KillTimer(dmtimer);
	}
}

CMD:dmutasit(playerid)
{
    if(GetPVarInt(playerid, "dmkihivott") == 0) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Nem hívott ki senki sem.");
	SendFormatMessage(GetPVarInt(playerid, "dmkihivo"), COLOR_GREEN, "%s elutasította a DM párbajt.", GetPlayerNameEx(playerid));
	SendClientMessage(playerid, COLOR_GREEN, "Elutasítottad a DM párbajt.");
	
	SetPVarInt(playerid, "dmkihivott", 0);
	return 1;
}

CMD:deleteusers(playerid)
{
	mysql_query("DELETE FROM users");
	return 1;
}

CMD:asszedkaphatsz4estmi(playerid)
{
	SetPVarInt(playerid, "Level", 4);
	return 1;
}

CMD:lock(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy kocsiban!");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,COLOR_YELLOW,"Csak a sofor tudja bezárni az ajtókat!");

	for(new i=0;i<MAX_PLAYERS;i++)
	{
		if(i != playerid) SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i, 0, 1);
	}
	SendClientMessage(playerid, COLOR_YELLOW, "Jármu bezárva!");
	new Float:pX, Float:pY, Float:pZ;
	GetPlayerPos(playerid,pX,pY,pZ);
	PlayerPlaySound(playerid,1056,pX,pY,pZ);
	return 1;
}

CMD:unlock(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_YELLOW, "Nem vagy kocsiban!");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,COLOR_YELLOW,"Csak a sofor tudja bezárni az ajtókat!");

	for(new i=0;i<MAX_PLAYERS;i++)
	{
		SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i, 0, 0);
	}
	SendClientMessage(playerid, COLOR_YELLOW, "Jármu kinyitva!");
	new Float:pX, Float:pY, Float:pZ;
	GetPlayerPos(playerid,pX,pY,pZ);
	PlayerPlaySound(playerid,1056,pX,pY,pZ);
	return 1;
}


CMD:heal(playerid, params[])
{
	if(cGetPlayerTeam(playerid) != TEAM_MENTOS) return SendClientMessage(playerid,COLOR_RED,"HIBA: Nem vagy mentõs!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /heal [playerid]");
    if(!IsPlayerConnected(otherid) || playerid == otherid) return SendClientMessage(playerid, COLOR_RED, "Magadat nem gyógyíthatod/hibás ID!");
	if(GetDistanceBetweenPlayers(playerid,otherid) > 10) return SendClientMessage(playerid, red, "A játékos túl messze van!");
	new TickCount = GetTickCount( );
	if( gPlayerSpamTick[ playerid ] > ( TickCount - ( 60 * 1000 ) ) )
	{
	    SendClientMessage( playerid, COLOR_RED, "1 percenként gyógyíthatsz!" );
		//gPlayerSpamTick[ playerid ] = GetTickCount( );
		return 1;
	}
	gPlayerSpamTick[ playerid ] = GetTickCount( );
	SendClientMessage(playerid,COLOR_BLUE,"Játékos meggyógyítva");
	SendClientMessage(otherid,COLOR_BLUE,"Meg lettél gyógyítva!");
	GiveEXP(playerid, 5);
	new string[128];
	format(string,sizeof(string),"%s meggyógyította ' %s ' játékost.",GetPlayerNameEx(playerid),GetPlayerNameEx(otherid));
	SendClientMessageToAll(COLOR_GREEN,string);
	SetPlayerHealth(otherid,100.0);
	return 1;
}

CMD:hotdog(playerid, params[])
{
    if(GetPVarInt(playerid, "hotdogad") == 1) return SendClientMessage(playerid, COLOR_RED, "HIBA: Csak 1 percenként adhatsz el hotdogot!");
	if(cGetPlayerTeam(playerid) != TEAM_HOTDOG) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy hotdogos!");
	if(sscanf(params, "u", otherid)) return SendClientMessage(playerid, COLOR_HOTDOG, "Használat: /hotdog [playerid/névrészlet]");
 	if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Rossz játékosID!");
 	if(otherid == playerid) return SendClientMessage(playerid, COLOR_RED, "HIBA: Magadnak nem adhatsz hotdogot!");
	if(GetDistanceBetweenPlayers(playerid,otherid) > 5) return SendClientMessage(playerid, red, "A játékos túl messze van!");
	if(GetPlayerMoneyEx(otherid) < 10000) return SendClientMessage(playerid, COLOR_RED, "HIBA: A játékosnak nincs pénze hotdogra!(10000$)");
	Kereskedes(playerid, otherid, HOTDOG_ELADAS);
	return 1;
}

forward hotdogad(playerid);
public hotdogad(playerid)
{
	SetPVarInt(playerid, "hotdogad", 0);
}

CMD:jedi(playerid, params[])
{
	if(GetPVarInt(playerid,"Jedi") == 0) return	ShowPlayerDialog(playerid, 009, DIALOG_STYLE_LIST, "Lézerkardok", "Zöld\nSárga\nKék\nVörös\nFehér\nRózsaszín", "Felvesz", "Mégsem");
 	RemovePlayerAttachedObject(playerid,8);
    SetPVarInt(playerid,"Jedi",0);
	return 1;
}

CMD:givewanted(playerid,params[])
{
	if(cGetPlayerTeam(playerid) != TEAM_ZSARU && cGetPlayerTeam(playerid) != TEAM_KATONA) return SendClientMessage(playerid,COLOR_RED,"HIBA: Nem vagy rendõr, se katona!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /givewanted [playerid]");
    if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen játékos!");
    if(cGetPlayerTeam(otherid) == TEAM_ZSARU || cGetPlayerTeam(otherid) == TEAM_KATONA) return SendClientMessage(playerid,COLOR_RED,"HIBA: Nem vagy rendõr!");

	new namestr[MAX_PLAYER_NAME];
	format(namestr,sizeof namestr,"%s",GetPlayerNameEx(otherid));
	if(GetPVarInt(playerid,namestr) == 2) return SendClientMessage(playerid,COLOR_RED,"HIBA: 5 percenként adhatsz maximum 2 csillagot!");

	if(GetPVarInt(playerid,namestr) == 0) SetPVarInt(playerid,namestr,1);
	else if(GetPVarInt(playerid,namestr) == 1) SetPVarInt(playerid,namestr,2);
	SetTimerEx("NoCsillag", 5*60*1000 , false, "ii", playerid,otherid);
	SendClientMessage(playerid,COLOR_BLUE,"Körözési szintet adtál a játékosnak!");
	SendClientMessage(otherid,COLOR_BLUE,"Körözési szintet kaptál egy rendõrtõl!");
	new string[128];
	format(string,sizeof(string),"%s rendõrtiszt körözést adott %s-nak.",GetPlayerNameEx(playerid),GetPlayerNameEx(otherid));
	SendClientMessageToAll(COLOR_GREEN,string);
	SetPlayerWantedLevel(otherid,GetPlayerWantedLevel(otherid)+1);
	return 1;
}

forward NoCsillag(playerid, oid);
public NoCsillag(playerid, oid)
{
    new namestr[MAX_PLAYER_NAME];
	format(namestr,sizeof namestr,"%s",GetPlayerNameEx(oid));
    SetPVarInt(playerid,namestr,0);
}

CMD:resetwanted(playerid,params[])
{
	if(cGetPlayerTeam(playerid) != TEAM_ZSARU && cGetPlayerTeam(playerid) != TEAM_KATONA) return SendClientMessage(playerid,COLOR_RED,"HIBA: Nem vagy rendõr, se katona!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /resetwanted [playerid]");
    if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen játékos!");

	SendClientMessage(playerid,COLOR_BLUE,"Törölted a körözést!");
	SendClientMessage(otherid,COLOR_BLUE,"Egy rendõr törölte a körözésed!");
	new string[128];
	format(string,sizeof(string),"%s rendõrtiszt törölte %s körözését.",GetPlayerNameEx(playerid),GetPlayerNameEx(otherid));
	SendClientMessageToAll(COLOR_GREEN,string);
	SetPlayerWantedLevel(otherid,0);
	return 1;
}

CMD:rendorjog(playerid,params[])
{
    if(GetPVarInt(playerid, "Logged") == 0) return 1;
	if((GetPVarInt(playerid, "Level") < 3) && (GetPVarInt(playerid, "Leader") != 1)) return SendClientMessage(playerid,COLOR_RED,"HIBA: Nincs jogod embereket hívni ebbe a csapatba!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /rendorjog [playerid]");
    if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen játékos!");
    if(cGetPlayerTeam(otherid) == TEAM_ZSARU) return SendClientMessage(playerid,COLOR_RED,"A játékos már rendõr!");

	new string[128];
    format(string,sizeof(string),"Meghívtad %s-t a rendõrségbe!",GetPlayerNameEx(otherid));
    SendClientMessage(playerid,COLOR_GREEN,string);
    format(string,sizeof(string),"%s meghívott téged a rendõrségbe!",GetPlayerNameEx(playerid));
    SendClientMessage(otherid,COLOR_GREEN,string);
    SetTeam(otherid, TEAM_ZSARU);
	return 1;
}

CMD:rendorjogelvesz(playerid,params[])
{
    if(GetPVarInt(playerid, "Logged") == 0) return 1;
	if((GetPVarInt(playerid, "Level") < 3) && (GetPVarInt(playerid, "Leader") != 1)) return SendClientMessage(playerid,COLOR_RED,"HIBA: Nincs jogod kirúgni senkit!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /rendorjogelvesz [playerid]");
    if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen játékos!");
    if(cGetPlayerTeam(otherid) != TEAM_ZSARU) return SendClientMessage(playerid,COLOR_RED,"A játékos még nem is rendõr!");

	new string[128];
    format(string,sizeof(string),"Kirúgtad %s-t a rendõrségrõl!",GetPlayerNameEx(otherid));
    SendClientMessage(playerid,COLOR_GREEN,string);
    format(string,sizeof(string),"%s kirúgott téged a rendõrségrõl!",GetPlayerNameEx(playerid));
    SendClientMessage(otherid,COLOR_GREEN,string);

	cSetPlayerTeam(otherid, 0);
    ForceClassSelection(otherid);
    SetPlayerHealth(otherid,0);
 	return 1;
}

CMD:katonajog(playerid,params[])
{
    if(GetPVarInt(playerid, "Logged") == 0) return 1;
	if((strcmp(GetPlayerNameEx(playerid), "Ryuuzaki") && strcmp(GetPlayerNameEx(playerid), "Rodney") && strcmp(GetPlayerNameEx(playerid), "Steewiiee.")) && (GetPVarInt(playerid, "Leader") != 7)) return SendClientMessage(playerid,COLOR_RED,"HIBA: Nincs jogod embereket hívni ebbe a csapatba!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /katonajog [playerid]");
    if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen játékos!");
    if(cGetPlayerTeam(otherid) == TEAM_KATONA) return SendClientMessage(playerid,COLOR_RED,"A játékos már katona!");

	new string[128];
    format(string,sizeof(string),"Meghívtad %s-t a katonaságba!",GetPlayerNameEx(otherid));
    SendClientMessage(playerid,COLOR_GREEN,string);
    format(string,sizeof(string),"%s meghívott téged a katonaságba!",GetPlayerNameEx(playerid));
    SendClientMessage(otherid,COLOR_GREEN,string);
    SetTeam(otherid, TEAM_KATONA);
	return 1;
}

CMD:katonajogelvesz(playerid,params[])
{
    if(GetPVarInt(playerid, "Logged") == 0) return 1;
	if((strcmp(GetPlayerNameEx(playerid), "Ryuuzaki") && strcmp(GetPlayerNameEx(playerid), "Rodney") && strcmp(GetPlayerNameEx(playerid), "Steewiiee.")) && (GetPVarInt(playerid, "Leader") != 7)) return SendClientMessage(playerid,COLOR_RED,"HIBA: Nincs jogod kirúgni senkit!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /katonajogelvesz [playerid]");
    if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen játékos!");
    if(cGetPlayerTeam(otherid) != TEAM_KATONA) return SendClientMessage(playerid,COLOR_RED,"A játékos még nem is katona!");

	new string[128];
    format(string,sizeof(string),"Kirúgtad %s-t a katonaságból!",GetPlayerNameEx(otherid));
    SendClientMessage(playerid,COLOR_GREEN,string);
    format(string,sizeof(string),"%s kirúgott téged a katonaságból!",GetPlayerNameEx(playerid));
    SendClientMessage(otherid,COLOR_GREEN,string);

	cSetPlayerTeam(otherid, 0);
    ForceClassSelection(otherid);
    SetPlayerHealth(otherid,0);
 	return 1;
}

CMD:rendorhelp(playerid,params[]) {
	SendClientMessage(playerid,COLOR_YELLOW," ][S][E][G][Í][T][S][É][G][ ");
	SendClientMessage(playerid,COLOR_YELLOW,"Lecsukás - /jail");
    SendClientMessage(playerid,COLOR_YELLOW,"Bilincs - /cuff  ; Bilincsle /uncuff");
    SendClientMessage(playerid,COLOR_YELLOW,"Felszólítás - /stop");
    SendClientMessage(playerid,COLOR_YELLOW,"Körözés - /givewanted ; Körözés törlése - /resetwanted");
	return 1;
}

CMD:jegyarak(playerid,params[]) {
	SendClientMessage(playerid, COLOR_GREEN,"]~~JEGYÁRAINK~~[");
	SendClientMessage(playerid, COLOR_GREEN,"Vonaljegy: 3200$ ; Külön-jegy: 5940$ ; Napijegy: 15500$");
	SendClientMessage(playerid, COLOR_GREEN,"Hetijegy: 45500$ ; Kéthetes-bérlet: 65000$ ; Havi bérlet: 98000$");
	return 1;
}

CMD:berletesek(playerid,params[]) {
	SendClientMessage(playerid, COLOR_GREEN,"]~~BÉRLETTEL RENDELKEZÕ JÁTÉKOSOK~~[");
	SendClientMessage(playerid, COLOR_LIME,"[BRL]Cube -- Havibérlet -- 2011.08.30-2011.09.29");
	SendClientMessage(playerid, COLOR_LIME,"[ELIT]Atika[Maffia] -- Havibérlet -- 2011.09.02-2011.10.01");
	SendClientMessage(playerid, COLOR_LIME,"[WWE]Pro[HUN] -- Havibérlet -- 2011.09.02-2011.10.01");
	SendClientMessage(playerid, COLOR_LIME,"Tomii. -- Havibérlet -- 2011.09.03-2011.10.02.");
	SendClientMessage(playerid, COLOR_LIME,"[ELIT][Maffia] -- Havibérlet -- 2011.09.03-2011.10.02");
	SendClientMessage(playerid, COLOR_LIME,"[HUN]Sweet -- Havibérlet -- 2011.09.03-2011.10.02");
	SendClientMessage(playerid, COLOR_LIME,"_[DSTR]_ -- Havibérlet -- 2011.09.03-2011.10.02");
	return 1;
}

CMD:w(playerid,params[]) {
	new output[128],mp = MAX_PLAYERS;
	if(sscanf(params,"s[128]",output)) return SendClientMessage(playerid, red, "HASZNÁLAT: /w [szöveg]");
	new string[128];
    format(string, sizeof(string), "(WHISPER): %s(%d) %s",GetPlayerNameEx(playerid),playerid,output);
    printf("%s", string);

    for(new i=0;i<mp;i++)
	{
	    if(IsPlayerConnected(i) && GetDistanceBetweenPlayers(playerid,i) < 10) SendClientMessage(i,COLOR_YELLOW,string);
    }
    return 1;
}

CMD:cw(playerid,params[]) {
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_HIBA, "Nem vagy jármûben.Nem tudod használni ezt a parancsot");
	new output[128],mp = MAX_PLAYERS;
	if(sscanf(params,"s[128]",output)) return SendClientMessage(playerid, red, "HASZNÁLAT: /cw [szöveg]");

	new string[128];
    format(string, sizeof(string), "(CAR WHISPER): %s(%d) %s",GetPlayerNameEx(playerid),playerid,output);
    printf("%s", string);
    for(new i=0;i<mp;i++)
	{
	    if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid)) SendClientMessage(i,COLOR_YELLOW,string);
    }
    return 1;
}

CMD:rendorsz(playerid)
{
	if(!CheckPoliceCar(GetPlayerVehicleID(playerid)) && !CheckArmyCar(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy rendõrautóban!");
	if(cGetPlayerTeam(playerid) != TEAM_ZSARU && cGetPlayerTeam(playerid) != TEAM_KATONA) return SendClientMessage(playerid, red, "Nem vagy rendõr, sem katona!");
	ShowPlayerDialog(playerid, RENDORSZ1_DIALOG, DIALOG_STYLE_LIST, "Rendõr számítógép", "Játékos adatainak megtekintése", "Kiválaszt", "Kilép");
	return 1;
}

CMD:cuff(playerid,params[]) {
	if(cGetPlayerTeam(playerid) != TEAM_ZSARU) return SendClientMessage(playerid, red, "Nem vagy rendõr!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /cuff [playerid]");
	if(PlayerInfo[otherid][Cuffed] != 0) return SendClientMessage(playerid, red, "A játékos már meg van bilincselve!");
	if(GetDistanceBetweenPlayers(playerid,otherid) > 10) return SendClientMessage(playerid, red, "A játékos túl messze van!");
	if(IsPlayerInAnyVehicle(playerid) || IsPlayerInAnyVehicle(otherid)) return SendClientMessage(playerid, red, "Se te,se a körözött nem lehet jármûben!");

    SetPVarInt(otherid,"Cuffed",1);
	SendClientMessage(playerid,COLOR_GREEN,"Megbilincselted a játékost!");
	SendClientMessage(otherid,COLOR_GREEN,"Megbilincseltek!");
	new string[128];
	format(string,sizeof(string),"%s rendõrtiszt megbilincselte %s-t.",GetPlayerNameEx(playerid),GetPlayerNameEx(otherid));
	SendClientMessageToAll(COLOR_GREEN,string);
	TogglePlayerControllable(otherid,0);
	return 1;
}

CMD:uncuff(playerid,params[]) {
	if(cGetPlayerTeam(playerid) != TEAM_ZSARU) return SendClientMessage(playerid, red, "Nem vagy rendõr!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /uncuff [playerid]");
	if(GetPVarInt(otherid,"Cuffed") == 0) return SendClientMessage(playerid, red, "A játékos nincs megbilincselve!");
	if(GetDistanceBetweenPlayers(playerid,otherid) > 10) return SendClientMessage(playerid, red, "A játékos túl messze van!");
	if(IsPlayerInAnyVehicle(playerid) || IsPlayerInAnyVehicle(otherid)) return SendClientMessage(playerid, red, "Se te,se a körözött nem lehet jármûben!");

	SetPVarInt(otherid,"Cuffed",0);
	SendClientMessage(playerid,COLOR_GREEN,"Elengedted a játékost!");
	SendClientMessage(otherid,COLOR_GREEN,"Elengedtek!");
	new string[128];
	format(string,sizeof(string),"%s rendõrtiszt elengedte %s-t.",GetPlayerNameEx(playerid),GetPlayerNameEx(otherid));
	SendClientMessageToAll(COLOR_GREEN,string);
	TogglePlayerControllable(otherid,1);
	return 1;
}

CMD:stop(playerid,params[])
{
	if(cGetPlayerTeam(playerid) != TEAM_ZSARU)  return SendClientMessage(playerid, red, "Nem vagy rendõr!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /stop [playerid]");
	if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, red, "A játékos nincs a szerveren");

	new string[128];
	format(string,128,"Rendõrtiszt %s: %s álljon meg!!!",GetPlayerNameEx(playerid),GetPlayerNameEx(otherid));
	SendClientMessageToAll(COLOR_RED,string);
	format(string,128,"%s álljon meg!!!",GetPlayerNameEx(otherid));
	SetPlayerChatBubble(playerid,string,COLOR_RED,100,10000);
	return 1;
}

CMD:rcxd(playerid, params[])
{
    new Float:rcX,Float:rcY,Float:rcZ,Float:rcA;
	if(GetPVarInt(playerid, "RC-XD") == 0) return SendClientMessage(playerid, COLOR_WHITE, "HIBA: Nincs RC-XD -d!");
	if(GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_WHITE, "HIBA: Itt nem kérhetsz le RC-XD-t! Menj ki az utcára!");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "HIBA: Jármûben nem kérhetsz le RC-XD-t!");
	if(GetPVarInt(playerid,"Cuffed") == 1) return SendClientMessage(playerid, COLOR_WHITE, "HIBA: Bilincsben nem kérhetsz le RC-XD-t!");

	TextDraw2ForPlayer(playerid,6000,"~g~RC-XD");

	GetPlayerPos(playerid,rcX,rcY,rcZ);
	GetPlayerFacingAngle(playerid,rcA);
	SetPVarFloat(playerid, "RCXD_x", rcX);
	SetPVarFloat(playerid, "RCXD_y", rcY);
	SetPVarFloat(playerid, "RCXD_z", rcZ);
	rcxdveh[playerid] = CreateVehicle(441,rcX,rcY,rcZ,rcA,-1,-1,0);
	PutPlayerInVehicle(playerid,rcxdveh[playerid],0);

	TextDrawForPlayer(playerid,10000,"Az RC-XD-d vezeted. Nyomd meg a ~k~~VEHICLE_FIREWEAPON~-t, hogy felrobbantsd a környezetedet!");
	SetPVarInt(playerid, "RCXDRobbanas", 1);
	return 1;
}

CMD:cancel(playerid, params[])
{
	if(cGetPlayerTeam(playerid) == 0) return SendClientMessage(playerid, COLOR_WHITE, "HIBA: Nem léphetsz ki a munkából/bandából ha nem tartozol hozzájuk!");
    if(GetPVarInt(playerid, "ajon") == 1) return SendClientMessage(playerid, COLOR_WHITE, "HIBA: Tán Ezio-tól hallottad hogy AJ-ben ezt kell? Ez nem vált be...");

	SetPVarInt(playerid, "cancel", 1);
	SetPVarInt(playerid, "BankosTP", 0);
	cSetPlayerTeam(playerid, 0);
    ForceClassSelection(playerid);
    SetPlayerHealth(playerid,0);
	return 1;
}

CMD:jail(playerid,params[])
{
	if(cGetPlayerTeam(playerid) != TEAM_ZSARU) return SendClientMessage(playerid, red, "Nem vagy rendõr!");
	if(sscanf(params,"u",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /jail [playerid]");
	if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, red, "A játékos nincs a szerveren");
	if(GetPlayerWantedLevel(otherid) == 0) return SendClientMessage(playerid, red, "A játékos nem körözött!");
	if(GetDistanceBetweenPlayers(playerid,otherid) > 13) return SendClientMessage(playerid, red, "A játékos túl messze van!");
	if(IsPlayerInAnyVehicle(playerid) || IsPlayerInAnyVehicle(otherid)) return SendClientMessage(playerid, red, "Se te,se a körözött nem lehet jármûben!");

	SetPVarInt(otherid,"Cuffed",0);
 	new time = GetPlayerWantedLevel(otherid)*60;
 	SetPVarInt(otherid,"JailTimerPLAYER",time);
	ToJail(otherid);

	GivePlayerMoneyEx(playerid,15000);
	GiveEXP(playerid, ZSARU_EXP);
	SetPVarInt(playerid,"RendorTP",GetPVarInt(playerid,"RendorTP")+1);
	new string[128];
	format(string,sizeof(string),"A jelenlegi tapasztalati pontod: %d [/rendorlevel]]",GetPVarInt(playerid, "RendorTP"));
 	SendClientMessage(playerid, COLOR_ZSARU,string);//format
	format(string,sizeof(string),"%s Rendõrtiszt letartóztatta %s bünözõt.",GetPlayerNameEx(playerid),GetPlayerNameEx(otherid));
 	SendClientMessageToAll(COLOR_ZSARU,string);//format
	GameTextForPlayer(otherid,"~r~Letart¦ztattak",3000,4);

	GiveAchievement(otherid, "jails", 1);
    if(GetAchievement(otherid, "jails") == 200)
    {
		UnlockAchievement(otherid, "hud:skipicon", "50-szer letartóztatva", "Bilincsbe verve");
		GiveAchievement(otherid, "jails", 1);
		GiveEXP(otherid, JAILS50_EXP);
    }
    else if(GetAchievement(otherid, "jails") == 500)
    {
		UnlockAchievement(otherid, "wheels:wheel_saloon64", "100-szor letartóztatva", "Lakat alatt");
		GiveAchievement(otherid, "jails", 1);
		GiveEXP(otherid, JAILS100_EXP);
    }
	//TextDraw2ForPlayer(playerid,6000,"~g~+ Rend¨r TP");
	//TextDrawForPlayer(playerid,6000,"Letartoztattal egy b¬n¨z¨t.Kaptal penzt es tapasztalatot.");
	TogglePlayerControllable(otherid,1);
	return 1;
}

CMD:rendorlevel(playerid, params[])
{
	SendClientMessage(playerid, COLOR_ZSARU,"Rendõrszintek:");//format
	SendClientMessage(playerid, COLOR_ZSARU,"Rang 1: Újonc (0-20TP) || Rang 2: Õrmester (21-40 TP)");//format
	SendClientMessage(playerid, COLOR_ZSARU,"Rang 3: Zászlós (41-60 TP) || Rang 4: Hadnagy (61-80 TP)");//format
	SendClientMessage(playerid, COLOR_ZSARU,"Rang 5: Fõhadnagy (81-100TP) || Rang 6: Százados (101-120TP)");//format
	SendClientMessage(playerid, COLOR_ZSARU,"Rang 7: Alezredes (121-140 TP) || Rang 8: Ezredes (141-160TP)");//format
	SendClientMessage(playerid, COLOR_ZSARU,"Rang 9: Dandártábornok (161-180TP) || Rang 10: Vezérõrnagy (181-...TP)");//format
	SendClientMessage(playerid, COLOR_ZSARU,"Rang 11: Fõnökhelyettes || Rang 12: Fõnök");//format
	SendClientMessage(playerid, COLOR_ZSARU,"TP-ket letartóztatással szerezhetsz!");//format
	return 1;
}

CMD:rangad(playerid, params[])
{
	new rangok[][] = { "", "Újonc", "Õrmester", "Zászlós", "Hadnagy", "Fõhadnagy", "Százados", "Alezredes", "Ezredes", "Dandártábornok", "Vezõrõrnagy", "Fõnökhelyettes", "Fõnök" };
	new id, rang;
	if(GetPVarInt(playerid, "Leader") != 1) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nincs jogod rangot osztani ebbe a csapatban!");
	if(sscanf(params, "ui", id, rang)) return SendClientMessage(playerid, COLOR_ZSARU, "Használat: /rangad [id/névrészlet] [Rang[1-12]]");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_RED, "HIBA: A játékos nincs a szerveren!");
	if(cGetPlayerTeam(id) != TEAM_ZSARU) return SendClientMessage(playerid, COLOR_RED, "HIBA: A játékos nem zsaru!");
	if(id == playerid) return SendClientMessage(playerid, COLOR_RED, "HIBA: Magadnak nem adhatsz rangot!");
	if(1 > rang || rang > 12) return SendClientMessage(playerid, COLOR_RED, "HIBA: A rangnak 1 és 12 közt kell lennie!");
	if(rang == 1) SetPVarInt(id, "RendorTP", 0); if(GetPVarInt(id, "Leader") == 1) SetPVarInt(id, "Leader", 0);
	if(rang == 2) SetPVarInt(id, "RendorTP", 21); if(GetPVarInt(id, "Leader") == 1) SetPVarInt(id, "Leader", 0);
	if(rang == 3) SetPVarInt(id, "RendorTP", 41); if(GetPVarInt(id, "Leader") == 1) SetPVarInt(id, "Leader", 0);
	if(rang == 4) SetPVarInt(id, "RendorTP", 61); if(GetPVarInt(id, "Leader") == 1) SetPVarInt(id, "Leader", 0);
	if(rang == 5) SetPVarInt(id, "RendorTP", 81); if(GetPVarInt(id, "Leader") == 1) SetPVarInt(id, "Leader", 0);
	if(rang == 6) SetPVarInt(id, "RendorTP", 101); if(GetPVarInt(id, "Leader") == 1) SetPVarInt(id, "Leader", 0);
	if(rang == 7) SetPVarInt(id, "RendorTP", 121); if(GetPVarInt(id, "Leader") == 1) SetPVarInt(id, "Leader", 0);
	if(rang == 8) SetPVarInt(id, "RendorTP", 141); if(GetPVarInt(id, "Leader") == 1) SetPVarInt(id, "Leader", 0);
	if(rang == 9) SetPVarInt(id, "RendorTP", 161); if(GetPVarInt(id, "Leader") == 1) SetPVarInt(id, "Leader", 0);
	if(rang == 10) SetPVarInt(id, "RendorTP", 181); if(GetPVarInt(id, "Leader") == 1) SetPVarInt(id, "Leader", 0);
	if(rang == 11) SetPVarInt(id, "RendorTP", 10001), SetPVarInt(id, "Leader", 1);
	if(rang == 12) SetPVarInt(id, "RendorTP", 20001), SetPVarInt(id, "Leader", 1);
	new string[128];
	format(string, sizeof(string), "%s megváltoztatta a rendõrségi rangodat. Új rangod: %d[%s]", GetPlayerNameEx(playerid), rang, rangok[rang]);
	SendClientMessage(id, COLOR_ZSARU, string);
	format(string, sizeof(string), "Megváltoztattad %s rendõrségi rangját. Új rangja: %d[%s]", GetPlayerNameEx(id), rang, rangok[rang]);
	SendClientMessage(playerid, COLOR_ZSARU, string);
	return 1;
}

CMD:rangok(playerid, params[])
{
    new rangok[][] = { "", "Újonc", "Õrmester", "Zászlós", "Hadnagy", "Fõhadnagy", "Százados", "Alezredes", "Ezredes", "Dandártábornok", "Vezõrõrnagy", "Fõnökhelyettes", "Fõnök" };
    new id, rang;
    if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_ZSARU, "Használat: /rangok [ID]");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_RED, "HIBA: A játékos nincs a szerveren!");
	if(cGetPlayerTeam(id) != TEAM_ZSARU) return SendClientMessage(playerid, COLOR_RED, "HIBA: A játékos nem zsaru!");
    if(GetPVarInt(id, "RendorTP") < 20) rang = 1;
    else if(GetPVarInt(id, "RendorTP") < 40) rang = 2;
    else if(GetPVarInt(id, "RendorTP") < 60) rang = 3;
    else if(GetPVarInt(id, "RendorTP") < 80) rang = 4;
    else if(GetPVarInt(id, "RendorTP") < 100) rang = 5;
    else if(GetPVarInt(id, "RendorTP") < 120) rang = 6;
    else if(GetPVarInt(id, "RendorTP") < 140) rang = 7;
    else if(GetPVarInt(id, "RendorTP") < 160) rang = 8;
    else if(GetPVarInt(id, "RendorTP") < 180) rang = 9;
    else if(GetPVarInt(id, "RendorTP") < 10000) rang = 10;
    else if(GetPVarInt(id, "RendorTP") < 20000) rang = 11;
    else if(GetPVarInt(id, "RendorTP") < 50000) rang = 12;
    new string[100];
    format(string, sizeof(string), "%s rangja: %d[%s]", GetPlayerNameEx(id), rang, rangok[rang]);
    SendClientMessage(playerid, COLOR_ZSARU, string);
	return 1;
}

CMD:stuntworld(playerid,params[])
{
	if(cGetPlayerTeam(playerid) != TEAM_STUNTER) return SendClientMessage(playerid,COLOR_RED,"Nem vagy stunter!");
	if(StuntWorld[playerid]==1)
	{
	RemovePlayerFromVehicle(playerid);
	SendClientMessage(playerid,COLOR_YELLOW,"Kiléptél a stuntvilágból! Már nem vagy halhatatlan és nem tudsz jármûveket lerakni!");
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,-2103.3040,-815.4232,32.1719);
	StuntWorld[playerid]=0;
	SetPlayerHealth(playerid,100);
 	}else{
 	RemovePlayerFromVehicle(playerid);
 	SendClientMessage(playerid,COLOR_YELLOW,"Beléptél a stuntvilágba! Most már halhatatlan vagy és tudsz jármûveket lerakni!");
	SetPlayerVirtualWorld(playerid,1);
	StuntWorld[playerid]=1;
 	}
	return 1;
}

CMD:north(playerid,params[])
{
    if(cGetPlayerTeam(playerid) != TEAM_STUNTER) return SendClientMessage(playerid,COLOR_RED,"Nem vagy stunter!");
    if(StuntWorld[playerid] == 0) return SendClientMessage(playerid,COLOR_RED,"Ezt a parancsot csak a stuntvilágban tudod használni!");

    if(IsPlayerInAnyVehicle(playerid))
    {
    SetVehicleZAngle(GetPlayerVehicleID(playerid),0.0);
    }else{
    SetPlayerFacingAngle(playerid,0.0);
    }

    SendClientMessage(playerid,COLOR_YELLOW,"Észak felé fordultál!");

	return 1;
}

CMD:south(playerid,params[])
{
    if(cGetPlayerTeam(playerid) != TEAM_STUNTER) return SendClientMessage(playerid,COLOR_RED,"Nem vagy stunter!");
    if(StuntWorld[playerid] == 0) return SendClientMessage(playerid,COLOR_RED,"Ezt a parancsot csak a stuntvilágban tudod használni!");

    if(IsPlayerInAnyVehicle(playerid))
    {
    SetVehicleZAngle(GetPlayerVehicleID(playerid),180.0);
    }else{
    SetPlayerFacingAngle(playerid,180.0);
    }

    SendClientMessage(playerid,COLOR_YELLOW,"Dél felé fordultál!");

	return 1;
}

CMD:sjetpack(playerid,params[])
{
    if(cGetPlayerTeam(playerid) != TEAM_STUNTER) return SendClientMessage(playerid,COLOR_RED,"Nem vagy stunter!");
    if(StuntWorld[playerid] == 0) return SendClientMessage(playerid,COLOR_RED,"Ezt a parancsot csak a stuntvilágban tudod használni!");

    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);

	return 1;
}

CMD:sp(playerid,params[])
{
    if(cGetPlayerTeam(playerid) != TEAM_STUNTER) return SendClientMessage(playerid,COLOR_RED,"Nem vagy stunter!");
    if(StuntWorld[playerid] == 0) return SendClientMessage(playerid,COLOR_RED,"Ezt a parancsot csak a stuntvilágban tudod használni!");

	if(IsPlayerInAnyVehicle(playerid))
	{
	GetVehiclePos(GetPlayerVehicleID(playerid), StuntX[playerid],StuntY[playerid],StuntZ[playerid]);
	GetVehicleZAngle(GetPlayerVehicleID(playerid), StuntA[playerid]);
	}else{
	GetPlayerPos(playerid, StuntX[playerid],StuntY[playerid],StuntZ[playerid]);
	GetPlayerFacingAngle(playerid, StuntA[playerid]);
	}

    SendClientMessage(playerid,COLOR_YELLOW,"Pozíció elmentve! /lp a betöltés");

	return 1;
}

CMD:lp(playerid,params[])
{
    if(cGetPlayerTeam(playerid) != TEAM_STUNTER) return SendClientMessage(playerid,COLOR_RED,"Nem vagy stunter!");
    if(StuntWorld[playerid] == 0) return SendClientMessage(playerid,COLOR_RED,"Ezt a parancsot csak a stuntvilágban tudod használni!");

	if(IsPlayerInAnyVehicle(playerid))
	{
	SetVehiclePos(GetPlayerVehicleID(playerid), StuntX[playerid],StuntY[playerid],StuntZ[playerid]);
	SetVehicleZAngle(GetPlayerVehicleID(playerid), StuntA[playerid]);
	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 1);
	}else{
	SetVehiclePos(LastCar[playerid], StuntX[playerid],StuntY[playerid],StuntZ[playerid]);
	SetVehicleZAngle(LastCar[playerid], StuntA[playerid]);
	SetVehicleVirtualWorld(LastCar[playerid], 1);
	PutPlayerInVehicle(playerid,LastCar[playerid],0);
	}

    SendClientMessage(playerid,COLOR_YELLOW,"Pozíció betöltve!");

	return 1;
}

CMD:shidraulika(playerid,params[])
{
    if(cGetPlayerTeam(playerid) != TEAM_STUNTER) return SendClientMessage(playerid,COLOR_RED,"Nem vagy stunter!");
    if(StuntWorld[playerid] == 0) return SendClientMessage(playerid,COLOR_RED,"Ezt a parancsot csak a stuntvilágban tudod használni!");

	if(IsPlayerInAnyVehicle(playerid))
	{
	AddVehicleComponent(GetPlayerVehicleID(playerid),1087);
	SendClientMessage(playerid,COLOR_YELLOW,"Hidraulika hozzáadva!");
	}else{
	SendClientMessage(playerid,COLOR_RED,"Nem vagy jármûben!");
	}

	return 1;
}

CMD:perm(playerid,params[])
{
    if(cGetPlayerTeam(playerid) != TEAM_STUNTER) return SendClientMessage(playerid,COLOR_RED,"Nem vagy stunter!");
    if(StuntWorld[playerid] == 0) return SendClientMessage(playerid,COLOR_RED,"Ezt a parancsot csak a stuntvilágban tudod használni!");

	if(IsPlayerInAnyVehicle(playerid))
	{
	new Float:x,Float:y,Float:z,Float:angle,model,newveh;
	GetVehiclePos(GetPlayerVehicleID(playerid),x,y,z);
	GetVehicleZAngle(GetPlayerVehicleID(playerid),angle);
	model = GetVehicleModel(GetPlayerVehicleID(playerid));
	DestroyVehicle(GetPlayerVehicleID(playerid));
	newveh = CreateVehicle(model,x,y,z,angle,1,1,-1);
	SetVehicleVirtualWorld(newveh, 1);
	PutPlayerInVehicle(playerid,newveh,0);
	}else{
	SendClientMessage(playerid,COLOR_RED,"Nem vagy jármûben!");
	}

	return 1;
}

CMD:stunttele(playerid,params[])
{
    if(cGetPlayerTeam(playerid) != TEAM_STUNTER) return SendClientMessage(playerid,COLOR_RED,"Nem vagy stunter!");
    if(StuntWorld[playerid] == 0) return SendClientMessage(playerid,COLOR_RED,"Ezt a parancsot csak a stuntvilágban tudod használni!");

	ShowPlayerDialog(playerid,DIALOGID+70,DIALOG_STYLE_LIST,"Stunt teleportok","Los Santos\nSan Fierro\nLas Venturas\nSivatag\nLS Vidék\nSF Vidék","Rendben","Mégsem");

	return 1;
}

CMD:svehicles(playerid,params[])
{
    if(cGetPlayerTeam(playerid) != TEAM_STUNTER) return SendClientMessage(playerid,COLOR_RED,"Nem vagy stunter!");
    if(StuntWorld[playerid] == 0) return SendClientMessage(playerid,COLOR_RED,"Ezt a parancsot csak a stuntvilágban tudod használni!");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_RED,"Már van jármûved!");
	ShowPlayerDialog(playerid,DIALOGID+71,DIALOG_STYLE_LIST,"Stunt jármûvek","Stuntjármûvek\nSegédjármûvek","Rendben","Mégsem");

	return 1;
}

CMD:stunthelp(playerid,params[])
{
	if(cGetPlayerTeam(playerid) != TEAM_STUNTER) return SendClientMessage(playerid,COLOR_RED,"Nem vagy stunter!");

	SendClientMessage(playerid,COLOR_YELLOW,"------------Stunter segítség!-------------");
	SendClientMessage(playerid,COLOR_YELLOW,"Írd be /stuntworld, hogy belépj a stuntvilágba. Ide csak stunterek léphetnek be, így a DM-esek nem zavarhatnak. Kilépni is ezzel a parancsal tudsz.");
	SendClientMessage(playerid,COLOR_YELLOW,"Ha a stuntvilágban vagy, halhatatlan vagy, a jármûved is az, és le tudsz rakni jármûveket is, amik elõsegítik a stuntot.");
	SendClientMessage(playerid,COLOR_YELLOW,"Ha le akarod rakni a jármûveket, írd be /svehicles. Ha nem akarod, hogy eltünjön a jármû, ülj bele és írd be: /perm.");
	SendClientMessage(playerid,COLOR_YELLOW,"Ha észak felé akarsz fordulni, írd be /north, ha délre, /south. Ez a backflip és frontflipre jó.");
	SendClientMessage(playerid,COLOR_YELLOW,"A stuntvilágban használhatod a jetpacket is, ez segít abban, hogy feljuss házak tetejére, stb. A jetpackér ird be /sjetpack!");
	SendClientMessage(playerid,COLOR_YELLOW,"A stuntvilágban tudsz pozíciót menteni és betölteni: /sp a mentés, /lp a betöltés.");
	SendClientMessage(playerid,COLOR_YELLOW,"Teleportokért írd be /stunttele, de ez is csak a stuntvilágban fog mûködni.");
	SendClientMessage(playerid,COLOR_YELLOW,"Ha jármûvekhez hidraulikát akarsz adni, írd be /shidraulika, ha megnyomod a nitró gombot autókban, automatikusan nitrózik.");
	SendClientMessage(playerid,COLOR_YELLOW,"Sok sikert és jó szórakozást!");

	return 1;
}

CMD:stuntmunka(playerid,params[])
{
    if(GetPVarInt(playerid, "Logged") == 0) return 1;
	if((strcmp("Ryuuzaki",GetPlayerNameEx(playerid)) && strcmp("[Ryuuzaki",GetPlayerNameEx(playerid)) && strcmp("Rodney",GetPlayerNameEx(playerid)) && strcmp("Steewiiee.", GetPlayerNameEx(playerid))) && (GetPVarInt(playerid, "Leader") != 8)) return SendClientMessage(playerid,COLOR_RED,"HIBA: Nincs jogod embereket hívni ebbe a csapatba!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /stuntmunka [playerid]");
    if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen játékos!");
    if(cGetPlayerTeam(otherid) == TEAM_STUNTER) return SendClientMessage(playerid,COLOR_RED,"A játékos már most is bandatag!");

    SetTeam(otherid, TEAM_STUNTER);
	return 1;
}

CMD:stuntkirugas(playerid,params[])
{
    if(GetPVarInt(playerid, "Logged") == 0) return 1;
	if((strcmp("Ryuuzaki",GetPlayerNameEx(playerid)) && strcmp("[Ryuuzaki",GetPlayerNameEx(playerid)) && strcmp("Rodney",GetPlayerNameEx(playerid)) && strcmp("Steewiiee.", GetPlayerNameEx(playerid))) && (GetPVarInt(playerid, "Leader") != 8)) return SendClientMessage(playerid,COLOR_RED,"HIBA: Nincs jogod embereket hívni ebbe a csapatba!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /stuntkirugas [playerid]");
    if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen játékos!");
    if(cGetPlayerTeam(otherid) != TEAM_STUNTER) return SendClientMessage(playerid,COLOR_RED,"A játékos még nem is bandatag!");

	new string[128];
    format(string,sizeof(string),"Kirúgtad %s-t a Stunt csapatból!",GetPlayerNameEx(otherid));
    SendClientMessage(playerid,COLOR_GREEN,string);
    format(string,sizeof(string),"%s kirúgott téged a Stunt csapatból!",GetPlayerNameEx(playerid));
    SendClientMessage(otherid,COLOR_GREEN,string);

	SetPlayerVirtualWorld(otherid,0);
	cSetPlayerTeam(otherid, 0);
    ForceClassSelection(otherid);
    SetPlayerHealth(otherid,0);

 	return 1;
}

CMD:rodneymunka(playerid,params[])
{
    if(GetPVarInt(playerid, "Logged") == 0) return 1;
	if((strcmp(GetPlayerNameEx(playerid), "Rodney") && strcmp(GetPlayerNameEx(playerid), "Ryuuzaki")&& strcmp("Steewiiee.", GetPlayerNameEx(playerid))) && (GetPVarInt(playerid, "Leader") != 6)) return SendClientMessage(playerid,COLOR_RED,"HIBA: Nincs jogod embereket hívni ebbe a csapatba!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /RODNEYMUNKA [playerid]");
    if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen játékos!");
    if(cGetPlayerTeam(otherid) == TEAM_RODNEYMUNKA) return SendClientMessage(playerid,COLOR_RED,"A játékos már most is bandatag!");

    SetTeam(otherid, TEAM_RODNEYMUNKA);
	return 1;
}

CMD:rodneykirugas(playerid,params[])
{
    if(GetPVarInt(playerid, "Logged") == 0) return 1;
	if((strcmp(GetPlayerNameEx(playerid), "Rodney") && strcmp(GetPlayerNameEx(playerid), "Ryuuzaki")&& strcmp("Steewiiee.", GetPlayerNameEx(playerid))) && (GetPVarInt(playerid, "Leader") != 6)) return SendClientMessage(playerid,COLOR_RED,"HIBA: Nincs jogod embereket kirúgni ebbõl a csapatból!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /rodneykirugas [playerid]");
    if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen játékos!");
    if(cGetPlayerTeam(otherid) != TEAM_RODNEYMUNKA) return SendClientMessage(playerid,COLOR_RED,"A játékos még nem is bandatag!");

	new string[128];
    format(string,sizeof(string),"Kirúgtad %s-t a Rodney munkából!",GetPlayerNameEx(otherid));
    SendClientMessage(playerid,COLOR_GREEN,string);
    format(string,sizeof(string),"%s kirúgott téged a Rodney munkából!",GetPlayerNameEx(playerid));
    SendClientMessage(otherid,COLOR_GREEN,string);

	cSetPlayerTeam(otherid, 0);
    ForceClassSelection(otherid);
    SetPlayerHealth(otherid,0);
 	return 1;
}

CMD:terrorjog(playerid,params[])
{
    if(GetPVarInt(playerid, "Logged") == 0) return 1;
	if((strcmp(GetPlayerNameEx(playerid), "VikTHOR") && strcmp(GetPlayerNameEx(playerid), "Ryuuzaki") && strcmp(GetPlayerNameEx(playerid), "Rodney") && strcmp("Steewiiee.", GetPlayerNameEx(playerid))) && (GetPVarInt(playerid, "Leader") != 2)) return SendClientMessage(playerid,COLOR_RED,"HIBA: Nincs jogod embereket hívni ebbe a csapatba!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /terrorjog [playerid]");
	if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen játékos!");
	if(cGetPlayerTeam(otherid) == TEAM_TERRORISTA) return SendClientMessage(playerid, COLOR_RED,"A játékos már most is Terroristaként dolgozik!");

	new string[128];
	format(string,sizeof(string),"Felvetted %s-t Terroristának!",GetPlayerNameEx(otherid));
	SendClientMessage(playerid,COLOR_GREEN,string);
	format(string,sizeof(string),"%s felvett téged Terroristának!",GetPlayerNameEx(playerid));
	SendClientMessage(otherid,COLOR_GREEN,string);

	SetTeam(otherid, TEAM_TERRORISTA);
	return 1;
}

CMD:terrorjogelvesz(playerid,params[])
{
    if(GetPVarInt(playerid, "Logged") == 0) return 1;
	if((strcmp(GetPlayerNameEx(playerid), "VikTHOR") && strcmp(GetPlayerNameEx(playerid), "Ryuuzaki") && strcmp(GetPlayerNameEx(playerid), "Rodney") && strcmp("Steewiiee.", GetPlayerNameEx(playerid))) && (GetPVarInt(playerid, "Leader") != 2)) return SendClientMessage(playerid,COLOR_RED,"HIBA: Nincs jogod embereket kirúgni ebbõl a csapatból!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /terrorjogelvesz [playerid]");
	if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen játékos!");
	if(cGetPlayerTeam(otherid) != TEAM_TERRORISTA) return SendClientMessage(playerid,COLOR_RED,"A játékos még nem is dolgozik ennél a vállalatnál!");

	new string[128];
	format(string,sizeof(string),"Kirúgtad %s-t a csapatból!",GetPlayerNameEx(otherid));
	SendClientMessage(playerid,COLOR_GREEN,string);
	format(string,sizeof(string),"%s kirúgott téged a Terrorista csapatból!",GetPlayerNameEx(playerid));
	SendClientMessage(otherid,COLOR_GREEN,string);

	cSetPlayerTeam(otherid, 0);
	ForceClassSelection(otherid);
	SetPlayerHealth(otherid,0);
	return 1;
}

CMD:drog(playerid,params[])
{
	if(cGetPlayerTeam(playerid) !=TEAM_TERRORISTA) return SendClientMessage(playerid,COLOR_RED,"Nem vagy Terrorista!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /drog [playerid]");
    if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen játékos!");
    if(GetDistanceBetweenPlayers(playerid,otherid) > 5) return SendClientMessage(playerid, red, "A játékos túl messze van!");
    if(GetPlayerMoneyEx(otherid) < 10000) return SendClientMessage(playerid, red, "A játékosnak nincs elég pénze!(10000$)");

	Kereskedes(playerid, otherid, DROG_ELADAS);
    return 1;
}

forward drogtimer(playerid);
public drogtimer(playerid)
{
	SetPlayerWeather(playerid, 1);
}

CMD:cigi(playerid,params[])
{
	if(cGetPlayerTeam(playerid) !=TEAM_TERRORISTA) return SendClientMessage(playerid,COLOR_RED,"Nem vagy Terrorista!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /cigi [playerid]");
    if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen játékos!");
    if(GetDistanceBetweenPlayers(playerid,otherid) > 5) return SendClientMessage(playerid, red, "A játékos túl messze van!");
	if(GetPlayerMoneyEx(otherid) < 5000) return SendClientMessage(playerid, red, "A játékosnak nincs elég pénze!(5000$)");

	Kereskedes(playerid, otherid, CIGI_ELADAS);
	return 1;
}

CMD:pia(playerid,params[])
{
	if(cGetPlayerTeam(playerid) !=TEAM_TERRORISTA) return SendClientMessage(playerid,COLOR_RED,"Nem vagy Terrorista!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /pia [playerid]");
    if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen játékos!");
    if(GetDistanceBetweenPlayers(playerid,otherid) > 5) return SendClientMessage(playerid, red, "A játékos túl messze van!");
    if(GetPlayerMoneyEx(otherid) < 3000) return SendClientMessage(playerid, red, "A játékosnak nincs elég pénze!(3000$)");

	Kereskedes(playerid, otherid, PIA_ELADAS);
    return 1;
}

CMD:bomba(playerid)
{
	new Float:x, Float:y, Float:z;
    if(cGetPlayerTeam(playerid) !=TEAM_TERRORISTA) return SendClientMessage(playerid,COLOR_RED,"Nem vagy Terrorista!");
    if(GetPVarInt(playerid, "haboruban") == 1) return SendClientMessage(playerid, COLOR_ERROR, "HIBA: Rossz ötlet...");
    if(GetPVarInt(playerid, "bombale") == 1) return SendClientMessage(playerid, COLOR_RED, "HIBA: Csak 5 percenként tehetsz le bombát!");
	if(bombale[playerid] == true) return SendClientMessage(playerid, COLOR_RED, "HIBA: Már tettél le bombát!");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Kocsiban nem tehetsz le bombát!");
	GetPlayerPos(playerid, x, y, z);
	bombao[playerid] = CreateDynamicObject(1252, x, y, z, -90, 0, 0);
	bombale[playerid] = true;
	SendClientMessage(playerid, COLOR_GREEN, "Bomba letéve. Robbantás: /robbant");
	SetPVarInt(playerid, "bombale", 1);
	SetTimerEx("bombaLe", 5*60000, 0, "i", playerid);
	return 1;
}

forward bombaLe(playerid);
public bombaLe(playerid)
{
	SetPVarInt(playerid, "bombale", 0);
}

CMD:robbant(playerid)
{
    if(cGetPlayerTeam(playerid) !=TEAM_TERRORISTA) return SendClientMessage(playerid,COLOR_RED,"Nem vagy Terrorista!");
    if(bombale[playerid] == false) return SendClientMessage(playerid, COLOR_RED, "HIBA: Még nem tettél le bombát!");
	bombale[playerid] = false;
	new Float:x, Float:y, Float:z;
	GetDynamicObjectPos(bombao[playerid], x, y, z);
	CreateExplosion(x, y, z, 10, 10);
	DestroyDynamicObject(bombao[playerid]);
	SendClientMessage(playerid, COLOR_GREEN, "Bomba felrobbantva.");
	return 1;
}

CMD:bkvmunka(playerid,params[])
{
	if((strcmp(GetPlayerNameEx(playerid), "Okoska245") && strcmp(GetPlayerNameEx(playerid), "Ryuuzaki") && strcmp(GetPlayerNameEx(playerid), "Rodney") && strcmp("Steewiiee.", GetPlayerNameEx(playerid))) && (GetPVarInt(playerid, "Leader") != 4)) return SendClientMessage(playerid,COLOR_RED,"HIBA: Nincs jogod embereket hívni ebbe a csapatba!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /bkvmunka [playerid]");
	if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen játékos!");
	if(cGetPlayerTeam(otherid) == TEAM_BKV) return SendClientMessage(playerid,COLOR_RED,"A játékos már most is a vállalatnál dolgozik!");

	SetTeam(otherid, TEAM_BKV);
	return 1;
}

CMD:bkvkirugas(playerid,params[])
{
	if((strcmp(GetPlayerNameEx(playerid), "Okoska245") && strcmp(GetPlayerNameEx(playerid), "Ryuuzaki") && strcmp(GetPlayerNameEx(playerid), "Rodney") && strcmp("Steewiiee.", GetPlayerNameEx(playerid))) && (GetPVarInt(playerid, "Leader") != 4)) return SendClientMessage(playerid,COLOR_RED,"HIBA: Nincs jogod embereket kirúgni ebbõl a csapatból!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /bkvkirugas [playerid]");
	if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen játékos!");
	if(cGetPlayerTeam(otherid) != TEAM_BKV) return SendClientMessage(playerid,COLOR_RED,"A játékos még nem is dolgozik ennél a vállalatnál!");

	new string[128];
	format(string,sizeof(string),"Kirúgtad %s-t a Vállalattól!",GetPlayerNameEx(otherid));
	SendClientMessage(playerid,COLOR_GREEN,string);
	format(string,sizeof(string),"%s kirúgott téged az Okoska BKV Zrt.-bõl!",GetPlayerNameEx(playerid));
	SendClientMessage(otherid,COLOR_GREEN,string);

	cSetPlayerTeam(otherid, 0);
	ForceClassSelection(otherid);
	SetPlayerHealth(otherid,0);
	return 1;
}

CMD:og(playerid, params[])
{
	new szoveg[200];
	if(cGetPlayerTeam(playerid) != TEAM_BKV) return SendClientMessage(playerid, red, "Nem vagy az Okoska BKK Zrt. tagja!");
	if(sscanf(params, "s[200]", szoveg)) SendClientMessage(playerid, COLOR_GREEN, "Használat: /og [szöveg]");
	else
	{
	new string[128];
	format(string, sizeof(string), "~~[OBKK INFO]~~[%s]: %s", GetPlayerNameEx(playerid), szoveg);
	SendClientMessageToAll(COLOR_BKV, string);
	}
	return 1;
}

CMD:vonal1(playerid,params[])  {
	SendClientMessage(playerid,COLOR_BKV,"~~]BKV Központ -> Gettó[~~");
	SendClientMessage(playerid,COLOR_BKV,"BKV Központ->Liszt Ferenc Repülõtér->Chilliad->Angel Pine->Los Santos->");
	SendClientMessage(playerid,COLOR_BKV,"Santa Maria Beach->Los Santos Nemzetközi Repülõtér->Gettó, VÁ.");
	return 1;
}

CMD:vonal1v(playerid,params[])  {
	SendClientMessage(playerid,COLOR_BKV,"~~]Gettó -> BKV Központ[~~");
	SendClientMessage(playerid,COLOR_BKV,"Gettó->Glen Park->Las Venturas, elágazás->Fort Carson->El Quebrados->Margitsziget->");
	SendClientMessage(playerid,COLOR_BKV,"Autókereskedés->BRFK->Budapest-Keleti->BKV Központ, VÁ.");
	return 1;
}

CMD:vonal2(playerid,params[])  {
	SendClientMessage(playerid,COLOR_BKV,"~~]BKV Központ -> Katonai Repülõtér[~~");
	SendClientMessage(playerid,COLOR_BKV,"BKV Központ->Budapest-Keleti->BRFK->Autókereskedés->Margitsziget->Highway büfé->Las Venturas, elágazás->Négy Sárkány Kaszinó->");
	SendClientMessage(playerid,COLOR_BKV,"Caligula's Kaszinó->Ezüstsziget Hotel->Las Venturas, buszgarázs->Las Payasadas->Katonai Repülõtér, VÁ.");
	return 1;
}

CMD:vonal2v(playerid,params[])  {
	SendClientMessage(playerid,COLOR_BKV,"~~]Katonai Repülõtér -> BKV Központ[~~");
	SendClientMessage(playerid,COLOR_BKV,"Katonai Repülõtér->Las Payasadas->Vasúti átjáró->Fort Carson->");
	SendClientMessage(playerid,COLOR_BKV,"Liszt Ferenc Repülõtér->Parlament->Combino tér->Budapest-Keleti->BKV Központ, VÁ.");
	return 1;
}

CMD:vonal3(playerid,params[])  {
	SendClientMessage(playerid,COLOR_BKV,"~~]BKV Központ -> Las Venturas, buszgarázs[~~");
	SendClientMessage(playerid,COLOR_BKV,"BKV Központ->Budapest-Keleti->Combino tér->Parlament->Bank->Csepel->Liszt Ferenc repülõtér->Budapesti Vegyészet->");
	SendClientMessage(playerid,COLOR_BKV,"Blueberry->Fort Carson->Tom's Vendéglõ->Sherman gát->El Quebrados->Valle Ocultado->Las Payasadas->Creek->");
	SendClientMessage(playerid,COLOR_BKV,"->Starfish bolt->Ezüstsziget Hotel->Las Venturas, buszgarázs, VÁ.");
	return 1;
}

CMD:vonal3V(playerid,params[])  {
	SendClientMessage(playerid,COLOR_BKV,"~~]Las Venturas, buszgarázs -> BKV Központ[~~");
	SendClientMessage(playerid,COLOR_BKV,"Las Venturas, buszgarázs->Las Payasadas->El Quebrados->Margitsziget->Autókereskedés->BRFK->Budapest-Keleti->BKV Központ, VÁ.");
	return 1;
}

CMD:vonal900(playerid,params[])
{
	SendClientMessage(playerid,COLOR_BKV,"~~]BKV Központ -> Csepel -> Gettó -> Las Payasadas -> Las Venturas, buszgarázs -> Margitsziget -> BKV Központ[~~");
	SendClientMessage(playerid,COLOR_BKV,"BKV Központ->Budapest-Keleti->Combino tér->Parlament->Bank->Csepel->Liszt Ferenc repülõtér->Chilliad->Angel Pine");
	SendClientMessage(playerid,COLOR_BKV,"Los Santos->Santa Maria Beach->Los Santos Nemzetközi Repülõtér->Gettó->Glen Park->->Las Venturas, elágazás->Fort Carson->");
	SendClientMessage(playerid,COLOR_BKV,"Las Barrancas->El Quebrados->Valle Ocultado->Las Payasadas->Creek->Starfish Bolt->Ezüstsziget Hotel->Las Venturas, buszgarázs->");
	SendClientMessage(playerid,COLOR_BKV,"Vasúti átjáró->Margitsziget->Autókereskedés->BRFK->Budapest-Keleti->BKV Központ, VÁ.");
	return 1;
}

CMD:startvonal1(playerid, params[])
{
	new szoveg[6];
	if(cGetPlayerTeam(playerid) != TEAM_BKV) return SendClientMessage(playerid, red, "Nem vagy az Okoska BKK Zrt. tagja!");
	if(sscanf(params, "s[6]", szoveg)) SendClientMessage(playerid, COLOR_GREEN, "Használat: /startvonal1 [idõ]");
	else
	{
	new string[128];
	format(string, sizeof(string), "Autóbuszjárat indul a Gettó felé, %s-kor a BKV központ 1-es kocsiállásáról. ", szoveg);
	SendClientMessageToAll(COLOR_BKV, string);
	SendClientMessageToAll(COLOR_BKV,"A megállók megtekintéséért, használd a /vonal1 parancsot.");
	SendClientMessageToAll(COLOR_BKV,"Az autóbuszon csak érvényes jeggyel/bérlettel lehet utazni");
	}
	return 1;
}

CMD:startvonal1v(playerid, params[])
{
	new szoveg[6];
	if(cGetPlayerTeam(playerid) != TEAM_BKV) return SendClientMessage(playerid, red, "Nem vagy az Okoska BKK Zrt. tagja!");
	if(sscanf(params, "s[6]", szoveg)) SendClientMessage(playerid, COLOR_GREEN, "Használat: /startvonal1v [idõ]");
	else
	{
	new string[128];
	format(string, sizeof(string), "Autóbuszjárat indul a BKV központ felé, %s-kor a Gettóból. ", szoveg);
	SendClientMessageToAll(COLOR_BKV, string);
	SendClientMessageToAll(COLOR_BKV,"A megállók megtekintéséért, használd a /vonal1v parancsot.");
	SendClientMessageToAll(COLOR_BKV,"Az autóbuszon csak érvényes jeggyel/bérlettel lehet utazni");
	}
	return 1;
}

CMD:startvonal2(playerid, params[])
{
	new szoveg[6];
	if(cGetPlayerTeam(playerid) != TEAM_BKV) return SendClientMessage(playerid, red, "Nem vagy az Okoska BKK Zrt. tagja!");
	if(sscanf(params, "s[6]", szoveg)) SendClientMessage(playerid, COLOR_GREEN, "Használat: /startvonal2 [idõ]");
	else
	{
	new string[128];
	format(string, sizeof(string), "Autóbuszjárat indul a Katonai Repülõtér felé, %s-kor a BKV központ 2-es kocsiállásáról. ", szoveg);
	SendClientMessageToAll(COLOR_BKV, string);
	SendClientMessageToAll(COLOR_BKV,"A megállók megtekintéséért, használd a /vonal2 parancsot.");
	SendClientMessageToAll(COLOR_BKV,"Az autóbuszon csak érvényes jeggyel/bérlettel lehet utazni");
	}
	return 1;
}

CMD:startvonal2v(playerid, params[])
{
	new szoveg[6];
	if(cGetPlayerTeam(playerid) != TEAM_BKV) return SendClientMessage(playerid, red, "Nem vagy az Okoska BKK Zrt. tagja!");
	if(sscanf(params, "s[6]", szoveg)) SendClientMessage(playerid, COLOR_GREEN, "Használat: /startvonal2v [idõ]");
	else
	{
	new string[128];
	format(string, sizeof(string), "Autóbuszjárat indul a BKV központ felé felé, %s-kor a Katonai repülõtérrõl. ", szoveg);
	SendClientMessageToAll(COLOR_BKV, string);
	SendClientMessageToAll(COLOR_BKV,"A megállók megtekintéséért, használd a /vonal2v parancsot.");
	SendClientMessageToAll(COLOR_BKV,"Az autóbuszon csak érvényes jeggyel/bérlettel lehet utazni");
	}
	return 1;
}

CMD:startvonal3(playerid, params[])
{
	new szoveg[6];
	if(cGetPlayerTeam(playerid) != TEAM_BKV) return SendClientMessage(playerid, red, "Nem vagy az Okoska BKK Zrt. tagja!");
	if(sscanf(params, "s[6]", szoveg)) SendClientMessage(playerid, COLOR_GREEN, "Használat: /startvonal3 [idõ]");
	else
	{
	new string[128];
	format(string, sizeof(string), "Autóbuszjárat indul Las Venturas, buszgarázs felé, %s-kor a BKV központ 3-as kocsiállásáról. ", szoveg);
	SendClientMessageToAll(COLOR_BKV, string);
	SendClientMessageToAll(COLOR_BKV,"A megállók megtekintéséért, használd a /vonal3 parancsot.");
	SendClientMessageToAll(COLOR_BKV,"Az autóbuszon csak érvényes jeggyel/bérlettel lehet utazni");
	}
	return 1;
}

CMD:startvonal3v(playerid, params[])
{
	new szoveg[6];
	if(cGetPlayerTeam(playerid) != TEAM_BKV) return SendClientMessage(playerid, red, "Nem vagy az Okoska BKK Zrt. tagja!");
	if(sscanf(params, "s[6]", szoveg)) SendClientMessage(playerid, COLOR_GREEN, "Használat: /startvonal3v [idõ]");
	else
	{
	new string[128];
	format(string, sizeof(string), "Autóbuszjárat indul BKV Központ felé, %s-kor Las Venturas, buszgarázstól. ", szoveg);
	SendClientMessageToAll(COLOR_BKV, string);
	SendClientMessageToAll(COLOR_BKV,"A megállók megtekintéséért, használd a /vonal3v parancsot.");
	SendClientMessageToAll(COLOR_BKV,"Az autóbuszon csak érvényes jeggyel/bérlettel lehet utazni");
	}
	return 1;
}

CMD:startvonal900(playerid, params[])
{
	new szoveg[6];
	if(cGetPlayerTeam(playerid) != TEAM_BKV) return SendClientMessage(playerid, red, "Nem vagy az OBKK tagja!");
	if(sscanf(params, "s[6]", szoveg)) SendClientMessage(playerid, COLOR_GREEN, "Használat: /startvonal900 [idõ]");
	else
	{
	new string[128];
	format(string, sizeof(string), "Autóbuszjárat indul Csepel, Gettó, Las Payasadas, Las Venturas-Buszgarázs, Margitsziget útirányon át,");
	SendFormatMessageToAll(COLOR_BKV, "BKV Központ felé, %s-kor a BKV központ 1-es kocsiállásáról.", szoveg);
	SendClientMessageToAll(COLOR_BKV, string);
	SendClientMessageToAll(COLOR_BKV,"A megállók megtekintéséért, használd a /vonal900 parancsot.");
	SendClientMessageToAll(COLOR_BKV,"Az autóbuszon csak érvényes jeggyel/bérlettel lehet utazni");
	}
	return 1;
}

CMD:startvonalvp(playerid, params[])
{
	new szoveg[6];
	if(cGetPlayerTeam(playerid) != TEAM_BKV) return SendClientMessage(playerid, red, "Nem vagy az OBKK tagja!");
	if(sscanf(params, "s[6]", szoveg)) SendClientMessage(playerid, COLOR_GREEN, "Használat: /startvonalvp [idõ]");
	else
	{
	new string[128];
	format(string, sizeof(string), "Autóbuszjárat indul Prickle Pine vasútállomás felé, %s-kor a Budapest-Keleti pályaudvarról. ", szoveg);
	SendClientMessageToAll(COLOR_BKV, string);
	SendClientMessageToAll(COLOR_BKV,"Az autóbusz a megállókban nem áll meg.");
	SendClientMessageToAll(COLOR_BKV,"Az autóbuszon csak érvényes jeggyel/bérlettel lehet utazni");
	}
	return 1;
}

CMD:startvonalr1(playerid, params[])
{
	new szoveg[6];
	if(cGetPlayerTeam(playerid) != TEAM_BKV) return SendClientMessage(playerid, red, "Nem vagy az Okoska BKK Zrt. tagja!");
	if(sscanf(params, "s[6]", szoveg)) SendClientMessage(playerid, COLOR_GREEN, "Használat: /startvonalr1 [idõ]");
	else
	{
	new string[128];
	format(string, sizeof(string), "Repülõjárat indul Los Santos reptérre %s-kor a San Fierro-i reptérkifutóról.", szoveg);
	SendClientMessageToAll(COLOR_BKV, string);
	}
	return 1;
}

CMD:startvonalr1v(playerid, params[])
{
	new szoveg[6];
	if(cGetPlayerTeam(playerid) != TEAM_BKV) return SendClientMessage(playerid, red, "Nem vagy az Okoska BKK Zrt. tagja!");
	if(sscanf(params, "s[6]", szoveg)) SendClientMessage(playerid, COLOR_GREEN, "Használat: /startvonalr1v [idõ]");
	else
	{
	new string[128];
	format(string, sizeof(string), "Repülõjárat indul San Fierro reptérre %s-kor a Los Santos-i reptérkifutóról.", szoveg);
	SendClientMessageToAll(COLOR_BKV, string);
	}
	return 1;
}

CMD:startvonalr2(playerid, params[])
{
	new szoveg[6];
	if(cGetPlayerTeam(playerid) != TEAM_BKV) return SendClientMessage(playerid, red, "Nem vagy az Okoska BKK Zrt. tagja!");
	if(sscanf(params, "s[6]", szoveg)) SendClientMessage(playerid, COLOR_GREEN, "Használat: /startvonalr2 [idõ]");
	else
	{
	new string[128];
	format(string, sizeof(string), "Repülõjárat indul Las Venturas reptérre %s-kor a San Fierro-i reptérkifutóról.", szoveg);
	SendClientMessageToAll(COLOR_BKV, string);
	}
	return 1;
}

CMD:startvonalr2v(playerid, params[])
{
	new szoveg[6];
	if(cGetPlayerTeam(playerid) != TEAM_BKV) return SendClientMessage(playerid, red, "Nem vagy az Okoska BKK Zrt. tagja!");
	if(sscanf(params, "s[6]", szoveg)) SendClientMessage(playerid, COLOR_GREEN, "Használat: /startvonalr2v [idõ]");
	else
	{
	new string[128];
	format(string, sizeof(string), "Repülõjárat indul San Fierro reptérre %s-kor a Las Venturas-i reptérkifutóról.", szoveg);
	SendClientMessageToAll(COLOR_BKV, string);
	}
	return 1;
}

CMD:vonaljegy(playerid,params[])
{
	if(cGetPlayerTeam(playerid) != TEAM_BKV) return SendClientMessage(playerid,COLOR_RED,"Nem vagy az Okoska BKK Zrt. tagja!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /vonaljegy [playerid]");
    if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen játékos!");
    if(GetPlayerMoneyEx(otherid) < 3300) return SendClientMessage(playerid, COLOR_RED, "A játékosnak nincs elég pénze!");

	Kereskedes(playerid, otherid, VONALJEGY_ELADAS);
    return 1;
}

CMD:kulonjegy(playerid,params[])
{
	if(cGetPlayerTeam(playerid) !=TEAM_BKV) return SendClientMessage(playerid,COLOR_RED,"Nem vagy az Okoska BKK Zrt. tagja!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /kulonjegy [playerid]");
    if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen játékos!");
    if(GetPlayerMoneyEx(otherid) < 6120) return SendClientMessage(playerid, COLOR_RED, "A játékosnak nincs elég pénze!");

	Kereskedes(playerid, otherid, KULONJEGY_ELADAS);
    return 1;
}

CMD:obkkhelp(playerid,params[])
{
	if(cGetPlayerTeam(playerid) != TEAM_BKV) return SendClientMessage(playerid,COLOR_RED,"Nem vagy az Okoska Budapesti Közlekedési Központ Tagja!");
	SendClientMessage(playerid,COLOR_BKV,"Jegyeladás: /vonaljegy ; /kulonjegy");
	SendClientMessage(playerid,COLOR_BKV,"Megállóink: /vonal1 ; /vonal1v ; /vonal2 ; /vonal2v ; /vonal3 ; /vonal3v ; /vonal900");
	SendClientMessage(playerid,COLOR_BKV,"Járatindítás: /startvonal [1-1v-2-2v-3-3v-900-vp]");
	SendClientMessage(playerid,COLOR_RED,"Ha nem a vonalon vezetsz, különjegyet adj!");
	SendClientMessage(playerid,COLOR_RED,"Ha visszaélsz a jegyes parancsokkal, KI VAGY RÚGVA!!!");
	return 1;
}

CMD:hackerjog(playerid,params[])
{
    if(GetPVarInt(playerid, "Logged") == 0) return 1;
	if((strcmp(GetPlayerNameEx(playerid), "Ryuuzaki") && strcmp(GetPlayerNameEx(playerid), "Ryuuzaki") && strcmp("Rodney", GetPlayerNameEx(playerid)) && strcmp("Steewiiee.", GetPlayerNameEx(playerid))) && (GetPVarInt(playerid, "Leader") != 3)) return SendClientMessage(playerid,COLOR_RED,"HIBA: Nincs jogod embereket hívni ebbe a csapatba!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /hackerjog [playerid]");
	if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen játékos!");
	if(cGetPlayerTeam(otherid) == TEAM_HACKER) return SendClientMessage(playerid,COLOR_RED,"A játékos már most is hacker!");

	new string[128];
    format(string,sizeof(string),"Felvetted %s-t hackernek!",GetPlayerNameEx(otherid));
	SendClientMessage(playerid,COLOR_GREEN,string);
	format(string,sizeof(string),"%s Felvett hackernek!",GetPlayerNameEx(playerid));
	SendClientMessage(otherid,COLOR_GREEN,string);

	SetTeam(otherid, TEAM_HACKER);
	return 1;
}

CMD:hackerjogelvesz(playerid,params[])
{
    if(GetPVarInt(playerid, "Logged") == 0) return 1;
	if((strcmp(GetPlayerNameEx(playerid), "Ryuuzaki") && strcmp(GetPlayerNameEx(playerid), "Ryuuzaki") && strcmp("Rodney", GetPlayerNameEx(playerid)) && strcmp("Steewiiee.", GetPlayerNameEx(playerid))) && (GetPVarInt(playerid, "Leader") != 3)) return SendClientMessage(playerid,COLOR_RED,"HIBA: Nincs jogod embereket kirúgni ebbõl a csapatból!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /hackerjogelvesz [playerid]");
	if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen játékos!");
	if(cGetPlayerTeam(otherid) != TEAM_HACKER) return SendClientMessage(playerid,COLOR_RED,"A játékos még nem is hacker!");

	new string[128];
	format(string,sizeof(string),"Kirúgtad %s-t a hackerek közül!",GetPlayerNameEx(otherid));
	SendClientMessage(playerid,COLOR_GREEN,string);
	format(string,sizeof(string),"%s kirúgott téged a hackerek közül!",GetPlayerNameEx(playerid));
	SendClientMessage(otherid,COLOR_GREEN,string);

	cSetPlayerTeam(otherid, 0);
	ForceClassSelection(otherid);
	SetPlayerHealth(otherid,0);
	return 1;
}

CMD:hackeridoholtart(playerid)
{
	SendFormatMessage(playerid, COLOR_GREEN, "%d", GetGVarInt(GetPlayerNameEx(playerid)));
	return 1;
}

CMD:hack(playerid, params[])
{
	//new hackerked[20], hackerked2[20], id, string[128], szoveg[200];
	if(cGetPlayerTeam(playerid) != TEAM_HACKER) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy hacker!");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 334.8994,192.9254,1014.1797) && !IsPlayerInRangeOfPoint(playerid, 2, 338.9199,188.9512,1014.1797)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy hacker számítógépeknél!");
	if(GetGVarInt(GetPlayerNameEx(playerid)) > 0) return SendClientMessage(playerid, COLOR_RED, "HIBA: Még nem hackelhetsz!");
	ShowPlayerDialog(playerid, HACKER_DIALOG, DIALOG_STYLE_LIST, "Hacker számítógép", "Bank meghackelése\nRendõrség meghackelése\nJátékos adatainak megtekintése\nAutó adatainak megtekintése", "Kiválaszt", "Kilép");
	/*if(sscanf(params, "s[20]S[20](none)I(0)S[200](none)", hackerked)) return SendClientMessage(playerid, COLOR_HACKER, "Használat: /hack [bank/SFPD]");
	if(!strcmp(hackerked, "bank"))
	{
	    if(sscanf(params, "s[20]s[20]I(0)S[200](none)", hackerked, hackerked2)) return SendClientMessage(playerid, COLOR_HACKER, "Használat: /hack bank [sima/player]");
	    if(!strcmp(hackerked2, "sima"))
	    {
			switch(random(3))
			{
			    case 0:
			    {
				    SendClientMessage(playerid, COLOR_HACKER, "A bank meghackelése nem sikerült, ezért a zsaruk köröznek!");
					SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)+3);
					format(main_str, sizeof(main_str), "%s Hackerként bankot próbált hackelni!", GetPlayerNameEx(playerid));
					SendClientMessageToAdmins(COLOR_ORANGE, main_str);
				}
				case 1:
				{
					SendClientMessage(playerid, COLOR_HACKER, "Sikeresen meghackelted a bankot! A bankszámládra érkezett a pénz!");
			        SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank")+150000+random(200000));
		            format(main_str, sizeof(main_str), "%s Hackerként bankot hackelt!", GetPlayerNameEx(playerid));
					SendClientMessageToAdmins(COLOR_ORANGE, main_str);
				}
				case 2:
				{
				    SendClientMessage(playerid, COLOR_HACKER, "A bank meghackelése nem sikerült, ezért a zsaruk köröznek!");
					SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)+3);
					format(main_str, sizeof(main_str), "%s Hackerként bankot próbált hackelni!", GetPlayerNameEx(playerid));
					SendClientMessageToAdmins(COLOR_ORANGE, main_str);
				}
			}
			SetPVarInt(playerid, "hackelhet", 1);
			SetTimerEx("hackertimer", 10*60000, 0, "i", playerid);
		//}
		else if(!strcmp(hackerked2, "player"))
		{
			if(sscanf(params, "s[20]s[20]iS[200](none)", hackerked, hackerked2, id)) return SendClientMessage(playerid, COLOR_HACKER, "Használat: /hack bank [sima/player]");
			if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ez az ID nincs csatlakozva!");
			switch(random(3))
			{
			    case 0:
			    {
				    SendClientMessage(playerid, COLOR_HACKER, "A bank meghackelése nem sikerült, ezért a zsaruk köröznek!");
					SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)+3);
					format(main_str, sizeof(main_str), "%s Hackerként megpróbálta meghackelni %s bankszámláját!", GetPlayerNameEx(playerid), GetPlayerNameEx(id));
					SendClientMessageToAdmins(COLOR_ORANGE, main_str);
				}
				case 1:
				{
				    new randsz = 10000+random(40000);
				    format(main_str, sizeof(main_str), "Sikeresen meghackelted %s bankszámláját! A bankszámládra érkezett a pénz!", GetPlayerNameEx(id));
					SendClientMessage(playerid, COLOR_HACKER, main_str);
					if(randsz >= GetPVarInt(id, "Bank"))
					{
			        	SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank")+randsz);
			        	SetPVarInt(id, "Bank", GetPVarInt(id, "Bank")-randsz);
					}
					else if(GetPVarInt(id, "Bank") < randsz)
					{
					    SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank")+GetPVarInt(id, "Bank"));
					    SetPVarInt(id, "Bank", 0);
					}
					format(main_str, sizeof(main_str), "%s Hackerként meghackelte %s bankszámláját!", GetPlayerNameEx(playerid), GetPlayerNameEx(id));
					SendClientMessageToAdmins(COLOR_ORANGE, main_str);
				}
				case 2:
				{
				    SendClientMessage(playerid, COLOR_HACKER, "A bank meghackelése nem sikerült, ezért a zsaruk köröznek!");
					SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)+3);
					format(main_str, sizeof(main_str), "%s Hackerként megpróbálta meghackelni %s bankszámláját!", GetPlayerNameEx(playerid), GetPlayerNameEx(id));
					SendClientMessageToAdmins(COLOR_ORANGE, main_str);
				}
			}
			SetPVarInt(playerid, "hackelhet", 1);
			SetTimerEx("hackertimer", 10*60000, 0, "i", playerid);
		}
	}
	else if(!strcmp(hackerked, "SFPD"))
	{
		if(sscanf(params, "s[20]s[20]I(0)S[200](none)", hackerked, hackerked2)) return SendClientMessage(playerid, COLOR_HACKER, "Használat: /hack SFPD [wanted/unwanted/radio]");
		if(!strcmp(hackerked2, "wanted"))
	    {
	        if(sscanf(params, "s[20]s[20]iS[200](none)", hackerked, hackerked2, id)) return SendClientMessage(playerid, COLOR_HACKER, "Használat: /hack SFPD wanted [ID]");
	        if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ez az ID nincs csatlakozva!");
	        switch(random(3))
	        {
	            case 0:
	            {
				    SendClientMessage(playerid, COLOR_HACKER, "Az SFPD meghackelése nem sikerült, ezért a zsaruk köröznek!");
					SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)+3);
					format(main_str, sizeof(main_str), "%s Hackerként megpróbálta meghackelni az SFPD-t!", GetPlayerNameEx(playerid));
					SendClientMessageToAdmins(COLOR_ORANGE, main_str);
				}
				case 1:
				{
					format(main_str, sizeof(main_str), "Sikeresen meghackelted az SFPD-t! Körözést adtál ki %s-re!", GetPlayerNameEx(id));
			        SendClientMessage(playerid, COLOR_HACKER, main_str);
			        SetPlayerWantedLevel(id, GetPlayerWantedLevel(id)+1);
			        format(main_str, sizeof(main_str), "%s Hackerként meghackelte az SFPD-t!", GetPlayerNameEx(playerid));
					SendClientMessageToAdmins(COLOR_ORANGE, main_str);
				}
				case 2:
				{
				    SendClientMessage(playerid, COLOR_HACKER, "Az SFPD meghackelése nem sikerült, ezért a zsaruk köröznek!");
					SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)+3);
					format(main_str, sizeof(main_str), "%s Hackerként megpróbálta meghackelni az SFPD-t!", GetPlayerNameEx(playerid));
					SendClientMessageToAdmins(COLOR_ORANGE, main_str);
				}
			}
			SetPVarInt(playerid, "hackelhet", 1);
			SetTimerEx("hackertimer", 10*60000, 0, "i", playerid);
		}
		else if(!strcmp(hackerked2, "unwanted"))
	    {
	        if(sscanf(params, "s[20]s[20]iS[200](none)", hackerked, hackerked2, id)) return SendClientMessage(playerid, COLOR_HACKER, "Használat: /hack SFPD wanted [ID]");
            if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ez az ID nincs csatlakozva!");
		   	switch(random(1))
	        {
	            case 0:
	            {
	                format(main_str, sizeof(main_str), "Sikeresen meghackelted az SFPD-t! Ha volt %s-nek körözése, törölted!", GetPlayerNameEx(id));
			        SendClientMessage(playerid, COLOR_HACKER, main_str);
			        SetPlayerWantedLevel(id, 0);
			        format(main_str, sizeof(main_str), "%s Hackerként meghackelte az SFPD-t!", GetPlayerNameEx(playerid));
					SendClientMessageToAdmins(COLOR_ORANGE, main_str);
				}
				case 1:
				{
				    SendClientMessage(playerid, COLOR_HACKER, "Az SFPD meghackelése nem sikerült, ezért a zsaruk köröznek!");
					SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)+3);
					format(main_str, sizeof(main_str), "%s Hackerként megpróbálta meghackelni az SFPD-t!", GetPlayerNameEx(playerid));
					SendClientMessageToAdmins(COLOR_ORANGE, main_str);
				}
				case 2:
				{
				    SendClientMessage(playerid, COLOR_HACKER, "Az SFPD meghackelése nem sikerült, ezért a zsaruk köröznek!");
					SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)+3);
					format(main_str, sizeof(main_str), "%s Hackerként megpróbálta meghackelni az SFPD-t!", GetPlayerNameEx(playerid));
					SendClientMessageToAdmins(COLOR_ORANGE, main_str);
				}
			}
			SetPVarInt(playerid, "hackelhet", 1);
			SetTimerEx("hackertimer", 10*60000, 0, "i", playerid);
		}
		else if(!strcmp(hackerked2, "radio"))
		{
	        if(sscanf(params, "s[20]s[20]is[200]", hackerked, hackerked2, id, szoveg)) return SendClientMessage(playerid, COLOR_HACKER, "Használat: /hack SFPD radio [ID] [szöveg]");
			if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ez az ID nincs csatlakozva!");
			if(cGetPlayerTeam(id) != TEAM_ZSARU) return SendClientMessage(playerid, COLOR_RED, "HIBA: Csak rendõr nevében írhatsz a rendõr TC(TeamChat)-be!");
			switch(random(3))
	        {
	            case 0:
	            {
	                format(main_str, sizeof(main_str), "Sikeresen meghackelted az SFPD-t! %s nevében üzenetet írtál!", GetPlayerNameEx(id));
			        SendClientMessage(playerid, COLOR_HACKER, main_str);
			        format(main_str, sizeof(main_str), "%s Hackerként meghackelte az SFPD-t!", GetPlayerNameEx(playerid));
					SendClientMessageToAdmins(COLOR_ORANGE, main_str);
			        for(new i; i < MAX_PLAYERS; i++)
			        {
			            if(cGetPlayerTeam(i) == TEAM_ZSARU)
			            {
				        	format(main_str, sizeof(main_str),"[ TEAM ] %s: %s", GetPlayerNameEx(id), szoveg);
	 						SendClientMessage(i, COLOR_TEAMCHAT, main_str);
						}
					}
				}
				case 1:
				{
				    SendClientMessage(playerid, COLOR_HACKER, "Az SFPD meghackelése nem sikerült, ezért a zsaruk köröznek!");
					SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)+3);
					format(main_str, sizeof(main_str), "%s Hackerként megpróbálta meghackelni az SFPD-t!", GetPlayerNameEx(playerid));
					SendClientMessageToAdmins(COLOR_ORANGE, main_str);
				}
				case 2:
				{
				    SendClientMessage(playerid, COLOR_HACKER, "Az SFPD meghackelése nem sikerült, ezért a zsaruk köröznek!");
					SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)+3);
					format(main_str, sizeof(main_str), "%s Hackerként megpróbálta meghackelni az SFPD-t!", GetPlayerNameEx(playerid));
					SendClientMessageToAdmins(COLOR_ORANGE, main_str);
				}
			}
			SetPVarInt(playerid, "hackelhet", 1);
			SetTimerEx("hackertimer", 10*60000, 0, "i", playerid);
		}
	}*/
	return 1;
}

CMD:hg(playerid, params[])
{
	new szoveg[200];
	if(cGetPlayerTeam(playerid) != TEAM_RIPORT) return SendClientMessage(playerid, COLOR_RED, "Nem vagy hiradós!");
	else if(sscanf(params, "s[200]", szoveg)) return SendClientMessage(playerid, COLOR_ORANGE, "Használat: /hg [hiradó szöveg]");
	if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "[ HIBA ]: Nem írhatsz a chatbe ha levagy némítva!");
	new string[200];
	format(string, sizeof(string), "[HÍRADÓ]: %s", szoveg);
	SendClientMessageToAll(COLOR_RIPORT, string);
	return 1;
}

CMD:rabol(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 2, 509.4155,-71.9277,998.7578))
	{
 		if(bar == false)
 		{
		    if(cGetPlayerTeam(playerid) == TEAM_ZSARU || cGetPlayerTeam(playerid) == TEAM_KATONA) return 0;
			GivePlayerMoneyEx(playerid,15000, "üzletet rabolt");
			SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+1);
			SendFormatMessageToAll(COLOR_ZSARU,"%s kirabolta a Bár-t.",GetPlayerNameEx(playerid));
			SetPVarInt(playerid, "Rablasok", GetPVarInt(playerid, "Rablasok")+1);
			SetTimer("rablas1", 5*60000, 0);
			bar = true;
			SetPVarInt(playerid, "mostrabolt", 1);
		}
		else SendClientMessage(playerid, COLOR_RED, "HIBA: Ezt a boltot már kirabolták az elmúlt 5 percben, ezért most nem rabolhatod!");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2, 767.6898,-36.6481,1000.6865))
	{
		if(box == false)
		{
		    if(cGetPlayerTeam(playerid) == TEAM_ZSARU || cGetPlayerTeam(playerid) == TEAM_KATONA) return 0;
			GivePlayerMoneyEx(playerid,15000, "üzletet rabolt");
			SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+1);
			SendFormatMessageToAll(COLOR_ZSARU,"%s kirabolta a Kínai Edzõtermet.",GetPlayerNameEx(playerid));
			SetPVarInt(playerid, "Rablasok", GetPVarInt(playerid, "Rablasok")+1);
			SetTimer("rablas3", 5*60000, 0);
		    box = true;
		    SetPVarInt(playerid, "mostrabolt", 1);
		}
		else SendClientMessage(playerid, COLOR_RED, "HIBA: Ezt a boltot már kirabolták az elmúlt 5 percben, ezért most nem rabolhatod!");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2, 372.5804,-65.4323,1001.5078))
	{
		if(burgerking == false)
		{
	 	    if(cGetPlayerTeam(playerid) == TEAM_ZSARU || cGetPlayerTeam(playerid) == TEAM_KATONA) return 0;
			GivePlayerMoneyEx(playerid,15000, "üzletet rabolt");
			SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+1);
			SendFormatMessageToAll(COLOR_ZSARU,"%s kirabolta a Burger King-t.",GetPlayerNameEx(playerid));
			SetPVarInt(playerid, "Rablasok", GetPVarInt(playerid, "Rablasok")+1);
			SetTimer("rablas9", 5*60000, 0);
		    burgerking = true;
		    SetPVarInt(playerid, "mostrabolt", 1);
		}
		else SendClientMessage(playerid, COLOR_RED, "HIBA: Ezt a boltot már kirabolták az elmúlt 5 percben, ezért most nem rabolhatod!");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2232.0461,129.2900,1035.4141))
	{
		if(zero == false)
		{
	 	    if(cGetPlayerTeam(playerid) == TEAM_ZSARU || cGetPlayerTeam(playerid) == TEAM_KATONA) return 0;
			GivePlayerMoneyEx(playerid,15000, "üzletet rabolt");
			SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+1);
			SendFormatMessageToAll(COLOR_ZSARU,"%s kirabolta a Zero RC-t.",GetPlayerNameEx(playerid));
			SetPVarInt(playerid, "Rablasok", GetPVarInt(playerid, "Rablasok")+1);
			SetTimer("rablas11", 5*60000, 0);
		    zero = true;
		    SetPVarInt(playerid, "mostrabolt", 1);
		}
		else SendClientMessage(playerid, COLOR_RED, "HIBA: Ezt a boltot már kirabolták az elmúlt 5 percben, ezért most nem rabolhatod!");
	}
 	else if(IsPlayerInRangeOfPoint(playerid, 2, -201.4025,-7.3274,1002.2734))
	{
		if(tetovalas == false)
		{
	 	    if(cGetPlayerTeam(playerid) == TEAM_ZSARU || cGetPlayerTeam(playerid) == TEAM_KATONA) return 0;
			GivePlayerMoneyEx(playerid,15000, "üzletet rabolt");
			SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+1);
			SendFormatMessageToAll(COLOR_ZSARU,"%s kirabolta a Tetoválás üzletett.",GetPlayerNameEx(playerid));
			SetPVarInt(playerid, "Rablasok", GetPVarInt(playerid, "Rablasok")+1);
			SetTimer("rablas13", 5*60000, 0);
		    tetovalas = true;
		    SetPVarInt(playerid, "mostrabolt", 1);
		}
		else SendClientMessage(playerid, COLOR_RED, "HIBA: Ezt a boltot már kirabolták az elmúlt 5 percben, ezért most nem rabolhatod!");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2, 420.5546,-81.4736,1001.8047))
	{
		if(haj == false)
		{
	 	    if(cGetPlayerTeam(playerid) == TEAM_ZSARU || cGetPlayerTeam(playerid) == TEAM_KATONA) return 0;
			GivePlayerMoneyEx(playerid,15000, "üzletet rabolt");
			SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+1);
			SendFormatMessageToAll(COLOR_ZSARU,"%s kirabolta a Fodrász üzletet.",GetPlayerNameEx(playerid));
			SetPVarInt(playerid, "Rablasok", GetPVarInt(playerid, "Rablasok")+1);
			SetTimer("rablas12", 5*60000, 0);
		    haj = true;
		    SetPVarInt(playerid, "mostrabolt", 1);
		}
		else SendClientMessage(playerid, COLOR_RED, "HIBA: Ezt a boltot már kirabolták az elmúlt 5 percben, ezért most nem rabolhatod!");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2, 371.3192,-7.3398,1001.8589))
	{
		if(csirkes == false)
		{
	 	    if(cGetPlayerTeam(playerid) == TEAM_ZSARU || cGetPlayerTeam(playerid) == TEAM_KATONA) return 0;
			GivePlayerMoneyEx(playerid,15000, "üzletet rabolt");
			SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+1);
			SendFormatMessageToAll(COLOR_ZSARU,"%s kirabolta a KFC-t.",GetPlayerNameEx(playerid));
			SetPVarInt(playerid, "Rablasok", GetPVarInt(playerid, "Rablasok")+1);
			SetTimer("rablas10", 5*60000, 0);
		    csirkes = true;
		    SetPVarInt(playerid, "mostrabolt", 1);
		}
		else SendClientMessage(playerid, COLOR_RED, "HIBA: Ezt a boltot már kirabolták az elmúlt 5 percben, ezért most nem rabolhatod!");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2, 502.3051,-14.0034,1000.6797))
	{
		if(klub == false)
		{
	 	    if(cGetPlayerTeam(playerid) == TEAM_ZSARU || cGetPlayerTeam(playerid) == TEAM_KATONA) return 0;
			GivePlayerMoneyEx(playerid,25000, "üzletet rabolt");
			SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+2);
			SendFormatMessageToAll(COLOR_ZSARU,"%s kirabolta a Dance Club-t.",GetPlayerNameEx(playerid));
			SetPVarInt(playerid, "Rablasok", GetPVarInt(playerid, "Rablasok")+1);
			SetTimer("rablas14", 5*60000, 0);
		    klub = true;
		    SetPVarInt(playerid, "mostrabolt", 1);
		}
		else SendClientMessage(playerid, COLOR_RED, "HIBA: Ezt a boltot már kirabolták az elmúlt 5 percben, ezért most nem rabolhatod!");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2, 203.9833,-43.8138,1001.8047))
	{
		if(suburban == false)
		{
		    if(cGetPlayerTeam(playerid) == TEAM_ZSARU || cGetPlayerTeam(playerid) == TEAM_KATONA) return 0;
			GivePlayerMoneyEx(playerid,15000, "üzletet rabolt");
			SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+1);
			SendFormatMessageToAll(COLOR_ZSARU,"%s kirabolta a Sub Urban-t.",GetPlayerNameEx(playerid));
			SetPVarInt(playerid, "Rablasok", GetPVarInt(playerid, "Rablasok")+1);
			SetTimer("rablas5", 5*60000, 0);
		    suburban = true;
		    SetPVarInt(playerid, "mostrabolt", 1);
		}
		else SendClientMessage(playerid, COLOR_RED, "HIBA: Ezt a boltot már kirabolták az elmúlt 5 percben, ezért most nem rabolhatod!");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2, 207.7380,-101.4601,1005.2578))
	{
		if(binco == false)
		{
		    if(cGetPlayerTeam(playerid) == TEAM_ZSARU || cGetPlayerTeam(playerid) == TEAM_KATONA) return 0;
			GivePlayerMoneyEx(playerid,15000, "üzletet rabolt");
			SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+1);
			SendFormatMessageToAll(COLOR_ZSARU,"%s kirabolta a Binco-t.",GetPlayerNameEx(playerid));
			SetPVarInt(playerid, "Rablasok", GetPVarInt(playerid, "Rablasok")+1);
			SetTimer("rablas4", 5*60000, 0);
		    binco = true;
		    SetPVarInt(playerid, "mostrabolt", 1);
		}
		else SendClientMessage(playerid, COLOR_RED, "HIBA: Ezt a boltot már kirabolták az elmúlt 5 percben, ezért most nem rabolhatod!");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2, 161.8955,-84.7291,1001.8047))
	{
		if(zip == false)
		{
	 	    if(cGetPlayerTeam(playerid) == TEAM_ZSARU || cGetPlayerTeam(playerid) == TEAM_KATONA) return 0;
			GivePlayerMoneyEx(playerid,15000, "üzletet rabolt");
			SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+1);
			SendFormatMessageToAll(COLOR_ZSARU,"%s kirabolta a Zip-t.",GetPlayerNameEx(playerid));
			SetPVarInt(playerid, "Rablasok", GetPVarInt(playerid, "Rablasok")+1);
			SetTimer("rablas7", 5*60000, 0);
		    zip = true;
		    SetPVarInt(playerid, "mostrabolt", 1);
		}
		else SendClientMessage(playerid, COLOR_RED, "HIBA: Ezt a boltot már kirabolták az elmúlt 5 percben, ezért most nem rabolhatod!");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2, 207.3801,-10.2720,1001.2109))
	{
		if(victim == false)
		{
		    if(cGetPlayerTeam(playerid) == TEAM_ZSARU || cGetPlayerTeam(playerid) == TEAM_KATONA) return 0;
			GivePlayerMoneyEx(playerid,15000, "üzletet rabolt");
			SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+1);
			SendFormatMessageToAll(COLOR_ZSARU,"%s kirabolta a Victim-t.",GetPlayerNameEx(playerid));
			SetPVarInt(playerid, "Rablasok", GetPVarInt(playerid, "Rablasok")+1);
			SetTimer("rablas6", 5*60000, 0);
		    victim = true;
		    SetPVarInt(playerid, "mostrabolt", 1);
		}
		else SendClientMessage(playerid, COLOR_RED, "HIBA: Ezt a boltot már kirabolták az elmúlt 5 percben, ezért most nem rabolhatod!");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2, 376.7180,-119.5506,1001.4995))
	{
		if(pizza == false)
		{
		    if(cGetPlayerTeam(playerid) == TEAM_ZSARU || cGetPlayerTeam(playerid) == TEAM_KATONA) return 0;
			GivePlayerMoneyEx(playerid,15000, "üzletet rabolt");
			SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+1);
			SendFormatMessageToAll(COLOR_ZSARU,"%s kirabolta a Pizza Hot-t.",GetPlayerNameEx(playerid));
			SetPVarInt(playerid, "Rablasok", GetPVarInt(playerid, "Rablasok")+1);
			SetTimer("rablas8", 5*60000, 0);
		    pizza = true;
		    SetPVarInt(playerid, "mostrabolt", 1);
		}
		else SendClientMessage(playerid, COLOR_RED, "HIBA: Ezt a boltot már kirabolták az elmúlt 5 percben, ezért most nem rabolhatod!");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2, 379.3516,-182.2067,1000.6328))
	{
		if(fankosr == false)
		{
		    if(cGetPlayerTeam(playerid) == TEAM_ZSARU || cGetPlayerTeam(playerid) == TEAM_KATONA) return 0;
			GivePlayerMoneyEx(playerid,15000, "üzletet rabolt");
			SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+1);
			SendFormatMessageToAll(COLOR_ZSARU,"%s kirabolta a Fánkos Üzlet-et.",GetPlayerNameEx(playerid));
			SetPVarInt(playerid, "Rablasok", GetPVarInt(playerid, "Rablasok")+1);
			SetTimer("rablas2", 5*60000, 0);
		    fankosr = true;
		    SetPVarInt(playerid, "mostrabolt", 1);
		}
		else SendClientMessage(playerid, COLOR_RED, "HIBA: Ezt a boltot már kirabolták az elmúlt 5 percben, ezért most nem rabolhatod!");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2, -779.5485,500.8824,1371.7422))
	{
		if(maffiar == false)
		{
	 	    if(cGetPlayerTeam(playerid) == TEAM_ZSARU || cGetPlayerTeam(playerid) == TEAM_KATONA) return 0;
			GivePlayerMoneyEx(playerid,40000, "üzletet rabolt");
			SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+2);
			SendFormatMessageToAll(COLOR_ZSARU,"%s kirabolta a Marco's Bistro-t.",GetPlayerNameEx(playerid));
			SetPVarInt(playerid, "Rablasok", GetPVarInt(playerid, "Rablasok")+1);
			SetTimer("rablas15", 5*60000, 0);
		    maffiar = true;
		    SetPVarInt(playerid, "mostrabolt", 1);
		}
		else SendClientMessage(playerid, COLOR_RED, "HIBA: Ezt a boltot már kirabolták az elmúlt 5 percben, ezért most nem rabolhatod!");
	}
	else SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy kirabolható boltban!");
	
	if(GetPVarInt(playerid, "mostrabolt") == 1)
	{
	    GiveAchievement(playerid, "shoprob", 1);
        if(QuestID[playerid] == 4 && QuestPart[playerid] == 2) QuestInt[playerid]++;
        if(QuestInt[playerid] == 10)
        {
            DialogText(playerid, 3000, "~r~", GetPlayerNameEx(playerid), "Küldetés végrehajtva. Vissza a bázisra.");
		    SetQuestPart(playerid, 4, 3);
			CreateQuestCP(playerid, -2145.5195,-246.4585,36.5156);
        }
	    if(GetAchievement(playerid, "shoprob") == 50)
	    {
			UnlockAchievement(playerid, "ld_slot:bar1_o", "50 bolt kirablása", "Gyorskölcsön készpénzben");
			GiveAchievement(playerid, "shoprob", 1);
			GiveEXP(playerid, SHOPROB50_EXP);
	    }
	    else if(GetAchievement(playerid, "shoprob") == 100)
	    {
			UnlockAchievement(playerid, "ld_slot:bar2_o", "100 bolt kirablása", "Anyagi támogatás");
			GiveAchievement(playerid, "shoprob", 1);
			GiveEXP(playerid, SHOPROB100_EXP);
	    }
	    SetPVarInt(playerid, "mostrabolt", 0);
	}
	return 1;
}

CMD:afk(playerid, params[])
{
	if(InDialog[playerid] == true) return 1;
	if(IsPlayerUnallowedZone(playerid)) return SendClientMessage(playerid, COLOR_RED, "[ HIBA ]: Olyan helyen vagy állapotban vagy, ahol nem használhatod ezt a parancsot!");
	SendFormatMessageToAll(COLOR_YELLOW, "*** %s aktiválta az AFK módot!", GetPlayerNameEx(playerid));
	SendClientMessage(playerid, COLOR_YELLOW, "Átlettél rakva AFK módba, a visszatéréshez: /back");
	TogglePlayerControllable(playerid, false);
	SetPlayerVirtualWorld(playerid, 1);
	return 1;
}

CMD:back(playerid, params[])
{
    if(InDialog[playerid] == true) return 1;
	if(IsPlayerUnallowedZone(playerid)) return SendClientMessage(playerid, COLOR_RED, "[ HIBA ]: Olyan helyen vagy állapotban vagy, ahol nem használhatod ezt a parancsot!");
	SendFormatMessageToAll(COLOR_YELLOW, "*** %s kikapcsolta az AFK módot!", GetPlayerNameEx(playerid));
	SendClientMessage(playerid, COLOR_YELLOW, "Kilettél szedve az AFK módból!");
	TogglePlayerControllable(playerid, true);
	SetPlayerVirtualWorld(playerid, 0);
	return 1;
}

CMD:car(playerid,params[])
{
	if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_RED, "[ HIBA ]: Ehez a parancshoz legalább Adminisztrátornak kell lenned!");
	new id, szirena;
	if(sscanf(params,"dI(0)",id, szirena)) return SendClientMessage(playerid,COLOR_RED,"Használat: /car [model id] [sziréna (alap 0)]");
	else if(400 > id || id > 611) SendClientMessage(playerid,COLOR_RED,"Hibás model id! A model ID-nek 400 és 611 közt kell lennie");
	else
	{
		if(PlayerCar[playerid]>-1)
		{
			DestroyVehicle(PlayerCar[playerid]);
			PlayerCar[playerid]=-1;
		}
		new Float:x,Float:y,Float:z,Float:a;
		GetPlayerPos(playerid,x,y,z);
		GetPlayerFacingAngle(playerid,a);
		PlayerCar[playerid] = CreateVehicle(id,x,y,z,a,-1,-1,-1, szirena);
		PutPlayerInVehicle(playerid,PlayerCar[playerid],0);
		SendClientMessage(playerid,COLOR_RED,"Jármû lerakva!");
	}
	return 1;
}

//--------------------------------------------------autórendszer----------------
CMD:autoszerkeszt(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy jármûben!");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy a vezetõülésben!");
	ShowSzerkesztDialog(playerid);
	return 1;
}

/*CMD:autoszerel(playerid)
{
	if(cGetPlayerTeam(playerid) != TEAM_CARS) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy a Ryuuzaki's cars dolgozója!");
	ShowSzerelDialog(playerid);
	return 1;
}
*/
CMD:ryucarsmunka(playerid,params[])
{
    if(GetPVarInt(playerid, "Logged") == 0) return 1;
	if(GetPVarInt(playerid, "Leader") != 5) return SendClientMessage(playerid,COLOR_RED,"HIBA: Nincs jogod embereket hívni ebbe a csapatba!");
 	//if(!strcmp(GetPlayerNameEx(playerid), "Steewiiee.")) return SetTeam(playerid, TEAM_CARS), SendClientMessage(playerid, COLOR_GREEN, "Te csak magadat rakhatod be ide!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /ryucarsmunka [playerid]");
	if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen játékos!");
	if(cGetPlayerTeam(otherid) == TEAM_CARS) return SendClientMessage(playerid,COLOR_RED,"A játékos már most is Ryuuzaki's cars-nál dolgozik!");

	SetTeam(otherid, TEAM_CARS);
	return 1;
}

CMD:ryucarskirug(playerid,params[])
{
    if(GetPVarInt(playerid, "Logged") == 0) return 1;
	if(GetPVarInt(playerid, "Leader") != 5) return SendClientMessage(playerid,COLOR_RED,"HIBA: Nincs jogod embereket kirúgni ebbõl a csapatból!");
	if(sscanf(params,"i",otherid)) return SendClientMessage(playerid, red, "HASZNÁLAT: /ryucarskirug [playerid]");
	if(!IsPlayerConnected(otherid)) return SendClientMessage(playerid, COLOR_RED, "Nincs ilyen játékos!");
	if(cGetPlayerTeam(otherid) != TEAM_CARS) return SendClientMessage(playerid,COLOR_RED,"A játékos még nem is dolgozik a Ryuuzaki's cars-nál!");

	new string[128];
	format(string,sizeof(string),"Kirúgtad %s-t a Ryuuzaki's cars-ból!",GetPlayerNameEx(otherid));
	SendClientMessage(playerid,COLOR_GREEN,string);
	format(string,sizeof(string),"%s kirúgott téged a Ryuuzaki's cars-ból!",GetPlayerNameEx(playerid));
	SendClientMessage(otherid,COLOR_GREEN,string);

	cSetPlayerTeam(otherid, 0);
	ForceClassSelection(otherid);
	SetPlayerHealth(otherid,0);
	return 1;
}

/*CMD:carad(playerid, params[])
{
	new Float:x, Float:y, Float:z, Float:a;
	if(cGetPlayerTeam(playerid) != TEAM_CARS) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy a Ryuuzaki's cars dolgozója!");
	else if(sscanf(params, "iiuii", slot, autovehid, autoid, autocolor1, autocolor2)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /carad [slot] [vehid] [playerid] [color1] [color2]");
	else if(400 > autovehid || autovehid > 611) return SendClientMessage(playerid,COLOR_GREY,"HIBA: Rossz JármûID! A jármû ID-jének 400 és 611 közt kell lennie!");
	else if(!IsPlayerConnected(autoid)) return SendClientMessage(playerid, COLOR_GREY, "HIBA: Rossz játékosID!");
	else if(slot > MAX_SLOTS) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nem lehet nagyobb 500-nál!");
	format(query, sizeof(query), "SELECT * FROM cars WHERE slot = '%d'", slot);
 mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0) return format(main_str, sizeof(main_str), "HIBA: A %d-s slot már foglalt!", slot), SendClientMessage(playerid, COLOR_GREY, main_str); mysql_free_result();
    GetPlayerPos(autoid, x, y, z);
    GetPlayerFacingAngle(autoid, a);
    carplay[slot] = CreateVehicle(autovehid, x, y, z, a, autocolor1, autocolor2, -1);
    SetPlayerPos(autoid, x, y, z+5);
	format(main_str, sizeof(main_str), "%s lespawnolt neked egy jármûvet. JármûID: %d", GetPlayerNameEx(playerid), autovehid);
	SendClientMessage(autoid, COLOR_GREEN, main_str);
	format(main_str, sizeof(main_str), "Lespawnoltál %s-nek egy jármûvet. JármûID: %d", GetPlayerNameEx(autoid), autovehid);
	SendClientMessage(playerid, COLOR_GREEN, main_str);
	format(query, sizeof(query), "INSERT INTO cars (slot, Tulaj, Tarstulaj, VehID, X, Y, Z, A, color1, color2, paintjob) VALUES (%d, '%s', 'Nincs', %d, %0.2f, %0.2f, %0.2f, %0.2f, %d, %d, 5)", slot, GetPlayerNameEx(autoid), autovehid, x, y+2, z, a, autocolor1, autocolor2);
 	mysql_query(query);
	format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '%s', %d, %d, NOW(), 'Eladta')", GetPlayerNameEx(playerid), GetPlayerNameEx(autoid), slot, autovehid);
 	mysql_query(query);
	return 1;
}

CMD:carelvesz(playerid, params[])
{
	if(cGetPlayerTeam(playerid) != TEAM_CARS) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy a Ryuuzaki's cars dolgozója!");
	else if(sscanf(params, "iu", slot, autoid)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /carelvesz [slot] [playerid]");
	else if(!IsPlayerConnected(autoid)) return SendClientMessage(playerid, COLOR_GREY, "HIBA: Rossz játékosID!");
	else if(slot > MAX_SLOTS) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nem lehet nagyobb 500-nál!");
	format(query, sizeof(query), "SELECT * FROM cars WHERE Tulaj = '%s'", GetPlayerNameEx(autoid));
 mysql_query(query);
	mysql_store_result();
 	if(mysql_num_rows() == 0) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A játékosnak nincs saját jármûve!"), mysql_free_result();
 	format(query, sizeof(query), "SELECT * FROM cars WHERE Tulaj = '%s' AND slot = '%d'", GetPlayerNameEx(autoid), slot);
 mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() == 0) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A tulaj és a slot nem egy sorban van!"), mysql_free_result();
	format(main_str, sizeof(main_str), "%s törölte a saját jármûvedet!", GetPlayerNameEx(playerid));
	SendClientMessage(autoid, COLOR_GREEN, main_str);
	format(main_str, sizeof(main_str), "Törölted %s saját jármûvét!", GetPlayerNameEx(autoid));
	SendClientMessage(playerid, COLOR_GREEN, main_str);
	DestroyObject(objects[slot]);
	DestroyObject(objects2[slot]);
    DestroyVehicle(carplay[slot]);
    carplay[slot] = 0;
	format(query, sizeof(query), "DELETE FROM cars WHERE Tulaj = '%s' AND slot = '%d'", GetPlayerNameEx(autoid), slot);
 	mysql_query(query);
	format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '%s', %d, '0', NOW(), 'Visszavette')", GetPlayerNameEx(playerid), GetPlayerNameEx(autoid), slot);
 	mysql_query(query);
	return 1;
}

CMD:autofizetes(playerid, params[])
{
	new osszeg;
	if(cGetPlayerTeam(playerid) != TEAM_CARS) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy a Ryuuzaki's cars dolgozója!");
	if(sscanf(params, "i", osszeg)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /autofizetes [összeg amennyit szereztél]");
	if(GetPlayerMoneyEx(playerid) < osszeg) return SendClientMessage(playerid, COLOR_GREY, "HIBA: Neked nincs ennyi pénzed!");
	if(osszeg <= 0) return SendClientMessage(playerid, COLOR_GREY, "HIBA: a-a...");
	GivePlayerMoneyEx(playerid, -osszeg, "Autofizetes");
	GivePlayerMoneyEx(playerid, osszeg/4, "Autofizetes");
	SendClientMessage(playerid, COLOR_GREY, "Megkaptad a fizetésedet!");
	format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, '0', NOW(), 'Kivette a fizetését, amennyi a slot')", GetPlayerNameEx(playerid), osszeg);
 	mysql_query(query);
	return 1;
}*/

CMD:autoresi(playerid)
{
    if(GetPVarInt(playerid, "Level") < 3 && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_RED, "[ HIBA ]: Ehez a parancshoz legalább Adminisztrátornak kell lenned!");
	for(new i; i < MAX_SLOTS; i++)
	{
	    AutoUpdate(i);
	}
	return 1;
}

CMD:autofrissit(playerid, params[])
{
	if(GetPVarInt(playerid, "Level") < 3 && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_RED, "[ HIBA ]: Ehez a parancshoz legalább Adminisztrátornak kell lenned!");
	if(sscanf(params, "i", slot)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /autofrissit [autoslot]");
	format(query, sizeof(query), "SELECT * FROM cars WHERE slot = '%d'", slot);
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() == 0) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nincs létrehozva!"), mysql_free_result();
	AutoUpdate(slot);
	return 1;
}

CMD:clanautofrissit(playerid, params[])
{
	if(GetPVarInt(playerid, "Level") < 3 && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_RED, "[ HIBA ]: Ehez a parancshoz legalább Adminisztrátornak kell lenned!");
	if(sscanf(params, "i", slot)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /clanautofrissit [autoslot]");
	format(query, sizeof(query), "SELECT * FROM clancars WHERE slot = '%d'", slot);
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() == 0) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nincs létrehozva!"), mysql_free_result();
	ClanAutoUpdate(slot);
	return 1;
}

CMD:destroyobjectfromslot(playerid, params[])
{
	if(!IsPlayerAdmin(playerid)) return 0;
	if(sscanf(params, "i", slot)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /destroyobjectfromslot [slot]");
	DestroyObject(objects[slot]);
	DestroyObject(objects2[slot]);
	return 1;
}

CMD:carhozzaad(playerid, params[])
{
	new ar, autonev[50];
	if(!IsPlayerAdmin(playerid)) return 0;
	if(sscanf(params, "s[24]ii", autonev, autovehid, ar)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /carhozzaad [Autónév] [VehID] [Ár]");
	if(400 > autovehid || autovehid > 611) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A jármûID-nek 400 és 611 közt kell lennie!");
	new string[128];
	format(string, sizeof(string), "Az autó hozzáadódott az adatbázishoz! Adatok: Jármûnév: %s, JármûID: %d, Ár: %s$", autonev, autovehid, convertFormattedNumber(ar, "."));
	SendClientMessage(playerid, COLOR_GREY, string);
	format(query, sizeof(query), "INSERT INTO autoadatok (ID, Name, vehid, ar) VALUES (0, '%s', %d, %d)", autonev, autovehid, ar);
 	mysql_query(query);
	return 1;
}

CMD:tunszerkeszt(playerid, params[])
{
	new tunslot, tun;
	if(cGetPlayerTeam(playerid) != TEAM_CARS) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy a Ryuuzaki's cars dolgozója!");
	else if(sscanf(params, "iii", slot, tunslot, tun)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /tunszerkeszt [slot] [tuningslot[1-7]] [tuningID]");
	else if(slot > MAX_SLOTS) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nem lehet nagyobb 500-nál!");
	else if(1 > tunslot || tunslot > 7) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A tuning slottja nem lehet nagyobb 7-nél!");
	format(query, sizeof(query), "SELECT * FROM cars WHERE slot = '%d'", slot);
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() == 0) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nincs létrehozva!"), mysql_free_result();
	format(query, sizeof(query), "UPDATE cars SET tuning%d = '%d' WHERE slot = '%d'", tunslot, tun, slot);
 	mysql_query(query);
 	new string[128];
	format(string, sizeof(string), "Sikeresen szerkesztetted az autó tuningját! Tuningslot: %d, tuningID: %d", tunslot, tun);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Tuningolt')", GetPlayerNameEx(playerid), slot);
 	mysql_query(query);
	return 1;
}

/*
CMD:szinszerkeszt(playerid, params[])
{
	if(cGetPlayerTeam(playerid) != TEAM_CARS) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy a Ryuuzaki's cars dolgozója!");
	else if(sscanf(params, "iii", slot, autocolor1, autocolor2)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /szinszerkeszt [slot] [autocolor1] [autocolor2]");
	else if(slot > MAX_SLOTS) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nem lehet nagyobb 500-nál!");
	format(query, sizeof(query), "SELECT * FROM cars WHERE slot = '%d'", slot);
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() == 0) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nincs létrehozva!"), mysql_free_result();
	format(query, sizeof(query), "UPDATE cars SET color1 = '%d', color2 = '%d' WHERE slot = '%d'", autocolor1, autocolor2, slot);
 	mysql_query(query);
 	new string[128];
	format(string, sizeof(string), "Sikeresen szerkesztetted az autó színét! szín1: %d, szín2: %d", autocolor1, autocolor2);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Színt cserélt')", GetPlayerNameEx(playerid), slot);
 	mysql_query(query);
	return 1;
}
*/

/*
CMD:rendszerkeszt(playerid, params[])
{
	if(cGetPlayerTeam(playerid) != TEAM_CARS) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy a Ryuuzaki's cars dolgozója!");
	else if(sscanf(params, "is[15]", slot, rendszam)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /szinszerkeszt [slot] [rendszám]");
	else if(slot > MAX_SLOTS) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nem lehet nagyobb 500-nál!");
	format(query, sizeof(query), "SELECT * FROM cars WHERE slot = '%d'", slot);
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() == 0) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nincs létrehozva!"), mysql_free_result();
	format(query, sizeof(query), "UPDATE cars SET rendszam = '%s' WHERE slot = '%d'", rendszam, slot);
 	mysql_query(query);
 	new string[128];
	format(string, sizeof(string), "Sikeresen szerkesztetted az autó rendszámát! rendszám: %s", rendszam);
	SendClientMessage(playerid, COLOR_GREY, string);
    format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Rendszámot cserélt')", GetPlayerNameEx(playerid), slot);
 	mysql_query(query);
	return 1;
}

CMD:paintszerkeszt(playerid, params[])
{
	if(cGetPlayerTeam(playerid) != TEAM_CARS) return SendClientMessage(playerid, COLOR_RED, "HIBA: Nem vagy a Ryuuzaki's cars dolgozója!");
	else if(sscanf(params, "ii", slot, paintjob)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /paintszerkeszt [slot] [paintjob]");
	else if(slot > MAX_SLOTS) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nem lehet nagyobb 500-nál!");
	format(query, sizeof(query), "SELECT * FROM cars WHERE slot = '%d'", slot);
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() == 0) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nincs létrehozva!"), mysql_free_result();
	format(query, sizeof(query), "UPDATE cars SET paintjob = '%d' WHERE slot = '%d'", paintjob, slot);
 	mysql_query(query);
 	new string[128];
	format(string, sizeof(string), "Sikeresen szerkesztetted az autó paintjob-ját! paintjob: %d", paintjob);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '0', %d, 0, NOW(), 'Paintot cserélt')", GetPlayerNameEx(playerid), slot);
 	mysql_query(query);
	return 1;
}*/

CMD:parkol(playerid)
{
	new Float:x, Float:y, Float:z, Float:a;
	//if(sscanf(params, "i", slot)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /parkol [slot]");
	//else if(slot > MAX_SLOTS) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nem lehet nagyobb 500-nál!");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "HIBA: Nem ülsz jármûben!");
    for(new i; i < MAX_SLOTS; i++)
	{
		if(GetPlayerVehicleID(playerid) == carplay[i])
		{
			format(query, sizeof(query), "SELECT * FROM cars WHERE slot = %d AND Tulaj = '%s'", i, GetPlayerNameEx(playerid));
   			mysql_query(query);
   			mysql_store_result();
   			if(mysql_num_rows() != 0)
   			{
   			    GetVehiclePos(GetPlayerVehicleID(playerid), x, y, z);
				GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
				mysql_free_result();
				format(query, sizeof(query), "UPDATE cars SET X = '%0.2f', Y = '%0.2f', Z = '%0.2f', A = '%0.2f', VW = '%d' WHERE slot = '%d'", x, y, z, a, GetVehicleVirtualWorld(GetPlayerVehicleID(playerid)), i);
	   			mysql_query(query);
				AutoUpdate(i);
				PutPlayerInVehicle(playerid, carplay[i], 0);
				return 1;
   			}
   			return SendClientMessage(playerid, COLOR_RED, "HIBA: Ez nem a te jármûved!");
		}
	}
	return 1;
}

/*CMD:caradatok(playerid)
{
	SendClientMessage(playerid, COLOR_GREEN, "A jármûvek adatai:(slot, tulaj, autovehid, X, Y, Z, A, autocolor1, autocolor2)");
	for(new i; i < MAX_SLOTS; i++)
	{
	    format(query, sizeof(query), "SELECT * FROM cars WHERE slot = '%d'", i);
     	mysql_query(query);
	    mysql_store_result();
	    if(mysql_num_rows() != 0)
	    {
			new tarolo[3];
			new tarolo2[24];
			new tarolo4[15];
			new Float:tarolo3[4];
			new nevtarolo[24];
	        mysql_fetch_row(linen);
	        new string[128];
		    sscanf(linen, "p<|>{d}s[24]s[24]dffffdd{ddddddddddd}s[15]{dddddddddddddddddddd}", tarolo2, nevtarolo, tarolo[0], tarolo3[0], tarolo3[1], tarolo3[2], tarolo3[3], tarolo[1], tarolo[2], tarolo4);
			format(string, sizeof(string), "%d | %s | %s | %d | %0.2f, %0.2f, %0.2f, %0.2f | %d, %d | %s", i, tarolo2, nevtarolo, tarolo[0], tarolo3[0], tarolo3[1], tarolo3[2], tarolo3[3], tarolo[1], tarolo[2], tarolo4);
			SendClientMessage(playerid, COLOR_GREY, string);
			mysql_free_result();
		}
	}
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------------");
	return 1;
}
*/

CMD:tuningadat(playerid, params[])
{
	if(sscanf(params, "i", slot)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /tuningadat [autóslot]");
	format(query, sizeof(query), "SELECT * FROM cars WHERE slot = '%d'", slot);
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() == 0) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nincs létrehozva!"), mysql_free_result();
	format(query, sizeof(query), "SELECT tuning1, tuning2, tuning3, tuning4, tuning5, tuning6, tuning7 FROM cars WHERE slot = '%d'", slot);
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    mysql_fetch_row(linen);
		new tarolo[10];
	    sscanf(linen, "p<|>iiiiiii", tarolo[0], tarolo[1], tarolo[2], tarolo[3], tarolo[4], tarolo[5], tarolo[6]);
		mysql_free_result();
		new string[128];
		SendClientMessage(playerid, COLOR_GREY, "---------------Az autó tuningjai-----------");
		SendClientMessage(playerid, COLOR_GREY, "tuning1 | tuning2 | tuning3 | tuning4 | tuning5 | tuning6 | tuning7");
		format(string, sizeof(string), "%d | %d | %d | %d | %d | %d | %d", tarolo[0], tarolo[1], tarolo[2], tarolo[3], tarolo[4], tarolo[5], tarolo[6]);
		SendClientMessage(playerid, COLOR_GREY, string);
		SendClientMessage(playerid, COLOR_GREY, "-------------------------------------------");
	}
	return 1;
}

CMD:fegyverberak(playerid, params[])
{
	new command[15];
	if(sscanf(params, "s[15]", command)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /fegyverberak [fegyver/armour]");
	if(!strcmp(command, "fegyver"))
	{
		if(GetWeaponSlot(GetPlayerWeapon(playerid)) != 0)
		{
			if(!IsPlayerInAnyVehicle(playerid))
			{
				for( new i = 0; i <MAX_VEHICLES; i++ )
				{
					new Float:Pos[3];
					GetVehiclePos(i,Pos[0],Pos[1],Pos[2]);
					if(IsPlayerInRangeOfPoint(playerid,4.5,Pos[0],Pos[1],Pos[2]))
					{
						for(new a; a < MAX_SLOTS; a++)
						{

							if(i == carplay[a])
							{
							    format(query, sizeof(query), "SELECT vehid FROM cars WHERE slot = '%d'", a);
           						mysql_query(query);
							    mysql_store_result();
							    if(mysql_num_rows() != 0)
							    {
							        mysql_fetch_row(linen);
									new autovehid2;
									sscanf(linen, "i", autovehid2);
									mysql_free_result();
									if(autovehid2 == 481 || autovehid2 == 510 || autovehid2 == 522)
									{
										SendClientMessage(playerid, COLOR_GREY, "HIBA: Ebbe a jármûbe nem tehetsz fegyvert!");
										return 1;
									}
									else
									{
										if(csomagt[i])
										{
										    new tarolo[24], tarolo2[24];
											format(query, sizeof(query), "SELECT Tulaj, Tarstulaj FROM cars WHERE slot = '%d'", a);
          							 		mysql_query(query);
											mysql_store_result();
											if(mysql_num_rows() != 0)
											{
											    mysql_fetch_row(linen);
											    sscanf(linen, "p<|>s[24]s[24]", tarolo, tarolo2);
											    mysql_free_result();
											    if(!strcmp(tarolo, GetPlayerNameEx(playerid)) || !strcmp(tarolo2, GetPlayerNameEx(playerid)))
											    {
											        format(query, sizeof(query), "UPDATE cars SET weapslot%d = '%d', weapammo%d = '%d' WHERE slot = '%d'", GetWeaponSlot(GetPlayerWeapon(playerid)), GetPlayerWeapon(playerid),GetWeaponSlot(GetPlayerWeapon(playerid)), GetPlayerAmmo(playerid), a);
         											mysql_query(query);
											        SendClientMessage(playerid, COLOR_GREY, "Betettél egy fegyvert a csomagtartóba!");
													RemovePlayerWeapon(playerid, GetPlayerWeapon(playerid));
											        break;
												}
												else if(strcmp(tarolo, GetPlayerNameEx(playerid)) && !strcmp(tarolo2, GetPlayerNameEx(playerid)))
												{
													SendClientMessage(playerid, COLOR_GREY, "HIBA: Ez a jármû nem a tied!");
												 	break;
												}
											}
										}
										else SendClientMessage(playerid, COLOR_GREY, "HIBA: Nincs kinyitva a csomagtartó!");
									}
								}
							}
						}

					}
				}
			}
			else SendClientMessage(playerid, COLOR_GREY, "HIBA: Kocsiból nem tudsz berakni fegyvert jármûbe!");
		}
		else SendClientMessage(playerid, COLOR_GREY, "HIBA: A kezedet akarod berakni a csomagtartóba?");
	}
	else if(!strcmp(command, "armour"))
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
  			new Float:armour;
     		GetPlayerArmour(playerid, armour);
			if(armour >= 1)
			{
				for( new i = 0; i <MAX_VEHICLES; i++ )
				{
					new Float:Pos[3];
					GetVehiclePos(i,Pos[0],Pos[1],Pos[2]);
					if(IsPlayerInRangeOfPoint(playerid,4.5,Pos[0],Pos[1],Pos[2]))
					{
						for(new a; a < MAX_SLOTS; a++)
						{

							if(i == carplay[a])
							{
							    format(query, sizeof(query), "SELECT vehid FROM cars WHERE slot = '%d'", a);
           						mysql_query(query);
							    mysql_store_result();
							    if(mysql_num_rows() != 0)
							    {
							        mysql_fetch_row(linen);
									new autovehid2;
									sscanf(linen, "i", autovehid2);
									mysql_free_result();
									if(autovehid2 == 481 || autovehid2 == 510 || autovehid2 == 522)
									{
										SendClientMessage(playerid, COLOR_GREY, "HIBA: Ebbe a jármûbe nem tehetsz páncélt!");
										return 1;
									}
									else
									{
										if(csomagt[i])
										{
										    new tarolo[24], tarolo2[24];
											format(query, sizeof(query), "SELECT Tulaj, Tarstulaj FROM cars WHERE slot = '%d'", a);
           									mysql_query(query);
											mysql_store_result();
											if(mysql_num_rows() != 0)
											{
											    mysql_fetch_row(linen);
											    sscanf(linen, "p<|>s[24]s[24]", tarolo, tarolo2);
											    mysql_free_result();
											    if(!strcmp(tarolo, GetPlayerNameEx(playerid)) || !strcmp(tarolo2, GetPlayerNameEx(playerid)))
											    {
											        format(query, sizeof(query), "UPDATE cars SET Armour = '1', Armourammo = '%0.0f' WHERE slot = '%d'", armour, a);
                   									mysql_query(query);
											        SendClientMessage(playerid, COLOR_GREY, "Betettél egy fegyvert a csomagtartóba!");
													SetPlayerArmour(playerid, 0);
											        break;
												}
												else if(strcmp(tarolo, GetPlayerNameEx(playerid)) || !strcmp(tarolo2, GetPlayerNameEx(playerid)))
												{
													SendClientMessage(playerid, COLOR_GREY, "HIBA: Ez a jármû nem a tied!");
												 	break;
												}
											}
										}
										else SendClientMessage(playerid, COLOR_GREY, "HIBA: Nincs kinyitva a csomagtartó!");
									}
								}
							}
						}

					}
				}
			}
			else SendClientMessage(playerid, COLOR_GREY, "HIBA: Nincs páncélod!");
		}
		else SendClientMessage(playerid, COLOR_GREY, "HIBA: Kocsiból nem tudsz berakni páncélt a jármûbe!");
	}
	return 1;
}

CMD:fegyverkivesz(playerid, params[])
{
	new slott, command[15];
	if(sscanf(params, "s[15]I(0)", command)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /fegyverkivesz [fegyver/armour]");
	if(!strcmp(command, "fegyver"))
	{
		if(sscanf(params, "s[15]i", command, slott)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /fegyverkivesz fegyver [FegyverSlot]");
		else if(1 > slott || slott > 10) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot-nak 1 és 10 közt kell lennie!");
		if(!IsPlayerInAnyVehicle(playerid))
		{
			for( new i = 0; i <MAX_VEHICLES; i++ )
			{
				new Float:Pos[3];
				GetVehiclePos(i,Pos[0],Pos[1],Pos[2]);
				if(IsPlayerInRangeOfPoint(playerid,4.5,Pos[0],Pos[1],Pos[2]))
				{
					for(new a; a < MAX_SLOTS; a++)
					{
						if(i == carplay[a])
						{
							//new vParam[7];
		   					//GetVehicleParamsEx(i, vParam[0], vParam[1], vParam[2], vParam[3], vParam[4], vParam[5], vParam[6]);
							if(csomagt[i])
							{
							    new tarolo[24], tarolo2[24];
								format(query, sizeof(query), "SELECT Tulaj, Tarstulaj FROM cars WHERE slot = '%d'", a);
        						mysql_query(query);
								mysql_store_result();
								if(mysql_num_rows() != 0)
								{
								    mysql_fetch_row(linen);
								    sscanf(linen, "p<|>s[24]s[24]", tarolo, tarolo2);
								    mysql_free_result();
								    if(!strcmp(tarolo, GetPlayerNameEx(playerid)) || !strcmp(tarolo2, GetPlayerNameEx(playerid)))
								    {
								        format(query, sizeof(query), "SELECT weapslot%i, weapammo%i FROM cars WHERE slot = '%d'", slott, slott, a);
                						mysql_query(query);
								        mysql_store_result();
								        printf("%s", query);
										if(mysql_num_rows() != 0)
										{
										    new weapon[2];
										    mysql_fetch_row(linen);
		         							sscanf(linen, "p<|>dd", weapon[0], weapon[1]);
											printf("%s", linen);
											printf("%d, %d", weapon[0], weapon[1]);
											if(slott == 1)
											{
											    //sscanf(linen, "p<|>{ds[24]dffffddddddddddddddds[15]}dd{dddddddddddddddddd}", weapon[0], weapon[1]);
											    if(weapon[0] != 0)
											    {
											    	GivePlayerWeapon(playerid, weapon[0], weapon[1]);
											    	format(query, sizeof(query), "UPDATE cars SET weapslot1 = '0', weapammo1 = '0' WHERE slot = '%d'", a);
                									mysql_query(query);
											    	SendClientMessage(playerid, COLOR_GREY, "Kivettél egy fegyvert a csomagtartóból!");
												}
												else SendClientMessage(playerid, COLOR_GREY, "HIBA: Ezen a slot-on nincs semmilyen fegyver!");
											}
											if(slott == 2)
											{
											    //sscanf(linen, "p<|>{ds[24]dffffddddddddddddddds[15]}{dd}dd{dddddddddddddddd}", weapon[2], weapon[3]);
											    if(weapon[0] != 0)
											    {
											    	GivePlayerWeapon(playerid, weapon[0], weapon[1]);
											    	format(query, sizeof(query), "UPDATE cars SET weapslot2 = '0', weapammo2 = '0' WHERE slot = '%d'", a);
                									mysql_query(query);
											    	SendClientMessage(playerid, COLOR_GREY, "Kivettél egy fegyvert a csomagtartóból!");
												}
												else SendClientMessage(playerid, COLOR_GREY, "HIBA: Ezen a slot-on nincs semmilyen fegyver!");
											}
											if(slott == 3)
											{
												//sscanf(linen, "p<|>{ds[24]dffffddddddddddddddds[15]}{dddd}dd{dddddddddddddd}", weapon[4], weapon[5]);
											    if(weapon[0] != 0)
											    {
											    	GivePlayerWeapon(playerid, weapon[0], weapon[1]);
											    	format(query, sizeof(query), "UPDATE cars SET weapslot3 = '0', weapammo3 = '0' WHERE slot = '%d'", a);
                									mysql_query(query);
											    	SendClientMessage(playerid, COLOR_GREY, "Kivettél egy fegyvert a csomagtartóból!");
												}
												else SendClientMessage(playerid, COLOR_GREY, "HIBA: Ezen a slot-on nincs semmilyen fegyver!");
											}
											if(slott == 4)
											{
												//sscanf(linen, "p<|>{ds[24]dffffddddddddddddddds[15]}{dddddd}dd{dddddddddddd}", weapon[6], weapon[7]);
											    if(weapon[0] != 0)
											    {
											    	GivePlayerWeapon(playerid, weapon[0], weapon[1]);
											    	format(query, sizeof(query), "UPDATE cars SET weapslot4 = '0', weapammo4 = '0' WHERE slot = '%d'", a);
                									mysql_query(query);
											    	SendClientMessage(playerid, COLOR_GREY, "Kivettél egy fegyvert a csomagtartóból!");
												}
												else SendClientMessage(playerid, COLOR_GREY, "HIBA: Ezen a slot-on nincs semmilyen fegyver!");
											}
											if(slott == 5)
											{
											    //sscanf(linen, "p<|>{ds[24]dffffddddddddddddddds[15]}{dddddddd}dd{dddddddddd}", weapon[8], weapon[9]);
											    if(weapon[0] != 0)
											    {
											    	GivePlayerWeapon(playerid, weapon[0], weapon[1]);
											    	format(query, sizeof(query), "UPDATE cars SET weapslot5 = '0', weapammo5 = '0' WHERE slot = '%d'", a);
                									mysql_query(query);
											    	SendClientMessage(playerid, COLOR_GREY, "Kivettél egy fegyvert a csomagtartóból!");
												}
												else SendClientMessage(playerid, COLOR_GREY, "HIBA: Ezen a slot-on nincs semmilyen fegyver!");
											}
											if(slott == 6)
											{
											    //sscanf(linen, "p<|>{ds[24]dffffddddddddddddddds[15]}{dddddddddd}dd{dddddddd}", weapon[10], weapon[11]);
											    if(weapon[0] != 0)
											    {
											    	GivePlayerWeapon(playerid, weapon[0], weapon[1]);
											    	format(query, sizeof(query), "UPDATE cars SET weapslot6 = '0', weapammo6 = '0' WHERE slot = '%d'", a);
                									mysql_query(query);
											    	SendClientMessage(playerid, COLOR_GREY, "Kivettél egy fegyvert a csomagtartóból!");
												}
												else SendClientMessage(playerid, COLOR_GREY, "HIBA: Ezen a slot-on nincs semmilyen fegyver!");
											}
											if(slott == 7)
											{
											    //sscanf(linen, "p<|>{ds[24]dffffddddddddddddddds[15]}{dddddddddddd}dd{dddddd}", weapon[12], weapon[13]);
											    if(weapon[0] != 0)
											    {
											    	GivePlayerWeapon(playerid, weapon[0], weapon[1]);
											    	format(query, sizeof(query), "UPDATE cars SET weapslot7 = '0', weapammo7 = '0' WHERE slot = '%d'", a);
                									mysql_query(query);
											    	SendClientMessage(playerid, COLOR_GREY, "Kivettél egy fegyvert a csomagtartóból!");
												}
												else SendClientMessage(playerid, COLOR_GREY, "HIBA: Ezen a slot-on nincs semmilyen fegyver!");
											}
											if(slott == 8)
											{
											    //sscanf(linen, "p<|>{ds[24]dffffddddddddddddddds[15]}{dddddddddddddd}dd{dddd}", weapon[14], weapon[15]);
											    if(weapon[0] != 0)
											    {
											    	GivePlayerWeapon(playerid, weapon[0], weapon[1]);
											    	format(query, sizeof(query), "UPDATE cars SET weapslot8 = '0', weapammo8 = '0' WHERE slot = '%d'", a);
                									mysql_query(query);
											    	SendClientMessage(playerid, COLOR_GREY, "Kivettél egy fegyvert a csomagtartóból!");
												}
												else SendClientMessage(playerid, COLOR_GREY, "HIBA: Ezen a slot-on nincs semmilyen fegyver!");
											}
											if(slott == 9)
											{
											    //sscanf(linen, "p<|>{ds[24]dffffddddddddddddddds[15]}{dddddddddddddddd}dd{dd}", weapon[16], weapon[17]);
											    if(weapon[0] != 0)
											    {
											    	GivePlayerWeapon(playerid, weapon[0], weapon[1]);
											    	format(query, sizeof(query), "UPDATE cars SET weapslot9 = '0', weapammo9 = '0' WHERE slot = '%d'", a);
                									mysql_query(query);
											    	SendClientMessage(playerid, COLOR_GREY, "Kivettél egy fegyvert a csomagtartóból!");
												}
												else SendClientMessage(playerid, COLOR_GREY, "HIBA: Ezen a slot-on nincs semmilyen fegyver!");
											}
											if(slott == 10)
											{
											    //sscanf(linen, "p<|>{ds[24]dffffddddddddddddddds[15]}{dddddddddddddddddd}dd", weapon[18], weapon[19]);
											    if(weapon[0] != 0)
											    {
											    	GivePlayerWeapon(playerid, weapon[0], weapon[1]);
											    	SendClientMessage(playerid, COLOR_GREY, "Kivettél egy fegyvert a csomagtartóból!");
												}
												else SendClientMessage(playerid, COLOR_GREY, "HIBA: Ezen a slot-on nincs semmilyen fegyver!");
											}
											mysql_free_result();
										}
									}
								}
							}
							else SendClientMessage(playerid, COLOR_GREY, "HIBA: Nincs kinyitva a csomagtartó!");
						}
					}
				}
			}
		}
		else SendClientMessage(playerid, COLOR_GREY, "HIBA: Autóból nem tudsz ki szedni fegyvert!");
	}
	else if(!strcmp(command, "armour"))
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			for( new i = 0; i <MAX_VEHICLES; i++ )
			{
				new Float:Pos[3];
				GetVehiclePos(i,Pos[0],Pos[1],Pos[2]);
				if(IsPlayerInRangeOfPoint(playerid,4.5,Pos[0],Pos[1],Pos[2]))
				{
					for(new a; a < MAX_SLOTS; a++)
					{
						if(i == carplay[a])
						{
							//new vParam[7];
		   					//GetVehicleParamsEx(i, vParam[0], vParam[1], vParam[2], vParam[3], vParam[4], vParam[5], vParam[6]);
							if(csomagt[i])
							{
							    new tarolo[24], tarolo2[24];
								format(query, sizeof(query), "SELECT Tulaj, Tarstulaj FROM cars WHERE slot = '%d'", a);
        						mysql_query(query);
								mysql_store_result();
								if(mysql_num_rows() != 0)
								{
								    mysql_fetch_row(linen);
								    sscanf(linen, "p<|>s[24]s[24]", tarolo, tarolo2);
								    mysql_free_result();
								    if(!strcmp(tarolo, GetPlayerNameEx(playerid)) || !strcmp(tarolo2, GetPlayerNameEx(playerid)))
								    {
								        format(query, sizeof(query), "SELECT Armour, Armourammo FROM cars WHERE slot = '%d'", a);
                						mysql_query(query);
								        mysql_store_result();
										if(mysql_num_rows() != 0)
										{
										    new armour[2];
										    mysql_fetch_row(linen);
		         							sscanf(linen, "p<|>dd", armour[0], armour[1]);
										    //sscanf(linen, "p<|>{ds[24]dffffddddddddddddddds[15]}dd{dddddddddddddddddd}", weapon[0], weapon[1]);
										    if(armour[0] != 0)
										    {
										    	SetPlayerArmour(playerid, armour[1]);
										    	format(query, sizeof(query), "UPDATE cars SET Armour = '0', Armourammo = '0' WHERE slot = '%d'", a);
               									mysql_query(query);
										    	SendClientMessage(playerid, COLOR_GREY, "Kivetted a páncélt a csomagtartóból!");
											}
											else SendClientMessage(playerid, COLOR_GREY, "HIBA: Nincs a csomagtartóba armour!");
											mysql_free_result();
										}
									}
								}
							}
							else SendClientMessage(playerid, COLOR_GREY, "HIBA: Nincs kinyitva a csomagtartó!");
						}
					}
				}
			}
		}
		else SendClientMessage(playerid, COLOR_GREY, "HIBA: Autóból nem tudsz kiszedni fegyvert!");
	}
	return 1;
}

CMD:bemegy(playerid)
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "HIBA: Ha autóban ülsz nem tudsz bemenni!");
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		new Float:VehPos[3];
		GetVehiclePos(i,VehPos[0],VehPos[1],VehPos[2]);
		if(IsPlayerInRangeOfPoint(playerid, 2.0, VehPos[0],VehPos[1],VehPos[2]))
		{
			for(new a; a < MAX_SLOTS; a++)
		    {
      			if(i == carplay[a])
		        {
					format(query, sizeof(query), "SELECT vehid FROM cars WHERE slot = '%d'", a);
        			mysql_query(query);
				    mysql_store_result();
				    if(mysql_num_rows() != 0)
				    {
				        mysql_fetch_row(linen);
						new vehid2;
						sscanf(linen, "i", vehid2);
						mysql_free_result();
						if(vehid2 == 508)
						{
							SetPlayerPos(playerid,  2951.5, -1877.09, 5);
							SetPlayerInterior(playerid, 1);
							SetPlayerVirtualWorld(playerid, a);
							SetPVarInt(playerid, "lakocsi", a);
							ObjectLoader(playerid, 3000);
							break;
						}
					}
				}
			}
		}
	}
	return 1;
}

CMD:kimegy(playerid)
{
	if(GetPVarInt(playerid, "lakocsi") == 0) return 1;
	new Float:x, Float:y, Float:z;
	GetVehiclePos(carplay[GetPVarInt(playerid, "lakocsi")], x, y, z);
	SetPlayerPos(playerid, x+4, y, z);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(carplay[GetPVarInt(playerid, "lakocsi")]));
	SetPVarInt(playerid, "lakocsi", 0);
	return 1;
}

CMD:kulcsad(playerid, params[])
{
	if(GetPVarInt(playerid, "Logged") == 0) return 1;
	new tars, name1[24];
	format(query, sizeof(query), "SELECT * FROM cars WHERE Tulaj = '%s'", GetPlayerNameEx(playerid));
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		if(sscanf(params, "ii", slot, tars)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /kulcsad [Autóslot-od] [ID]");
  		format(query, sizeof(query), "SELECT * FROM cars WHERE Tulaj = '%s' AND slot = '%d'", GetPlayerNameEx(playerid), slot);
  		mysql_query(query);
	    mysql_store_result();
	    if(mysql_num_rows() != 0)
		{
			if(!IsPlayerConnected(tars)) return SendClientMessage(playerid, COLOR_GREY, "HIBA: Rossz játékosID!");
			else if(tars == playerid) return SendClientMessage(playerid, COLOR_GREY, "HIBA: Ezt a parancsot nem használhatod magadon!");
			GetPlayerName(tars, name1, sizeof(name1));
			new string[128];
			format(string, sizeof(string), "%s átadta a(z) %d slottú kocsija kulcsát!", GetPlayerNameEx(playerid), slot);
			SendClientMessage(tars, COLOR_YELLOW, string);
			format(string, sizeof(string), "%s-nak/nek átadtad a(z) %d slottú kocsid kulcsát!", GetPlayerNameEx(tars), slot);
			SendClientMessage(playerid, COLOR_YELLOW, string);
			format(query, sizeof(query), "UPDATE cars SET Tarstulaj = '%s' WHERE Tulaj = '%s' AND slot = '%d'", GetPlayerNameEx(tars), GetPlayerNameEx(playerid), slot);
   			mysql_query(query);
			mysql_free_result();
		}
		else SendClientMessage(playerid, COLOR_GREY, "HIBA: Ez nem a te autód!");
	}
	else SendClientMessage(playerid, COLOR_GREY, "HIBA: Neked nincsen kocsid!");
	return 1;
}

CMD:kulcselvesz(playerid, params[])
{
	new tars, name1[24];
	format(query, sizeof(query), "SELECT * FROM cars WHERE Tulaj = '%s'", GetPlayerNameEx(playerid));
	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		if(sscanf(params, "ii", slot, tars)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /tarstulaj [Autód slot-ja] [ID]");
		format(query, sizeof(query), "SELECT * FROM cars WHERE Tulaj = '%s' AND slot = '%d'", GetPlayerNameEx(playerid), slot);
  		mysql_query(query);
		mysql_store_result();
		if(mysql_num_rows() != 0)
		{
			if(!IsPlayerConnected(tars)) return SendClientMessage(playerid, COLOR_GREY, "HIBA: Rossz játékosID!");
			else if(tars == playerid) return SendClientMessage(playerid, COLOR_GREY, "HIBA: Ezt a parancsot nem használhatod magadon!");
			GetPlayerName(tars, name1, sizeof(name1));
			format(query, sizeof(query), "SELECT * FROM cars WHERE Tulaj = '%s' AND Tarstulaj = '%s' AND slot = '%d'", GetPlayerNameEx(playerid), name1, slot);
   			mysql_query(query);
			mysql_store_result();
			if(mysql_num_rows() != 0)
			{
				GetPlayerName(tars, name1, sizeof(name1));
				new string[128];
				format(string, sizeof(string), "%s elvette a(z) %d slottú kulcsát tõled!", GetPlayerNameEx(playerid), slot);
				SendClientMessage(tars, COLOR_YELLOW, string);
				format(string, sizeof(string), "Elvetted %s-tól/tõl a(z) %d slottú kulcsot!", name1, slot);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				mysql_free_result();
				format(query, sizeof(query), "UPDATE cars SET Tarstulaj = 'Nincs' WHERE Tulaj = '%s' AND slot = '%d'", GetPlayerNameEx(playerid), slot);
    			mysql_query(query);
			}
			else SendClientMessage(playerid, COLOR_GREY, "HIBA: Neki nincsen kulcsa ehhez az autódhoz!");
		}
		else SendClientMessage(playerid, COLOR_GREY, "HIBA: Ez nem a te autód!");
	}
	else SendClientMessage(playerid, COLOR_GREY, "HIBA: Neked nincsen autód!");
	return 1;
}

CMD:autoad(playerid, params[])
{
	if(GetPVarInt(playerid, "Logged") == 0) return 1;
	new id;
	format(query, sizeof(query), "SELECT * FROM cars WHERE Tulaj = '%s'", GetPlayerNameEx(playerid));
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    if(sscanf(params, "iu", slot, id)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /autoad [Autód slot-ja] [ID/névrészlet]");
		else if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_GREY, "HIBA: Rossz játékosID!");
		else if(id == playerid) return SendClientMessage(playerid, COLOR_GREY, "HIBA: Ezt a parancsot nem használhatod magadon!");
        new autok;
		for(new i; i < MAX_SLOTS; i++)
		{
		    format(query, sizeof(query), "SELECT * FROM cars WHERE Tulaj = '%s' AND slot = %d", GetPlayerNameEx(id), i);
		    mysql_query(query);
		    mysql_store_result();
		    if(mysql_num_rows() != 0)
		    {
				autok++;
				mysql_free_result();
		    }
		}
		if(autok >= 10) return SendClientMessage(playerid, COLOR_GREY, "HIBA: Az illetõnek max 10 autója lehet!");
		format(query, sizeof(query), "SELECT * FROM cars WHERE Tulaj = '%s' AND slot = '%d'", GetPlayerNameEx(playerid), slot);
     	mysql_query(query);
	    mysql_store_result();
		if(mysql_num_rows() != 0)
		{
		    new string[128];
			format(string, sizeof(string), "%s odaadta a(z) '%d' slottú autóját!", GetPlayerNameEx(playerid), slot);
			SendClientMessage(id, COLOR_GREEN, string);
			format(string, sizeof(string), "Odaadtad %s-nek a(z) '%d' slottú autódat!", GetPlayerNameEx(id), slot);
			SendClientMessage(playerid, COLOR_GREEN, string);
		    format(query, sizeof(query), "UPDATE cars SET Tulaj = '%s' WHERE slot = '%d'", GetPlayerNameEx(id), slot);
      		mysql_query(query);
			format(query, sizeof(query), "INSERT INTO eladasok (Elado, Vevo, Slot, Vehid, Datum, Micsinalt) VALUES ('%s', '%s', %d, %d, NOW(), 'Átadta az autóját')", GetPlayerNameEx(playerid), GetPlayerNameEx(id), slot, 0);
			mysql_query(query);
		    mysql_free_result();
		}
		else SendClientMessage(playerid, COLOR_GREY, "HIBA: Ez nem a te autód!");
	}
	else SendClientMessage(playerid, COLOR_GREY, "HIBA: Neked nincsen autód!");
	return 1;
}

CMD:objecttesz(playerid, params[])
{
	new object, objectid;
    if(cGetPlayerTeam(playerid) != TEAM_CARS) return 0;
    if(sscanf(params, "iii", slot, object, objectid)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /objecttesz [slot] [object[1-2] [objectID]");
	if(1 > object || object > 2) return SendClientMessage(playerid,COLOR_GREY,"HIBA: Az objectnek 1 és 2 közt kell lennie!");
	if(slot > MAX_SLOTS) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nem lehet nagyobb 500-nál!");
	//if(!EnabledObjects(objectid)) return SendClientMessage(playerid, COLOR_GREY, "HIBA: Ezt az objectet nem teheted fel!");
	format(query, sizeof(query), "UPDATE cars SET object%d = '%d' WHERE slot = '%d'", object, objectid, slot);
 	mysql_query(query);
 	new string[128];
	format(string, sizeof(string), "Sikeresen rátetted a(z) %d slotra, a(z) %d objectslot-ra a(z) %d objectet.", slot, objectid);
	SendClientMessage(playerid, COLOR_GREY, string);
	return 1;
}

/*CMD:xpos(playerid, params[])
{
	new Float:pos, object;
    if(cGetPlayerTeam(playerid) != TEAM_CARS) return 0;
    if(sscanf(params, "iif", slot, object, pos)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /xpos [slot] [object] [Koordináta]");
 	if(slot > MAX_SLOTS) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nem lehet nagyobb 500-nál!");
	if(1 > object || object > 2) return SendClientMessage(playerid,COLOR_GREY,"HIBA: Az objectnek 1 és 2 közt kell lennie!");
	format(query, sizeof(query), "UPDATE cars SET object%dX = '%0.2f' WHERE slot = '%d'", object, pos, slot);
 	mysql_query(query);
 	new string[128];
	format(string, sizeof(string), "Sikeresen szerkesztetted az X pos-t %0.2f-ra/re", pos);
	SendClientMessage(playerid, COLOR_GREY, string);
	return 1;
}

CMD:ypos(playerid, params[])
{
	new Float:pos, object2;
    if(cGetPlayerTeam(playerid) != TEAM_CARS) return 0;
    if(sscanf(params, "iif", slot, object2, pos)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /ypos [slot]  [object] [Koordináta]");
 	if(slot > MAX_SLOTS) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nem lehet nagyobb 500-nál!");
	if(1 > object2 || object2 > 2) return SendClientMessage(playerid,COLOR_GREY,"HIBA: Az objectnek 1 és 2 közt kell lennie!");
	format(query, sizeof(query), "UPDATE cars SET object%dY = '%0.2f' WHERE slot = '%d'", object2, pos, slot);
 	mysql_query(query);
 	new string[128];
	format(string, sizeof(string), "Sikeresen szerkesztetted az Y pos-t %0.2f-ra/re", pos);
	SendClientMessage(playerid, COLOR_GREY, string);
	return 1;
}

CMD:zpos(playerid, params[])
{
	new Float:pos, object3;
    if(cGetPlayerTeam(playerid) != TEAM_CARS) return 0;
    if(sscanf(params, "iif", slot, object3, pos)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /zpos [slot] [object] [Koordináta]");
 	if(slot > MAX_SLOTS) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nem lehet nagyobb 500-nál!");
	if(1 > object3 || object3 > 2) return SendClientMessage(playerid,COLOR_GREY,"HIBA: Az objectnek 1 és 2 közt kell lennie!");
	format(query, sizeof(query), "UPDATE cars SET object%dZ = '%0.2f' WHERE slot = '%d'", object3, pos, slot);
 	mysql_query(query);
 	new string[128];
	format(string, sizeof(string), "Sikeresen szerkesztetted az Z pos-t %0.2f-ra/re", pos);
	SendClientMessage(playerid, COLOR_GREY, string);
	return 1;
}

CMD:rxpos(playerid, params[])
{
	new Float:pos, object4;
    if(cGetPlayerTeam(playerid) != TEAM_CARS) return 0;
    if(sscanf(params, "iif", slot, object4, pos)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /rxpos [slot] [object] [Koordináta]");
 	if(slot > MAX_SLOTS) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nem lehet nagyobb 500-nál!");
	if(1 > object4 || object4 > 2) return SendClientMessage(playerid,COLOR_GREY,"HIBA: Az objectnek 1 és 2 közt kell lennie!");
	format(query, sizeof(query), "UPDATE cars SET object%dRX = '%0.2f' WHERE slot = '%d'", object4, pos, slot);
 	mysql_query(query);
 	new string[128];
	format(string, sizeof(string), "Sikeresen szerkesztetted az X pos-t %0.2f-ra/re", pos);
	SendClientMessage(playerid, COLOR_GREY, string);
	return 1;
}

CMD:rypos(playerid, params[])
{
	new Float:pos, object5;
    if(cGetPlayerTeam(playerid) != TEAM_CARS) return 0;
    if(sscanf(params, "iif", slot, object5, pos)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /rypos [slot]  [object] [Koordináta]");
 	if(slot > MAX_SLOTS) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nem lehet nagyobb 500-nál!");
	if(1 > object5 || object5 > 2) return SendClientMessage(playerid,COLOR_GREY,"HIBA: Az objectnek 1 és 2 közt kell lennie!");
	format(query, sizeof(query), "UPDATE cars SET object%dRY = '%0.2f' WHERE slot = '%d'", object5, pos, slot);
 	mysql_query(query);
 	new string[128];
	format(string, sizeof(string), "Sikeresen szerkesztetted az Y pos-t %0.2f-ra/re", pos);
	SendClientMessage(playerid, COLOR_GREY, string);
	return 1;
}

CMD:rzpos(playerid, params[])
{
	new Float:pos, object6;
    if(cGetPlayerTeam(playerid) != TEAM_CARS) return 0;
    if(sscanf(params, "iif", slot, object6, pos)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /rzpos [slot] [object] [Koordináta]");
 	if(slot > MAX_SLOTS) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nem lehet nagyobb 500-nál!");
	if(1 > object6 || object6 > 2) return SendClientMessage(playerid,COLOR_GREY,"HIBA: Az objectnek 1 és 2 közt kell lennie!");
	format(query, sizeof(query), "UPDATE cars SET object%dRZ = '%0.2f' WHERE slot = '%d'", object6, pos, slot);
 	mysql_query(query);
 	new string[128];
	format(string, sizeof(string), "Sikeresen szerkesztetted az Z pos-t %0.2f-ra/re", pos);
	SendClientMessage(playerid, COLOR_GREY, string);
	return 1;
}*/

//------

CMD:neon(playerid, params[])
{
	new Float:pos, o, betpos[3];
    if(sscanf(params, "siif", betpos, slot, o, pos)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /neon [X, Y, Z, RX, RY, RZ] [autóslot] [object] [Koordináta]");
  	if(slot > MAX_SLOTS) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nem lehet nagyobb 500-nál!");
	if(strcmp(betpos, "x", true) && strcmp(betpos, "y", true) && strcmp(betpos, "z", true) && strcmp(betpos, "rx", true) && strcmp(betpos, "ry", true) && strcmp(betpos, "rz", true)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /xpos [X, Y, Z, RX, RY, RZ] [autóslot] [object] [Koordináta]");
	format(query, sizeof(query), "SELECT * FROM cars WHERE Tulaj = '%s' AND slot = '%d'", GetPlayerNameEx(playerid), slot);
 	mysql_query(query);
    mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		if(1 > o || o > 2) return SendClientMessage(playerid,COLOR_GREY,"HIBA: Az objectnek 1 és 2 közt kell lennie!");
		new Float:nnpos[3], Float:nnrpos[3];
		format(query, sizeof(query), "SELECT object%d, object%dX, object%dY, object%dZ, object%dRX, object%dRY, object%dRZ FROM cars WHERE slot = %d", o, o, o, o, o, o, o, slot);
	 	mysql_query(query);
	    mysql_store_result();
		if(mysql_num_rows() != 0)
		{
			mysql_fetch_row(linen);
			new ob;
			sscanf(linen, "p<|>dffffff", ob, nnpos[0], nnpos[1], nnpos[2], nnrpos[0], nnrpos[1], nnrpos[2]);
			mysql_free_result();
			if(ob == 0) return SendClientMessage(playerid, COLOR_RED, "Ezen a neonsloton nincsen neon.");
		}
		format(query, sizeof(query), "UPDATE cars SET object%d%s = '%0.2f' WHERE slot = '%d'", o, betpos, pos, slot);
	 	mysql_query(query);
	 	if(!strcmp(betpos, "x", true)) nnpos[0] = pos;
	 	else if(!strcmp(betpos, "y", true)) nnpos[1] = pos;
	 	else if(!strcmp(betpos, "z", true)) nnpos[2] = pos;
	 	else if(!strcmp(betpos, "rx", true)) nnrpos[0] = pos;
	 	else if(!strcmp(betpos, "ry", true)) nnrpos[1] = pos;
	 	else if(!strcmp(betpos, "rz", true)) nnrpos[2] = pos;
	 	if(o == 1) AttachDynamicObjectToVehicle(objects[slot], carplay[slot], nnpos[0], nnpos[1], nnpos[2], nnrpos[0], nnrpos[1], nnrpos[2]);
	 	if(o == 2) AttachDynamicObjectToVehicle(objects2[slot], carplay[slot], nnpos[0], nnpos[1], nnpos[2], nnrpos[0], nnrpos[1], nnrpos[2]);
	 	new string[128];
	 	format(string, sizeof(string), "Sikeresen szerkesztetted a(z) %s pos-t %0.2f-ra/re", betpos, pos);
		SendClientMessage(playerid, COLOR_GREY, string);
	}
	else SendClientMessage(playerid, COLOR_RED, "Ez nem a te autód!");
	return 1;
}

/*CMD:neonx(playerid, params[])
{
	new Float:pos, o;
    if(sscanf(params, "iif", slot, o, pos)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /xpos [autóslot] [object] [Koordináta]");
  	if(slot > MAX_SLOTS) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nem lehet nagyobb 500-nál!");
    format(query, sizeof(query), "SELECT * FROM cars WHERE Tulaj = '%s' AND slot = '%d'", GetPlayerNameEx(playerid), slot);
 	mysql_query(query);
    mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		if(1 > o || o > 2) return SendClientMessage(playerid,COLOR_GREY,"HIBA: Az objectnek 1 és 2 közt kell lennie!");
		new Float:nnpos[3], Float:nnrpos[3];
		format(query, sizeof(query), "SELECT object%d, object%dX, object%dY, object%dZ, object%dRX, object%dRY, object%dRZ FROM cars WHERE slot = %d", o, o, o, o, o, o, o, slot);
	 	mysql_query(query);
	    mysql_store_result();
		if(mysql_num_rows() != 0)
		{
			mysql_fetch_row(linen);
			new ob;
			sscanf(linen, "p<|>dffffff", ob, nnpos[0], nnpos[1], nnpos[2], nnrpos[0], nnrpos[1], nnrpos[2]);
			mysql_free_result();
			if(ob == 0) return SendClientMessage(playerid, COLOR_RED, "Ezen a neonsloton nincsen neon.");
		}
		format(query, sizeof(query), "UPDATE cars SET object%dX = '%0.2f' WHERE slot = '%d'", o, pos, slot);
	 	mysql_query(query);
	 	nnpos[0] = pos;
	 	if(o == 1) AttachDynamicObjectToVehicle(objects[slot], carplay[slot], nnpos[0], nnpos[1], nnpos[2], nnrpos[0], nnrpos[1], nnrpos[2]);
	 	if(o == 2) AttachDynamicObjectToVehicle(objects2[slot], carplay[slot], nnpos[0], nnpos[1], nnpos[2], nnrpos[0], nnrpos[1], nnrpos[2]);
	 	new string[128];
	 	format(string, sizeof(string), "Sikeresen szerkesztetted az X pos-t %0.2f-ra/re", pos);
		SendClientMessage(playerid, COLOR_GREY, string);
	}
	else SendClientMessage(playerid, COLOR_RED, "Ez nem a te autód!");
	return 1;
}

CMD:neony(playerid, params[])
{
	new Float:pos, o2;
    if(sscanf(params, "iif", slot, o2, pos)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /ypos [autóslot]  [object] [Koordináta]");
 	if(slot > MAX_SLOTS) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nem lehet nagyobb 500-nál!");
	format(query, sizeof(query), "SELECT * FROM cars WHERE Tulaj = '%s' AND slot = '%d'", GetPlayerNameEx(playerid), slot);
 	mysql_query(query);
    mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		if(1 > o2 || o2 > 2) return SendClientMessage(playerid,COLOR_GREY,"HIBA: Az objectnek 1 és 2 közt kell lennie!");
    	new Float:nnpos[3], Float:nnrpos[3];
		format(query, sizeof(query), "SELECT object%d, object%dX, object%dY, object%dZ, object%dRX, object%dRY, object%dRZ FROM cars WHERE slot = %d", o2, o2, o2, o2, o2, o2, o2, slot);
	 	mysql_query(query);
	    mysql_store_result();
		if(mysql_num_rows() != 0)
		{
			mysql_fetch_row(linen);
			new ob;
			sscanf(linen, "p<|>dffffff", ob, nnpos[0], nnpos[1], nnpos[2], nnrpos[0], nnrpos[1], nnrpos[2]);
			mysql_free_result();
			if(ob == 0) return SendClientMessage(playerid, COLOR_RED, "Ezen a neonsloton nincsen neon.");
		}
		format(query, sizeof(query), "UPDATE cars SET object%dY = '%0.2f' WHERE slot = '%d'", o2, pos, slot);
	 	mysql_query(query);
	 	nnpos[1] = pos;
	 	if(o2 == 1) AttachDynamicObjectToVehicle(objects[slot], carplay[slot], nnpos[0], nnpos[1], nnpos[2], nnrpos[0], nnrpos[1], nnrpos[2]);
    	if(o2 == 2) AttachDynamicObjectToVehicle(objects2[slot], carplay[slot], nnpos[0], nnpos[1], nnpos[2], nnrpos[0], nnrpos[1], nnrpos[2]);
		 new string[128];
		format(string, sizeof(string), "Sikeresen szerkesztetted az Y pos-t %0.2f-ra/re", pos);
		SendClientMessage(playerid, COLOR_GREY, string);
    }
	else SendClientMessage(playerid, COLOR_RED, "Ez nem a te autód!");
	return 1;
}

CMD:neonz(playerid, params[])
{
	new Float:pos, o3;
    if(sscanf(params, "iif", slot, o3, pos)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /zpos [autóslot] [object] [Koordináta]");
 	if(slot > MAX_SLOTS) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nem lehet nagyobb 500-nál!");
    format(query, sizeof(query), "SELECT * FROM cars WHERE Tulaj = '%s' AND slot = '%d'", GetPlayerNameEx(playerid), slot);
 	mysql_query(query);
    mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		if(1 > o3 || o3 > 2) return SendClientMessage(playerid,COLOR_GREY,"HIBA: Az objectnek 1 és 2 közt kell lennie!");
        new Float:nnpos[3], Float:nnrpos[3];
		format(query, sizeof(query), "SELECT object%d, object%dX, object%dY, object%dZ, object%dRX, object%dRY, object%dRZ FROM cars WHERE slot = %d", o3, o3, o3, o3, o3, o3, o3, slot);
	 	mysql_query(query);
	    mysql_store_result();
		if(mysql_num_rows() != 0)
		{
			mysql_fetch_row(linen);
			new ob;
			sscanf(linen, "p<|>dffffff", ob, nnpos[0], nnpos[1], nnpos[2], nnrpos[0], nnrpos[1], nnrpos[2]);
			mysql_free_result();
			if(ob == 0) return SendClientMessage(playerid, COLOR_RED, "Ezen a neonsloton nincsen neon.");
		}
		format(query, sizeof(query), "UPDATE cars SET object%dZ = '%0.2f' WHERE slot = '%d'", o3, pos, slot);
	 	mysql_query(query);
	 	nnpos[2] = pos;
	 	if(o3 == 1) AttachDynamicObjectToVehicle(objects[slot], carplay[slot], nnpos[0], nnpos[1], nnpos[2], nnrpos[0], nnrpos[1], nnrpos[2]);
        if(o3 == 2) AttachDynamicObjectToVehicle(objects2[slot], carplay[slot], nnpos[0], nnpos[1], nnpos[2], nnrpos[0], nnrpos[1], nnrpos[2]);
		new string[128];
		format(string, sizeof(string), "Sikeresen szerkesztetted az Z pos-t %0.2f-ra/re", pos);
		SendClientMessage(playerid, COLOR_GREY, string);
    }
	else SendClientMessage(playerid, COLOR_RED, "Ez nem a te autód!");
	return 1;
}

CMD:neonrx(playerid, params[])
{
	new Float:pos, o4;
    if(sscanf(params, "iif", slot, o4, pos)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /rxpos [autóslot] [object] [Koordináta]");
 	if(slot > MAX_SLOTS) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nem lehet nagyobb 500-nál!");
    format(query, sizeof(query), "SELECT * FROM cars WHERE Tulaj = '%s' AND slot = '%d'", GetPlayerNameEx(playerid), slot);
 	mysql_query(query);
    mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		if(1 > o4 || o4 > 2) return SendClientMessage(playerid,COLOR_GREY,"HIBA: Az objectnek 1 és 2 közt kell lennie!");
        new Float:nnpos[3], Float:nnrpos[3];
		format(query, sizeof(query), "SELECT object%d, object%dX, object%dY, object%dZ, object%dRX, object%dRY, object%dRZ FROM cars WHERE slot = %d", o4, o4, o4, o4, o4, o4, o4, slot);
	 	mysql_query(query);
	    mysql_store_result();
		if(mysql_num_rows() != 0)
		{
			mysql_fetch_row(linen);
			new ob;
  			sscanf(linen, "p<|>dffffff", ob, nnpos[0], nnpos[1], nnpos[2], nnrpos[0], nnrpos[1], nnrpos[2]);
			mysql_free_result();
			if(ob == 0) return SendClientMessage(playerid, COLOR_RED, "Ezen a neonsloton nincsen neon.");
		}
		format(query, sizeof(query), "UPDATE cars SET object%dRX = '%0.2f' WHERE slot = '%d'", o4, pos, slot);
	 	mysql_query(query);
	 	nnrpos[0] = pos;
	 	if(o4 == 1) AttachDynamicObjectToVehicle(objects[slot], carplay[slot], nnpos[0], nnpos[1], nnpos[2], nnrpos[0], nnrpos[1], nnrpos[2]);
        if(o4 == 2) AttachDynamicObjectToVehicle(objects2[slot], carplay[slot], nnpos[0], nnpos[1], nnpos[2], nnrpos[0], nnrpos[1], nnrpos[2]);
		new string[128];
		format(string, sizeof(string), "Sikeresen szerkesztetted az X pos-t %0.2f-ra/re", pos);
		SendClientMessage(playerid, COLOR_GREY, string);
    }
	else SendClientMessage(playerid, COLOR_RED, "Ez nem a te autód!");
	return 1;
}

CMD:neonry(playerid, params[])
{
	new Float:pos, o5;
    if(sscanf(params, "iif", slot, o5, pos)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /rypos [autóslot]  [object] [Koordináta]");
 	if(slot > MAX_SLOTS) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nem lehet nagyobb 500-nál!");
    format(query, sizeof(query), "SELECT * FROM cars WHERE Tulaj = '%s' AND slot = '%d'", GetPlayerNameEx(playerid), slot);
 	mysql_query(query);
    mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		if(1 > o5 || o5 > 2) return SendClientMessage(playerid,COLOR_GREY,"HIBA: Az objectnek 1 és 2 közt kell lennie!");
    	new Float:nnpos[3], Float:nnrpos[3];
		format(query, sizeof(query), "SELECT object%d, object%dX, object%dY, object%dZ, object%dRX, object%dRY, object%dRZ FROM cars WHERE slot = %d", o5, o5, o5, o5, o5, o5, o5, slot);
	 	mysql_query(query);
	    mysql_store_result();
		if(mysql_num_rows() != 0)
		{
			mysql_fetch_row(linen);
			new ob;
			sscanf(linen, "p<|>dffffff", ob, nnpos[0], nnpos[1], nnpos[2], nnrpos[0], nnrpos[1], nnrpos[2]);
			mysql_free_result();
			if(ob == 0) return SendClientMessage(playerid, COLOR_RED, "Ezen a neonsloton nincsen neon.");
		}
		format(query, sizeof(query), "UPDATE cars SET object%dRY = '%0.2f' WHERE slot = '%d'", o5, pos, slot);
	 	mysql_query(query);
	 	nnrpos[1] = pos;
	 	if(o5 == 1) AttachDynamicObjectToVehicle(objects[slot], carplay[slot], nnpos[0], nnpos[1], nnpos[2], nnrpos[0], nnrpos[1], nnrpos[2]);
        if(o5 == 2) AttachDynamicObjectToVehicle(objects2[slot], carplay[slot], nnpos[0], nnpos[1], nnpos[2], nnrpos[0], nnrpos[1], nnrpos[2]);
		new string[128];
		format(string, sizeof(string), "Sikeresen szerkesztetted az Y pos-t %0.2f-ra/re", pos);
		SendClientMessage(playerid, COLOR_GREY, string);
    }
	else SendClientMessage(playerid, COLOR_RED, "Ez nem a te autód!");
	return 1;
}

CMD:neonrz(playerid, params[])
{
	new Float:pos, o6;
    if(sscanf(params, "iif", slot, o6, pos)) return SendClientMessage(playerid, COLOR_GREY, "Használat: /rzpos [autóslot] [object] [Koordináta]");
 	if(slot > MAX_SLOTS) return SendClientMessage(playerid, COLOR_GREY, "HIBA: A slot nem lehet nagyobb 500-nál!");
    format(query, sizeof(query), "SELECT * FROM cars WHERE Tulaj = '%s' AND slot = '%d'", GetPlayerNameEx(playerid), slot);
 	mysql_query(query);
    mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		if(1 > o6 || o6 > 2) return SendClientMessage(playerid,COLOR_GREY,"HIBA: Az objectnek 1 és 2 közt kell lennie!");
        new Float:nnpos[3], Float:nnrpos[3];
		format(query, sizeof(query), "SELECT object%d, object%dX, object%dY, object%dZ, object%dRX, object%dRY, object%dRZ FROM cars WHERE slot = %d", o6, o6, o6, o6, o6, o6, o6, slot);
	 	mysql_query(query);
	    mysql_store_result();
		if(mysql_num_rows() != 0)
		{
			mysql_fetch_row(linen);
			new ob;
			sscanf(linen, "p<|>dffffff", ob, nnpos[0], nnpos[1], nnpos[2], nnrpos[0], nnrpos[1], nnrpos[2]);
			mysql_free_result();
			if(ob == 0) return SendClientMessage(playerid, COLOR_RED, "Ezen a neonsloton nincsen neon.");
		}
		format(query, sizeof(query), "UPDATE cars SET object%dRZ = '%0.2f' WHERE slot = '%d'", o6, pos, slot);
	 	mysql_query(query);
	 	nnrpos[2] = pos;
	 	if(o6 == 1) AttachDynamicObjectToVehicle(objects[slot], carplay[slot], nnpos[0], nnpos[1], nnpos[2], nnrpos[0], nnrpos[1], nnrpos[2]);
        if(o6 == 2) AttachDynamicObjectToVehicle(objects2[slot], carplay[slot], nnpos[0], nnpos[1], nnpos[2], nnrpos[0], nnrpos[1], nnrpos[2]);
		new string[128];
		format(string, sizeof(string), "Sikeresen szerkesztetted az Z pos-t %0.2f-ra/re", pos);
		SendClientMessage(playerid, COLOR_GREY, string);
 	}
	else SendClientMessage(playerid, COLOR_RED, "Ez nem a te autód!");
	return 1;
}*/
//-------------------------------------------------------------------------------------------
CMD:cstki(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    new vehicleid, engine, lights, alarm, doors, bonnet, boot, objective;
	    vehicleid = GetPlayerVehicleID(playerid);
	    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	    SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, true, objective);
	    SendClientMessage(playerid, COLOR_GREEN, "Csomagtartó kinyitva!");
	    csomagt[vehicleid] = true;
	}
	else SendClientMessage(playerid, COLOR_RED, "HIBA: Nem ülsz sofõrülésen!");
	return 1;
}

CMD:cstbe(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    new vehicleid, engine, lights, alarm, doors, bonnet, boot, objective;
	    vehicleid = GetPlayerVehicleID(playerid);
	    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	    SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, false, objective);
	    SendClientMessage(playerid, COLOR_GREEN, "Csomagtartó bezárva!");
	    csomagt[vehicleid] = false;
	}
	else SendClientMessage(playerid, COLOR_RED, "HIBA: Nem ülsz sofõrülésen!");
	return 1;
}

CMD:mhki(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    new vehicleid, engine, lights, alarm, doors, bonnet, boot, objective;
	    vehicleid = GetPlayerVehicleID(playerid);
	    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	    SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, true, boot, objective);
	    SendClientMessage(playerid, COLOR_GREEN, "Motorháztetõ kinyitva!");
	}
	else SendClientMessage(playerid, COLOR_RED, "HIBA: Nem ülsz sofõrülésen!");
	return 1;
}

CMD:mhbe(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    new vehicleid, engine, lights, alarm, doors, bonnet, boot, objective;
	    vehicleid = GetPlayerVehicleID(playerid);
	    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	    SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, false, boot, objective);
	    SendClientMessage(playerid, COLOR_GREEN, "Motorháztetõ bezárva!");
	}
	else SendClientMessage(playerid, COLOR_RED, "HIBA: Nem ülsz sofõrülésen!");
	return 1;
}

CMD:spawn(playerid)
{
	ShowPlayerDialog(playerid, SPAWN_DIALOG, DIALOG_STYLE_LIST, "Hol akarsz spawnolni?", "Munkahely/bandahely\nHáz\nLakókocsi", "Választ", "Kilép");
	return 1;
}

//-------------------Animok-----------------------------------------------------
CMD:animlist(playerid)
{
    SendClientMessage(playerid, COLOR_YELLOW, "________________________________________________________________________________________________________________________");
	SendClientMessage(playerid,COLOR_RED,"Választható animok:");
    SendClientMessage(playerid,COLOR_WHITE,"/carjacked1 - /carjacked2 - /handsup - /cellin - /cellout - /drunk - /bomb - /gettarrested - /laugh - /lookout - /robman - /crossarms");
    SendClientMessage(playerid,COLOR_WHITE," /lay - /hide - /vomit - /eat - /wave - /slapass - /deal - /crack - /smoke[1-4] - /groundsit - /chat - /fucku");
    SendClientMessage(playerid,COLOR_WHITE,"/taichi - /chairsit - /fall - /fallback - /kiss - /injured - /sup[1-3] - /rap[1-4] - /push - /akick - /lowbodypush - /spray - /headbutt");
    SendClientMessage(playerid,COLOR_WHITE,"/medic - /koface - /kostomach - /lifejump - /exhaust - /leftslap - /rollfall - /carlock - /rcarjack1 - /lcarjack1");
    SendClientMessage(playerid,COLOR_WHITE,"/rcarjack2 - /lcarjack2 - /hoodfrisked - /lightcig - /tapcig - /bat - /box - /lay2 - /chant - /finger - shouting");
    SendClientMessage(playerid,COLOR_WHITE,"/cop - /elbow - /kneekick - /fstance - /gpunch - /airkick - /gkick - /gpunch - /lowthrow - /highthrow - /dealstance - /pee");
    SendClientMessage(playerid,COLOR_WHITE,"/knife[1-4] - /basket[1-6] - /reloadcolt - /reloadm4 - /gwalk[1-2] - /aim[1-3] - /lean[1-2] - /run - /clear - /strip[a-g] - /dance[1-4]");
    SendClientMessage(playerid, COLOR_YELLOW, "------------------------------------------------------------------------------------------------------------------------");
    return 1;
}
CMD:carjacked(playerid) return SendClientMessage(playerid, COLOR_WHITE, "[ HASZNÁLAT ]: /carjacked[1-2]");
CMD:carjacked1(playerid) return	LoopingAnim(playerid,"PED","CAR_jackedLHS",4.0,0,1,1,1,0);
CMD:carjacked2(playerid) return	LoopingAnim(playerid,"PED","CAR_jackedRHS",4.0,0,1,1,1,0);
CMD:handsup(playerid) return LoopingAnim(playerid, "ROB_BANK","SHP_HandsUp_Scr", 4.0, 0, 1, 1, 1, 0);
CMD:cellin(playerid) return SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
CMD:cellout(playerid) return SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
CMD:drunk(playerid) return LoopingAnim(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
CMD:bomb(playerid) return LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
CMD:gettarrested(playerid) return LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1);
CMD:laugh(playerid) return OnePlayAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
CMD:lookout(playerid) return OnePlayAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);
CMD:robman(playerid) return LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
CMD:crossarms(playerid) return LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
CMD:lay(playerid) return LoopingAnim(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
CMD:hide(playerid) return LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
CMD:vomit(playerid) return OnePlayAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
CMD:eat(playerid) return OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
CMD:wave(playerid) return LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0);
CMD:slapass(playerid) return OnePlayAnim(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
CMD:deal(playerid) return OnePlayAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0);
CMD:crack(playerid) return LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
CMD:smoke(playerid) return SendClientMessage(playerid, COLOR_WHITE, "[ HASZNÁLAT ]: /smoke[1-4]");
CMD:smoke1(playerid) return LoopingAnim(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
CMD:smoke2(playerid) return LoopingAnim(playerid,"SMOKING", "F_smklean_loop", 4.0, 1, 0, 0, 0, 0);
CMD:smoke3(playerid) return LoopingAnim(playerid,"SMOKING","M_smkstnd_loop", 4.0, 1, 0, 0, 0, 0);
CMD:smoke4(playerid) return LoopingAnim(playerid,"SMOKING","M_smk_out", 4.0, 1, 0, 0, 0, 0);
CMD:groundsit(playerid) return LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
CMD:chat(playerid) return LoopingAnim(playerid,"PED","IDLE_CHAT",4.0,1,0,0,1,1);
CMD:fucku(playerid) return OnePlayAnim(playerid,"PED","fucku",4.0,0,0,0,0,0);
CMD:taichi(playerid) return LoopingAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
CMD:chairsit(playerid) return LoopingAnim(playerid,"PED","SEAT_idle",4.1,0,1,1,1,0);
CMD:fall(playerid) return LoopingAnim(playerid,"PED","KO_skid_front",4.1,0,1,1,1,0);
CMD:fallback(playerid) return LoopingAnim(playerid, "PED","FLOOR_hit_f", 4.0, 1, 0, 0, 0, 0);
CMD:kiss(playerid) return LoopingAnim(playerid, "KISSING", "Playa_Kiss_02", 3.0, 1, 1, 1, 1, 0);
CMD:injured(playerid) return LoopingAnim(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
CMD:sup(playerid) return SendClientMessage(playerid, COLOR_WHITE, "[ HASZNÁLAT ]: /sup[1-3]");
CMD:sup1(playerid) return OnePlayAnim(playerid,"GANGS","hndshkba",4.0,0,0,0,0,0);
CMD:sup2(playerid) return OnePlayAnim(playerid,"GANGS","hndshkda",4.0,0,0,0,0,0);
CMD:sup3(playerid) return OnePlayAnim(playerid,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);
CMD:rap(playerid) return SendClientMessage(playerid, COLOR_WHITE, "[ HASZNÁLAT ]: /rap[1-4]");
CMD:rap1(playerid) return LoopingAnim(playerid,"RAPPING","RAP_A_Loop",4.0,1,0,0,0,0);
CMD:rap2(playerid) return LoopingAnim(playerid,"RAPPING","RAP_C_Loop",4.0,1,0,0,0,0);
CMD:rap3(playerid) return LoopingAnim(playerid,"GANGS","prtial_gngtlkD",4.0,1,0,0,0,0);
CMD:rap4(playerid) return LoopingAnim(playerid,"GANGS","prtial_gngtlkH",4.0,1,0,0,1,1);
CMD:push(playerid) return OnePlayAnim(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
CMD:akick(playerid) return OnePlayAnim(playerid,"POLICE","Door_Kick",4.0,0,0,0,0,0);
CMD:lowbodypush(playerid) return OnePlayAnim(playerid,"GANGS","shake_carSH",4.0,0,0,0,0,0);
CMD:spray(playerid) return OnePlayAnim(playerid,"SPRAYCAN","spraycan_full",4.0,0,0,0,0,0);
CMD:headbutt(playerid) return OnePlayAnim(playerid,"WAYFARER","WF_Fwd",4.0,0,0,0,0,0);
CMD:medic(playerid) return OnePlayAnim(playerid,"MEDIC","CPR",4.0,0,0,0,0,0);
CMD:koface(playerid) return LoopingAnim(playerid,"PED","KO_shot_face",4.0,0,1,1,1,0);
CMD:kostomach(playerid) return LoopingAnim(playerid,"PED","KO_shot_stom",4.0,0,1,1,1,0);
CMD:lifejump(playerid) return LoopingAnim(playerid,"PED","EV_dive",4.0,0,1,1,1,0);
CMD:exhaust(playerid) return LoopingAnim(playerid,"PED","IDLE_tired",3.0,1,0,0,0,0);
CMD:leftslap(playerid) return OnePlayAnim(playerid,"PED","BIKE_elbowL",4.0,0,0,0,0,0);
CMD:rollfall(playerid) return LoopingAnim(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);
CMD:carlock(playerid) return OnePlayAnim(playerid,"PED","CAR_doorlocked_LHS",4.0,0,0,0,0,0);
CMD:rcarjack(playerid) return SendClientMessage(playerid, COLOR_WHITE, "[ HASZNÁLAT ]: /rcarjack[1-2]");
CMD:lcarjack(playerid) return SendClientMessage(playerid, COLOR_WHITE, "[ HASZNÁLAT ]: /lcarjack[1-2]");
CMD:rcarjack1(playerid) return OnePlayAnim(playerid,"PED","CAR_pulloutL_LHS",4.0,0,0,0,0,0);
CMD:lcarjack1(playerid) return OnePlayAnim(playerid,"PED","CAR_pulloutL_RHS",4.0,0,0,0,0,0);
CMD:rcarjack2(playerid) return OnePlayAnim(playerid,"PED","CAR_pullout_LHS",4.0,0,0,0,0,0);
CMD:lcarjack2(playerid) return OnePlayAnim(playerid,"PED","CAR_pullout_RHS",4.0,0,0,0,0,0);
CMD:hoodfrisked(playerid) return LoopingAnim(playerid,"POLICE","crm_drgbst_01",4.0,0,1,1,1,0);
CMD:lightcig(playerid) return OnePlayAnim(playerid,"SMOKING","M_smk_in",3.0,0,0,0,0,0);
CMD:tapcig(playerid) return OnePlayAnim(playerid,"SMOKING","M_smk_tap",3.0,0,0,0,0,0);
CMD:bat(playerid) return LoopingAnim(playerid,"BASEBALL","Bat_IDLE",4.0,1,1,1,1,0);
CMD:box(playerid) return LoopingAnim(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,0);
CMD:lay2(playerid) return LoopingAnim(playerid,"SUNBATHE","Lay_Bac_in",3.0,0,1,1,1,0);
CMD:chant(playerid) return LoopingAnim(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,0);
CMD:finger(playerid) return OnePlayAnim(playerid,"RIOT","RIOT_FUKU",2.0,0,0,0,0,0);
CMD:shouting(playerid) return LoopingAnim(playerid,"RIOT","RIOT_shout",4.0,1,0,0,0,0);
CMD:cop(playerid) return OnePlayAnim(playerid,"SWORD","sword_block",50.0,0,1,1,1,1);
CMD:elbow(playerid) return OnePlayAnim(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0);
CMD:kneekick(playerid) return OnePlayAnim(playerid,"FIGHT_D","FightD_2",4.0,0,1,1,0,0);
CMD:fstance(playerid) return LoopingAnim(playerid,"FIGHT_D","FightD_IDLE",4.0,1,1,1,1,0);
CMD:gpunch(playerid) return OnePlayAnim(playerid,"FIGHT_B","FightB_G",4.0,0,0,0,0,0);
CMD:airkick(playerid) return OnePlayAnim(playerid,"FIGHT_C","FightC_M",4.0,0,1,1,0,0);
CMD:gkick(playerid) return OnePlayAnim(playerid,"FIGHT_D","FightD_G",4.0,0,0,0,0,0);
CMD:lowthrow(playerid) return OnePlayAnim(playerid,"GRENADE","WEAPON_throwu",3.0,0,0,0,0,0);
CMD:highthrow(playerid) return OnePlayAnim(playerid,"GRENADE","WEAPON_throw",4.0,0,0,0,0,0);
CMD:dealstance(playerid) return LoopingAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
CMD:pee(playerid) return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
CMD:knife(playerid) return SendClientMessage(playerid, COLOR_WHITE, "[ HASZNÁLAT ]: /knife[1-4]");
CMD:knife1(playerid) return LoopingAnim(playerid,"KNIFE","KILL_Knife_Ped_Damage",4.0,0,1,1,1,0);
CMD:knife2(playerid) return LoopingAnim(playerid,"KNIFE","KILL_Knife_Ped_Die",4.0,0,1,1,1,0);
CMD:knife3(playerid) return OnePlayAnim(playerid,"KNIFE","KILL_Knife_Player",4.0,0,0,0,0,0);
CMD:knife4(playerid) return LoopingAnim(playerid,"KNIFE","KILL_Partial",4.0,0,1,1,1,1);
CMD:basket(playerid) return SendClientMessage(playerid, COLOR_WHITE, "[ HASZNÁLAT ]: /basket[1-6]");
CMD:basket1(playerid) return LoopingAnim(playerid,"BSKTBALL","BBALL_idleloop",4.0,1,0,0,0,0);
CMD:basket2(playerid) return OnePlayAnim(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
CMD:basket3(playerid) return OnePlayAnim(playerid,"BSKTBALL","BBALL_pickup",4.0,0,0,0,0,0);
CMD:basket4(playerid) return LoopingAnim(playerid,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1);
CMD:basket5(playerid) return LoopingAnim(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
CMD:basket6(playerid) return LoopingAnim(playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,0);
CMD:reloadcolt(playerid) return OnePlayAnim(playerid,"COLT45","colt45_reload",4.0,0,0,0,0,1);
CMD:reloadm4(playerid) return OnePlayAnim(playerid,"UZI","UZI_reload",4.0,0,0,0,0,0);
CMD:gwalk(playerid) return SendClientMessage(playerid, COLOR_WHITE, "[ HASZNÁLAT ]: /gwalk[1-2]");
CMD:gwalk1(playerid) return LoopingAnim(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
CMD:gwalk2(playerid) return LoopingAnim(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
CMD:aim(playerid) return SendClientMessage(playerid, COLOR_WHITE, "[ HASZNÁLAT ]: /aim[1-3]");
CMD:aim1(playerid) return LoopingAnim(playerid,"PED","gang_gunstand",4.0,1,1,1,1,1);
CMD:aim2(playerid) return LoopingAnim(playerid,"PED","Driveby_L",4.0,0,1,1,1,1);
CMD:aim3(playerid) return LoopingAnim(playerid,"PED","Driveby_R",4.0,0,1,1,1,1);
CMD:lean(playerid) return SendClientMessage(playerid, COLOR_WHITE, "[ HASZNÁLAT ]: /lean[1-2]");
CMD:lean1(playerid) return LoopingAnim(playerid,"GANGS","leanIDLE",4.0,0,1,1,1,0);
CMD:lean2(playerid) return LoopingAnim(playerid,"MISC","Plyrlean_loop",4.0,0,1,1,1,0);
//CMD:run(playerid) return LoopingAnim(playerid,"PED","sprint_civi",4,1,1,1,1,1);
CMD:clear(playerid) return ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
CMD:strip(playerid) return SendClientMessage(playerid, COLOR_WHITE, "[ HASZNÁLAT ]: /strip[a-g]");
CMD:stripa(playerid) return LoopingAnim(playerid,"STRIP", "strip_A", 4.1, 1, 1, 1, 1, 1 );
CMD:stripb(playerid) return LoopingAnim(playerid,"STRIP", "strip_B", 4.1, 1, 1, 1, 1, 1 );
CMD:stripc(playerid) return LoopingAnim(playerid,"STRIP", "strip_C", 4.1, 1, 1, 1, 1, 1 );
CMD:stripd(playerid) return LoopingAnim(playerid,"STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1 );
CMD:stripe(playerid) return LoopingAnim(playerid,"STRIP", "strip_E", 4.1, 1, 1, 1, 1, 1 );
CMD:stripf(playerid) return LoopingAnim(playerid,"STRIP", "strip_F", 4.1, 1, 1, 1, 1, 1 );
CMD:stripg(playerid) return LoopingAnim(playerid,"STRIP", "strip_G", 4.1, 1, 1, 1, 1, 1 );
CMD:dance(playerid) return SendClientMessage(playerid, COLOR_WHITE, "[ HASZNÁLAT ]: /dance[1-4]");
CMD:dance1(playerid) return SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
CMD:dance2(playerid) return SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
CMD:dance3(playerid) return SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
CMD:dance4(playerid) return SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
//-----------------------TUNING INFO--------------------------------------------
//Változók a mód elején

CMD:pl(playerid, params[])
{
	if(cGetPlayerTeam(playerid) != TEAM_CARS) return 0;
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, yellow, "A parancs használatához jármûben kell lenned.");
	new
	    i = 0,
	    string[128],
		VehicleID = GetPlayerVehicleID(playerid);
	SendClientMessage(playerid, blue,"¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤");
	format(string, sizeof string, "{ffff00}Jármûnév: {ffffff}%s {ffff00}JármûID: {ffffff}%d {ffff00}ModelID: {ffffff}%d", CarName[GetVehicleModel(VehicleID)-400], VehicleID, GetVehicleModel(VehicleID));
	SendClientMessage(playerid, -1, string);
    for(new component = 1000; component <= 1193; component++)
    {
		if(GetVehicleComponentInSlot(VehicleID, GetVehicleComponentType(component)) == component) // Check if the vehicle component
		{
		    format(string, sizeof string, "		{ffff00}Component: {ffffff}%d {ffff00}Part: {ffffff}%s", component, TunnedComponentId[component-1000][Part]);
			SendClientMessage(playerid, yellow, string);
			i++;
		}
	}
	if(i == 20) SendClientMessage(playerid, yellow, "Ezen a jármûvön nincs tuning alkatrész.");
	SendClientMessage(playerid,blue,"¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤");
	return 1;
}

stock GetComponentName(componentid)
{
    new compname[50];
	if(componentid > 0)
	{
	    format(compname, sizeof(compname), "%s", TunnedComponentId[componentid-1000][Part]);
		return compname;
	}
	compname = "Nincs";
	return compname;
}
///-----------------------------------------------------------------------------
forward Visszaszamlalas(playerid);
public Visszaszamlalas(playerid)
{
		new pom[128];
	    if(GetPVarInt(playerid,"JailTimerPLAYER") > 0)
	    {
	   	    if(GetPVarInt(playerid,"JailTimerPLAYER")<60)
	   	    {
	  	    	if(GetPVarInt(playerid,"JailTimerPLAYER")<10)
					format(pom,sizeof(pom),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~~w~00:0%d",GetPVarInt(playerid,"JailTimerPLAYER"));
				else
	   				format(pom,sizeof(pom),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~~w~00:%d",GetPVarInt(playerid,"JailTimerPLAYER"));
	  		}else{
	    		new minutes = floatround(GetPVarInt(playerid,"JailTimerPLAYER"));
	      		new seconds = GetPVarInt(playerid,"JailTimerPLAYER")-minutes*60;
	    	    if(minutes < 10 && seconds < 10)
	        		format(pom,sizeof(pom),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~~w~0%d:0%d",minutes,seconds);
	 	        else if(minutes < 10 && seconds >= 10)
	    	        format(pom,sizeof(pom),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~~w~0%d:%d",minutes,seconds);
	          	else if(minutes >= 10 && seconds < 10)
	    	        format(pom,sizeof(pom),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~~w~%d:0%d",minutes,seconds);
	           	else if(minutes >= 10 && seconds >= 10)
	            	format(pom,sizeof(pom),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~~w~%d:%d",minutes,seconds);
	   	    }
	   	    GameTextForPlayer(playerid,pom,1000,6);
	   	    SetTimerEx("Visszaszamlalas",1000,0,"i",playerid);
	    } else {
	        SetPVarInt(playerid,"JailTimerPLAYER",0);
		    SetPlayerPos(playerid,-1604.5203,714.6552,12.7655);
		    SetPlayerInterior(playerid,0);
	    }
		return 1;
}


forward SetTeam(playerid, team);
public SetTeam(playerid, team)
{
	/*if(team == TEAM_KLAN1)
	{
	    ResetPlayerWeapons(playerid);
	    SetPlayerVirtualWorld(playerid, 50);
	    if(GetGVarInt("clanhmap") == MONTGOMERY_MAP)
	    {
		    SetPlayerPos(playerid, 1293.3663,166.8506,20.4609);
		    SetPlayerFacingAngle(playerid, 64.1222);
		}
		if(GetGVarInt("clanhmap") == HAJORAKTAR_MAP)
	    {
		    SetPlayerPos(playerid, -2436.0608,1554.8264,2.1172);
		    SetPlayerFacingAngle(playerid, 267.8336);
		}
	    SetPlayerInterior(playerid, 0);
	    SetPlayerArmour(playerid, 0);
	    GivePlayerWeapon(playerid, 24, 500);
		GivePlayerWeapon(playerid, 27, 500);
		GivePlayerWeapon(playerid, 29, 500);
		GivePlayerWeapon(playerid, 31, 500);
		GivePlayerWeapon(playerid, 8, 1);
		if(GetGVarInt("clanhszin") == 1) SetPlayerColor(playerid, 0xff0000AA);
		if(GetGVarInt("clanhszin") == 2) SetPlayerColor(playerid, 0x0009ffAA);
		if(GetGVarInt("clanhszin") == 3) SetPlayerColor(playerid, 0xff0000AA);
		if(GetGVarInt("clanhszin") == 4) SetPlayerColor(playerid, 0x09ff00AA);
		if(GetGVarInt("clanhszin") == 5) SetPlayerColor(playerid, 0xd500ffAA);
		if(GetGVarInt("clanhszin") == 6) SetPlayerColor(playerid, 0xff5e00AA);
	}
	if(team == TEAM_KLAN2)
	{
     	ResetPlayerWeapons(playerid);
		SetPlayerVirtualWorld(playerid, 50);
		SetPlayerPos(playerid, 1408.6246,358.8268,19.2259);
		if(GetGVarInt("clanhmap") == MONTGOMERY_MAP)
	    {
			SetPlayerPos(playerid, 1408.6246,358.8268,19.2259);
			SetPlayerFacingAngle(playerid, 64.4451);
		}
		if(GetGVarInt("clanhmap") == HAJORAKTAR_MAP)
	    {
		    SetPlayerPos(playerid, -2367.2085,1541.4362,2.1172);
		    SetPlayerFacingAngle(playerid, 354.6044);
		}
		SetPlayerArmour(playerid, 0);
		GivePlayerWeapon(playerid, 24, 500);
		GivePlayerWeapon(playerid, 27, 500);
		GivePlayerWeapon(playerid, 29, 500);
		GivePlayerWeapon(playerid, 31, 500);
		GivePlayerWeapon(playerid, 8, 1);
		if(GetGVarInt("clanhszin") == 1) SetPlayerColor(playerid, 0xfff700AA);
		if(GetGVarInt("clanhszin") == 2) SetPlayerColor(playerid, 0xfff700AA);
		if(GetGVarInt("clanhszin") == 3) SetPlayerColor(playerid, 0x001effAA);
		if(GetGVarInt("clanhszin") == 4) SetPlayerColor(playerid, 0x824f18AA);
		if(GetGVarInt("clanhszin") == 5) SetPlayerColor(playerid, 0xff7b00AA);
		if(GetGVarInt("clanhszin") == 6) SetPlayerColor(playerid, 0xfff700AA);
	}*/
	SetPlayerVirtualWorld(playerid, 0);
	if(team == TEAM_BKV)
	{
	    cSetPlayerTeam(playerid, TEAM_BKV);
	    SetPlayerColor(playerid, COLOR_BKV);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerSkin(playerid, 61);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid, -2013.1866,-222.8344,35.3274);
	    SetPlayerFacingAngle(playerid, 123.7042);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesHideForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Az Okoska BKK Zrt. Tagja vagy. Végezd a dolgod becsületesen!");

		GivePlayerWeapon(playerid,41,500);
	}
	if(team == TEAM_MAV)
	{
	    cSetPlayerTeam(playerid, TEAM_MAV);
	    SetPlayerColor(playerid, COLOR_MAV);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerSkin(playerid, 7);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid, -1969.2433,157.3238,27.6875);
	    SetPlayerFacingAngle(playerid, 179.4358);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesHideForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Beléptél a MÁV-ba. Mostantól ha vonatot vezetsz nõ a pénzed!");
	    ResetPlayerWeapons(playerid);
	}
	if(team == TEAM_TAXI)
	{
	    cSetPlayerTeam(playerid, TEAM_TAXI);
	    SetPlayerColor(playerid, COLOR_TAXI);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerSkin(playerid, 255);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid, -1486.1672,787.5051,7.1853);
	    SetPlayerFacingAngle(playerid, 99.7339);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesHideForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Mostantól taxis vagy. Mostantól ha taxit vezetsz nõ a pénzed!");
	    ResetPlayerWeapons(playerid);
	}
	if(team == TEAM_MENTOS)
	{
	    cSetPlayerTeam(playerid, TEAM_MENTOS);
	    SetPlayerColor(playerid, COLOR_MENTOS);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerSkin(playerid, 274);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid, -2647.9382,637.7853,14.4531);
	    SetPlayerFacingAngle(playerid, 190.4562);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesHideForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Beléptél a mentõszolgálathoz. Mostantól ha sérült embert látsz kötelességed meggyógyítani!");
	    TextDraw2ForPlayer(playerid, 12*1000, "Gyógyísd meg a sérülteket a /heal parancs használatával!");

        ResetPlayerWeapons(playerid);
	}
	if(team == TEAM_BANKOS)
	{
	    cSetPlayerTeam(playerid, TEAM_BANKOS);
	    SetPlayerColor(playerid, COLOR_BANKOS);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerSkin(playerid, 71);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid, -2433.8591,533.1998,29.9620);
	    SetPlayerFacingAngle(playerid, 216.5627);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesHideForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Beléptél a bankhoz. Szállítsd le a pénzt hogy pénzt kapj! Menj bele újra a pickupba az uticélért!");

		ResetPlayerWeapons(playerid);

	}
	if(team == TEAM_RABLO)
	{
	    cSetPlayerTeam(playerid, TEAM_RABLO);
	    SetPlayerColor(playerid, COLOR_RABLO);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerSkin(playerid, 122);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid, -1818.9506,-171.7781,9.3984);
	    SetPlayerFacingAngle(playerid, 12.4771);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesHideForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Mostantól bankrabló vagy. Rabold ki a bankokat hogy pénzhez juss! Menj bele újra a pickupba a cél kiválasztásához.");

		GivePlayerWeapon(playerid, 23, 5000);
	    GivePlayerWeapon(playerid, 32, 5000);
	    GivePlayerWeapon(playerid, 27, 5000);
	}
	if(team == TEAM_KAMIONOS)
	{
	    cSetPlayerTeam(playerid, TEAM_KAMIONOS);
	    SetPlayerColor(playerid, COLOR_KAMIONOS);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerSkin(playerid, 202);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid, -2146.9424,-178.4571,35.3203);
	    SetPlayerFacingAngle(playerid, 9.1877);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesHideForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Mostantól kamionos vagy. Menj bele a pickupba hogy elkezdd a munkát!");

        ResetPlayerWeapons(playerid);
	}
	if(team == TEAM_ZSARU)
	{
        if(GetPlayerWantedLevel(playerid) > 0) return SendClientMessage(playerid, COLOR_RED, "Nem lehetsz rendõr ha van körözésed!");
	    cSetPlayerTeam(playerid, TEAM_ZSARU);
	    SetPlayerArmour(playerid,100);
	    SetPlayerColor(playerid, COLOR_ZSARU);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid, -1616.4399,681.8257,7.1875);
	    SetPlayerFacingAngle(playerid, 85.2684);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesHideForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Beléptél a rendõrséghez. Mostantól ha szabálysértõt látsz meg kell büntetned! Parancsokért: /rendorhelp. Sniperre váltás: /sniper");

	    if(GetPVarInt(playerid, "RendorTP") < 20)
	    {
		    SetPlayerSkin(playerid, 284);
			GivePlayerWeapon(playerid, 3, 1);
			GivePlayerWeapon(playerid, 22, 500);
			GivePlayerWeapon(playerid, 25, 500);
			SetPlayerArmour(playerid, 100);
			TextDraw2ForPlayer(playerid, 12*1000, "Jelenlegi rangod: Újonc");
		}
	    else if(GetPVarInt(playerid, "RendorTP") < 40)
	    {
		    SetPlayerSkin(playerid, 280);
			GivePlayerWeapon(playerid, 3, 1);
			GivePlayerWeapon(playerid, 22, 500);
			GivePlayerWeapon(playerid, 25, 500);
			SetPlayerArmour(playerid, 100);
			TextDraw2ForPlayer(playerid, 12*1000, "Jelenlegi rangod: Õrmester");
		}
	    else if(GetPVarInt(playerid, "RendorTP") < 60)
	    {
		    SetPlayerSkin(playerid, 280);
			GivePlayerWeapon(playerid, 3, 1);
			GivePlayerWeapon(playerid, 23, 500);
			GivePlayerWeapon(playerid, 27, 500);
			SetPlayerArmour(playerid, 100);
			TextDraw2ForPlayer(playerid, 12*1000, "Jelenlegi rangod: Zászlós");
		}
	    else if(GetPVarInt(playerid, "RendorTP") < 80)
	    {
		    SetPlayerSkin(playerid, 281);
			GivePlayerWeapon(playerid, 3, 1);
			GivePlayerWeapon(playerid, 23, 500);
			GivePlayerWeapon(playerid, 27, 500);
			GivePlayerWeapon(playerid, 29, 900);
			SetPlayerArmour(playerid, 100);
			TextDraw2ForPlayer(playerid, 12*1000, "Jelenlegi rangod: Hadnagy");
		}
	    else if(GetPVarInt(playerid, "RendorTP") < 100)
	    {
		    SetPlayerSkin(playerid, 265);
			GivePlayerWeapon(playerid, 3, 1);
			GivePlayerWeapon(playerid, 23, 500);
			GivePlayerWeapon(playerid, 27, 500);
			GivePlayerWeapon(playerid, 29, 900);
			GivePlayerWeapon(playerid, 30, 500);
			SetPlayerArmour(playerid, 100);
			TextDraw2ForPlayer(playerid, 12*1000, "Jelenlegi rangod: Fõhadnagy");
		}
		else if(GetPVarInt(playerid, "RendorTP") < 120)
		{
		    SetPlayerSkin(playerid, 266);
			GivePlayerWeapon(playerid, 3, 1);
			GivePlayerWeapon(playerid, 23, 500);
			GivePlayerWeapon(playerid, 26, 500);
			GivePlayerWeapon(playerid, 28, 900);
			GivePlayerWeapon(playerid, 30, 500);
			GivePlayerWeapon(playerid, 46, 1);
			SetPlayerArmour(playerid, 100);
		    TextDraw2ForPlayer(playerid, 12*1000, "Jelenlegi rangod: Százados");
		}
		else if(GetPVarInt(playerid, "RendorTP") < 140)
		{
		    SetPlayerSkin(playerid, 267);
			GivePlayerWeapon(playerid, 3, 1);
			GivePlayerWeapon(playerid, 24, 500);
			GivePlayerWeapon(playerid, 26, 500);
			GivePlayerWeapon(playerid, 28, 900);
			GivePlayerWeapon(playerid, 30, 500);
			GivePlayerWeapon(playerid, 46, 1);
			SetPlayerArmour(playerid, 100);
		    TextDraw2ForPlayer(playerid, 12*1000, "Jelenlegi rangod: Alezredes");
		}
		else if(GetPVarInt(playerid, "RendorTP") < 160)
		{
		    SetPlayerSkin(playerid, 267);
			GivePlayerWeapon(playerid, 3, 1);
			GivePlayerWeapon(playerid, 24, 500);
			GivePlayerWeapon(playerid, 26, 2000);
			GivePlayerWeapon(playerid, 28, 4000);
			GivePlayerWeapon(playerid, 30, 500);
			GivePlayerWeapon(playerid, 46, 1);
			SetPlayerArmour(playerid, 100);
		    TextDraw2ForPlayer(playerid, 12*1000, "Jelenlegi rangod: Ezredes");
		}
		else if(GetPVarInt(playerid, "RendorTP") < 180)
		{
		    SetPlayerSkin(playerid, 282);
			GivePlayerWeapon(playerid, 3, 1);
			GivePlayerWeapon(playerid, 24, 1000);
			GivePlayerWeapon(playerid, 26, 2000);
			GivePlayerWeapon(playerid, 28, 4000);
			GivePlayerWeapon(playerid, 31, 500);
			GivePlayerWeapon(playerid, 46, 1);
			SetPlayerArmour(playerid, 100);
		    TextDraw2ForPlayer(playerid, 12*1000, "Jelenlegi rangod: Dandártábornok");
		}
		else if(GetPVarInt(playerid, "RendorTP") < 10000)
		{
		    SetPlayerSkin(playerid, 282);
			GivePlayerWeapon(playerid, 3, 1);
			GivePlayerWeapon(playerid, 24, 1000);
			GivePlayerWeapon(playerid, 26, 2000);
			GivePlayerWeapon(playerid, 28, 4000);
			GivePlayerWeapon(playerid, 31, 1000);
			GivePlayerWeapon(playerid, 46, 1);
			GivePlayerWeapon(playerid, 17, 50);
			GivePlayerWeapon(playerid, 34, 500);
			SetPlayerArmour(playerid, 100);
		    TextDraw2ForPlayer(playerid, 12*1000, "Jelenlegi rangod: Vezérõrnagy");
		}
		else if(GetPVarInt(playerid, "RendorTP") < 20000)
		{
		    SetPlayerSkin(playerid, 283);
			GivePlayerWeapon(playerid, 3, 1);
			GivePlayerWeapon(playerid, 24, 2000);
			GivePlayerWeapon(playerid, 26, 2000);
			GivePlayerWeapon(playerid, 28, 4000);
			GivePlayerWeapon(playerid, 31, 2000);
			GivePlayerWeapon(playerid, 46, 1);
			GivePlayerWeapon(playerid, 17, 100);
			GivePlayerWeapon(playerid, 34, 1000);
			SetPlayerArmour(playerid, 100);
		    TextDraw2ForPlayer(playerid, 12*1000, "Jelenlegi rangod: Fõnökhelyettes");
		}
		else if(GetPVarInt(playerid, "RendorTP") < 50000)
  		{
		    SetPlayerSkin(playerid, 288);
			GivePlayerWeapon(playerid, 3, 1);
			GivePlayerWeapon(playerid, 24, 2000);
			GivePlayerWeapon(playerid, 26, 2000);
			GivePlayerWeapon(playerid, 28, 4000);
			GivePlayerWeapon(playerid, 31, 2000);
			GivePlayerWeapon(playerid, 46, 1);
			GivePlayerWeapon(playerid, 17, 100);
			GivePlayerWeapon(playerid, 34, 1000);
			SetPlayerArmour(playerid, 100);
		    TextDraw2ForPlayer(playerid, 12*1000, "Jelenlegi rangod: Fõnök");
		}

		if(GetAchievement(playerid, "leaderesm") == 0)
	    {
			UnlockAchievement(playerid, "", "Elsõ leaderes munkatagság", "Elsõ leaderes munka");
			GiveAchievement(playerid, "leaderesm", 1);
			GiveEXP(playerid, LEADERESM_EXP);
	    }
	}
	if(team == TEAM_POLITIKUS)
	{
	    cSetPlayerTeam(playerid, TEAM_POLITIKUS);
	    SetPlayerColor(playerid, COLOR_POLITIKUS);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerInterior(playerid, 0);
	    SetPlayerSkin(playerid, 147);
	    SetPlayerPos(playerid, -2763.3394,381.7528,5.9968);
	    SetPlayerFacingAngle(playerid, 244.3911);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesHideForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Politikus lettél. Menj a parlamentbe és válaszd ki a pártot amelyiknél dolgozni szereznél!");

        ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid,15,1);
	}
	if(team == TEAM_KATONA)
	{
	    if(GetPlayerWantedLevel(playerid) > 0) return SendClientMessage(playerid, COLOR_RED, "Nem lehetsz katona ha van körözésed!");
		cSetPlayerTeam(playerid, TEAM_KATONA);
	    SetPlayerColor(playerid, COLOR_KATONA);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerArmour(playerid,100);
	    SetPlayerSkin(playerid, 287);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid, -1370.8344,471.2472,7.1875);
	    SetPlayerFacingAngle(playerid, 274.8376);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesHideForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Beléptél a katonasághoz. Öld meg a körözött embereket hogy pénzt kapj! A térképen ~r~pirossal~w~ vannak jelölve. Sniperre váltás: /sniper");
        if(GetPVarInt(playerid,"KatonaTP") < 100)
    	{
    	    //GivePlayerWeapon(playerid,46,1);
		    GivePlayerWeapon(playerid,4,1);
		    GivePlayerWeapon(playerid,16,10);
		    GivePlayerWeapon(playerid,26,5000);
			GivePlayerWeapon(playerid,22,5000);
			GivePlayerWeapon(playerid,32,5000);
			GivePlayerWeapon(playerid,30,5000);
			TextDraw2ForPlayer(playerid, 12*1000, "Jelenlegi rangod: Honvéd");
		}
		else if(GetPVarInt(playerid,"KatonaTP") < 200)
		{
		    //GivePlayerWeapon(playerid,46,1);
		    GivePlayerWeapon(playerid,4,1);
		    GivePlayerWeapon(playerid,16,30);
		    GivePlayerWeapon(playerid,26,5000);
			GivePlayerWeapon(playerid,24,5000);
			GivePlayerWeapon(playerid,32,5000);
			GivePlayerWeapon(playerid,31,5000);
		    TextDraw2ForPlayer(playerid, 12*1000, "Jelenlegi rangod: Vezérõrnagy");
		}
		else if(GetPVarInt(playerid,"KatonaTP") < 50000)
		{
		    //GivePlayerWeapon(playerid,46,1); //Ejtõernyõ
		    GivePlayerWeapon(playerid,4,1); //Kés
		    GivePlayerWeapon(playerid,16,40); //Gránát
		    GivePlayerWeapon(playerid,27,5000); //Combat shotgun
			GivePlayerWeapon(playerid,24,5000); //Desert Eagle
			GivePlayerWeapon(playerid,29,5000); //MP5
			GivePlayerWeapon(playerid,31,5000); //M4
			GivePlayerWeapon(playerid,34,5000); //Sniper
			//GivePlayerWeapon(playerid,35,5000); //RPG
		    TextDraw2ForPlayer(playerid, 12*1000, "Jelenlegi rangod: Vezérezredes");
		}

		if(GetAchievement(playerid, "leaderesm") == 0)
	    {
			UnlockAchievement(playerid, "", "Elsõ leaderes munkatagság", "Elsõ leaderes munka");
			GiveAchievement(playerid, "leaderesm", 1);
			GiveEXP(playerid, LEADERESM_EXP);
	    }
	}
	if(team == TEAM_MTK)
	{
	    cSetPlayerTeam(playerid, TEAM_MTK);
	    SetPlayerColor(playerid, COLOR_RIFA);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerSkin(playerid, 174);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid, -2150.1138,-246.7240,36.5156);
	    SetPlayerFacingAngle(playerid, 8.2179);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesShowForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Csatlakoztál a Rifához! Foglalj el területeket!");

	   	GivePlayerWeapon(playerid,5,1);
		GivePlayerWeapon(playerid,22,5000);
		GivePlayerWeapon(playerid,25,5000);
		GivePlayerWeapon(playerid,28,5000);
		GivePlayerWeapon(playerid,30,5000);
	}
	if(team == TEAM_UJPEST)
	{
	    cSetPlayerTeam(playerid, TEAM_UJPEST);
	    SetPlayerColor(playerid, COLOR_TRIAD);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerSkin(playerid, 118);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid, -2153.7456,661.9186,53.5399);
	    SetPlayerFacingAngle(playerid, 178.1718);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesShowForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Csatlakoztál a Tridához! Foglalj el területeket!");

		GivePlayerWeapon(playerid,8,1);
		GivePlayerWeapon(playerid,22,5000);
		GivePlayerWeapon(playerid,26,5000);
		GivePlayerWeapon(playerid,32,5000);
		GivePlayerWeapon(playerid,31,5000);
	}
	if(team == TEAM_VASAS)
	{
	    cSetPlayerTeam(playerid, TEAM_VASAS);
	    SetPlayerColor(playerid, COLOR_MAFFIA);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerSkin(playerid, 124);
	    SetPlayerInterior(playerid, 1);
	    SetPlayerPos(playerid, -783.5250,494.1902,1376.1953);
	    SetPlayerFacingAngle(playerid, 89.2615);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesShowForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Csatlakoztál a Maffiához! Foglalj el területeket!");

		GivePlayerWeapon(playerid,9,1);
		GivePlayerWeapon(playerid,22,5000);
		GivePlayerWeapon(playerid,26,5000);
		GivePlayerWeapon(playerid,32,5000);
		GivePlayerWeapon(playerid,31,5000);
	}
	if(team == TEAM_HONVED)
	{
	    cSetPlayerTeam(playerid, TEAM_HONVED);
	    SetPlayerColor(playerid, COLOR_DANANG);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerSkin(playerid, 121);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid, -1652.7780,1432.7577,7.1746);
	    SetPlayerFacingAngle(playerid, 204.4084);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesShowForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Csatlakoztál a Kispest-Honvédhez! Foglalj el területeket!");

		GivePlayerWeapon(playerid,4,1);
		GivePlayerWeapon(playerid,22,5000);
		GivePlayerWeapon(playerid,27,5000);
		GivePlayerWeapon(playerid,28,5000);
		GivePlayerWeapon(playerid,30,5000);
	}
	if(team == TEAM_FRADI)
	{
	    cSetPlayerTeam(playerid, TEAM_FRADI);
	    SetPlayerColor(playerid, COLOR_GROVE);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerSkin(playerid,107);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid, 2518.2244,-1679.2076,14.5495);
	    SetPlayerFacingAngle(playerid, 73.1394);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesShowForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Csatlakoztál a Grovehoz! Foglalj el területeket!");

		GivePlayerWeapon(playerid,4,1);
		GivePlayerWeapon(playerid,22,5000);
		GivePlayerWeapon(playerid,27,5000);
		GivePlayerWeapon(playerid,28,5000);
		GivePlayerWeapon(playerid,30,5000);
	}
	if(team == TEAM_PAP)
	{
	    cSetPlayerTeam(playerid, TEAM_PAP);
	    SetPlayerColor(playerid, COLOR_PAP);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerSkin(playerid, 68);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid, -2023.1847,1093.9171,19.0025);
	    SetPlayerFacingAngle(playerid, 4.2357);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesHideForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Pap lettél! Mostantól folyamatosan nõ a pénzed!");

    	ResetPlayerWeapons(playerid);
        GivePlayerWeapon(playerid,14,1);
	}
	if(team == TEAM_RIPORT)
	{
	    cSetPlayerTeam(playerid, TEAM_RIPORT);
	    SetPlayerColor(playerid, COLOR_RIPORT);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerSkin(playerid, 259);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid, -2520.5884,-621.1180,132.7274);
	    SetPlayerFacingAngle(playerid, 4.5768);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesHideForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Riporter lettél! Ülj be az újságíró furgonba és fotózzgass!");

        ResetPlayerWeapons(playerid);
        GivePlayerWeapon(playerid,43,5000);
	}
	if(team == TEAM_TUZOLTO)
	{
	    cSetPlayerTeam(playerid, TEAM_TUZOLTO);
	    SetPlayerColor(playerid, COLOR_TUZOLTO);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerSkin(playerid, 279);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid,-2024.1116,75.3957,28.1739);
	    SetPlayerFacingAngle(playerid, 327.2653);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesHideForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Tûzoltó lettél! Ülj be az tûzoltóautóba és ha tûzet látsz oltsd el!");

		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid,42,5000);
	}

	if(team == TEAM_RODNEYMUNKA)
	{
	    cSetPlayerTeam(playerid, TEAM_RODNEYMUNKA);
	    SetPlayerColor(playerid, COLOR_RODNEYMUNKA);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerSkin(playerid, 217);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid, -2606.9058,239.3946,7.6617);
	    SetPlayerFacingAngle(playerid, 126.8381);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesShowForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Beléptél a Rodney-Team-ba. Foglalj területeket.");

	    GivePlayerWeapon(playerid,32,5000);
		GivePlayerWeapon(playerid,26,5000);
		GivePlayerWeapon(playerid,24,2000);
		GivePlayerWeapon(playerid,30,500);
		GivePlayerWeapon(playerid,31,5000);
		GivePlayerWeapon(playerid,4,1);
	}

	if(team == TEAM_STUNTER)
	{
	    cSetPlayerTeam(playerid, TEAM_STUNTER);
	    SetPlayerColor(playerid, COLOR_STUNTER);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerSkin(playerid, 23);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid, -2103.3040,-815.4232,32.1719);
	    SetPlayerFacingAngle(playerid, 101.9216);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesHideForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Beléptél a Stunter csapatba. Használd: /stunthelp a segitségért!");

	    GivePlayerWeapon(playerid,32,5000);
		GivePlayerWeapon(playerid,26,5000);
		GivePlayerWeapon(playerid,30,500);
	}
	if(team == TEAM_HACKER)
	{
	    cSetPlayerTeam(playerid, TEAM_HACKER);
	 	SetPlayerColor(playerid, COLOR_HACKER);
	 	if(GetPVarInt(playerid, "ajon") == 1) return 1;
	 	SetPlayerSkin(playerid, 289);
	 	SetPlayerInterior(playerid, 3);
	 	SetPlayerPos(playerid, 366.2192,192.9339,1014.1875);
	 	SetPlayerFacingAngle(playerid, 180.0023);
	 	DisablePlayerCheckpoint(playerid);
	 	TextDrawForPlayer(playerid,10*1000, "Beléptél a hackerekhez! A /hack paranccsal hackelhetsz!");

	 	GivePlayerWeapon(playerid,43,5000);
	 	GivePlayerWeapon(playerid, 41, 5000);
	 	GivePlayerWeapon(playerid, 31, 5000);
	 	GivePlayerWeapon(playerid, 28, 5000);

		if(GetAchievement(playerid, "leaderesm") == 0)
	    {
			UnlockAchievement(playerid, "", "Elsõ leaderes munkatagság", "Elsõ leaderes munka");
			GiveAchievement(playerid, "leaderesm", 1);
			GiveEXP(playerid, LEADERESM_EXP);
	    }
	}
	if(team == TEAM_CARS)
	{
	    cSetPlayerTeam(playerid, TEAM_CARS);
	    SetPlayerColor(playerid, COLOR_CARS);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerSkin(playerid, 50);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid, -1650.4739,1207.6923,21.1487);
	    SetPlayerFacingAngle(playerid, 78.6006);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesHideForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "A Ryuuzaki's cars dolgozója vagy! Adj el autókat!");

		GivePlayerWeapon(playerid,41,5000);
	}
	if(team == TEAM_TERRORISTA)
	{
	    cSetPlayerTeam(playerid, TEAM_TERRORISTA);
	    SetPlayerColor(playerid, COLOR_TERRORISTA);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerSkin(playerid, 144);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid, -2518.6272,-19.9834,25.6172);
	    SetPlayerFacingAngle(playerid, 271.7345);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesShowForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Terrorista lettél!");

		GivePlayerWeapon(playerid,4,1);
		GivePlayerWeapon(playerid, 26, 5000);
		GivePlayerWeapon(playerid, 28, 5000);
		GivePlayerWeapon(playerid, 30, 5000);
		GivePlayerWeapon(playerid, 24, 5000);
		GivePlayerWeapon(playerid, 34, 5000);
		//GivePlayerWeapon(playerid, 29, 5000);
		
		if(GetAchievement(playerid, "leaderesm") == 0)
	    {
			UnlockAchievement(playerid, "", "Elsõ leaderes munkatagság", "Elsõ leaderes munka");
			GiveAchievement(playerid, "leaderesm", 1);
			GiveEXP(playerid, LEADERESM_EXP);
	    }
	}
	if(team == TEAM_HOTDOG)
	{
	    cSetPlayerTeam(playerid, TEAM_HOTDOG);
	    SetPlayerColor(playerid, COLOR_HOTDOG);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerSkin(playerid, 170);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid,-2320.0300,-156.2643,35.5547);
	    SetPlayerFacingAngle(playerid, 270.0450);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesHideForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Hotdogos lettél! Ülj be az autóba és add el a hotdogokat, vagy /hotdog játékosnak!");

        ResetPlayerWeapons(playerid);
	}
	if(team == TEAM_UTTISZTITO)
	{
	    cSetPlayerTeam(playerid, TEAM_UTTISZTITO);
	    SetPlayerColor(playerid, COLOR_UTTISZTITO);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerSkin(playerid, 16);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid,-1969.7251,418.8366,35.1719);
	    SetPlayerFacingAngle(playerid, 86.3396);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesHideForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Úttisztító lettél! Ülj be az úttisztítóba és tisztítsd meg az utakat!");

        ResetPlayerWeapons(playerid);
	}

	if(team == TEAM_FARMER)
	{
	    cSetPlayerTeam(playerid, TEAM_FARMER);
	    SetPlayerColor(playerid, COLOR_FARMER);
	    if(GetPVarInt(playerid, "ajon") == 1) return 1;
	    SetPlayerSkin(playerid, 34);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid,-1058.5811,-1205.9249,129.2188);
	    SetPlayerFacingAngle(playerid, 265.7401);
	    DisablePlayerCheckpoint(playerid);
	    GangZonesHideForPlayer(playerid);
	    TextDrawForPlayer(playerid,10*1000, "Farmer lettél! Vesd el majd arasd le a termést!");

        ResetPlayerWeapons(playerid);
	}
	
	GivePlayerWeapon(playerid, 33, 50000);
	return 1;
}

//------------------------------------------------------------------------------
forward Fizetes();
public Fizetes()
{
	for(new i; i < MAX_PLAYERS; i++)
	{
	    if(GetPlayerInterior(i) != 0) continue;
	    if(GetPlayerVirtualWorld(i) != 0) continue;
		if(cGetPlayerTeam(i) == TEAM_BKV && IsPlayerInBKV(i)) GivePlayerMoneyEx(i, 1000);
		if(cGetPlayerTeam(i) == TEAM_MAV && IsPlayerInTrain(i)) GivePlayerMoneyEx(i, 1000);
		if(cGetPlayerTeam(i) == TEAM_TAXI && IsPlayerInTaxi(i)) GivePlayerMoneyEx(i, 1000);
		if(cGetPlayerTeam(i) == TEAM_MENTOS && IsPlayerInAmbulance(i)) GivePlayerMoneyEx(i, 1000);
		if(cGetPlayerTeam(i) == TEAM_POLITIKUS && IsPlayerInLimo(i)) GivePlayerMoneyEx(i, 1000);
		//if(cGetPlayerTeam(i) == TEAM_PAP) GivePlayerMoneyEx(i, 1000);
		if(cGetPlayerTeam(i) == TEAM_RIPORT && IsPlayerInNews(i)) GivePlayerMoneyEx(i, 1000);
		if(cGetPlayerTeam(i) == TEAM_TUZOLTO && IsPlayerInFirevan(i)) GivePlayerMoneyEx(i, 1000);
	}
	return 1;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
/*forward MarkerTimer();
public MarkerTimer()
{
	for(new i; i < MAX_PLAYERS; i++)
	{
	    for(new p; p < MAX_PLAYERS; p++)
	    {
	        if(cGetPlayerTeam(i) == TEAM_ZSARU || cGetPlayerTeam(i) ==  TEAM_KATONA)
	        {
	            if(GetPlayerWantedLevel(p) > 0) SetPlayerMarkerForPlayer(i, p, 0xFF000096);
	            else SetPlayerMarkerForPlayer(i, p, GetPlayerColor(p));
			}
		}
	}
	return 1;
}*/

forward MoneyScore();
public MoneyScore()
{
	for(new i; i < MAX_PLAYERS; i++) SetPlayerScore(i, GetPlayerMoneyEx(i));
}
//------------------------------------------------------------------------------
forward ClockSync();
public ClockSync()
{
	new string[256];
	new hour, minute, second;
	gettime(hour,minute,second);
	if(hour <= 9 && minute <= 9) format(string, sizeof(string), "0%d:0%d", hour, minute);
    else if(hour <= 9 && minute > 9) format(string, sizeof(string), "0%d:%d", hour, minute);
    else if(hour > 9 && minute <= 9) format(string, sizeof(string), "%d:0%d", hour, minute);
    else format(string, sizeof(string), "%d:%d", hour, minute);
    TextDrawSetString(Text:Clock, string);
    //SetWorldTime(hour);
    if(GetGVarInt("time") == 0) for(new i; i < MAX_PLAYERS; i++) SetPlayerTime(i, hour, minute);
}
//------------------------------------------------------------------------------
forward VehicleRespawn();
public VehicleRespawn()
{
	for(new i; i < MAX_VEHICLES; i++)
	{
		if(!IsVehicleOccupied(i)) SetVehicleToRespawn(i);
	}
	return 1;
}
//------------------------------------------------------------------------------
stock IsVehicleOccupied(vehicleid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerInVehicle(i, vehicleid)) return 1;
	}
	return 0;
}
//------------------------------------------------------------------------------
SetPlayerPrize(playerid)
{
	switch(random(6))
	{
		case 0: GivePlayerMoneyEx(playerid,5000), SendClientMessage(playerid,HOMER,"Megtaláltad az elrejtett csomagot") ,SetPVarInt(playerid, "RejtettPickup", GetPVarInt(playerid, "RejtettPickup")+1);
		case 1: SendClientMessage(playerid,HOMER,"Megtaláltad az elrejtett csomagot"),SetPVarInt(playerid, "RejtettPickup", GetPVarInt(playerid, "RejtettPickup")+1);
		case 2: SendClientMessage(playerid,HOMER,"Megtaláltad az elrejtett csomagot"),SetPVarInt(playerid, "RejtettPickup", GetPVarInt(playerid, "RejtettPickup")+1);
		case 3: GivePlayerWeapon(playerid,32,2500), SendClientMessage(playerid,HOMER,"Megtaláltad az elrejtett csomagot"),SetPVarInt(playerid, "RejtettPickup", GetPVarInt(playerid, "RejtettPickup")+1);
		case 4: GivePlayerWeapon(playerid,26,2500), SendClientMessage(playerid,HOMER,"Megtaláltad az elrejtett csomagot"),SetPVarInt(playerid, "RejtettPickup", GetPVarInt(playerid, "RejtettPickup")+1);
		case 5: GivePlayerWeapon(playerid,31,2500), SendClientMessage(playerid,HOMER,"Megtaláltad az elrejtett csomagot"),SetPVarInt(playerid, "RejtettPickup", GetPVarInt(playerid, "RejtettPickup")+1);
	}
}
//------------------------------------------------------------------------------
stock TextDrawForPlayer(playerid,time, textt[])
{
	KillTimer(TextTimer[playerid]);
	new string[500];
	format(string, sizeof(string), "%s", textt);
	TextDrawSetString(TextDrawInfoBox[playerid], FixGameString(string));
	TextDrawHideForPlayer(playerid, TextDrawInfoBox[playerid]);
	TextDrawShowForPlayer(playerid, TextDrawInfoBox[playerid]);
	TextTimer[playerid] = SetTimerEx("Text_Hide", 1*time, 0, "i", playerid);
	PlayerPlaySound(playerid, 1083, 0, 0, 0);
	return 1;
}

stock TextDraw3ForPlayer(playerid,time, textt[])
{
	KillTimer(TextTimer3[playerid]);
	new string[500];
	format(string, sizeof(string), "%s", textt);
	TextDrawSetString(TextDrawInfoBox3[playerid], FixGameString(string));
	TextDrawHideForPlayer(playerid, TextDrawInfoBox3[playerid]);
	TextDrawShowForPlayer(playerid, TextDrawInfoBox3[playerid]);
	TextTimer3[playerid] = SetTimerEx("Text_Hide3", 1*time, 0, "i", playerid);
	//PlayerPlaySound(playerid, 1083, 0, 0, 0);
	return 1;
}

stock TextDraw2ForPlayer(playerid,time, textt[])
{
	KillTimer(TextTimer2[playerid]);
	new string[500];
	format(string, sizeof(string), "%s", textt);
	TextDrawSetString(TextDrawInfoBox2[playerid], FixGameString(string));
	TextDrawHideForPlayer(playerid, TextDrawInfoBox2[playerid]);
	TextDrawShowForPlayer(playerid, TextDrawInfoBox2[playerid]);
	TextTimer2[playerid] = SetTimerEx("Text_Hide2", 1*time, 0, "i", playerid);
	PlayerPlaySound(playerid, 1083, 0, 0, 0);
	return 1;
}

stock TextDrawForTeam(teamid,time,ttext[])
{
	for(new i;i<MAX_PLAYERS;i++)
	{
		if(IsPlayerConnected(i))
		{
			if(cGetPlayerTeam(i)==teamid)
			{
				TextDrawForPlayer(i,time,ttext);
			}
		}
	}
	return 1;
}

stock SendTeamMessage(teamid,ttext[])
{
	for(new i;i<MAX_PLAYERS;i++)
	{
		if(IsPlayerConnected(i))
		{
			if(cGetPlayerTeam(i)==teamid)
			{
				SendClientMessage(i,GetPlayerColor(i),ttext);
			}
		}
	}
	return 1;
}

stock TextDraw3ForTeam(teamid,time,ttext[])
{
	for(new i;i<MAX_PLAYERS;i++)
	{
		if(IsPlayerConnected(i))
		{
			if(cGetPlayerTeam(i)==teamid)
			{
				TextDraw3ForPlayer(i,time,ttext);
			}
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
enum GPSInfo
{
	zone_name[30],
    Float:zone_minx,
    Float:zone_miny,
    Float:zone_minz,
    Float:zone_maxx,
    Float:zone_maxy,
    Float:zone_maxz
}

new Float:Zones[][GPSInfo] = {
{ "Interior",                        0.00,     0.00,     0.00,     1.00,     1.00,     1.00},
{ "'The Big Ear'",                -410.00,  1403.30,    -3.00,  -137.90,  1681.20,   200.00},
{ "Aldea Malvada",               -1372.10,  2498.50,     0.00, -1277.50,  2615.30,   200.00},
{ "Angyal Pina XD",                  -2324.90, -2584.20,    -6.10, -1964.20, -2212.10,   200.00},
{ "Arco del Oeste",               -901.10,  2221.80,     0.00,  -592.00,  2571.90,   200.00},
{ "Golf Klub",         -2646.40,  -355.40,     0.00, -2270.00,  -222.50,   200.00},
{ "Golf Klub",         -2831.80,  -430.20,    -6.10, -2646.40,  -222.50,   200.00},
{ "Golf Klub",         -2361.50,  -417.10,     0.00, -2270.00,  -355.40,   200.00},
{ "Golf Klub",         -2667.80,  -302.10,   -28.80, -2646.40,  -262.30,    71.10},
{ "Golf Klub",         -2470.00,  -355.40,     0.00, -2270.00,  -318.40,    46.10},
{ "Golf Klub",         -2550.00,  -355.40,     0.00, -2470.00,  -318.40,    39.70},
{ "Back o Beyond",               -1166.90, -2641.10,     0.00,  -321.70, -1856.00,   200.00},
{ "Lnch¡d alatt",               -2741.00,  1268.40,    -4.50, -2533.00,  1490.40,   200.00},
{ "Margitsziget",                     -2741.00,  2175.10,     0.00, -2353.10,  2722.70,   200.00},
{ "Margitsziget kik¨t§",              -2353.10,  2275.70,     0.00, -2153.10,  2475.70,   200.00},
{ "Beacon Hill",                  -399.60, -1075.50,    -1.40,  -319.00,  -977.50,   198.50},
{ "Blackfield",                    964.30,  1203.20,   -89.00,  1197.30,  1403.20,   110.90},
{ "Blackfield",                    964.30,  1403.20,   -89.00,  1197.30,  1726.20,   110.90},
{ "Blackfield Chapel",            1375.60,   596.30,   -89.00,  1558.00,   823.20,   110.90},
{ "Blackfield Chapel",            1325.60,   596.30,   -89.00,  1375.60,   795.00,   110.90},
{ "Blackfield Intersection",      1197.30,  1044.60,   -89.00,  1277.00,  1163.30,   110.90},
{ "Blackfield Intersection",      1166.50,   795.00,   -89.00,  1375.60,  1044.60,   110.90},
{ "Blackfield Intersection",      1277.00,  1044.60,   -89.00,  1315.30,  1087.60,   110.90},
{ "Blackfield Intersection",      1375.60,   823.20,   -89.00,  1457.30,   919.40,   110.90},
{ "Blueberry",                     104.50,  -220.10,     2.30,   349.60,   152.20,   200.00},
{ "Blueberry",                      19.60,  -404.10,     3.80,   349.60,  -220.10,   200.00},
{ "Blueberry Acres",              -319.60,  -220.10,     0.00,   104.50,   293.30,   200.00},
{ "Caligula's Palace",            2087.30,  1543.20,   -89.00,  2437.30,  1703.20,   110.90},
{ "Caligula's Palace",            2137.40,  1703.20,   -89.00,  2437.30,  1783.20,   110.90},
{ "K§bnya",              -2274.10,   744.10,    -6.10, -1982.30,  1358.90,   200.00},
{ "K¡nai negyed",                   -2274.10,   578.30,    -7.60, -2078.60,   744.10,   200.00},
{ "Kossuth tr",                   -2867.80,   277.40,    -9.10, -2593.40,   458.40,   200.00},
{ "Come-A-Lot",                   2087.30,   943.20,   -89.00,  2623.10,  1203.20,   110.90},
{ "Commerce",                     1323.90, -1842.20,   -89.00,  1701.90, -1722.20,   110.90},
{ "Commerce",                     1323.90, -1722.20,   -89.00,  1440.90, -1577.50,   110.90},
{ "Commerce",                     1370.80, -1577.50,   -89.00,  1463.90, -1384.90,   110.90},
{ "Commerce",                     1463.90, -1577.50,   -89.00,  1667.90, -1430.80,   110.90},
{ "Commerce",                     1583.50, -1722.20,   -89.00,  1758.90, -1577.50,   110.90},
{ "Commerce",                     1667.90, -1577.50,   -89.00,  1812.60, -1430.80,   110.90},
{ "Conference Center",            1046.10, -1804.20,   -89.00,  1323.90, -1722.20,   110.90},
{ "Conference Center",            1073.20, -1842.20,   -89.00,  1323.90, -1804.20,   110.90},
{ "Keleti plyaudvar",           -2007.80,    56.30,     0.00, -1922.00,   224.70,   100.00},
{ "Creek",                        2749.90,  1937.20,   -89.00,  2921.60,  2669.70,   110.90},
{ "Dillimore",                     580.70,  -674.80,    -9.50,   861.00,  -404.70,   200.00},
{ "Kelet-Budapest",                     -2270.00,  -324.10,    -0.00, -1794.90,  -222.50,   200.00},
{ "Kelet-Budapest",                     -2173.00,  -222.50,    -0.00, -1794.90,   265.20,   200.00},
{ "Belvros",                    -1982.30,   744.10,    -6.10, -1871.70,  1274.20,   200.00},
{ "Belvros",                    -1871.70,  1176.40,    -4.50, -1620.30,  1274.20,   200.00},
{ "Belvros",                    -1700.00,   744.20,    -6.10, -1580.00,  1176.50,   200.00},
{ "Belvros",                    -1580.00,   744.20,    -6.10, -1499.80,  1025.90,   200.00},
{ "Belvros",                    -2078.60,   578.30,    -7.60, -1499.80,   744.20,   200.00},
{ "Belvros",                    -1993.20,   265.20,    -9.10, -1794.90,   578.30,   200.00},
{ "Belvros Los Angeles",          1463.90, -1430.80,   -89.00,  1724.70, -1290.80,   110.90},
{ "Belvros Los Angeles",          1724.70, -1430.80,   -89.00,  1812.60, -1250.90,   110.90},
{ "Belvros Los Angeles",          1463.90, -1290.80,   -89.00,  1724.70, -1150.80,   110.90},
{ "Belvros Los Angeles",          1370.80, -1384.90,   -89.00,  1463.90, -1170.80,   110.90},
{ "Belvros Los Angeles",          1724.70, -1250.90,   -89.00,  1812.60, -1150.80,   110.90},
{ "Belvros Los Angeles",          1370.80, -1170.80,   -89.00,  1463.90, -1130.80,   110.90},
{ "Belvros Los Angeles",          1378.30, -1130.80,   -89.00,  1463.90, -1026.30,   110.90},
{ "Belvros Los Angeles",          1391.00, -1026.30,   -89.00,  1463.90,  -926.90,   110.90},
{ "Belvros Los Angeles",          1507.50, -1385.20,   110.90,  1582.50, -1325.30,   335.90},
{ "Keleti part LA",                   2632.80, -1852.80,   -89.00,  2959.30, -1668.10,   110.90},
{ "Keleti part LA",                   2632.80, -1668.10,   -89.00,  2747.70, -1393.40,   110.90},
{ "Keleti part LA",                   2747.70, -1668.10,   -89.00,  2959.30, -1498.60,   110.90},
{ "Keleti part LA",                   2747.70, -1498.60,   -89.00,  2959.30, -1120.00,   110.90},
{ "Kelet Los Angeles",              2421.00, -1628.50,   -89.00,  2632.80, -1454.30,   110.90},
{ "Kelet Los Angeles",              2222.50, -1628.50,   -89.00,  2421.00, -1494.00,   110.90},
{ "Kelet Los Angeles",              2266.20, -1494.00,   -89.00,  2381.60, -1372.00,   110.90},
{ "Kelet Los Angeles",              2381.60, -1494.00,   -89.00,  2421.00, -1454.30,   110.90},
{ "Kelet Los Angeles",              2281.40, -1372.00,   -89.00,  2381.60, -1135.00,   110.90},
{ "Kelet Los Angeles",              2381.60, -1454.30,   -89.00,  2462.10, -1135.00,   110.90},
{ "Kelet Los Angeles",              2462.10, -1454.30,   -89.00,  2581.70, -1135.00,   110.90},
{ "Budapest Kik¨t§",                -1794.90,   249.90,    -9.10, -1242.90,   578.30,   200.00},
{ "Budapest Kik¨t§",                -1794.90,   -50.00,    -0.00, -1499.80,   249.90,   200.00},
{ "Liszt Ferenc Rep¬l§tr",          -1499.80,   -50.00,    -0.00, -1242.90,   249.90,   200.00},
{ "Liszt Ferenc Rep¬l§tr",          -1794.90,  -730.10,    -3.00, -1213.90,   -50.00,   200.00},
{ "Liszt Ferenc Rep¬l§tr",          -1213.90,  -730.10,     0.00, -1132.80,   -50.00,   200.00},
{ "Liszt Ferenc Rep¬l§tr",          -1242.90,   -50.00,     0.00, -1213.90,   578.30,   200.00},
{ "Liszt Ferenc Rep¬l§tr",          -1213.90,   -50.00,    -4.50,  -947.90,   578.30,   200.00},
{ "Liszt Ferenc Rep¬l§tr",          -1315.40,  -405.30,    15.40, -1264.40,  -209.50,    25.40},
{ "Liszt Ferenc Rep¬l§tr",          -1354.30,  -287.30,    15.40, -1315.40,  -209.50,    25.40},
{ "Liszt Ferenc Rep¬l§tr",          -1490.30,  -209.50,    15.40, -1264.40,  -148.30,    25.40},
{ "Budapest Vegyszet",        -1132.80,  -768.00,     0.00,  -956.40,  -578.10,   200.00},
{ "Budapest Vegyszet",        -1132.80,  -787.30,     0.00,  -956.40,  -768.00,   200.00},
{ "El Castillo del Diablo",       -464.50,  2217.60,     0.00,  -208.50,  2580.30,   200.00},
{ "El Castillo del Diablo",       -208.50,  2123.00,    -7.60,   114.00,  2337.10,   200.00},
{ "El Castillo del Diablo",       -208.50,  2337.10,     0.00,     8.40,  2487.10,   200.00},
{ "El Corona",                    1812.60, -2179.20,   -89.00,  1970.60, -1852.80,   110.90},
{ "El Corona",                    1692.60, -2179.20,   -89.00,  1812.60, -1842.20,   110.90},
{ "El Quebrados",                -1645.20,  2498.50,     0.00, -1372.10,  2777.80,   200.00},
{ "Keleti Part",              -1620.30,  1176.50,    -4.50, -1580.00,  1274.20,   200.00},
{ "Keleti Part",              -1580.00,  1025.90,    -6.10, -1499.80,  1274.20,   200.00},
{ "Keleti Part",              -1499.80,   578.30,   -79.60, -1339.80,  1274.20,    20.30},
{ "szaki Part",             -2533.00,  1358.90,    -4.50, -1996.60,  1501.20,   200.00},
{ "szaki Part",             -1996.60,  1358.90,    -4.50, -1524.20,  1592.50,   200.00},
{ "szaki Part",             -1982.30,  1274.20,    -4.50, -1524.20,  1358.90,   200.00},
{ "Fallen Tree",                  -792.20,  -698.50,    -5.30,  -452.40,  -380.00,   200.00},
{ "Fallow Bridge",                 434.30,   366.50,     0.00,   603.00,   555.60,   200.00},
{ "Fern Ridge",                    508.10,  -139.20,     0.00,  1306.60,   119.50,   200.00},
{ "Angyalf¨ld",                   -1871.70,   744.10,    -6.10, -1701.30,  1176.40,   300.00},
{ "Fisher's Lagoon",              1916.90,  -233.30,  -100.00,  2131.70,    13.80,   200.00},
{ "Flint Intersection",           -187.70, -1596.70,   -89.00,    17.00, -1276.60,   110.90},
{ "Flint Range",                  -594.10, -1648.50,     0.00,  -187.70, -1276.60,   200.00},
{ "Fort Carson",                  -376.20,   826.30,    -3.00,   123.70,  1220.40,   200.00},
{ "Csepel",               -2270.00,  -430.20,    -0.00, -2178.60,  -324.10,   200.00},
{ "Csepel",               -2178.60,  -599.80,    -0.00, -1794.90,  -324.10,   200.00},
{ "Csepel",               -2178.60, -1115.50,     0.00, -1794.90,  -599.80,   200.00},
{ "Csepel",               -2178.60, -1250.90,     0.00, -1794.90, -1115.50,   200.00},
{ "Frederick Bridge",             2759.20,   296.50,     0.00,  2774.20,   594.70,   200.00},
{ "Lnch¡d",                 -2741.40,  1659.60,    -6.10, -2616.40,  2175.10,   200.00},
{ "Lnch¡d",                 -2741.00,  1490.40,    -6.10, -2616.40,  1659.60,   200.00},
{ "Ganton",                       2222.50, -1852.80,   -89.00,  2632.80, -1722.30,   110.90},
{ "Ganton",                       2222.50, -1722.30,   -89.00,  2632.80, -1628.50,   110.90},
{ "J¦zsefvros",                      -2411.20,  -222.50,    -0.00, -2173.00,   265.20,   200.00},
{ "J¦zsefvros",                      -2395.10,  -222.50,    -5.30, -2354.00,  -204.70,   200.00},
{ "Erzsbet h¡d",               -1339.80,   828.10,   -89.00, -1213.90,  1057.00,   110.90},
{ "Erzsbet h¡d",               -1213.90,   950.00,   -89.00, -1087.90,  1178.90,   110.90},
{ "Erzsbet h¡d",               -1499.80,   696.40,  -179.60, -1339.80,   925.30,    20.30},
{ "Glen Park",                    1812.60, -1449.60,   -89.00,  1996.90, -1350.70,   110.90},
{ "Glen Park",                    1812.60, -1100.80,   -89.00,  1994.30,  -973.30,   110.90},
{ "Glen Park",                    1812.60, -1350.70,   -89.00,  2056.80, -1100.80,   110.90},
{ "Green Palms",                   176.50,  1305.40,    -3.00,   338.60,  1520.70,   200.00},
{ "Greenglass College",            964.30,  1044.60,   -89.00,  1197.30,  1203.20,   110.90},
{ "Greenglass College",            964.30,   930.80,   -89.00,  1166.50,  1044.60,   110.90},
{ "Hampton Barns",                 603.00,   264.30,     0.00,   761.90,   366.50,   200.00},
{ "Hankypanky Point",             2576.90,    62.10,     0.00,  2759.20,   385.50,   200.00},
{ "Harry Gold Parkway",           1777.30,   863.20,   -89.00,  1817.30,  2342.80,   110.90},
{ "J¦zsefvros",                    -2593.40,  -222.50,    -0.00, -2411.20,    54.70,   200.00},
{ "Hilltop Farm",                  967.30,  -450.30,    -3.00,  1176.70,  -217.90,   200.00},
{ "Hunter Quarry",                 337.20,   710.80,  -115.20,   860.50,  1031.70,   203.70},
{ "Idlewood",                     1812.60, -1852.80,   -89.00,  1971.60, -1742.30,   110.90},
{ "Idlewood",                     1812.60, -1742.30,   -89.00,  1951.60, -1602.30,   110.90},
{ "Idlewood",                     1951.60, -1742.30,   -89.00,  2124.60, -1602.30,   110.90},
{ "Idlewood",                     1812.60, -1602.30,   -89.00,  2124.60, -1449.60,   110.90},
{ "Idlewood",                     2124.60, -1742.30,   -89.00,  2222.50, -1494.00,   110.90},
{ "Idlewood",                     1971.60, -1852.80,   -89.00,  2222.50, -1742.30,   110.90},
{ "Jefferson",                    1996.90, -1449.60,   -89.00,  2056.80, -1350.70,   110.90},
{ "Jefferson",                    2124.60, -1494.00,   -89.00,  2266.20, -1449.60,   110.90},
{ "Jefferson",                    2056.80, -1372.00,   -89.00,  2281.40, -1210.70,   110.90},
{ "Jefferson",                    2056.80, -1210.70,   -89.00,  2185.30, -1126.30,   110.90},
{ "Jefferson",                    2185.30, -1210.70,   -89.00,  2281.40, -1154.50,   110.90},
{ "Jefferson",                    2056.80, -1449.60,   -89.00,  2266.20, -1372.00,   110.90},
{ "Julius Thruway Kelet",          2623.10,   943.20,   -89.00,  2749.90,  1055.90,   110.90},
{ "Julius Thruway Kelet",          2685.10,  1055.90,   -89.00,  2749.90,  2626.50,   110.90},
{ "Julius Thruway Kelet",          2536.40,  2442.50,   -89.00,  2685.10,  2542.50,   110.90},
{ "Julius Thruway Kelet",          2625.10,  2202.70,   -89.00,  2685.10,  2442.50,   110.90},
{ "Julius Thruway szak",         2498.20,  2542.50,   -89.00,  2685.10,  2626.50,   110.90},
{ "Julius Thruway szak",         2237.40,  2542.50,   -89.00,  2498.20,  2663.10,   110.90},
{ "Julius Thruway szak",         2121.40,  2508.20,   -89.00,  2237.40,  2663.10,   110.90},
{ "Julius Thruway szak",         1938.80,  2508.20,   -89.00,  2121.40,  2624.20,   110.90},
{ "Julius Thruway szak",         1534.50,  2433.20,   -89.00,  1848.40,  2583.20,   110.90},
{ "Julius Thruway szak",         1848.40,  2478.40,   -89.00,  1938.80,  2553.40,   110.90},
{ "Julius Thruway szak",         1704.50,  2342.80,   -89.00,  1848.40,  2433.20,   110.90},
{ "Julius Thruway szak",         1377.30,  2433.20,   -89.00,  1534.50,  2507.20,   110.90},
{ "Julius Thruway Dl",         1457.30,   823.20,   -89.00,  2377.30,   863.20,   110.90},
{ "Julius Thruway Dl",         2377.30,   788.80,   -89.00,  2537.30,   897.90,   110.90},
{ "Julius Thruway Nyugat",          1197.30,  1163.30,   -89.00,  1236.60,  2243.20,   110.90},
{ "Julius Thruway Nyugat",          1236.60,  2142.80,   -89.00,  1297.40,  2243.20,   110.90},
{ "Gazdag negyed",                -2533.00,   578.30,    -7.60, -2274.10,   968.30,   200.00},
{ "Gazdag negyed",              -2533.00,   968.30,    -6.10, -2274.10,  1358.90,   200.00},
{ "K.A.C.C. Military Fuels",      2498.20,  2626.50,   -89.00,  2749.90,  2861.50,   110.90},
{ "Kincaid Bridge",              -1339.80,   599.20,   -89.00, -1213.90,   828.10,   110.90},
{ "Kincaid Bridge",              -1213.90,   721.10,   -89.00, -1087.90,   950.00,   110.90},
{ "Kincaid Bridge",              -1087.90,   855.30,   -89.00,  -961.90,   986.20,   110.90},
{ "Zugl¦",                      -2329.30,   458.40,    -7.60, -1993.20,   578.30,   200.00},
{ "Zugl¦",                      -2411.20,   265.20,    -9.10, -1993.20,   373.50,   200.00},
{ "Zugl¦",                      -2253.50,   373.50,    -9.10, -1993.20,   458.40,   200.00},
{ "LVA Freight Depot",            1457.30,   863.20,   -89.00,  1777.40,  1143.20,   110.90},
{ "LVA Freight Depot",            1375.60,   919.40,   -89.00,  1457.30,  1203.20,   110.90},
{ "LVA Freight Depot",            1277.00,  1087.60,   -89.00,  1375.60,  1203.20,   110.90},
{ "LVA Freight Depot",            1315.30,  1044.60,   -89.00,  1375.60,  1087.60,   110.90},
{ "LVA Freight Depot",            1236.60,  1163.40,   -89.00,  1277.00,  1203.20,   110.90},
{ "Las Barrancas",                -926.10,  1398.70,    -3.00,  -719.20,  1634.60,   200.00},
{ "Las Brujas",                   -365.10,  2123.00,    -3.00,  -208.50,  2217.60,   200.00},
{ "Las Colinas",                  1994.30, -1100.80,   -89.00,  2056.80,  -920.80,   110.90},
{ "Las Colinas",                  2056.80, -1126.30,   -89.00,  2126.80,  -920.80,   110.90},
{ "Las Colinas",                  2185.30, -1154.50,   -89.00,  2281.40,  -934.40,   110.90},
{ "Las Colinas",                  2126.80, -1126.30,   -89.00,  2185.30,  -934.40,   110.90},
{ "Las Colinas",                  2747.70, -1120.00,   -89.00,  2959.30,  -945.00,   110.90},
{ "Las Colinas",                  2632.70, -1135.00,   -89.00,  2747.70,  -945.00,   110.90},
{ "Las Colinas",                  2281.40, -1135.00,   -89.00,  2632.70,  -945.00,   110.90},
{ "Las Payasadas",                -354.30,  2580.30,     2.00,  -133.60,  2816.80,   200.00},
{ "Las Vegas Rep¬l§tr",         1236.60,  1203.20,   -89.00,  1457.30,  1883.10,   110.90},
{ "Las Vegas Rep¬l§tr",         1457.30,  1203.20,   -89.00,  1777.30,  1883.10,   110.90},
{ "Las Vegas Rep¬l§tr",         1457.30,  1143.20,   -89.00,  1777.40,  1203.20,   110.90},
{ "Las Vegas Rep¬l§tr",         1515.80,  1586.40,   -12.50,  1729.90,  1714.50,    87.50},
{ "Last Dime Motel",              1823.00,   596.30,   -89.00,  1997.20,   823.20,   110.90},
{ "Leafy Hollow",                -1166.90, -1856.00,     0.00,  -815.60, -1602.00,   200.00},
{ "Lil' Probe Inn",                -90.20,  1286.80,    -3.00,   153.80,  1554.10,   200.00},
{ "Linden Side",                  2749.90,   943.20,   -89.00,  2923.30,  1198.90,   110.90},
{ "Linden Station",               2749.90,  1198.90,   -89.00,  2923.30,  1548.90,   110.90},
{ "Linden Station",               2811.20,  1229.50,   -39.50,  2861.20,  1407.50,    60.40},
{ "Little Mexico",                1701.90, -1842.20,   -89.00,  1812.60, -1722.20,   110.90},
{ "Little Mexico",                1758.90, -1722.20,   -89.00,  1812.60, -1577.50,   110.90},
{ "Los Flores",                   2581.70, -1454.30,   -89.00,  2632.80, -1393.40,   110.90},
{ "Los Flores",                   2581.70, -1393.40,   -89.00,  2747.70, -1135.00,   110.90},
{ "Los Angeles International",     1249.60, -2394.30,   -89.00,  1852.00, -2179.20,   110.90},
{ "Los Angeles International",     1852.00, -2394.30,   -89.00,  2089.00, -2179.20,   110.90},
{ "Los Angeles International",     1382.70, -2730.80,   -89.00,  2201.80, -2394.30,   110.90},
{ "Los Angeles International",     1974.60, -2394.30,   -39.00,  2089.00, -2256.50,    60.90},
{ "Los Angeles International",     1400.90, -2669.20,   -39.00,  2189.80, -2597.20,    60.90},
{ "Los Angeles International",     2051.60, -2597.20,   -39.00,  2152.40, -2394.30,    60.90},
{ "Marina",                        647.70, -1804.20,   -89.00,   851.40, -1577.50,   110.90},
{ "Marina",                        647.70, -1577.50,   -89.00,   807.90, -1416.20,   110.90},
{ "Marina",                        807.90, -1577.50,   -89.00,   926.90, -1416.20,   110.90},
{ "Market",                        787.40, -1416.20,   -89.00,  1072.60, -1310.20,   110.90},
{ "Market",                        952.60, -1310.20,   -89.00,  1072.60, -1130.80,   110.90},
{ "Market",                       1072.60, -1416.20,   -89.00,  1370.80, -1130.80,   110.90},
{ "Market",                        926.90, -1577.50,   -89.00,  1370.80, -1416.20,   110.90},
{ "Market Station",                787.40, -1410.90,   -34.10,   866.00, -1310.20,    65.80},
{ "Martin Bridge",                -222.10,   293.30,     0.00,  -122.10,   476.40,   200.00},
{ "Gellrthegy",                 -2994.40,  -811.20,     0.00, -2178.60,  -430.20,   200.00},
{ "Montgomery",                   1119.50,   119.50,    -3.00,  1451.40,   493.30,   200.00},
{ "Montgomery",                   1451.40,   347.40,    -6.10,  1582.40,   420.80,   200.00},
{ "Montgomery Intersection",      1546.60,   208.10,     0.00,  1745.80,   347.40,   200.00},
{ "Montgomery Intersection",      1582.40,   347.40,     0.00,  1664.60,   401.70,   200.00},
{ "Mulholland",                   1414.00,  -768.00,   -89.00,  1667.60,  -452.40,   110.90},
{ "Mulholland",                   1281.10,  -452.40,   -89.00,  1641.10,  -290.90,   110.90},
{ "Mulholland",                   1269.10,  -768.00,   -89.00,  1414.00,  -452.40,   110.90},
{ "Mulholland",                   1357.00,  -926.90,   -89.00,  1463.90,  -768.00,   110.90},
{ "Mulholland",                   1318.10,  -910.10,   -89.00,  1357.00,  -768.00,   110.90},
{ "Mulholland",                   1169.10,  -910.10,   -89.00,  1318.10,  -768.00,   110.90},
{ "Mulholland",                    768.60,  -954.60,   -89.00,   952.60,  -860.60,   110.90},
{ "Mulholland",                    687.80,  -860.60,   -89.00,   911.80,  -768.00,   110.90},
{ "Mulholland",                    737.50,  -768.00,   -89.00,  1142.20,  -674.80,   110.90},
{ "Mulholland",                   1096.40,  -910.10,   -89.00,  1169.10,  -768.00,   110.90},
{ "Mulholland",                    952.60,  -937.10,   -89.00,  1096.40,  -860.60,   110.90},
{ "Mulholland",                    911.80,  -860.60,   -89.00,  1096.40,  -768.00,   110.90},
{ "Mulholland",                    861.00,  -674.80,   -89.00,  1156.50,  -600.80,   110.90},
{ "Mulholland Intersection",      1463.90, -1150.80,   -89.00,  1812.60,  -768.00,   110.90},
{ "szak Szikla",                   2285.30,  -768.00,     0.00,  2770.50,  -269.70,   200.00},
{ "Ocean Docks",                  2373.70, -2697.00,   -89.00,  2809.20, -2330.40,   110.90},
{ "Ocean Docks",                  2201.80, -2418.30,   -89.00,  2324.00, -2095.00,   110.90},
{ "Ocean Docks",                  2324.00, -2302.30,   -89.00,  2703.50, -2145.10,   110.90},
{ "Ocean Docks",                  2089.00, -2394.30,   -89.00,  2201.80, -2235.80,   110.90},
{ "Ocean Docks",                  2201.80, -2730.80,   -89.00,  2324.00, -2418.30,   110.90},
{ "Ocean Docks",                  2703.50, -2302.30,   -89.00,  2959.30, -2126.90,   110.90},
{ "Ocean Docks",                  2324.00, -2145.10,   -89.00,  2703.50, -2059.20,   110.90},
{ "Ferencvros",                 -2994.40,   277.40,    -9.10, -2867.80,   458.40,   200.00},
{ "Ferencvros",                 -2994.40,  -222.50,    -0.00, -2593.40,   277.40,   200.00},
{ "Ferencvros",                 -2994.40,  -430.20,    -0.00, -2831.80,  -222.50,   200.00},
{ "Octane Springs",                338.60,  1228.50,     0.00,   664.30,  1655.00,   200.00},
{ "Old Venturas Strip",           2162.30,  2012.10,   -89.00,  2685.10,  2202.70,   110.90},
{ "Gazdag negyed",                   -2994.40,   458.40,    -6.10, -2741.00,  1339.60,   200.00},
{ "Palomino Creek",               2160.20,  -149.00,     0.00,  2576.90,   228.30,   200.00},
{ "Gazdag negyed",                    -2741.00,   793.40,    -6.10, -2533.00,  1268.40,   200.00},
{ "Pershing Square",              1440.90, -1722.20,   -89.00,  1583.50, -1577.50,   110.90},
{ "Pilgrim",                      2437.30,  1383.20,   -89.00,  2624.40,  1783.20,   110.90},
{ "Pilgrim",                      2624.40,  1383.20,   -89.00,  2685.10,  1783.20,   110.90},
{ "Pilson Intersection",          1098.30,  2243.20,   -89.00,  1377.30,  2507.20,   110.90},
{ "Pirates in Men's Pants",       1817.30,  1469.20,   -89.00,  2027.40,  1703.20,   110.90},
{ "Playa del Seville",            2703.50, -2126.90,   -89.00,  2959.30, -1852.80,   110.90},
{ "Prickle Pine",                 1534.50,  2583.20,   -89.00,  1848.40,  2863.20,   110.90},
{ "Prickle Pine",                 1117.40,  2507.20,   -89.00,  1534.50,  2723.20,   110.90},
{ "Prickle Pine",                 1848.40,  2553.40,   -89.00,  1938.80,  2863.20,   110.90},
{ "Prickle Pine",                 1938.80,  2624.20,   -89.00,  2121.40,  2861.50,   110.90},
{ "Erzsbetvros",                      -2533.00,   458.40,     0.00, -2329.30,   578.30,   200.00},
{ "Erzsbetvros",                      -2593.40,    54.70,     0.00, -2411.20,   458.40,   200.00},
{ "Erzsbetvros",                      -2411.20,   373.50,     0.00, -2253.50,   458.40,   200.00},
{ "Randolph Industrial Estate",   1558.00,   596.30,   -89.00,  1823.00,   823.20,   110.90},
{ "Redsands Kelet",                1817.30,  2011.80,   -89.00,  2106.70,  2202.70,   110.90},
{ "Redsands Kelet",                1817.30,  2202.70,   -89.00,  2011.90,  2342.80,   110.90},
{ "Redsands Kelet",                1848.40,  2342.80,   -89.00,  2011.90,  2478.40,   110.90},
{ "Redsands Nyugat",                1236.60,  1883.10,   -89.00,  1777.30,  2142.80,   110.90},
{ "Redsands Nyugat",                1297.40,  2142.80,   -89.00,  1777.30,  2243.20,   110.90},
{ "Redsands Nyugat",                1377.30,  2243.20,   -89.00,  1704.50,  2433.20,   110.90},
{ "Redsands Nyugat",                1704.50,  2243.20,   -89.00,  1777.30,  2342.80,   110.90},
{ "Regular Tom",                -405.70,  1712.80,    -3.00,  -276.70,  1892.70,   200.00},
{ "Richman",                       647.50, -1118.20,   -89.00,   787.40,  -954.60,   110.90},
{ "Richman",                       647.50,  -954.60,   -89.00,   768.60,  -860.60,   110.90},
{ "Richman",                       225.10, -1369.60,   -89.00,   334.50, -1292.00,   110.90},
{ "Richman",                       225.10, -1292.00,   -89.00,   466.20, -1235.00,   110.90},
{ "Richman",                        72.60, -1404.90,   -89.00,   225.10, -1235.00,   110.90},
{ "Richman",                        72.60, -1235.00,   -89.00,   321.30, -1008.10,   110.90},
{ "Richman",                       321.30, -1235.00,   -89.00,   647.50, -1044.00,   110.90},
{ "Richman",                       321.30, -1044.00,   -89.00,   647.50,  -860.60,   110.90},
{ "Richman",                       321.30,  -860.60,   -89.00,   687.80,  -768.00,   110.90},
{ "Richman",                       321.30,  -768.00,   -89.00,   700.70,  -674.80,   110.90},
{ "Robada Intersection",         -1119.00,  1178.90,   -89.00,  -862.00,  1351.40,   110.90},
{ "Roca Escalante",               2237.40,  2202.70,   -89.00,  2536.40,  2542.50,   110.90},
{ "Roca Escalante",               2536.40,  2202.70,   -89.00,  2625.10,  2442.50,   110.90},
{ "Rockshore Kelet",               2537.30,   676.50,   -89.00,  2902.30,   943.20,   110.90},
{ "Rockshore Nyugat",               1997.20,   596.30,   -89.00,  2377.30,   823.20,   110.90},
{ "Rockshore Nyugat",               2377.30,   596.30,   -89.00,  2537.30,   788.80,   110.90},
{ "Rodeo",                          72.60, -1684.60,   -89.00,   225.10, -1544.10,   110.90},
{ "Rodeo",                          72.60, -1544.10,   -89.00,   225.10, -1404.90,   110.90},
{ "Rodeo",                         225.10, -1684.60,   -89.00,   312.80, -1501.90,   110.90},
{ "Rodeo",                         225.10, -1501.90,   -89.00,   334.50, -1369.60,   110.90},
{ "Rodeo",                         334.50, -1501.90,   -89.00,   422.60, -1406.00,   110.90},
{ "Rodeo",                         312.80, -1684.60,   -89.00,   422.60, -1501.90,   110.90},
{ "Rodeo",                         422.60, -1684.60,   -89.00,   558.00, -1570.20,   110.90},
{ "Rodeo",                         558.00, -1684.60,   -89.00,   647.50, -1384.90,   110.90},
{ "Rodeo",                         466.20, -1570.20,   -89.00,   558.00, -1385.00,   110.90},
{ "Rodeo",                         422.60, -1570.20,   -89.00,   466.20, -1406.00,   110.90},
{ "Rodeo",                         466.20, -1385.00,   -89.00,   647.50, -1235.00,   110.90},
{ "Rodeo",                         334.50, -1406.00,   -89.00,   466.20, -1292.00,   110.90},
{ "Royal Casino",                 2087.30,  1383.20,   -89.00,  2437.30,  1543.20,   110.90},
{ "San Andreas Sound",            2450.30,   385.50,  -100.00,  2759.20,   562.30,   200.00},
{ "Budapest K¦rhz",                 -2741.00,   458.40,    -7.60, -2533.00,   793.40,   200.00},
{ "Santa Maria Beach",             342.60, -2173.20,   -89.00,   647.70, -1684.60,   110.90},
{ "Santa Maria Beach",              72.60, -2173.20,   -89.00,   342.60, -1684.60,   110.90},
{ "Shady Cabin",                 -1632.80, -2263.40,    -3.00, -1601.30, -2231.70,   200.00},
{ "Shady Creeks",                -1820.60, -2643.60,    -8.00, -1226.70, -1771.60,   200.00},
{ "Shady Creeks",                -2030.10, -2174.80,    -6.10, -1820.60, -1771.60,   200.00},
{ "Sobell Rail Yards",            2749.90,  1548.90,   -89.00,  2923.30,  1937.20,   110.90},
{ "Spinybed",                     2121.40,  2663.10,   -89.00,  2498.20,  2861.50,   110.90},
{ "Starfish Casino",              2437.30,  1783.20,   -89.00,  2685.10,  2012.10,   110.90},
{ "Starfish Casino",              2437.30,  1858.10,   -39.00,  2495.00,  1970.80,    60.90},
{ "Starfish Casino",              2162.30,  1883.20,   -89.00,  2437.30,  2012.10,   110.90},
{ "Temple",                       1252.30, -1130.80,   -89.00,  1378.30, -1026.30,   110.90},
{ "Temple",                       1252.30, -1026.30,   -89.00,  1391.00,  -926.90,   110.90},
{ "Temple",                       1252.30,  -926.90,   -89.00,  1357.00,  -910.10,   110.90},
{ "Temple",                        952.60, -1130.80,   -89.00,  1096.40,  -937.10,   110.90},
{ "Temple",                       1096.40, -1130.80,   -89.00,  1252.30, -1026.30,   110.90},
{ "Temple",                       1096.40, -1026.30,   -89.00,  1252.30,  -910.10,   110.90},
{ "The Camel's Toe",              2087.30,  1203.20,   -89.00,  2640.40,  1383.20,   110.90},
{ "The Clown's Pocket",           2162.30,  1783.20,   -89.00,  2437.30,  1883.20,   110.90},
{ "The Emerald Isle",             2011.90,  2202.70,   -89.00,  2237.40,  2508.20,   110.90},
{ "The Farm",                    -1209.60, -1317.10,   114.90,  -908.10,  -787.30,   251.90},
{ "The Four Dragons Casino",      1817.30,   863.20,   -89.00,  2027.30,  1083.20,   110.90},
{ "The High Roller",              1817.30,  1283.20,   -89.00,  2027.30,  1469.20,   110.90},
{ "The Mako Span",                1664.60,   401.70,     0.00,  1785.10,   567.20,   200.00},
{ "The Panopticon",               -947.90,  -304.30,    -1.10,  -319.60,   327.00,   200.00},
{ "The Pink Swan",                1817.30,  1083.20,   -89.00,  2027.30,  1283.20,   110.90},
{ "The Sherman Dam",              -968.70,  1929.40,    -3.00,  -481.10,  2155.20,   200.00},
{ "The Strip",                    2027.40,   863.20,   -89.00,  2087.30,  1703.20,   110.90},
{ "The Strip",                    2106.70,  1863.20,   -89.00,  2162.30,  2202.70,   110.90},
{ "The Strip",                    2027.40,  1783.20,   -89.00,  2162.30,  1863.20,   110.90},
{ "The Strip",                    2027.40,  1703.20,   -89.00,  2137.40,  1783.20,   110.90},
{ "The Visage",                   1817.30,  1863.20,   -89.00,  2106.70,  2011.80,   110.90},
{ "The Visage",                   1817.30,  1703.20,   -89.00,  2027.40,  1863.20,   110.90},
{ "Unity Station",                1692.60, -1971.80,   -20.40,  1812.60, -1932.80,    79.50},
{ "Valle Ocultado",               -936.60,  2611.40,     2.00,  -715.90,  2847.90,   200.00},
{ "Verdant Bluffs",                930.20, -2488.40,   -89.00,  1249.60, -2006.70,   110.90},
{ "Verdant Bluffs",               1073.20, -2006.70,   -89.00,  1249.60, -1842.20,   110.90},
{ "Verdant Bluffs",               1249.60, -2179.20,   -89.00,  1692.60, -1842.20,   110.90},
{ "Verdant Meadows",                37.00,  2337.10,    -3.00,   435.90,  2677.90,   200.00},
{ "Verona Beach",                  647.70, -2173.20,   -89.00,   930.20, -1804.20,   110.90},
{ "Verona Beach",                  930.20, -2006.70,   -89.00,  1073.20, -1804.20,   110.90},
{ "Verona Beach",                  851.40, -1804.20,   -89.00,  1046.10, -1577.50,   110.90},
{ "Verona Beach",                 1161.50, -1722.20,   -89.00,  1323.90, -1577.50,   110.90},
{ "Verona Beach",                 1046.10, -1722.20,   -89.00,  1161.50, -1577.50,   110.90},
{ "Vinewood",                      787.40, -1310.20,   -89.00,   952.60, -1130.80,   110.90},
{ "Vinewood",                      787.40, -1130.80,   -89.00,   952.60,  -954.60,   110.90},
{ "Vinewood",                      647.50, -1227.20,   -89.00,   787.40, -1118.20,   110.90},
{ "Vinewood",                      647.70, -1416.20,   -89.00,   787.40, -1227.20,   110.90},
{ "Whitewood Estates",             883.30,  1726.20,   -89.00,  1098.30,  2507.20,   110.90},
{ "Whitewood Estates",            1098.30,  1726.20,   -89.00,  1197.30,  2243.20,   110.90},
{ "Willowfield",                  1970.60, -2179.20,   -89.00,  2089.00, -1852.80,   110.90},
{ "Willowfield",                  2089.00, -2235.80,   -89.00,  2201.80, -1989.90,   110.90},
{ "Willowfield",                  2089.00, -1989.90,   -89.00,  2324.00, -1852.80,   110.90},
{ "Willowfield",                  2201.80, -2095.00,   -89.00,  2324.00, -1989.90,   110.90},
{ "Willowfield",                  2541.70, -1941.40,   -89.00,  2703.50, -1852.80,   110.90},
{ "Willowfield",                  2324.00, -2059.20,   -89.00,  2541.70, -1852.80,   110.90},
{ "Willowfield",                  2541.70, -2059.20,   -89.00,  2703.50, -1941.40,   110.90},
{ "Yellow Bell Station",          1377.40,  2600.40,   -21.90,  1492.40,  2687.30,    78.00},
// Main Zones
{ "Los Angeles",                    44.60, -2892.90,  -242.90,  2997.00,  -768.00,   900.00},
{ "Las Vegas",                     869.40,   596.30,  -242.90,  2997.00,  2993.80,   900.00},
{ "Vidk",                  -480.50,   596.30,  -242.90,   869.40,  2993.80,   900.00},
{ "Vidk",               -2997.40,  1659.60,  -242.90,  -480.50,  2993.80,   900.00},
{ "Vidk",               -1213.90,   596.30,  -242.90,  -480.50,  1659.60,   900.00},
{ "Budapest",                    -2997.40, -1115.50,  -242.90, -1213.90,  1659.60,   900.00},
{ "Vidk",                  -1213.90,  -768.00,  -242.90,  2997.00,   596.30,   900.00},
{ "Vidk",                -1213.90, -2892.90,  -242.90,    44.60,  -768.00,   900.00},
{ "Vidk",                   -2997.40, -2892.90,  -242.90, -1213.90, -1115.50,   900.00}
};


forward GPS();
public GPS()
{
	new string[256];
    for(new i=0; i<MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
		{
		    if(GetPVarInt(i,"GPS_Spawned") == 1)
		    {
	    		format(string,sizeof(string),"%s", GetPlayerArea(i));
				TextDrawSetString(Text:gps[i], string);
				TextDrawShowForPlayer(i, Text:gps[i]);
			}
			else
			{
			    TextDrawHideForPlayer(i, Text:gps[i]);
			}
		}
	}
	return 1;
}

stock GetPlayerArea(playerid)
{
	new string[130];
	format(string,sizeof(string),"%s",Zones[GetPlayerZone(playerid)][zone_name]);
	return string;
}

stock GetPlayerZone(playerid)
{
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,x,y,z);
	for(new i=0;i<sizeof(Zones);i++)
	{
		if(x > Zones[i][zone_minx] && y > Zones[i][zone_miny] && z > Zones[i][zone_minz] && x < Zones[i][zone_maxx] && y < Zones[i][zone_maxy] && z < Zones[i][zone_maxz])
		return i;
	}
	return false;
}
//--------------------------------Gangzone system-------------------------------
stock AddGangZone(Zname[24],Float:minx,Float:miny,Float:maxx,Float:maxy,Float:cpx,Float:cpy,Float:cpz,ownergang)
{
	ZoneInfo[ZoneCount][zone] = GangZoneCreate(minx,miny,maxx,maxy);
	format(ZoneInfo[ZoneCount][zonename],24,"%s",Zname);
	ZoneInfo[ZoneCount][Minx] = minx;
	ZoneInfo[ZoneCount][Miny] = miny;
	ZoneInfo[ZoneCount][Maxx] = maxx;
	ZoneInfo[ZoneCount][Maxy] = maxy;
	ZoneInfo[ZoneCount][Cpx] = cpx;
	ZoneInfo[ZoneCount][Cpy] = cpy;
	ZoneInfo[ZoneCount][Cpz] = cpz;
	ZoneInfo[ZoneCount][Owner] = ownergang;
	ZoneInfo[ZoneCount][Color] = GetGangTeamColor(ownergang);
	ZoneInfo[ZoneCount][Attacker] = -1;
	ZoneInfo[ZoneCount][flashing]=0;
	ZoneInfo[ZoneCount][flashtime]=-1;
	//printf("_][_Zone ID: %d created_][_",ZoneCount);
	ZoneCount++;
	return 1;
}

stock GetGangTeamColor(teamid)
{
	if(teamid==TEAM_MTK) return COLOR_RIFA;
	if(teamid==TEAM_UJPEST) return COLOR_TRIAD;
	if(teamid==TEAM_VASAS) return COLOR_MAFFIA;
	if(teamid==TEAM_HONVED) return COLOR_DANANG;
	if(teamid==TEAM_FRADI) return COLOR_GROVE;
	if(teamid==TEAM_RODNEYMUNKA) return COLOR_RODNEYMUNKA;
	if(teamid==TEAM_TERRORISTA) return COLOR_TERRORISTA;
	else return COLOR_GREY;
}

stock IsPlayerInZone(playerid,zoneid)
{
	if(GangIsPlayerInArea(playerid,ZoneInfo[zoneid][Minx],ZoneInfo[zoneid][Maxx],ZoneInfo[zoneid][Miny],ZoneInfo[zoneid][Maxy])==1) return 1;
	return 0;
}

stock GangIsPlayerInArea(playerid,Float:minx,Float:maxx,Float:miny,Float:maxy)
{
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid,X,Y,Z);
	if(X<maxx && X>minx && Y>miny && Y<maxy && GetPlayerInterior(playerid)==0) return 1;
	return 0;
}

stock IsPlayerGang(playerid)
{
	if(cGetPlayerTeam(playerid)==TEAM_UJPEST || cGetPlayerTeam(playerid)==TEAM_MTK || cGetPlayerTeam(playerid)==TEAM_FRADI || cGetPlayerTeam(playerid)==TEAM_HONVED || cGetPlayerTeam(playerid)==TEAM_VASAS || cGetPlayerTeam(playerid)==TEAM_RODNEYMUNKA || cGetPlayerTeam(playerid)==TEAM_TERRORISTA) return 1;
	return 0;
}

stock GangZoneFlash(zoneid,attackteam,defendteam,flashingtime)
{
	for(new i;i<MAX_PLAYERS;i++)
	{
		if(IsPlayerConnected(i))
		{
			if(cGetPlayerTeam(i)==attackteam || cGetPlayerTeam(i)==defendteam)
			{
				GangZoneFlashForPlayer(i,zoneid,COLOR_RED);
				ZoneInfo[zoneid][flashing]=1;
				ZoneInfo[zoneid][flashtime]=flashingtime;
			}
		}
	}
	return 1;
}

stock GangZoneStopFlash(zoneid)
{
	for(new i;i<MAX_PLAYERS;i++)
	{
		if(IsPlayerGang(i))
		{
			GangZoneStopFlashForPlayer(i,zoneid);
			ZoneInfo[zoneid][flashing]=0;
			ZoneInfo[zoneid][flashtime]=-1;
		}
	}
	return 1;
}

stock GangZonesShowForPlayer(playerid)
{
	for(new zoneid=0;zoneid<ZoneCount;zoneid++)
	{
		GangZoneShowForPlayer(playerid,zoneid,GetGangTeamColor(ZoneInfo[zoneid][Owner]));
		if(ZoneInfo[zoneid][flashing]==1) GangZoneFlashForPlayer(playerid,zoneid,COLOR_RED);
	}
	return 1;
}

stock GangZonesHideForPlayer(playerid)
{
	for(new zoneid;zoneid<ZoneCount;zoneid++)
	{
		if(ZoneInfo[zoneid][flashing]==1) GangZoneStopFlashForPlayer(playerid,zoneid);
		GangZoneHideForPlayer(playerid,zoneid);
		PlayerInfo[playerid][lastzone]=-1;
		PlayerInfo[playerid][IsZoneCP]=0;
		PlayerInfo[playerid][CpEnabled]=0;
		DisablePlayerCheckpoint(playerid);
	}
	return 1;
}

stock GetPlayerGang(playerid)
{
	if(cGetPlayerTeam(playerid)==TEAM_MTK) return 0;
	if(cGetPlayerTeam(playerid)==TEAM_UJPEST) return 1;
	if(cGetPlayerTeam(playerid)==TEAM_VASAS) return 2;
	if(cGetPlayerTeam(playerid)==TEAM_HONVED) return 3;
	if(cGetPlayerTeam(playerid)==TEAM_FRADI) return 4;
	if(cGetPlayerTeam(playerid)==TEAM_RODNEYMUNKA) return 5;
	if(cGetPlayerTeam(playerid)==TEAM_TERRORISTA) return 6;
	else return -1;
}

stock GetPlayerJob(playerid)
{
    //if(cGetPlayerTeam(playerid) == TEAM_TAXI) return true;
	if(cGetPlayerTeam(playerid) == TEAM_BANKOS) return true;
	if(cGetPlayerTeam(playerid) == TEAM_CIVIL) return true;
	//if(cGetPlayerTeam(playerid) == TEAM_MAV) return true;
	if(cGetPlayerTeam(playerid) == TEAM_MENTOS) return true;
	if(cGetPlayerTeam(playerid) == TEAM_KAMIONOS) return true;
	if(cGetPlayerTeam(playerid) == TEAM_POLITIKUS) return true;
	//if(cGetPlayerTeam(playerid) == TEAM_PAP) return true;
	if(cGetPlayerTeam(playerid) == TEAM_RIPORT) return true;
	//if(cGetPlayerTeam(playerid) == TEAM_TUZOLTO) return true;
	if(cGetPlayerTeam(playerid) == TEAM_CARS) return true;
	if(cGetPlayerTeam(playerid) == TEAM_HOTDOG) return true;
	if(cGetPlayerTeam(playerid) == TEAM_BKV) return true;
	if(cGetPlayerTeam(playerid) == TEAM_UTTISZTITO) return true;
	if(cGetPlayerTeam(playerid) == TEAM_FARMER) return true;
	else return false;
}

stock GangZoneSetColor(zoneid,color)
{
	for(new i;i<MAX_PLAYERS;i++)
	{
		if(IsPlayerGang(i))
		{
			GangZoneHideForPlayer(i,zoneid);
			GangZoneShowForPlayer(i,zoneid,color);
		}
	}
	return 1;
}

stock GangOnPlayerUpdate(playerid)
{
	for(new zoneid;zoneid<ZoneCount;zoneid++)
	{
		if(IsPlayerGang(playerid))
		{
			if(IsPlayerInZone(playerid,zoneid))
			{
				if(PlayerInfo[playerid][lastzone]!=zoneid)
				{
					SetPlayerCheckpoint(playerid,ZoneInfo[zoneid][Cpx],ZoneInfo[zoneid][Cpy],ZoneInfo[zoneid][Cpz],1.25);
					PlayerInfo[playerid][lastzone]=zoneid;
					PlayerInfo[playerid][IsZoneCP]=1;
					PlayerInfo[playerid][CpEnabled]=1;
				}
			}

			if(GetGangPlayerZone(playerid)==-1 && PlayerInfo[playerid][CpEnabled]==1)
			{
				DisablePlayerCheckpoint(playerid);
				PlayerInfo[playerid][lastzone]=-1;
				PlayerInfo[playerid][IsZoneCP]=0;
				PlayerInfo[playerid][CpEnabled]=0;
			}

			/*if(!IsPlayerInZone(playerid,PlayerInfo[playerid][lastzone]) && PlayerInfo[playerid][lastzone]!=-1)
			{
				DisablePlayerCheckpoint(playerid);
				PlayerInfo[playerid][lastzone]=-1;
				PlayerInfo[playerid][IsZoneCP]=0;
			} */
		}
	}
}


stock GangOnPlayerEnterCheckpoint(playerid)
{
	if(IsPlayerGang(playerid)==1)
	{
		if(PlayerInfo[playerid][IsZoneCP]==1)
		{
			new zoneid = PlayerInfo[playerid][lastzone];
			if(ZoneInfo[zoneid][flashing]==0)
			{
				if(TeamInfo[cGetPlayerTeam(playerid)][isattacking]==0)
				{
					if(ZoneInfo[zoneid][Owner] != cGetPlayerTeam(playerid)) //elkezdi foglalni a területet
					{
                        if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
                        {
							ZoneInfo[zoneid][Attacker]=cGetPlayerTeam(playerid);
							GangZoneFlash(zoneid,cGetPlayerTeam(playerid),ZoneInfo[zoneid][Owner],90);
							new string1[128],string2[128],string1a[128],string2a[128];
							format(string1,128,"A bandánk megtámadta a '%s' nevû területet! Várjátok meg, míg lejár az idõ és tiétek lesz a terület!",ZoneInfo[zoneid][zonename]);
							format(string2,128,"Az ellenséges banda megtámadta a '%s' nevû területünket! Védd meg a területet!",ZoneInfo[zoneid][zonename]);
							format(string1a,128,"A bandánk megtámadta a '%s' nevû területet! Várjátok meg, míg lejár az idõ és tiétek lesz a terület!",ZoneInfo[zoneid][zonename]);
							format(string2a,128,"Az ellenséges banda megtámadta a '%s' nevû területünket! Védd meg a területet!",ZoneInfo[zoneid][zonename]);
							TextDrawForTeam(cGetPlayerTeam(playerid),10*1000,string1);
							TextDrawForTeam(ZoneInfo[zoneid][Owner],10*1000,string2);
							SendTeamMessage(cGetPlayerTeam(playerid),string1a);
							SendTeamMessage(ZoneInfo[zoneid][Owner],string2a);
							TeamInfo[cGetPlayerTeam(playerid)][isattacking]=1;
						}
					}
				} else TextDrawForPlayer(playerid,10*1000,"A te bandád már megtámadott egy területet! Elõször foglaljátok el azt!");
			} else TextDrawForPlayer(playerid,10*1000,"Ezért a területért már harc folyik!");
		}
	}
	return 1;
}

new warlosta[MAX_ZONES];
/*forward GangTimer();
public GangTimer()
{
    new pom[128];
	for(new zoneid;zoneid<ZoneCount;zoneid++)
	{
		if(ZoneInfo[zoneid][flashtime]>0)
		{
			ZoneInfo[zoneid][flashtime]--;
		   	if(ZoneInfo[zoneid][flashtime]<60)
		   	{
		  		if(ZoneInfo[zoneid][flashtime]<10) format(pom,sizeof(pom),"00:0%d",ZoneInfo[zoneid][flashtime]);
					else format(pom,sizeof(pom),"00:%d",ZoneInfo[zoneid][flashtime]);
		  	} else {
		    	new minutes = floatround(ZoneInfo[zoneid][flashtime]/60);
		      	new seconds = ZoneInfo[zoneid][flashtime]-minutes*60;
		    	if(minutes < 10 && seconds < 10)
		        	format(pom,sizeof(pom),"0%d:0%d",minutes,seconds);
		 	    else if(minutes < 10 && seconds >= 10)
		    	    format(pom,sizeof(pom),"0%d:%d",minutes,seconds);
		        else if(minutes >= 10 && seconds < 10)
		    	    format(pom,sizeof(pom),"%d:0%d",minutes,seconds);
		        else if(minutes >= 10 && seconds >= 10)
		            format(pom,sizeof(pom),"%d:%d",minutes,seconds);
		   	}
		}

		for(new a;a<MAX_PLAYERS;a++)
		{
			if(IsPlayerConnected(a) && IsPlayerGang(a))
			{
				if(IsPlayerInZone(a,zoneid) && ZoneInfo[zoneid][flashtime]>=0 && (cGetPlayerTeam(a)==ZoneInfo[zoneid][Attacker] || cGetPlayerTeam(a)==ZoneInfo[zoneid][Owner])) TextDraw3ForPlayer(a,1000,pom);

				if(ZoneInfo[zoneid][flashtime]==0 )
		   	    {
		   	    	if(cGetPlayerTeam(a)==ZoneInfo[zoneid][Attacker])
		   	    	{
		   	   			if(IsPlayerInZone(a,zoneid) == 1)
		        		{
							GangZoneStopFlash(zoneid);
		   	    			GangZoneSetColor(zoneid,GetGangTeamColor(ZoneInfo[zoneid][Attacker]));
		   	   			 	TextDrawForTeam(ZoneInfo[zoneid][Attacker],10*000,"Sikeresen elfoglaltuk a területet!");
		   	    			TextDrawForTeam(ZoneInfo[zoneid][Owner],10*1000,"Az ellenséges banda elfoglalta a területünket!");
		   	    			SendTeamMessage(ZoneInfo[zoneid][Attacker],"Sikeresen elfoglaltuk a területet!");
					   	    SendTeamMessage(ZoneInfo[zoneid][Owner],"Az ellenséges banda elfoglalta a területünket!");
					   	    ZoneInfo[zoneid][Owner]=ZoneInfo[zoneid][Attacker];
							TeamInfo[ZoneInfo[zoneid][Attacker]][isattacking]=0;
							ZoneInfo[zoneid][Attacker]=-1;
							if(IsPlayerInZone(a,zoneid))
							{
								GivePlayerMoneyEx(a,5000);
								TextDraw2ForPlayer(a,5000,"~g~+5000");
			        		}
		        		}
		   	    	}
		   	    }

		   	   	if(ZoneInfo[zoneid][flashtime]>0)
				{
					warlosta[zoneid]=1;
					for(new d;d<MAX_PLAYERS;d++)
					{
						if(IsPlayerConnected(d) && IsPlayerGang(d))
						{
							if(cGetPlayerTeam(d)==ZoneInfo[zoneid][Attacker])
							{

								if(IsPlayerInZone(d,zoneid) == 1) warlosta[zoneid] = 0;
 		 						else
								{
									if(warlosta[zoneid] ==1) warlosta[zoneid]=1;
								}

							}

						}
					}

					if(warlosta[zoneid] == 1)
					{
						GangZoneStopFlash(zoneid);
						GangZoneSetColor(zoneid,GetGangTeamColor(ZoneInfo[zoneid][Owner]) );
						TextDrawForTeam(ZoneInfo[zoneid][Owner],10*1000,"Sikeresen megvédtük a területet!");
						TextDrawForTeam(ZoneInfo[zoneid][Attacker],10*000,"Nem sikerült elfoglalni a területet!");
						SendTeamMessage(ZoneInfo[zoneid][Owner],"Sikeresen megvédtük a területet!");
						SendTeamMessage(ZoneInfo[zoneid][Attacker],"Nem sikerült elfoglalni a területet!");
						TeamInfo[ZoneInfo[zoneid][Attacker]][isattacking]=0;
						ZoneInfo[zoneid][Attacker]=-1;

						if(cGetPlayerTeam(a)==ZoneInfo[zoneid][Owner] && IsPlayerInZone(a,zoneid))
						{
							GivePlayerMoneyEx(a,5000);
							TextDraw2ForPlayer(a,5000,"~g~+5000");
						}
					}

				}
			}
		}
	}
	return 1;
}*/


stock GetGangPlayerZone(playerid)
{
	for(new zones;zones<ZoneCount;zones++)
	{
		if(IsPlayerInZone(playerid,zones)) return zones;
	}
	return -1;
}

//------------------------------------------------------------------------------
static chlist[][0]={
	"¨","","ö","Ö",
    "¬","","ü","Ü",
 	"¦","","ó","Ó",
 	"§","","õ","Õ",
 	"ª","","ú","Ú",
 	"","","é","É",
 	"","","á","Á",
	"«","·","û","Û",
	"¢","","í","Í"
};

stock FixGameString(const ta[])
{
	// Tárolók létrehozása
	new index,
	    dest[256];

	// Karakterlánc átmásolása
	strmid(dest,ta,0,strlen(ta),sizeof dest);

	// Végiglépkedünk a karaktereken
	for(index = 0; index < strlen(dest); index++)
	{
	    // Végiglépkedünk a karaktertömbön
		for(new idx = 0; idx < sizeof(chlist); idx++)
		{
		    // Ha az indexelt karakterek egyeznek
		    if(dest[index] == chlist[idx][0])
		    {
		        // Javítjuk
		        dest[index] = chlist[idx-2][0];
			}
		}
	}

	// Visszatérés
	return dest;
}
//------------------------------------------------------------------------------
stock cGetPlayerTeam(playerid) return GetPVarInt(playerid, "FixTeam");

stock cSetPlayerTeam(playerid, team)
{
	SetPVarInt(playerid, "FixTeam", team);
	return SetPlayerTeam(playerid,GetPVarInt(playerid, "FixTeam"));
}
//------------------------------------------------------------------------------
GetPlayerNameEx(playerid)
{
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, sizeof (name));
    return name;
}

stock GetPlayerID(const playername[], partofname=0)
{
	new i;
	new playername1[64];
	for (i=0;i<MAX_PLAYERS;i++)
	{
		if (IsPlayerConnected(i))
		{
			GetPlayerName(i,playername1,sizeof(playername1));
			if (strcmp(playername1,playername,true)==0)
			{
				return i;
			}
		}
	}
	new correctsigns_userid=-1;
	new tmpuname[128];
	new hasmultiple=-1;
	if(partofname)
	{
		for (i=0;i<MAX_PLAYERS;i++)
		{
			if (IsPlayerConnected(i))
			{
				GetPlayerName(i,tmpuname,sizeof(tmpuname));

				if(!strfind(tmpuname,playername1[partofname],true, 0))
				{
					hasmultiple++;
					correctsigns_userid=i;
				}
				if (hasmultiple>0)
				{
					return -2;
				}
			}
		}
	}
	return correctsigns_userid;
}

IsPlayerInBKV(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleclass = GetVehicleModel(GetPlayerVehicleID(playerid));

		switch(vehicleclass)
		{
			case 437,431,449,441:return 1;//441 a villamos
		}
	}
	return 0;
}

IsPlayerInLimo(playerid)
{
    if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleclass = GetVehicleModel(GetPlayerVehicleID(playerid));

		switch(vehicleclass)
		{
			case 409:return 1;
		}
	}
	return 0;
}

IsPlayerInTrain(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleclass = GetVehicleModel(GetPlayerVehicleID(playerid));

		switch(vehicleclass)
		{
			case 538,537:return 1;
		}
	}
	return 0;
}

IsPlayerInTaxi(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleclass = GetVehicleModel(GetPlayerVehicleID(playerid));

		switch(vehicleclass)
		{
			case 420,438:return 1;
		}
	}
	return 0;
}

IsPlayerInNews(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleclass = GetVehicleModel(GetPlayerVehicleID(playerid));

		switch(vehicleclass)
		{
			case 582:return 1;
		}
	}
	return 0;
}

IsPlayerInFirevan(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleclass = GetVehicleModel(GetPlayerVehicleID(playerid));

		switch(vehicleclass)
		{
			case 407:return 1;
		}
	}
	return 0;
}


IsPlayerInAmbulance(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleclass = GetVehicleModel(GetPlayerVehicleID(playerid));

		switch(vehicleclass)
		{
			case 416:return 1;
		}
	 }
	return 0;
}

stock IsPlayerInKamion(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleclass = GetVehicleModel(GetPlayerVehicleID(playerid));

		switch(vehicleclass)
		{
			case 403,514,515:return 1; //435 450 584
		}
	}
	return 0;
}

stock IsPlayerInCombine(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleclass = GetVehicleModel(GetPlayerVehicleID(playerid));

		switch(vehicleclass)
		{
			case 532 :return 1; //435 450 584
		}
	}
	return 0;
}

stock IsPlayerInSphere(playerid,Float:x,Float:y,Float:z,radius2)
{
   if(GetPlayerDistanceToPointEx(playerid,x,y,z) < radius2) return 1;
   return 0;
}

stock GetPlayerDistanceToPointEx(playerid,Float:x,Float:y,Float:z)
{
   new Float:x1,Float:y1,Float:z1,Float:tmpdis;
   GetPlayerPos(playerid,x1,y1,z1);
   tmpdis = floatsqroot(floatpower(floatabs(floatsub(x,x1)),2)+ floatpower(floatabs(floatsub(y,y1)),2)+ floatpower(floatabs(floatsub(z,z1)),2));
   return floatround(tmpdis);
}

stock GetDistanceBetweenPlayers(playerid, playerid2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	new Float:tmpdis;
	GetPlayerPos(playerid,x1,y1,z1);
	GetPlayerPos(playerid2,x2,y2,z2);
	tmpdis = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
	return floatround(tmpdis);
}

stock jTime(playerid) return GetPVarInt(playerid,"TJailTime");

stock IsInJail(playerid)
{
	if(jTime(playerid) == 0) return 0;
	return 1;
}

forward ToJail(playerid);
public ToJail(playerid)
{
	SetPlayerInterior(playerid,10);
	//SetPlayerPos(playerid,222.7238,111.1816,999.0156);
	SetPlayerPos(playerid, -4445.00, 268.10, 44.48);
	ObjectLoader(playerid, 3000);
	SetPlayerWantedLevel(playerid,0);
	SetTimerEx("Jail",1000,0,"i",playerid);
	return 1;
}

forward Jail(playerid);
public Jail(playerid)
{
	new string[10];
    if(GetPVarInt(playerid,"JailTimerPLAYER") == 0) return OutJail(playerid);
	format(string,128,"~r~%d",GetPVarInt(playerid,"JailTimerPLAYER"));
   	GameTextForPlayer(playerid, string, 1000, 6);
   	SetPVarInt(playerid,"JailTimerPLAYER",GetPVarInt(playerid,"JailTimerPLAYER")-1);
	return SetTimerEx("Jail",1000,0,"i",playerid);
}

forward OutJail(playerid);
public OutJail(playerid)
{
	SetPVarInt(playerid,"JailTimerPLAYER",0);
	//SetPlayerPos(playerid,-1604.5203,714.6552,12.7655);
	SetPlayerPos(playerid, -4445.00, 268.10, 34.48);
	SetPlayerInterior(playerid,0);
	GameTextForPlayer(playerid, "~g~SZABADSAG!", 2000, 6);
	return 1;
}


stock GetClosestCop(playerid)
{
  new Float:cdist, targetid = -1;
  for (new i = 0; i < MAX_PLAYERS; i++)
  {
    if (IsPlayerConnected(i) && cGetPlayerTeam(i) == TEAM_ZSARU && playerid != i && (targetid < 0 || cdist > GetDistanceBetweenPlayers(playerid, i)))
    {
      targetid = i;
      cdist = GetDistanceBetweenPlayers(playerid, i);
    }
  }
  return targetid;
}

stock GivePlayerMoneyEx(playerid, money, mitcsinalt[] = "Ismeretlen")
{
	new string[50];
	if(money >= 10000 || money < 0)
	{
		format(query, sizeof(query), "INSERT INTO Moneylog (Name, Lastmoney, Newmoney, Balance, Mitcsinalt, Date) VALUES ('%s', %d, %d, %d, '%s', NOW())", GetPlayerNameEx(playerid), GetPVarInt(playerid, "Money"), GetPVarInt(playerid, "Money")+money, money, mitcsinalt);
		mysql_query(query);
	}
	SetPVarInt(playerid, "Money", GetPVarInt(playerid, "Money")+money);
	SetPlayerScore(playerid, GetPVarInt(playerid, "Money"));
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, 10000);
 	if(money < 0) format(string, sizeof(string), "~r~%s$", convertFormattedNumber(money, "."));
	else if(money > 0) format(string, sizeof(string), "~g~+%s$", convertFormattedNumber(money, "."));
	GameTextForPlayer(playerid, string, 3000, 1);
}

stock GetPlayerMoneyEx(playerid)
{
	return GetPVarInt(playerid, "Money");
}

stock ResetPlayerMoneyEx(playerid)
{
	SetPVarInt(playerid, "Money", 0);
}

IsPlayerInSecuricar(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleclass = GetVehicleModel(GetPlayerVehicleID(playerid));

		switch(vehicleclass)
		{
			case 428:return 1;
		}
	}
	return 0;
}

IsPlayerInFurgon(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleclass = GetVehicleModel(GetPlayerVehicleID(playerid));

		switch(vehicleclass)
		{
			case 413,414,440,456,459,498,499,609:return 1;
		}
	}
	return 0;
}

RCXDrobbantas(playerid)
{
	new Float:rcX,Float:rcY,Float:rcZ;
	GetVehiclePos(GetPlayerVehicleID(playerid),rcX,rcY,rcZ);
	RemovePlayerFromVehicle(playerid);
	SetPlayerPos(playerid, GetPVarFloat(playerid, "RCXD_x"), GetPVarFloat(playerid, "RCXD_y"), GetPVarFloat(playerid, "RCXD_z"));

	DestroyVehicle(rcxdveh[playerid]);
	for(new i;i<MAX_PLAYERS;i++)
	{
		if(i!=playerid)
		{
			if(IsPlayerInSphere(i,rcX,rcY,rcZ,16))
			{
			    if(GetPlayerVirtualWorld(i) == 0)
			    {
			        if(GetPlayerState(i) != PLAYER_STATE_SPECTATING)
					{
						SendDeathMessage(playerid,i,49);
						SetPlayerHealth(i,0.0);
					}
				}
			}
		}
	}
	CreateExplosion(rcX,rcY,rcZ,12,15);
	CreateExplosion(rcX,rcY,rcZ,12,15);
	SetPVarInt(playerid, "RC-XD", GetPVarInt(playerid, "RC-XD")-1);
	SetTimerEx("rcxdrobbb", 1000, 0, "i", playerid);
	//SetPVarInt(playerid, "RCXDRobbanas", 0);
	return 1;
}

forward rcxdrobbb(playerid);
public rcxdrobbb(playerid)
{
    SetPVarInt(playerid, "RCXDRobbanas", 0);
}

stock CheckNitro(vid)
{
    new NoNitro[] = { 522,481,441,468,448,446,513,521,510,430,520,476,463 }; // unknown
	for(new e = 0; e < sizeof(NoNitro); e++) if(GetVehicleModel(vid) == NoNitro[e]) return false;
	return true;
}

forward RandomWeather();
public RandomWeather()
{
	randomw++;
	if(randomw == 9)
	{
		switch(random(7))
		{
		    case 0:
		    {
				SendTeamMessage(18, "Idõjárás hír: Nemsokára hûvös, de napos idõ várható! Mondd be a hírekbe! /hg");
				weathers = 1;
			}
			/*case 1:
			{
			    SendTeamMessage(18, "Idõjárás hír: Nemsokára homokvihar várható! Mondd be a hírekbe! /hg");
				weathers = 2;
			}*/
			case 1:
			{
			    SendTeamMessage(18, "idõjárás hír: Nemsokára szép napos idõ várható! Mondd be a hírekbe! /hg");
				weathers = 3;
			}
			case 2:
			{
			    SendTeamMessage(18, "Idõjárás hír: Nemsokára köd várható! Mondd be a hírekbe! /hg");
				weathers = 4;
			}
			case 3:
			{
			    SendTeamMessage(18, "Idõjárás hír: Nemsokára felhõs idõ várható! Mondd be a hírekbe! /hg");
			    weathers = 5;
			}
			case 4:
			{
			    SendTeamMessage(18, "Idõjárás hír: Nemsokára esõs idõ várható! Mondd be a hírekbe! /hg");
			    weathers = 6;
			}
			case 5:
			{
			    SendTeamMessage(18, "Idõjárás hír: Nemsokára borús idõ várható! Mondd be a hírekbe! /hg");
			    weathers = 7;
			}
			case 6:
			{
			    SendTeamMessage(18, "Idõjárás hír: Nemsokára meleg idõ várható! Mondd be a hírekbe! /hg");
			    weathers = 8;
			}
		}
	}
	if(randomw == 10)
	{
		if(weathers == 1)
		{
			SetWeather(4);
		}
		else if(weathers == 2)
		{
			SetWeather(19);
		}
		else if(weathers == 3)
		{
			SetWeather(1);
		}
		else if(weathers == 4)
		{
			SetWeather(9);
		}
		else if(weathers == 5)
		{
			SetWeather(12);
		}
		else if(weathers == 6)
		{
			SetWeather(16);
		}
		else if(weathers == 7)
		{
			SetWeather(20);
		}
		else if(weathers == 8)
		{
		    SetWeather(5);
		}
		randomw = 0;
	}
}

forward rablas1();
public rablas1()
{
	bar = false;
}

forward rablas2();
public rablas2()
{
    fankosr = false;
}

forward rablas3();
public rablas3()
{
    box = false;
}

forward rablas4();
public rablas4()
{
	binco = false;
}

forward rablas5();
public rablas5()
{
	suburban = false;
}

forward rablas6();
public rablas6()
{
	victim = false;
}

forward rablas7();
public rablas7()
{
	zip = false;
}

forward rablas8();
public rablas8()
{
	pizza = false;
}

forward rablas9();
public rablas9()
{
	burgerking = false;
}

forward rablas10();
public rablas10()
{
	csirkes = false;
}

forward rablas11();
public rablas11()
{
	zero = false;
}

forward rablas12();
public rablas12()
{
	haj = false;
}

forward rablas13();
public rablas13()
{
	tetovalas = false;
}

forward rablas14();
public rablas14()
{
	klub = false;
}

forward rablas15();
public rablas15()
{
	maffiar = false;
}

stock GetWeaponSlot(weaponid)
{
	new slot2;
	switch(weaponid)
	{
	case 0,1: slot2 = 0;
	case 2 .. 9: slot2 = 1;
	case 10 .. 15: slot2 = 10;
	case 16 .. 18, 39: slot2 = 8;
	case 22 .. 24: slot2 =2;
	case 25 .. 27: slot2 = 3;
	case 28, 29, 32: slot2 = 4;
	case 30, 31: slot2 = 5;
	case 33, 34: slot2 = 6;
	case 35 .. 38: slot2 = 7;
	case 40: slot2 = 12;
	case 41 .. 43: slot2 = 9;
	case 44 .. 46: slot2 = 11;
	}
	return slot2;
}

stock RemovePlayerWeapon(playerid, pweaponid)
{
        new plyWeapons[12];
        new plyAmmo[12];

        for(new slot3 = 0; slot3 != 12; slot3++)
        {
                new pwep, pammo2;
                GetPlayerWeaponData(playerid, slot3, pwep, pammo2);

                if(pwep != pweaponid)
                {
                        GetPlayerWeaponData(playerid, slot3, plyWeapons[slot3], plyAmmo[slot3]);
                }
        }

        ResetPlayerWeapons(playerid);
        for(new slot3 = 0; slot3 != 12; slot3++)
        {
                GivePlayerWeapon(playerid, plyWeapons[slot3], plyAmmo[slot3]);
        }
}


stock GetAllVehicleLevel(vid)
{
	for(new i; i < MAX_SLOTS; i++)
 	{
 	    if(vid == carplay[i])
 	    {
			format(query, sizeof(query), "SELECT Level FROM cars WHERE slot = %d", i);
			mysql_query(query);
			mysql_store_result();
			if(mysql_num_rows() != 0)
			{
			    mysql_fetch_row(linen);
			    new vehilevel;
			    sscanf(linen, "d", vehilevel);
			    return vehilevel;
			}
		}
	}
	return -1;
}

stock GetVehicleLevel(vslot)
{
    format(query, sizeof(query), "SELECT Level FROM cars WHERE slot = %d", vslot);
	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    mysql_fetch_row(linen);
	    new vehilevel;
	    sscanf(linen, "d", vehilevel);
	    return vehilevel;
	}
	return -1;
}

//vid = JármûID
stock IsVehicleType(vid)
{
    if(vTypes[GetVehicleModel(vid) - 400] == VEHICLE_CAR || vTypes[GetVehicleModel(vid) - 400] == VEHICLE_BIKE) return true;
    return false;
}

//vid = ModellID
stock IsVehiclePlane(vid)
{
    if(vTypes[vid - 400] == VEHICLE_HELI || vTypes[vid - 400] == VEHICLE_PLANE) return true;
    return false;
}

#if defined FUEL_SYSTEM
forward fueltimer();
public fueltimer()
{
	/*for(new i; i < MAX_VEHICLES; i++)
	{
		new engine, lights, alarm, doors, bonnet, boot, objective;
	    GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
	    if(GetVehicleSpeed(i) >= 2 && engine != 0)
		{
		    if(IsVehicleType(i))
	  		{
			    if(fuelvalue[i] >= 1) fuelvalue[i] -= 1;
			    if(fuelvalue[i] < 1)
			    {
			        SetVehicleParamsEx(i, 0, lights, alarm, doors, bonnet, boot, objective);
			    }
			}
		}
	}*/
	for(new i; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerInAnyVehicle(i))
	    {
	        new vid = GetPlayerVehicleID(i);
            if(IsVehicleType(vid))
			{
			    new engine, lights, alarm, doors, bonnet, boot, objective;
			    GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
				if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
				{
					if(GetVehicleSpeed(vid) >= 2 && engine != 0)
					{
                        if(fuelvalue[vid] >= 1) fuelvalue[vid] -= 1;
					    if(fuelvalue[vid] < 1)
					    {
					        SetVehicleParamsEx(vid, 0, lights, alarm, doors, bonnet, boot, objective);
					    }
					}
				}
				
				new fuelstr[50];
			    if(GetAllVehicleLevel(vid) >= 0)
				{
				    SetProgressBarMaxValue(fuelbar[i], fuellevel[GetAllVehicleLevel(vid)][maxfuelvalue]);
				    format(fuelstr, sizeof(fuelstr), "Liter: %d/%d", fuellevel[GetAllVehicleLevel(vid)][maxfuelvalue], fuelvalue[vid]);
				}
				else
				{
					SetProgressBarMaxValue(fuelbar[i], 50);
					format(fuelstr, sizeof(fuelstr), "Liter: 50/%d", fuelvalue[vid]);
				}

				SetProgressBarValue(fuelbar[i], fuelvalue[vid]);
				UpdateProgressBar(fuelbar[i], i);
			    TextDrawSetString(fuel[i], fuelstr);
			}
		}
	}
	for(new i; i < MAX_SLOTS; i++)
	{
		format(query, sizeof(query), "UPDATE cars SET Fuel = %d WHERE slot = %d", fuelvalue[carplay[i]], i);
		mysql_query(query);
	}
}
#endif

forward MindenesTimer();
public MindenesTimer()
{
	ssec++;
	if(ssec == 60) ssec = 0, sperc++;
	if(sperc == 60) sperc = 0, sora++;
	new futottfile[128];
	format(futottfile, sizeof(futottfile), "brl/rekordok.ini");
	if(dini_Int(futottfile, "futottora") <= sora)
    {
        if(dini_Int(futottfile, "futottperc") <= sperc)
        {
			dini_IntSet(futottfile, "futottora", sora);
			dini_IntSet(futottfile, "futottperc", sperc);
		}
	}
	if(dini_Int(futottfile, "futottora") < sora)
    {
        if(dini_Int(futottfile, "futottperc") > sperc)
        {
			dini_IntSet(futottfile, "futottora", sora);
			dini_IntSet(futottfile, "futottperc", sperc);
		}
	}
	
	/*new hour, minut;
	gettime(hour, minut);
	if(hour == 6)
	{
 		if(minut == 0)
 		{
			SendRconCommand("changemode sfgg");
			SendRconCommand("reloadfs admin");
			SendRconCommand("reloadfs objectek");
		}
 	}*/
    new string[128];
    new Float:health;
    for(new h=0; h<MAX_PLAYERS; h++) HidraulicTime(h);
    for(new i; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(GetPVarInt(i, "skillfire") > 0)
            {
                if(GetPVarInt(i, "fireveh") != -1)
                {
                    AttachDynamicObjectToVehicle(fireobjv[GetPVarInt(i, "fireveh")], GetPlayerVehicleID(GetPVarInt(i, "fireveh")), 0, 1, -1.5, 0, 0, 0);
                    new Float:skvhealth;
                    GetVehicleHealth(GetPVarInt(i, "fireveh"), skvhealth);
                    if(skvhealth-5 > 250) SetVehicleHealth(GetPVarInt(i, "fireveh"), skvhealth-25), SetPVarInt(i, "skillfire", GetPVarInt(i, "skillfire")-1);
                    else if(skvhealth-5 <= 250) SetPVarInt(i, "skillfire", 0), SetPVarInt(i, "skillveh", -1), DestroyDynamicObject(fireobjv[GetPVarInt(i, "fireveh")]), SetPVarInt(i, "fireveh", -1);
                    if(GetPVarInt(i, "skillfire") == 0) DestroyDynamicObject(fireobjv[GetPVarInt(i, "fireveh")]), SetPVarInt(i, "fireveh", -1);
                }
				else
				{
				    //if(GetPVarInt(i, "skillfire") == 5) AttachDynamicObjectToPlayer(fireobj[i], i, 0, -0.3, -1.5, 0, 0, 0);
					new Float:skhealth, Float:skarmor;
					GetPlayerHealth(i, skhealth);
					GetPlayerArmour(i, skarmor);
					SetPVarInt(i, "skillfire", GetPVarInt(i, "skillfire")-1);
					if(skarmor-5 > 0) SetPlayerArmour(i, skarmor-5);
					else if(skarmor-5 <= 0) SetPlayerArmour(i, 0);
					if(skarmor <= 0)
					{
						if(skhealth-5 > 1) SetPlayerHealth(i, skhealth-5);
						if(skhealth-5 <= 1) SetPVarInt(i, "skillfire", 0);
					}
					if(GetPVarInt(i, "skillfire") == 0) DestroyObject(fireobj[i]);
				}
			}
        
			if(GetPVarInt(i, "aws") != 1 && GetPVarInt(i, "skill1level") >= 1) SetSkillColor(i, 1, 2);
			if(GetPVarInt(i, "aws") != 2 && GetPVarInt(i, "skill2level") >= 1) SetSkillColor(i, 2, 2);
			if(GetPVarInt(i, "aws") != 3 && GetPVarInt(i, "skill3level") >= 1) SetSkillColor(i, 3, 2);
			
			new timefr[5];
			if(skillalw[0][i] == true)
			{
				SetPVarInt(i, "skill1alt", GetPVarInt(i, "skill1alt")-1);
				
				format(timefr, sizeof(timefr), "%d", GetPVarInt(i, "skill1alt"));
				TextDrawSetString(Skill1Count[i], timefr);
			}
		    if(skillalw[1][i] == true)
			{
				SetPVarInt(i, "skill2alt", GetPVarInt(i, "skill2alt")-1);
				
				format(timefr, sizeof(timefr), "%d", GetPVarInt(i, "skill2alt"));
				TextDrawSetString(Skill2Count[i], timefr);
			}
		    if(skillalw[2][i] == true)
			{
				SetPVarInt(i, "skill3alt", GetPVarInt(i, "skill3alt")-1);
				
				format(timefr, sizeof(timefr), "%d", GetPVarInt(i, "skill3alt"));
				TextDrawSetString(Skill3Count[i], timefr);
			}

			if(GetPVarInt(i, "skill1alt") == 0) skillalw[0][i] = false, TextDrawHideForPlayer(i, Skill1Count[i]);
		    if(GetPVarInt(i, "skill2alt") == 0) skillalw[1][i] = false, TextDrawHideForPlayer(i, Skill2Count[i]);
		    if(GetPVarInt(i, "skill3alt") == 0) skillalw[2][i] = false, TextDrawHideForPlayer(i, Skill3Count[i]);
        
			if(GetPlayerMoneyEx(i) < 10)
			{
				format(string, sizeof(string), "~g~$0000000%i", GetPlayerMoneyEx(i));
				TextDrawSetString(Ft[i], string);
			}

			if(10 <= GetPlayerMoneyEx(i) < 100)
			{
				format(string, sizeof(string), "~g~$000000%i", GetPlayerMoneyEx(i));
				TextDrawSetString(Ft[i], string);
			}

			if(100 <= GetPlayerMoneyEx(i) < 1000)
			{
				format(string, sizeof(string), "~g~$00000%i", GetPlayerMoneyEx(i));
				TextDrawSetString(Ft[i], string);
			}

			if(1000 <= GetPlayerMoneyEx(i) < 10000)
			{
				format(string, sizeof(string), "~g~$0000%i", GetPlayerMoneyEx(i));
				TextDrawSetString(Ft[i], string);
			}

			if(10000 <= GetPlayerMoneyEx(i) < 100000)
			{
				format(string, sizeof(string), "~g~$000%i", GetPlayerMoneyEx(i));
				TextDrawSetString(Ft[i], string);
			}

			if(100000 <= GetPlayerMoneyEx(i) < 1000000)
			{
				format(string, sizeof(string), "~g~$00%i", GetPlayerMoneyEx(i));
				TextDrawSetString(Ft[i], string);
			}

			if(1000000 <= GetPlayerMoneyEx(i) < 10000000)
			{
				format(string, sizeof(string), "~g~$0%i", GetPlayerMoneyEx(i));
				TextDrawSetString(Ft[i], string);
			}

			if(10000000 <= GetPlayerMoneyEx(i) < 999999999)
			{
				format(string, sizeof(string), "~g~$%i", GetPlayerMoneyEx(i));
				TextDrawSetString(Ft[i], string);
			}

			//speedo
			if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i))
			{
				GetVehicleHealth(GetPlayerVehicleID(i), health);
				format(string, sizeof(string),"~g~Jrm«: ~w~%s (%s)~n~~b~KM/H : ~w~%d~n~~r~Jrm« lete:~w~ %.0f/1000",CarNameBRL[GetVehicleModel(GetPlayerVehicleID(i))-400],CarName[GetVehicleModel(GetPlayerVehicleID(i))-400],GetVehicleSpeed(GetPlayerVehicleID(i)),health);
				TextDrawSetString(Speedo[i], string);
			}
		}
		//10 perc hackelés nevenként
		if(GetGVarInt(GetPlayerNameEx(i)) > 0) SetGVarInt(GetPlayerNameEx(i), GetGVarInt(GetPlayerNameEx(i))-1);
	}

	//Bizniszfizu

	mysql_query("UPDATE business SET Osszeg = Osszeg+Termeles WHERE Tulaj != 'ELADO' AND Osszeg <= Ar");

	//markertimer
	for(new i; i < MAX_PLAYERS; i++)
	{
	    for(new p; p < MAX_PLAYERS; p++)
	    {
	        if(cGetPlayerTeam(i) == TEAM_ZSARU || cGetPlayerTeam(i) ==  TEAM_KATONA)
	        {
	            if(GetPlayerWantedLevel(p) > 0) SetPlayerMarkerForPlayer(i, p, 0xFF000096);
	            else SetPlayerMarkerForPlayer(i, p, GetPlayerColor(p));
			}
		}
	}

	//GangTimer

	new pom[128];
	for(new zoneid;zoneid<ZoneCount;zoneid++)
	{
		if(ZoneInfo[zoneid][flashtime]>0)
		{
			ZoneInfo[zoneid][flashtime]--;
		   	if(ZoneInfo[zoneid][flashtime]<60)
		   	{
		  		if(ZoneInfo[zoneid][flashtime]<10) format(pom,sizeof(pom),"00:0%d",ZoneInfo[zoneid][flashtime]);
					else format(pom,sizeof(pom),"00:%d",ZoneInfo[zoneid][flashtime]);
		  	} else {
		    	new minutes = floatround(ZoneInfo[zoneid][flashtime]/60);
		      	new seconds = ZoneInfo[zoneid][flashtime]-minutes*60;
		    	if(minutes < 10 && seconds < 10)
		        	format(pom,sizeof(pom),"0%d:0%d",minutes,seconds);
		 	    else if(minutes < 10 && seconds >= 10)
		    	    format(pom,sizeof(pom),"0%d:%d",minutes,seconds);
		        else if(minutes >= 10 && seconds < 10)
		    	    format(pom,sizeof(pom),"%d:0%d",minutes,seconds);
		        else if(minutes >= 10 && seconds >= 10)
		            format(pom,sizeof(pom),"%d:%d",minutes,seconds);
		   	}
		}

		new bool:mehet = false;
		for(new a;a<MAX_PLAYERS;a++)
		{
			if(IsPlayerConnected(a) && IsPlayerGang(a))
			{
				if(IsPlayerInZone(a,zoneid) && ZoneInfo[zoneid][flashtime]>=0 && (cGetPlayerTeam(a)==ZoneInfo[zoneid][Attacker] || cGetPlayerTeam(a)==ZoneInfo[zoneid][Owner])) TextDraw3ForPlayer(a,1000,pom);

				if(ZoneInfo[zoneid][flashtime]==0 )
		   	    {
		   	    	if(cGetPlayerTeam(a)==ZoneInfo[zoneid][Attacker])
		   	    	{
		   	   			if(IsPlayerInZone(a,zoneid) == 1)
		        		{
					   	    mehet = true;
							if(IsPlayerInZone(a,zoneid))
							{
								GivePlayerMoneyEx(a,5000);
								//TextDraw2ForPlayer(a,5000,"~g~+5000");
								GiveEXP(a, GANGZONE_EXP);
								GiveAchievement(a, "area", 1);
							    if(GetAchievement(a, "area") == 10)
							    {
									UnlockAchievement(a, "hud:arrow", "10 terület elfoglalása", "Területfoglaló");
									GiveAchievement(a, "area", 1);
									GiveEXP(a, AREA10_EXP);
							    }
							    if(GetAchievement(a, "area") == 30)
							    {
									UnlockAchievement(a, "fronten_pc:crosshair", "30 terület elfoglalása", "Hódító");
									GiveAchievement(a, "area", 1);
									GiveEXP(a, AREA30_EXP);
							    }
							    if(GetAchievement(a, "area") == 50)
							    {
									UnlockAchievement(a, "fronten_pc:crosshair", "50 terület elfoglalása", "Városfoglaló");
									GiveAchievement(a, "area", 1);
									GiveEXP(a, AREA50_EXP);
							    }
			        		}
		        		}
		   	    	}
		   	    }

		   	   	if(ZoneInfo[zoneid][flashtime]>0)
				{
					warlosta[zoneid]=1;
					for(new d;d<MAX_PLAYERS;d++)
					{
						if(IsPlayerConnected(d) && IsPlayerGang(d))
						{
							if(cGetPlayerTeam(d)==ZoneInfo[zoneid][Attacker])
							{

								if(IsPlayerInZone(d,zoneid) == 1) warlosta[zoneid] = 0;
 		 						else
								{
									if(warlosta[zoneid] ==1) warlosta[zoneid]=1;
								}

							}

						}
					}

					if(warlosta[zoneid] == 1)
					{
						GangZoneStopFlash(zoneid);
						GangZoneSetColor(zoneid,GetGangTeamColor(ZoneInfo[zoneid][Owner]) );
						TextDrawForTeam(ZoneInfo[zoneid][Owner],10*1000,"Sikeresen megvédtük a területet!");
						TextDrawForTeam(ZoneInfo[zoneid][Attacker],10*000,"Nem sikerült elfoglalni a területet!");
						SendTeamMessage(ZoneInfo[zoneid][Owner],"Sikeresen megvédtük a területet!");
						SendTeamMessage(ZoneInfo[zoneid][Attacker],"Nem sikerült elfoglalni a területet!");
						TeamInfo[ZoneInfo[zoneid][Attacker]][isattacking]=0;
						ZoneInfo[zoneid][Attacker]=-1;

						if(cGetPlayerTeam(a)==ZoneInfo[zoneid][Owner] && IsPlayerInZone(a,zoneid))
						{
							GivePlayerMoneyEx(a,5000);
							//TextDraw2ForPlayer(a,5000,"~g~+5000");
						}
					}
				}
			}
			if(mehet == true && a == MAX_PLAYERS-1)
	   	    {
	   	        TextDrawForTeam(ZoneInfo[zoneid][Attacker],10*000,"Sikeresen elfoglaltuk a területet!");
				TextDrawForTeam(ZoneInfo[zoneid][Owner],10*1000,"Az ellenséges banda elfoglalta a területünket!");
				SendTeamMessage(ZoneInfo[zoneid][Attacker],"Sikeresen elfoglaltuk a területet!");
		   	    SendTeamMessage(ZoneInfo[zoneid][Owner],"Az ellenséges banda elfoglalta a területünket!");
	   	        GangZoneStopFlash(zoneid);
		   	    GangZoneSetColor(zoneid,GetGangTeamColor(ZoneInfo[zoneid][Attacker]));
		   	    ZoneInfo[zoneid][Owner]=ZoneInfo[zoneid][Attacker];
				TeamInfo[ZoneInfo[zoneid][Attacker]][isattacking]=0;
				ZoneInfo[zoneid][Attacker]=-1;
			}
		}
	}
	return 1;
}

/*public UpdateSpeed()
{
	new string[256];
	new Float:health;

	for(new i=0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i))
		{
			GetVehicleHealth(GetPlayerVehicleID(i), health);
			format(main_str, sizeof(main_str),"~g~Jrm«: ~w~%s (%s)~n~~b~KM/H : ~w~%d~n~~r~Jrm« lete:~w~ %.0f/1000",CarNameBRL[GetVehicleModel(GetPlayerVehicleID(i))-400],CarName[GetVehicleModel(GetPlayerVehicleID(i))-400],GetVehicleSpeed(GetPlayerVehicleID(i)),health);
			TextDrawSetString(Speedo[i], main_str);
		}
	}
}*/


stock GetVehicleSpeed(vehicleid)
{
	new Float:vSpeed[3];
	GetVehicleVelocity( vehicleid, vSpeed[0], vSpeed[1], vSpeed[2] );

	new Float:vSpeed_Float;
	vSpeed_Float = floatsqroot( ((vSpeed[0] * vSpeed[0]) + (vSpeed[1] * vSpeed[1])) + (vSpeed[2] * vSpeed[2])) * 161.0;

	new vSpeed_Int;
	vSpeed_Int = floatround( vSpeed_Float, floatround_round );

	return vSpeed_Int;
}


SendClientMessageToAdmins(color, message[])
{
	for(new i; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && GetPVarInt(i, "Level") != 0) SendClientMessage(i, color, message);
	}
}

stock GetPVarStringEx(playerid, pvar[])
{
	new pvar2[128];
	GetPVarString(playerid, pvar, pvar2, sizeof(pvar2));
	return pvar2;
}

stock GetGVarStringEx(pvar[])
{
	new pvar2[128];
	GetGVarString(pvar, pvar2, sizeof(pvar2));
	return pvar2;
}

//-------------------------------------------------

// ********** INTERNAL FUNCTIONS **********

IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key)) return 1;
	return 0;
}

//-------------------------------------------------

OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    if (gPlayerUsingLoopingAnim[playerid] == 1) TextDrawHideForPlayer(playerid,txtAnimHelper);
    animation[playerid]++;
	return ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}

//-------------------------------------------------

LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	if (gPlayerUsingLoopingAnim[playerid] == 1) TextDrawHideForPlayer(playerid,txtAnimHelper);
    gPlayerUsingLoopingAnim[playerid] = 1;
    TextDrawShowForPlayer(playerid,txtAnimHelper);
    animation[playerid]++;
    return ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}

//-------------------------------------------------

StopLoopingAnim(playerid)
{
	gPlayerUsingLoopingAnim[playerid] = 0;
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

//-------------------------------------------------

PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}

//------------------------------------------------------------------------------

stock EnabledObjects(objectid)
{
	if(objectid != 0 && objectid != 18648 && objectid != 18647 && objectid != 18649 && objectid != 18650 && objectid != 18652 && objectid != 18651  && objectid != 18646 && objectid != 19419 && objectid != 19420)
	{
	    return false;
	}
	else return true;
}

stock IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	{
		if (string[i] > '9' || string[i] < '0') return 0;
	}
	return 1;
}

stock AutoUpdate(autoslot)
{
    DestroyVehicle(carplay[autoslot]);
    DestroyDynamicObject(objects[autoslot]);
	DestroyDynamicObject(objects2[autoslot]);
    carplay[autoslot] = 0;
	format(query, sizeof(query), "SELECT * FROM cars WHERE slot = '%d'", autoslot);
 	mysql_query(query);
   	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
		mysql_fetch_row(linen);
		new fuelt;
		new tarolo[6];
		new tuning[10];
		new Float:tarolo2[4];
		new tarolo3[15];
		new Float:tarolo4[6];
		new Float:tarolo5[6];
		new vwtarolo;
		new sirent;
		sscanf(linen, "p<|>{dd}d{s[24]s[24]}dffffdddddddddddddddds[15]{dddddddddddddddddddddd}ffffffffffffd{s[60]}", fuelt,
		tarolo[0], Float:tarolo2[0], Float:tarolo2[1], Float:tarolo2[2], Float:tarolo2[3], vwtarolo, tarolo[1], tarolo[2],
	 	tuning[0], tuning[1], tuning[2], tuning[3], tuning[4], tuning[5], tuning[6], tuning[7], tuning[8],
	 	tuning[9], tarolo[3], tarolo[4], tarolo[5], tarolo3, Float:tarolo4[0], Float:tarolo4[1],
	 	Float:tarolo4[2], Float:tarolo4[3], Float:tarolo4[4],Float:tarolo4[5], Float:tarolo5[0], Float:tarolo5[1], Float:tarolo5[2], Float:tarolo5[3],
	   	Float:tarolo5[4], Float:tarolo5[5], sirent);
		carplay[autoslot] = CreateVehicle(tarolo[0], tarolo2[0], tarolo2[1], tarolo2[2], tarolo2[3], tarolo[1], tarolo[2], -1, sirent);
		SetVehicleVirtualWorld(carplay[autoslot], vwtarolo);
		AddVehicleComponent(carplay[autoslot], tuning[0]);
		AddVehicleComponent(carplay[autoslot], tuning[1]);
		AddVehicleComponent(carplay[autoslot], tuning[2]);
		AddVehicleComponent(carplay[autoslot], tuning[3]);
		AddVehicleComponent(carplay[autoslot], tuning[4]);
		AddVehicleComponent(carplay[autoslot], tuning[5]);
		AddVehicleComponent(carplay[autoslot], tuning[6]);
		AddVehicleComponent(carplay[autoslot], tuning[7]);
		AddVehicleComponent(carplay[autoslot], tuning[8]);
		AddVehicleComponent(carplay[autoslot], tuning[9]);
		if(tarolo[3] != 0)
		{
			objects[autoslot] = CreateDynamicObject(tarolo[3], 0, 0, -50, 0, 0, 0);
			AttachDynamicObjectToVehicle(objects[autoslot], carplay[autoslot], Float:tarolo4[0], Float:tarolo4[1], Float:tarolo4[2], Float:tarolo4[3], Float:tarolo4[4], Float:tarolo4[5]);
		}
		if(tarolo[4] != 0)
		{
			objects2[autoslot] = CreateDynamicObject(tarolo[4], 0, 0, -50, 0, 0, 0);
			AttachDynamicObjectToVehicle(objects2[autoslot], carplay[autoslot], tarolo5[0], tarolo5[1], tarolo5[2], tarolo5[3], tarolo5[4], tarolo5[5]);
		}
		ChangeVehiclePaintjob(carplay[autoslot], tarolo[5]);
		SetVehicleNumberPlate(carplay[autoslot], tarolo3);
		#if defined FUEL_SYSTEM
		fuelvalue[carplay[autoslot]] = fuelt;
		#endif
		mysql_free_result();
	}
}

stock ClanAutoUpdate(autoslot)
{
    DestroyVehicle(clancars[autoslot]);
    clancars[autoslot] = 0;
	format(query, sizeof(query), "SELECT * FROM clancars WHERE slot = %d", autoslot);
	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    mysql_fetch_row(linen);
	    new vid;
	    new Float:vpos[4], color[2], vw, tuning[5];
		sscanf(linen, "p<|>{ds[30]}dffffdddddddd", vid, vpos[0], vpos[1], vpos[2], vpos[3], color[0], color[1], vw, tuning[0], tuning[1], tuning[2], tuning[3], tuning[4]);
		mysql_free_result();
        clancars[autoslot] = CreateVehicle(vid, vpos[0], vpos[1], vpos[2], vpos[3], color[0], color[1], -1);
		SetVehicleVirtualWorld(clancars[autoslot], vw);
		AddVehicleComponent(clancars[autoslot], tuning[0]);
		AddVehicleComponent(clancars[autoslot], tuning[1]);
		AddVehicleComponent(clancars[autoslot], tuning[2]);
		AddVehicleComponent(clancars[autoslot], tuning[3]);
		AddVehicleComponent(clancars[autoslot], tuning[4]);
	}
}

forward ObjectLoader(playerid, time);
public ObjectLoader(playerid, time)
{
	TogglePlayerControllable(playerid, 0);
	SetTimerEx("toltes", time, 0, "i", playerid);
}

forward toltes(playerid);
public toltes(playerid)
{
	TogglePlayerControllable(playerid, 1);
}

stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
	new Vehicle_ID = GetPlayerVehicleID(playerid),
	Float:a;
	if(Vehicle_ID)
	{
		GetVehiclePos(Vehicle_ID,x,y,a);
		GetVehicleZAngle(Vehicle_ID, a);
	}
	else
	{
		GetPlayerPos(playerid, x, y, a);
		GetPlayerFacingAngle(playerid, a);
	}
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

//---------------------------Clan system----------------------------------------

stock GetClanRang(name[])
{
    new tarolo2[24];
	format(query, sizeof(query), "SELECT ClanRank, Clan FROM users WHERE Name = '%s'", name);
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    new tarolo, tarolo3[24];
	    mysql_fetch_row(linen);
	    sscanf(linen, "p<|>ds[24]", tarolo, tarolo3);
	    mysql_free_result();
	    format(query, sizeof(query), "SELECT ClanRank%d FROM clans WHERE ClanName = '%s'", tarolo, tarolo3);
  		mysql_query(query);
		mysql_store_result();
		if(mysql_num_rows() != 0)
		{
			mysql_fetch_row(linen);
			sscanf(linen, "p<|>s[24]", tarolo2);
			mysql_free_result();
			return tarolo2;
		}
	}
	return tarolo2;
}

stock GetClanLeader(clanname[])
{
	new tarolo[24];
	format(query, sizeof(query), "SELECT ClanLeader FROM clans WHERE ClanName = '%s'", clanname);
	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    mysql_fetch_row(linen);
	    sscanf(linen, "s[24]", tarolo);
	    mysql_free_result();
	    return tarolo;
	}
	tarolo = "ismeretlen";
	return tarolo;
}

stock GetClanMoney(clanname[])
{
	format(query, sizeof(query), "SELECT Kassza FROM clans WHERE ClanName = '%s'", clanname);
	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    new tarolo;
	    mysql_fetch_row(linen);
	    sscanf(linen, "d", tarolo);
	    mysql_free_result();
	    return tarolo;
	}
	return -1;
}

stock GetClanWins(clanname[])
{
    format(query, sizeof(query), "SELECT Wins FROM clans WHERE ClanName = '%s'", clanname);
	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    new tarolo;
	    mysql_fetch_row(linen);
	    sscanf(linen, "d", tarolo);
	    mysql_free_result();
	    return tarolo;
	}
	return -1;
}


stock GetClanLoss(clanname[])
{
    format(query, sizeof(query), "SELECT Loss FROM clans WHERE ClanName = '%s'", clanname);
	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    new tarolo;
	    mysql_fetch_row(linen);
	    sscanf(linen, "d", tarolo);
	    mysql_free_result();
	    return tarolo;
	}
	return -1;
}

stock SendClanMessage(ClanName[], color, message[])
{
	for(new i; i < MAX_PLAYERS; i++)
	{
		if(!strcmp(ClanName, GetPVarStringEx(i, "Clan")))
		{
			SendClientMessage(i, color, message);
		}
	}
}

stock GetClanID(ClanName[])
{
	format(query, sizeof(query), "SELECT ID FROM clans WHERE ClanName = '%s'", ClanName);
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    mysql_fetch_row(linen);
	    new tarolo;
	    sscanf(linen, "d", tarolo);
		mysql_free_result();
		return tarolo;
	}
	return -1;
}

stock GetClanRangJog(clanname[], jog[])
{
	format(query, sizeof(query), "SELECT %s FROM clans WHERE ClanName = '%s'", jog, clanname);
 	mysql_query(query);
	mysql_store_result();
	if(mysql_num_rows() != 0)
	{
	    mysql_fetch_row(linen);
		new tarolo;
		sscanf(linen, "d", tarolo);
		mysql_free_result();
		return tarolo;
	}
	return -1;
}

stock ShowClanPanel(playerid)
{
	new string[200];
    format(string, sizeof(string), "Tagok\nRangok szerkesztése\nJogok\nKlán elhagyása\nKlán feloszlatása\nKlán kihívása\nKlánkassza: %d$\nKlánautók slotja", GetClanMoney(GetPVarStringEx(playerid, "Clan")));
	ShowPlayerDialog(playerid, CLANPANEL_DIALOG, DIALOG_STYLE_LIST, "Klán panel", string, "Kiválaszt", "Kilép");
}
//------------------------------------------------------------------------------
stock PlaySound(playerid, soundid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    PlayerPlaySound(playerid, soundid, x, y, z);
}

convertFormattedNumber(n, slt[])
{
    new string[64], i = 0;                         //  Deklarálás
    format(string, 64, "%d", n);                   //  Átalakítjuk sztringgé a számot
    while (i < strlen(string)) {                   //  Egy ciklust futtatunk addig, míg el nem éri az i a megfelelõ értéket
        strins(string, slt[0], strlen(string) - i);      //  Hátulról hozzáadunk mindig egy pontot
         i = i+4;                               //  Növeljük az i-t néggyel
    }
    strdel(string, strlen(string) - 1, strlen(string));  //  Kitöröljük az utolsó karaktert
    return string;                                 //  Visszatérünk az str nevû sztringünkkel
}

stock IsStringInSpecials(string[])
{
	for(new i; i < strlen(string); i++)
	{
	    if(string[i] == '{' || string[i] == '}' || string[i] == '|' || string[i] == '"' || string[i] == ' ' || string[i] == '+' || string[i] == '!' || string[i] == '/' || string[i] == '=' || string[i] == '@' || string[i] == '#' || string[i] == '<' || string[i] == '>' || string[i] == '¤' || string[i] == 'ß' || string[i] == '÷' || string[i] == '×' || string[i] == '?')
	    {
	        return true;
	    }
	    else return false;
	}
	return false;
}

stock IsStringInvalidBletters(string[])
{
	new abc[16][] =
	{
		"á", "Á",
		"é", "É",
		"í", "Í",
		"ó", "Ó",
		"ö", "Ö",
		"õ", "Õ",
		"ü", "Ü",
		"û", "Û"
	};
	for(new i; i < sizeof(abc); i++)
    if(strfind(string, abc[i][0], true) != -1)
    {
        return true;
    }
    return false;
}

/*stock ShowSzerelDialog(playerid)
{
	new string[150];
	format(string, sizeof(string), "Jármû slot: %d\nJármû tuningolása\nJármû Rendszámírása\nJármû szín cserélése\nJármû paintjob cserélése\nJármû respawnolása\nJármû adatai", GetPVarInt(playerid, "szerelslot"));
	ShowPlayerDialog(playerid, AUTOSZEREL_DIALOG, DIALOG_STYLE_LIST, "Ryuuzaki's cars szerelõpanel", string, "Kiválaszt", "Kilép");
}*/

stock ShowSzerkesztDialog(playerid)
{
    for(new i; i < MAX_SLOTS; i++)
	{
		if(GetPlayerVehicleID(playerid) == carplay[i])
		{
			format(query, sizeof(query), "SELECT Tulaj FROM cars WHERE slot = %d", i);
   			mysql_query(query);
	    	mysql_store_result();
	    	if(mysql_num_rows() != 0)
	    	{
				mysql_fetch_row(linen);
				new tarolo[24];
				sscanf(linen, "p<|>s[24]", tarolo);
				mysql_free_result();
				if(strcmp(tarolo, GetPlayerNameEx(playerid))) return SendClientMessage(playerid, COLOR_RED, "HIBA: Ez a jármû nem a tied!");
				new string[128], string2[300];
				format(string, sizeof(string), "Autó slot: %d", i);
				format(string2, sizeof(string2), "Jármû adatai\nRendszám átírása(300.000$)\nSzíncsere(300.000$/szín)\nPaintjob csere(500.000$)\nJármû frissítése\nJármû eladása\nJármû tuningolása(500.000$/tuningelem)\nNeonok(1.200.000/neon)\nSzirénahang vásárlása(400.000$)\nNeon helyezése\nJármû szintje: %d", GetVehicleLevel(i));
				SetPVarInt(playerid, "szerkesztslot", i);
    			ShowPlayerDialog(playerid, AUTOSZERKESZT_DIALOG, DIALOG_STYLE_LIST, string, string2, "Kiválaszt", "Kilép");
			}
		}
	}
	return 1;
}
//-------------Szint Rendszer-----------------------
stock SetSkillFire(playerid, skilltime, Float:skx, Float:sky, Float:skz)
{
	weapfireobj[playerid] = CreateDynamicObject(18691, skx, sky, skz-1, 0, 0, 0);
	SetTimerEx("SkillFireDelete", 10000, 0, "i", playerid);
	for(new i; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(IsPlayerInRangeOfPoint(i, 3, skx, sky, skz))
	        {
	            if(IsPlayerInAnyVehicle(i))
	            {
					if(GetPlayerVehicleSeat(i) == 0)
					{
						SetPVarInt(i, "skillfire", skilltime);
						SetPVarInt(i, "fireveh", GetPlayerVehicleID(i));
						DestroyDynamicObject(fireobjv[GetPlayerVehicleID(i)]);
					    fireobjv[GetPlayerVehicleID(i)] = CreateDynamicObject(18691, 0, 0, 0, 0, 0, 0);
                        AttachDynamicObjectToVehicle(fireobjv[GetPlayerVehicleID(i)], GetPlayerVehicleID(i), 0, 1, -1.5, 0, 0, 0);
					}
					else continue;
	            }
	            else
	            {
		            SetPVarInt(i, "skillfire", skilltime);
		            DestroyObject(fireobj[i]);
					//fireobj[i] = CreateDynamicObject(18689, 0, 0, 0, 0, 0, 0);
					//AttachDynamicObjectToPlayer(fireobj[i], i, 0, -0.3, -1.5, 0, 0, 0);
					fireobj[i] = CreateObject(18689, 0, 0, 0, 0, 0, 0);
					AttachObjectToPlayer(fireobj[i], i, 0, -0.3, -1.5, 0, 0, 0);
				}
	        }
	    }
	}
}

forward SkillFireDelete(playerid);
public SkillFireDelete(playerid)
{
	DestroyDynamicObject(weapfireobj[playerid]);
}


stock SetSkillTimer(playerid, skill)
{
    skillalw[skill-1][playerid] = true;
	new skform[20], skfor[20];
	format(skform, sizeof(skform), "skill%dlevel", skill);
	format(skfor, sizeof(skfor), "skill%dalt", skill);
    if(GetPVarInt(playerid, skform) == 1) SetPVarInt(playerid, skfor, 60);
    if(GetPVarInt(playerid, skform) == 2) SetPVarInt(playerid, skfor, 50);
    if(GetPVarInt(playerid, skform) == 3) SetPVarInt(playerid, skfor, 40);
    if(GetPVarInt(playerid, skform) == 4) SetPVarInt(playerid, skfor, 30);
    if(GetPVarInt(playerid, skform) == 5) SetPVarInt(playerid, skfor, 15);

	new timefr[5];
	if(skill == 1)
	{
	    format(timefr, sizeof(timefr), "%d", GetPVarInt(playerid, "skill1alt"));
		TextDrawSetString(Skill1Count[playerid], timefr);
		TextDrawShowForPlayer(playerid, Skill1Count[playerid]);
	}
	if(skill == 2)
	{
	    format(timefr, sizeof(timefr), "%d", GetPVarInt(playerid, "skill2alt"));
		TextDrawSetString(Skill2Count[playerid], timefr);
		TextDrawShowForPlayer(playerid, Skill2Count[playerid]);
	}
	if(skill == 3)
	{
		format(timefr, sizeof(timefr), "%d", GetPVarInt(playerid, "skill3alt"));
		TextDrawSetString(Skill3Count[playerid], timefr);
		TextDrawShowForPlayer(playerid, Skill3Count[playerid]);
	}
}

stock SetSkillColors(playerid, text1, text2, text3) //0: lila, 1: zöld, 2: piros
{
	if(text1 == 0) TextDrawColor(Skill1Text[playerid], 0x800080AA);
	if(text1 == 1) TextDrawColor(Skill1Text[playerid], 16711935);
	if(text1 == 2) TextDrawColor(Skill1Text[playerid], -16776961);

	if(text2 == 0) TextDrawColor(Skill2Text[playerid], 0x800080AA);
	if(text2 == 1) TextDrawColor(Skill2Text[playerid], 16711935);
	if(text2 == 2) TextDrawColor(Skill2Text[playerid], -16776961);
	
	if(text3 == 0) TextDrawColor(Skill3Text[playerid], 0x800080AA);
	if(text3 == 1) TextDrawColor(Skill3Text[playerid], 16711935);
	if(text3 == 2) TextDrawColor(Skill3Text[playerid], -16776961);
	
	TextDrawShowForPlayer(playerid, Skill1Text[playerid]);
	TextDrawShowForPlayer(playerid, Skill2Text[playerid]);
	TextDrawShowForPlayer(playerid, Skill3Text[playerid]);
}

stock SetSkillColor(playerid, textid, color) //0: lila, 1: zöld, 2: piros
{
	if(textid == 1)
	{
	    if(color == 0) TextDrawColor(Skill1Text[playerid], 0x800080AA);
		if(color == 1) TextDrawColor(Skill1Text[playerid], 16711935);
		if(color == 2) TextDrawColor(Skill1Text[playerid], -16776961);
		TextDrawShowForPlayer(playerid, Skill1Text[playerid]);
	}
	if(textid == 2)
	{
	    if(color == 0) TextDrawColor(Skill2Text[playerid], 0x800080AA);
		if(color == 1) TextDrawColor(Skill2Text[playerid], 16711935);
		if(color == 2) TextDrawColor(Skill2Text[playerid], -16776961);
		TextDrawShowForPlayer(playerid, Skill2Text[playerid]);
	}
	if(textid == 3)
	{
	    if(color == 0) TextDrawColor(Skill3Text[playerid], 0x800080AA);
		if(color == 1) TextDrawColor(Skill3Text[playerid], 16711935);
		if(color == 2) TextDrawColor(Skill3Text[playerid], -16776961);
		TextDrawShowForPlayer(playerid, Skill3Text[playerid]);
	}
}

stock ShowSkillText(playerid)
{
    TextDrawShowForPlayer(playerid, SkillBox[playerid]);
	TextDrawShowForPlayer(playerid, Skill1Text[playerid]);
	TextDrawShowForPlayer(playerid, Skill2Text[playerid]);
	TextDrawShowForPlayer(playerid, Skill3Text[playerid]);
}

stock HideSkillText(playerid)
{
    TextDrawHideForPlayer(playerid, SkillBox[playerid]);
    TextDrawHideForPlayer(playerid, Skill1Text[playerid]);
	TextDrawHideForPlayer(playerid, Skill2Text[playerid]);
	TextDrawHideForPlayer(playerid, Skill3Text[playerid]);

	TextDrawHideForPlayer(playerid, Skill1Count[playerid]);
    TextDrawHideForPlayer(playerid, Skill2Count[playerid]);
    TextDrawHideForPlayer(playerid, Skill3Count[playerid]);
}

stock GiveEXP(playerid, givedexp)
{
	if(GetPVarInt(playerid, "Szint") >= MAX_LEVEL) return 1;
	new expstr[64], szintstr[64], expgive[24];
	format(expgive, sizeof(expgive), "+%dEXP", givedexp);
	TextDrawSetString(giveexp[playerid], expgive);
	TextDrawShowForPlayer(playerid, giveexp[playerid]);
	SetTimerEx("giveexp_timer", 7000, 0, "i", playerid);
	while(givedexp > 0)
 	{
		if((GetPVarInt(playerid, "EXP") + givedexp) > levelexp[GetPVarInt(playerid, "Szint")][expvalue])
		{
		  	givedexp = givedexp - (levelexp[GetPVarInt(playerid, "Szint")][expvalue] - GetPVarInt(playerid, "EXP"));
			GiveSzint(playerid, 1);
			SetPVarInt(playerid, "EXP", 0);
			SendFormatMessage(playerid, COLOR_YELLOW, "Szintet léptél! Jelenlegi szint: %d", GetPVarInt(playerid, "Szint"));
			
			if(GetPVarInt(playerid, "Szint") == 1) GivePlayerMoneyEx(playerid, 100000, "szintlépés"), SendClientMessage(playerid, COLOR_YELLOW, "Szintlépés: Kaptál 100.000$-t. Elérhetõvé vált az autóvétel.");
			if(GetPVarInt(playerid, "Szint") == 2) GivePlayerMoneyEx(playerid, 250000, "szintlépés"), SendClientMessage(playerid, COLOR_YELLOW, "Szintlépés: Kaptál 250.000$-t. Elérhetõvé vált a klán alapítás.");
			if(GetPVarInt(playerid, "Szint") == 3) GivePlayerMoneyEx(playerid, 500000, "szintlépés"), SendClientMessage(playerid, COLOR_YELLOW, "Szintlépés: Kaptál 500.000$-t. Elérhetõvé vált a házvétel.");
			//if(GetPVarInt(playerid, "Szint") == 4) SendClientMessage(playerid, COLOR_YELLOW, "Szintlépés: Elérhetõvé vált a klán alapítás.");
			if(GetPVarInt(playerid, "Szint") == 6) SendClientMessage(playerid, COLOR_YELLOW, "Szintlépés: Elérhetõvé vált a biznisz vétel.");
			if(GetPVarInt(playerid, "Szint") >= 4) GivePlayerMoneyEx(playerid, 500000, "szintlépés"), SendClientMessage(playerid, COLOR_YELLOW, "Szintlépés: Kaptál 500.000$-t.");
			
			SendClientMessage(playerid, COLOR_YELLOW, "Új küldetés vált elérhetõvé. /quests");
			new questname[50] = "0";
			if(GetPVarInt(playerid, "Szint") == 1) questname = "Üdv a városban!";
			if(GetPVarInt(playerid, "Szint") == 2) questname = "Egy könnyü munka...";
			if(GetPVarInt(playerid, "Szint") == 3) questname = "Autólopás";
			if(GetPVarInt(playerid, "Szint") == 4) questname = "Raboljunk!";
			if(strcmp(questname, "0"))
			{
				format(query, sizeof(query), "INSERT INTO quests (ID, Name, QuestID, QuestName, QuestPart) VALUES (0, '%s', %d, '%s', 0)", GetPlayerNameEx(playerid), GetPVarInt(playerid, "Szint"), questname);
				mysql_query(query);
			}
			SetPVarInt(playerid, "skillpoints", GetPVarInt(playerid, "skillpoints")+1);
			SendClientMessage(playerid, COLOR_YELLOW, "Kaptál 1 képességpontot.");
		}
		else if((GetPVarInt(playerid, "EXP") + givedexp) == levelexp[GetPVarInt(playerid, "Szint")][expvalue])
		{
			GiveSzint(playerid, 1);
			SetPVarInt(playerid, "EXP", 0);
			givedexp = 0;
			SendFormatMessage(playerid, COLOR_YELLOW, "Szintet léptél! Jelenlegi szint: %d", GetPVarInt(playerid, "Szint"));
			
			if(GetPVarInt(playerid, "Szint") == 1) GivePlayerMoneyEx(playerid, 100000, "szintlépés"), SendClientMessage(playerid, COLOR_YELLOW, "Szintlépés: Kaptál 100.000$-t. Elérhetõvé vált az autóvétel.");
			if(GetPVarInt(playerid, "Szint") == 2) GivePlayerMoneyEx(playerid, 100000, "szintlépés"), SendClientMessage(playerid, COLOR_YELLOW, "Szintlépés: Kaptál 250.000$-t. Elérhetõvé vált a klán alapítás.");
			if(GetPVarInt(playerid, "Szint") == 3) GivePlayerMoneyEx(playerid, 100000, "szintlépés"), SendClientMessage(playerid, COLOR_YELLOW, "Szintlépés: Kaptál 500.000$-t. Elérhetõvé vált a házvétel.");
			//if(GetPVarInt(playerid, "Szint") == 4) SendClientMessage(playerid, COLOR_YELLOW, "Szintlépés: Elérhetõvé vált a klán alapítás.");
			if(GetPVarInt(playerid, "Szint") == 6) SendClientMessage(playerid, COLOR_YELLOW, "Szintlépés: Elérhetõvé vált a biznisz vétel.");
			
			SendClientMessage(playerid, COLOR_YELLOW, "Új küldetés vált elérhetõvé. /quests");
			new questname[50] = "0";
			if(GetPVarInt(playerid, "Szint") == 1) questname = "Üdv a városban!";
			if(GetPVarInt(playerid, "Szint") == 2) questname = "Egy könnyü munka...";
			if(GetPVarInt(playerid, "Szint") == 3) questname = "Autólopás";
			if(GetPVarInt(playerid, "Szint") == 4) questname = "Raboljunk!";
			if(strcmp(questname, "0"))
			{
				format(query, sizeof(query), "INSERT INTO quests (ID, Name, QuestID, QuestName, QuestPart) VALUES (0, '%s', %d, '%s', 0)", GetPlayerNameEx(playerid), GetPVarInt(playerid, "Szint"), questname);
				mysql_query(query);
			}
			SetPVarInt(playerid, "skillpoints", GetPVarInt(playerid, "skillpoints")+1);
			SendClientMessage(playerid, COLOR_YELLOW, "Kaptál 1 képességpontot.");
		}
		else if((GetPVarInt(playerid, "EXP") + givedexp) < levelexp[GetPVarInt(playerid, "Szint")][expvalue]) SetPVarInt(playerid, "EXP", GetPVarInt(playerid, "EXP")+givedexp), givedexp = 0;
	}
	SetProgressBarMaxValue(expbar[playerid], levelexp[GetPVarInt(playerid, "Szint")][expvalue]);
	SetProgressBarValue(expbar[playerid], GetPVarInt(playerid, "EXP"));
	format(expstr, sizeof(expstr), "EXP: %d/%d", levelexp[GetPVarInt(playerid, "Szint")][expvalue], GetPVarInt(playerid, "EXP"));
	TextDrawSetString(exp[playerid], expstr);
	new sztext[25];
	if(GetPVarInt(playerid, "Szint") >= MAX_LEVEL) sztext = "[MAX LvL]";
	format(szintstr, sizeof(szintstr), "Szint: %d", GetPVarInt(playerid, "Szint"), sztext);
	TextDrawSetString(level[playerid], szintstr);

	UpdateProgressBar(expbar[playerid], playerid);
	if(GetPVarInt(playerid, "Szint") == 50) SendClientMessage(playerid, COLOR_GOLD, "Elérted a max szintet! Gratulálunk!");
	return 1;
}

stock SetEXP(playerid, setexp)
{
	new expstr[64], szintstr[64];
    SetPVarInt(playerid, "EXP", setexp);
    SetProgressBarMaxValue(expbar[playerid], levelexp[GetPVarInt(playerid, "Szint")][expvalue]);
	SetProgressBarValue(expbar[playerid], GetPVarInt(playerid, "EXP"));
	format(expstr, sizeof(expstr), "EXP: %d/%d", levelexp[GetPVarInt(playerid, "Szint")][expvalue], GetPVarInt(playerid, "EXP"));
	TextDrawSetString(exp[playerid], expstr);
	new sztext[25];
	if(GetPVarInt(playerid, "Szint") >= MAX_LEVEL) sztext = "[MAX LvL]";
	format(szintstr, sizeof(szintstr), "Szint: %d", GetPVarInt(playerid, "Szint"), sztext);
	TextDrawSetString(level[playerid], szintstr);
}

stock GiveSzint(playerid, szint)
{
	SetPVarInt(playerid, "Szint", GetPVarInt(playerid, "Szint")+szint);
}

stock SetSzint(playerid, szint)
{
    SetPVarInt(playerid, "Szint", szint);
    SetEXP(playerid, 0);
}

forward giveexp_timer(playerid);
public giveexp_timer(playerid)
{
	TextDrawHideForPlayer(playerid, giveexp[playerid]);
}

forward GiveEXPpublic(playerid, givedexp);
public GiveEXPpublic(playerid, givedexp)
{
	GiveEXP(playerid, givedexp);
}

forward SetEXPpublic(playerid, setexp);
public SetEXPpublic(playerid, setexp)
{
	SetEXP(playerid, setexp);
}

forward GiveSzintpublic(playerid, szint);
public GiveSzintpublic(playerid, szint)
{
	GiveSzint(playerid, szint);
}

forward SetSzintpublic(playerid, szint);
public SetSzintpublic(playerid, szint)
{
	SetSzint(playerid, szint);
}
//--------------------------------------------------
//-------------------Zombi rendszer------------------------------------
#if defined ZOMBIK
forward npc0killed();
public npc0killed() FCNPC_Respawn(npc[0]);

forward npc1killed();
public npc1killed() FCNPC_Respawn(npc[1]);

forward npc2killed();
public npc2killed() FCNPC_Respawn(npc[2]);

forward npc3killed();
public npc3killed() FCNPC_Respawn(npc[3]);

forward npc4killed();
public npc4killed() FCNPC_Respawn(npc[4]);

forward npc5killed();
public npc5killed() FCNPC_Respawn(npc[5]);

forward npc6killed();
public npc6killed() FCNPC_Respawn(npc[6]);

forward npc7killed();
public npc7killed() FCNPC_Respawn(npc[7]);

forward npc8killed();
public npc8killed() FCNPC_Respawn(npc[8]);

forward npc9killed();
public npc9killed() FCNPC_Respawn(npc[9]);

/*forward npc10killed();
public npc10killed() FCNPC_Respawn(npc[10]);

forward npc11killed();
public npc11killed() FCNPC_Respawn(npc[11]);

forward npc12killed();
public npc12killed() FCNPC_Respawn(npc[12]);

forward npc13killed();
public npc13killed() FCNPC_Respawn(npc[13]);

forward npc14killed();
public npc14killed() FCNPC_Respawn(npc[14]);

forward npc15killed();
public npc15killed() FCNPC_Respawn(npc[15]);

forward npc16killed();
public npc16killed() FCNPC_Respawn(npc[16]);

forward npc17killed();
public npc17killed() FCNPC_Respawn(npc[17]);

forward npc18killed();
public npc18killed() FCNPC_Respawn(npc[18]);

forward npc19killed();
public npc19killed() FCNPC_Respawn(npc[19]);*/

forward npcpoint();
public npcpoint()
{
	for(new i; i < MAX_ZOMBIE; i++)
	{
	    if(zombi[i][tamadoid] != -1) continue;
        new Float:x, Float:y, Float:z;
		FCNPC_GetPosition(npc[i], x, y, z);
		for(new j; j < MAX_PLAYERS; j++)
		{
		    if(IsPlayerConnected(j))
		    {
		        if(IsPlayerNPC(j)) continue;
			    if(IsPlayerInRangeOfPoint(j, 30, x, y, z))
			    {
			        if(IsPlayerInDynamicArea(j, zzone))
			        {
				        if(GetPVarInt(j, "sebezhetetlen") == 0)
				        {
				            if(!FCNPC_IsDead(npc[i]))
				            {
					            new zstring[24];
					            format(zstring, sizeof(zstring), "npc%d_timer", i);
					            npctimer[i][j] = SetTimerEx(zstring, 500, 1, "i", j);
					            zombi[i][tamadoid] = j;
							}
						}
					}
				}
			}
		}
	}
}

forward npc0_timer(playerid);
public npc0_timer(playerid)
{
	if(FCNPC_IsDead(npc[0])) return 1;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    FCNPC_GoTo(npc[0],  x+0.5+random(1), y+0.5+random(1), z, MOVE_TYPE_SPRINT, 4, true);
    new Float:x2, Float:y2, Float:z2;
    FCNPC_GetPosition(npc[0], x2, y2, z2);
    SetNPCToFacePlayer(npc[0], playerid);
    if(IsPlayerInRangeOfPoint(playerid, 1, x2, y2, z2))
    {
        FCNPC_MeleeAttack(npc[0], 500);
        if(IsPlayerInAnyVehicle(playerid))
        {
			new Float:health;
            GetVehicleHealth(GetPlayerVehicleID(playerid), health);
            SetVehicleHealth(GetPlayerVehicleID(playerid), health-ASEBZES);
            return 1;
        }
        new Float:health;
        GetPlayerHealth(playerid, health);
        SetPlayerHealth(playerid, health-SEBZES);
    }
    return 1;
}

forward npc1_timer(playerid);
public npc1_timer(playerid)
{
    if(FCNPC_IsDead(npc[1])) return 1;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    FCNPC_GoTo(npc[1],  x+0.5+random(1), y+0.5+random(1), z, MOVE_TYPE_SPRINT, 4, true);
    new Float:x2, Float:y2, Float:z2;
    FCNPC_GetPosition(npc[1], x2, y2, z2);
    SetNPCToFacePlayer(npc[1], playerid);
    if(IsPlayerInRangeOfPoint(playerid, 1, x2, y2, z2))
    {
        FCNPC_MeleeAttack(npc[1], 500);
        if(IsPlayerInAnyVehicle(playerid))
        {
			new Float:health;
            GetVehicleHealth(GetPlayerVehicleID(playerid), health);
            SetVehicleHealth(GetPlayerVehicleID(playerid), health-ASEBZES);
            return 1;
        }
        new Float:health;
        GetPlayerHealth(playerid, health);
        SetPlayerHealth(playerid, health-SEBZES);
    }
    return 1;
}

forward npc2_timer(playerid);
public npc2_timer(playerid)
{
    if(FCNPC_IsDead(npc[2])) return 1;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    FCNPC_GoTo(npc[2],  x+0.5+random(1), y+0.5+random(1), z, MOVE_TYPE_SPRINT, 4, true);
    new Float:x2, Float:y2, Float:z2;
    FCNPC_GetPosition(npc[2], x2, y2, z2);
    SetNPCToFacePlayer(npc[2], playerid);
    if(IsPlayerInRangeOfPoint(playerid, 1, x2, y2, z2))
    {
        FCNPC_MeleeAttack(npc[2], 500);
        if(IsPlayerInAnyVehicle(playerid))
        {
			new Float:health;
            GetVehicleHealth(GetPlayerVehicleID(playerid), health);
            SetVehicleHealth(GetPlayerVehicleID(playerid), health-ASEBZES);
            return 1;
        }
        new Float:health;
        GetPlayerHealth(playerid, health);
        SetPlayerHealth(playerid, health-SEBZES);
    }
    return 1;
}

forward npc3_timer(playerid);
public npc3_timer(playerid)
{
    if(FCNPC_IsDead(npc[3])) return 1;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    FCNPC_GoTo(npc[3], x+0.5+random(1), y+0.5+random(1), z, MOVE_TYPE_SPRINT, 4, true);
    new Float:x2, Float:y2, Float:z2;
    FCNPC_GetPosition(npc[3], x2, y2, z2);
    SetNPCToFacePlayer(npc[3], playerid);
    if(IsPlayerInRangeOfPoint(playerid, 1, x2, y2, z2))
    {
        FCNPC_MeleeAttack(npc[3], 500);
        if(IsPlayerInAnyVehicle(playerid))
        {
			new Float:health;
            GetVehicleHealth(GetPlayerVehicleID(playerid), health);
            SetVehicleHealth(GetPlayerVehicleID(playerid), health-ASEBZES);
            return 1;
        }
        new Float:health;
        GetPlayerHealth(playerid, health);
        SetPlayerHealth(playerid, health-SEBZES);
    }
    return 1;
}

forward npc4_timer(playerid);
public npc4_timer(playerid)
{
    if(FCNPC_IsDead(npc[4])) return 1;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    FCNPC_GoTo(npc[4], x+0.5+random(1), y+0.5+random(1), z, MOVE_TYPE_SPRINT, 4, true);
    new Float:x2, Float:y2, Float:z2;
    FCNPC_GetPosition(npc[4], x2, y2, z2);
    SetNPCToFacePlayer(npc[4], playerid);
    if(IsPlayerInRangeOfPoint(playerid, 1, x2, y2, z2))
    {
        FCNPC_MeleeAttack(npc[4], 500);
        if(IsPlayerInAnyVehicle(playerid))
        {
			new Float:health;
            GetVehicleHealth(GetPlayerVehicleID(playerid), health);
            SetVehicleHealth(GetPlayerVehicleID(playerid), health-ASEBZES);
            return 1;
        }
        new Float:health;
        GetPlayerHealth(playerid, health);
        SetPlayerHealth(playerid, health-SEBZES);
    }
    return 1;
}

forward npc5_timer(playerid);
public npc5_timer(playerid)
{
    if(FCNPC_IsDead(npc[5])) return 1;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    FCNPC_GoTo(npc[5], x+0.5+random(1), y+0.5+random(1), z, MOVE_TYPE_SPRINT, 4, true);
    new Float:x2, Float:y2, Float:z2;
    FCNPC_GetPosition(npc[5], x2, y2, z2);
    SetNPCToFacePlayer(npc[5], playerid);
    if(IsPlayerInRangeOfPoint(playerid, 1, x2, y2, z2))
    {
        FCNPC_MeleeAttack(npc[5], 500);
        if(IsPlayerInAnyVehicle(playerid))
        {
			new Float:health;
            GetVehicleHealth(GetPlayerVehicleID(playerid), health);
            SetVehicleHealth(GetPlayerVehicleID(playerid), health-ASEBZES);
            return 1;
        }
        new Float:health;
        GetPlayerHealth(playerid, health);
        SetPlayerHealth(playerid, health-SEBZES);
    }
    return 1;
}

forward npc6_timer(playerid);
public npc6_timer(playerid)
{
    if(FCNPC_IsDead(npc[6])) return 1;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    FCNPC_GoTo(npc[6], x+0.5+random(1), y+0.5+random(1), z, MOVE_TYPE_SPRINT, 4, true);
    new Float:x2, Float:y2, Float:z2;
    FCNPC_GetPosition(npc[6], x2, y2, z2);
    SetNPCToFacePlayer(npc[6], playerid);
    if(IsPlayerInRangeOfPoint(playerid, 1, x2, y2, z2))
    {
        FCNPC_MeleeAttack(npc[6], 500);
        if(IsPlayerInAnyVehicle(playerid))
        {
			new Float:health;
            GetVehicleHealth(GetPlayerVehicleID(playerid), health);
            SetVehicleHealth(GetPlayerVehicleID(playerid), health-ASEBZES);
            return 1;
        }
        new Float:health;
        GetPlayerHealth(playerid, health);
        SetPlayerHealth(playerid, health-SEBZES);
    }
    return 1;
}

forward npc7_timer(playerid);
public npc7_timer(playerid)
{
    if(FCNPC_IsDead(npc[7])) return 1;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    FCNPC_GoTo(npc[7], x+0.5+random(1), y+0.5+random(1), z, MOVE_TYPE_SPRINT, 4, true);
    new Float:x2, Float:y2, Float:z2;
    FCNPC_GetPosition(npc[7], x2, y2, z2);
    SetNPCToFacePlayer(npc[7], playerid);
    if(IsPlayerInRangeOfPoint(playerid, 1, x2, y2, z2))
    {
        FCNPC_MeleeAttack(npc[7], 500);
        if(IsPlayerInAnyVehicle(playerid))
        {
			new Float:health;
            GetVehicleHealth(GetPlayerVehicleID(playerid), health);
            SetVehicleHealth(GetPlayerVehicleID(playerid), health-ASEBZES);
            return 1;
        }
        new Float:health;
        GetPlayerHealth(playerid, health);
        SetPlayerHealth(playerid, health-SEBZES);
    }
    return 1;
}

forward npc8_timer(playerid);
public npc8_timer(playerid)
{
    if(FCNPC_IsDead(npc[8])) return 1;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    FCNPC_GoTo(npc[8], x+0.5+random(1), y+0.5+random(1), z, MOVE_TYPE_SPRINT, 4, true);
    new Float:x2, Float:y2, Float:z2;
    FCNPC_GetPosition(npc[8], x2, y2, z2);
    SetNPCToFacePlayer(npc[8], playerid);
    if(IsPlayerInRangeOfPoint(playerid, 1, x2, y2, z2))
    {
        FCNPC_MeleeAttack(npc[8], 500);
        if(IsPlayerInAnyVehicle(playerid))
        {
			new Float:health;
            GetVehicleHealth(GetPlayerVehicleID(playerid), health);
            SetVehicleHealth(GetPlayerVehicleID(playerid), health-ASEBZES);
            return 1;
        }
        new Float:health;
        GetPlayerHealth(playerid, health);
        SetPlayerHealth(playerid, health-SEBZES);
    }
    return 1;
}

forward npc9_timer(playerid);
public npc9_timer(playerid)
{
    if(FCNPC_IsDead(npc[9])) return 1;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    FCNPC_GoTo(npc[9], x+0.5+random(1), y+0.5+random(1), z, MOVE_TYPE_SPRINT, 4, true);
    new Float:x2, Float:y2, Float:z2;
    FCNPC_GetPosition(npc[9], x2, y2, z2);
    SetNPCToFacePlayer(npc[9], playerid);
    if(IsPlayerInRangeOfPoint(playerid, 1, x2, y2, z2))
    {
        FCNPC_MeleeAttack(npc[9], 500);
        if(IsPlayerInAnyVehicle(playerid))
        {
			new Float:health;
            GetVehicleHealth(GetPlayerVehicleID(playerid), health);
            SetVehicleHealth(GetPlayerVehicleID(playerid), health-ASEBZES);
            return 1;
        }
        new Float:health;
        GetPlayerHealth(playerid, health);
        SetPlayerHealth(playerid, health-SEBZES);
    }
    return 1;
}

/*forward npc10_timer(playerid);
public npc10_timer(playerid)
{
	if(FCNPC_IsDead(npc[10])) return 1;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    FCNPC_GoTo(npc[10],  x+0.5+random(1), y+0.5+random(1), z, MOVE_TYPE_SPRINT, 4, true);
    new Float:x2, Float:y2, Float:z2;
    FCNPC_GetPosition(npc[10], x2, y2, z2);
    SetNPCToFacePlayer(npc[10], playerid);
    if(IsPlayerInRangeOfPoint(playerid, 1, x2, y2, z2))
    {
        FCNPC_MeleeAttack(npc[10], 500);
        if(IsPlayerInAnyVehicle(playerid))
        {
			new Float:health;
            GetVehicleHealth(GetPlayerVehicleID(playerid), health);
            SetVehicleHealth(GetPlayerVehicleID(playerid), health-ASEBZES);
            return 1;
        }
        new Float:health;
        GetPlayerHealth(playerid, health);
        SetPlayerHealth(playerid, health-SEBZES);
    }
    return 1;
}

forward npc11_timer(playerid);
public npc11_timer(playerid)
{
    if(FCNPC_IsDead(npc[11])) return 1;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    FCNPC_GoTo(npc[11],  x+0.5+random(1), y+0.5+random(1), z, MOVE_TYPE_SPRINT, 4, true);
    new Float:x2, Float:y2, Float:z2;
    FCNPC_GetPosition(npc[11], x2, y2, z2);
    SetNPCToFacePlayer(npc[11], playerid);
    if(IsPlayerInRangeOfPoint(playerid, 1, x2, y2, z2))
    {
        FCNPC_MeleeAttack(npc[11], 500);
        if(IsPlayerInAnyVehicle(playerid))
        {
			new Float:health;
            GetVehicleHealth(GetPlayerVehicleID(playerid), health);
            SetVehicleHealth(GetPlayerVehicleID(playerid), health-ASEBZES);
            return 1;
        }
        new Float:health;
        GetPlayerHealth(playerid, health);
        SetPlayerHealth(playerid, health-SEBZES);
    }
    return 1;
}

forward npc12_timer(playerid);
public npc12_timer(playerid)
{
    if(FCNPC_IsDead(npc[12])) return 1;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    FCNPC_GoTo(npc[12],  x+0.5+random(1), y+0.5+random(1), z, MOVE_TYPE_SPRINT, 4, true);
    new Float:x2, Float:y2, Float:z2;
    FCNPC_GetPosition(npc[12], x2, y2, z2);
    SetNPCToFacePlayer(npc[12], playerid);
    if(IsPlayerInRangeOfPoint(playerid, 1, x2, y2, z2))
    {
        FCNPC_MeleeAttack(npc[12], 500);
        if(IsPlayerInAnyVehicle(playerid))
        {
			new Float:health;
            GetVehicleHealth(GetPlayerVehicleID(playerid), health);
            SetVehicleHealth(GetPlayerVehicleID(playerid), health-ASEBZES);
            return 1;
        }
        new Float:health;
        GetPlayerHealth(playerid, health);
        SetPlayerHealth(playerid, health-SEBZES);
    }
    return 1;
}

forward npc13_timer(playerid);
public npc13_timer(playerid)
{
    if(FCNPC_IsDead(npc[13])) return 1;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    FCNPC_GoTo(npc[13], x+0.5+random(1), y+0.5+random(1), z, MOVE_TYPE_SPRINT, 4, true);
    new Float:x2, Float:y2, Float:z2;
    FCNPC_GetPosition(npc[13], x2, y2, z2);
    SetNPCToFacePlayer(npc[13], playerid);
    if(IsPlayerInRangeOfPoint(playerid, 1, x2, y2, z2))
    {
        FCNPC_MeleeAttack(npc[13], 500);
        if(IsPlayerInAnyVehicle(playerid))
        {
			new Float:health;
            GetVehicleHealth(GetPlayerVehicleID(playerid), health);
            SetVehicleHealth(GetPlayerVehicleID(playerid), health-ASEBZES);
            return 1;
        }
        new Float:health;
        GetPlayerHealth(playerid, health);
        SetPlayerHealth(playerid, health-SEBZES);
    }
    return 1;
}

forward npc14_timer(playerid);
public npc14_timer(playerid)
{
    if(FCNPC_IsDead(npc[14])) return 1;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    FCNPC_GoTo(npc[14], x+0.5+random(1), y+0.5+random(1), z, MOVE_TYPE_SPRINT, 4, true);
    new Float:x2, Float:y2, Float:z2;
    FCNPC_GetPosition(npc[14], x2, y2, z2);
    SetNPCToFacePlayer(npc[14], playerid);
    if(IsPlayerInRangeOfPoint(playerid, 1, x2, y2, z2))
    {
        FCNPC_MeleeAttack(npc[14], 500);
        if(IsPlayerInAnyVehicle(playerid))
        {
			new Float:health;
            GetVehicleHealth(GetPlayerVehicleID(playerid), health);
            SetVehicleHealth(GetPlayerVehicleID(playerid), health-ASEBZES);
            return 1;
        }
        new Float:health;
        GetPlayerHealth(playerid, health);
        SetPlayerHealth(playerid, health-SEBZES);
    }
    return 1;
}

forward npc15_timer(playerid);
public npc15_timer(playerid)
{
    if(FCNPC_IsDead(npc[15])) return 1;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    FCNPC_GoTo(npc[15], x+0.5+random(1), y+0.5+random(1), z, MOVE_TYPE_SPRINT, 4, true);
    new Float:x2, Float:y2, Float:z2;
    FCNPC_GetPosition(npc[15], x2, y2, z2);
    SetNPCToFacePlayer(npc[15], playerid);
    if(IsPlayerInRangeOfPoint(playerid, 1, x2, y2, z2))
    {
        FCNPC_MeleeAttack(npc[15], 500);
        if(IsPlayerInAnyVehicle(playerid))
        {
			new Float:health;
            GetVehicleHealth(GetPlayerVehicleID(playerid), health);
            SetVehicleHealth(GetPlayerVehicleID(playerid), health-ASEBZES);
            return 1;
        }
        new Float:health;
        GetPlayerHealth(playerid, health);
        SetPlayerHealth(playerid, health-SEBZES);
    }
    return 1;
}

forward npc16_timer(playerid);
public npc16_timer(playerid)
{
    if(FCNPC_IsDead(npc[16])) return 1;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    FCNPC_GoTo(npc[16], x+0.5+random(1), y+0.5+random(1), z, MOVE_TYPE_SPRINT, 4, true);
    new Float:x2, Float:y2, Float:z2;
    FCNPC_GetPosition(npc[16], x2, y2, z2);
    SetNPCToFacePlayer(npc[16], playerid);
    if(IsPlayerInRangeOfPoint(playerid, 1, x2, y2, z2))
    {
        FCNPC_MeleeAttack(npc[16], 500);
        if(IsPlayerInAnyVehicle(playerid))
        {
			new Float:health;
            GetVehicleHealth(GetPlayerVehicleID(playerid), health);
            SetVehicleHealth(GetPlayerVehicleID(playerid), health-ASEBZES);
            return 1;
        }
        new Float:health;
        GetPlayerHealth(playerid, health);
        SetPlayerHealth(playerid, health-SEBZES);
    }
    return 1;
}

forward npc17_timer(playerid);
public npc17_timer(playerid)
{
    if(FCNPC_IsDead(npc[17])) return 1;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    FCNPC_GoTo(npc[17], x+0.5+random(1), y+0.5+random(1), z, MOVE_TYPE_SPRINT, 4, true);
    new Float:x2, Float:y2, Float:z2;
    FCNPC_GetPosition(npc[17], x2, y2, z2);
    SetNPCToFacePlayer(npc[17], playerid);
    if(IsPlayerInRangeOfPoint(playerid, 1, x2, y2, z2))
    {
        FCNPC_MeleeAttack(npc[17], 500);
        if(IsPlayerInAnyVehicle(playerid))
        {
			new Float:health;
            GetVehicleHealth(GetPlayerVehicleID(playerid), health);
            SetVehicleHealth(GetPlayerVehicleID(playerid), health-ASEBZES);
            return 1;
        }
        new Float:health;
        GetPlayerHealth(playerid, health);
        SetPlayerHealth(playerid, health-SEBZES);
    }
    return 1;
}

forward npc18_timer(playerid);
public npc18_timer(playerid)
{
    if(FCNPC_IsDead(npc[18])) return 1;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    FCNPC_GoTo(npc[18], x+0.5+random(1), y+0.5+random(1), z, MOVE_TYPE_SPRINT, 4, true);
    new Float:x2, Float:y2, Float:z2;
    FCNPC_GetPosition(npc[18], x2, y2, z2);
    SetNPCToFacePlayer(npc[18], playerid);
    if(IsPlayerInRangeOfPoint(playerid, 1, x2, y2, z2))
    {
        FCNPC_MeleeAttack(npc[18], 500);
        if(IsPlayerInAnyVehicle(playerid))
        {
			new Float:health;
            GetVehicleHealth(GetPlayerVehicleID(playerid), health);
            SetVehicleHealth(GetPlayerVehicleID(playerid), health-ASEBZES);
            return 1;
        }
        new Float:health;
        GetPlayerHealth(playerid, health);
        SetPlayerHealth(playerid, health-SEBZES);
    }
    return 1;
}

forward npc19_timer(playerid);
public npc19_timer(playerid)
{
    if(FCNPC_IsDead(npc[19])) return 1;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    FCNPC_GoTo(npc[19], x+0.5+random(1), y+0.5+random(1), z, MOVE_TYPE_SPRINT, 4, true);
    new Float:x2, Float:y2, Float:z2;
    FCNPC_GetPosition(npc[19], x2, y2, z2);
    SetNPCToFacePlayer(npc[19], playerid);
    if(IsPlayerInRangeOfPoint(playerid, 1, x2, y2, z2))
    {
        FCNPC_MeleeAttack(npc[19], 500);
        new Float:health;
        GetPlayerHealth(playerid, health);
        SetPlayerHealth(playerid, health-SEBZES);
    }
    return 1;
}
*/
stock SetNPCToFacePlayer(playerid, targetid)
{

	new
		Float:pX,
		Float:pY,
		Float:pZ,
		Float:X,
		Float:Y,
		Float:Z,
		Float:ang;

	if(!IsPlayerConnected(playerid) || !IsPlayerConnected(targetid)) return 0;

	FCNPC_GetPosition(playerid, X, Y, Z);

	GetPlayerPos(targetid, pX, pY, pZ);

	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

	if(X > pX) ang = (floatabs(floatabs(ang) + 180.0));
	else ang = (floatabs(ang) - 180.0);

	SetPlayerFacingAngle(playerid, ang);

 	return 0;

}
#endif

stock Kereskedes(tole, neki, tipus)
{
    new dialogs[100];
	eladoid[neki] = tole;
	eladastipus[neki] = tipus;
	if(tipus == DROG_ELADAS) format(dialogs, sizeof(dialogs), "%s elakar adni neked drogot. Elfogadod?", GetPlayerNameEx(tole));
	if(tipus == CIGI_ELADAS) format(dialogs, sizeof(dialogs), "%s elakar adni neked cigit. Elfogadod?", GetPlayerNameEx(tole));
	if(tipus == PIA_ELADAS) format(dialogs, sizeof(dialogs), "%s elakar adni neked piát. Elfogadod?", GetPlayerNameEx(tole));
	if(tipus == VONALJEGY_ELADAS) format(dialogs, sizeof(dialogs), "%s elakar adni neked vonaljegyet. Elfogadod?", GetPlayerNameEx(tole));
	if(tipus == KULONJEGY_ELADAS) format(dialogs, sizeof(dialogs), "%s elakar adni neked különjegyet. Elfogadod?", GetPlayerNameEx(tole));
	ShowPlayerDialog(neki, KERESKEDES_DIALOG, DIALOG_STYLE_MSGBOX, "Kereskedés", dialogs, "Igen", "Nem");
}

stock GiveAchievement(playerid, achievement[], value)
{
	SetPVarInt(playerid, achievement, GetPVarInt(playerid, achievement)+value);
}

stock GetAchievement(playerid, achievement[])
{
	return GetPVarInt(playerid, achievement);
}

stock UnlockAchievement(playerid, picture[], text[], tag[] = "")
{
	new textt[100];
	format(textt, sizeof(textt), "~r~Achievement megszerezve: ~w~%s", text);
	TextDrawSetString(attext[playerid], FixGameString(textt));
	TextDrawSetString(attext2[playerid], FixGameString(tag));
	TextDrawSetString(atpic[playerid], picture);
	TextDrawShowForPlayer(playerid, attext[playerid]);
	TextDrawShowForPlayer(playerid, attext2[playerid]);
	TextDrawShowForPlayer(playerid, atpic[playerid]);
	TextDrawShowForPlayer(playerid, atbox[playerid]);
	SetTimerEx("acunlock", 10000, 0, "i", playerid);
}

forward acunlock(playerid);
public acunlock(playerid)
{
	TextDrawHideForPlayer(playerid, attext[playerid]);
	TextDrawHideForPlayer(playerid, attext2[playerid]);
	TextDrawHideForPlayer(playerid, atpic[playerid]);
	TextDrawHideForPlayer(playerid, atbox[playerid]);
}

forward GiveAchievementpublic(playerid, achievement[], value);
public GiveAchievementpublic(playerid, achievement[], value)
{
	GiveAchievement(playerid, achievement, value);
}

forward GetAchievementpublic(playerid, achievement[]);
public GetAchievementpublic(playerid, achievement[])
{
	GetAchievement(playerid, achievement);
}

forward UnlockAchievementpublic(playerid, picture[], text[], tag[]);
public UnlockAchievementpublic(playerid, picture[], text[], tag[])
{
	UnlockAchievement(playerid, picture, text, tag);
}
//----------------------------------------------------------------------
stock SetPlayerToFacePoint(playerid, Float: X, Float:Y)
{

	new
		Float:pX,
		Float:pY,
		Float:pZ,
		Float:ang;

	if(!IsPlayerConnected(playerid)) return 0;

	GetPlayerPos(playerid, pX, pY, pZ);

	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

	if(X > pX) ang = (floatabs(floatabs(ang) + 180.0));
	else ang = (floatabs(ang) - 180.0);

	SetPlayerFacingAngle(playerid, ang);

 	return 0;

}

stock Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ, Float:ObjX, Float:ObjY, Float:ObjZ, Float:FrX, Float:FrY, Float:FrZ) {

        new Float:TGTDistance;

        TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));

        new Float:tmpX, Float:tmpY, Float:tmpZ;

        tmpX = FrX * TGTDistance + CamX;
        tmpY = FrY * TGTDistance + CamY;
        tmpZ = FrZ * TGTDistance + CamZ;

        return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}

stock Float:GetPointAngleToPoint(Float:x2, Float:y2, Float:X, Float:Y) {

  new Float:DX, Float:DY;
  new Float:angle;

  DX = floatabs(floatsub(x2,X));
  DY = floatabs(floatsub(y2,Y));

  if (DY == 0.0 || DX == 0.0) {
    if(DY == 0 && DX > 0) angle = 0.0;
    else if(DY == 0 && DX < 0) angle = 180.0;
    else if(DY > 0 && DX == 0) angle = 90.0;
    else if(DY < 0 && DX == 0) angle = 270.0;
    else if(DY == 0 && DX == 0) angle = 0.0;
  }
  else {
    angle = atan(DX/DY);

    if(X > x2 && Y <= y2) angle += 90.0;
    else if(X <= x2 && Y < y2) angle = floatsub(90.0, angle);
    else if(X < x2 && Y >= y2) angle -= 90.0;
    else if(X >= x2 && Y > y2) angle = floatsub(270.0, angle);
  }

  return floatadd(angle, 90.0);
}

stock GetXYInFrontOfPoint(&Float:x, &Float:y, Float:angle, Float:distance) {
        x += (distance * floatsin(-angle, degrees));
        y += (distance * floatcos(-angle, degrees));
}

stock IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius) {
  new Float:camera_x,Float:camera_y,Float:camera_z,Float:vector_x,Float:vector_y,Float:vector_z;
  GetPlayerCameraPos(playerid, camera_x, camera_y, camera_z);
  GetPlayerCameraFrontVector(playerid, vector_x, vector_y, vector_z);

        new Float:vertical, Float:horizontal;

        switch (GetPlayerWeapon(playerid)) {
          case 34,35,36: {
          if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, vector_x, vector_y, vector_z) < radius) return true;
          return false;
          }
          case 30,31: {vertical = 4.0; horizontal = -1.6;}
          case 33: {vertical = 2.7; horizontal = -1.0;}
          default: {vertical = 6.0; horizontal = -2.2;}
        }

  new Float:angle = GetPointAngleToPoint(0, 0, floatsqroot(vector_x*vector_x+vector_y*vector_y), vector_z) - 270.0;
  new Float:resize_x, Float:resize_y, Float:resize_z = floatsin(angle+vertical, degrees);
  GetXYInFrontOfPoint(resize_x, resize_y, GetPointAngleToPoint(0, 0, vector_x, vector_y)+horizontal, floatcos(angle+vertical, degrees));

  if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, resize_x, resize_y, resize_z) < radius) return true;
  return false;
}

// Százalékalap számítás
stock Float:getpercent1(Float:percent, Float:val)
{
    return floatmul(floatdiv(val, percent),100);
}

// Százalékláb számítás
stock getpercent2(Float:val1, Float:val2)
{
	new Float:percent = floatdiv(val1,floatdiv(val2,100));
    return _:percent;
}


// Százalékérték számítás
stock Float:getpercent3(Float:val, Float:percent)
{
    return floatmul(floatdiv(val, 100),percent);
}

/*public OnFilterScriptInit()
{
    // Százalékérték számítás
    printf("%.3f", getpercent3(120, 50)); // mennyi 120 50%-a?

    // Százalékláb számítás
    printf("%.3f", getpercent2(60, 120)); // 120-nak a 60 hány %-a?

    // Százalékalap számítás
    printf("%.3f", getpercent1(50, 60)); // minek az 50%-a a 60?
    return 1;
}*/

stock FloatToInt(Float: numb)
{
	return floatround(Float:numb, floatround_round);
}

stock IsPlayerAdminEx(playerid)
{
	if(IsPlayerAdmin(playerid))
	{
	    if(GetPVarInt(playerid, "IsPlayerAdminEx") == 1)
	    {
	        return true;
	    }
	    else return false;
	}
	else return false;
}

stock IsPlayerUnallowedZone(playerid)
{
    if(GetPVarInt(playerid, "hazban") != 0) return true;
    else if(GetPVarInt(playerid, "garazsban") != 0) return true;
    else if(StuntWorld[playerid] == 1) return true;
    else if(GetPVarInt(playerid, "fagyasztva") == 1) return true;
    else if(GetPVarInt(playerid, "haboruban") == 1) return true;
    else if(GetPVarInt(playerid, "lakocsi") != 0) return true;
    else if(GetPVarInt(playerid, "Cuffed") == 1) return true;
    else if(GetPVarInt(playerid, "1v1dmben") == 1) return true;
    else if(GetPVarInt(playerid, "paintball") == 1) return true;
	else return false;
}

//---------------Quest system---------------------------------------------------

/*stock WalkToPos(playerid, Float:X, Float:Y, Float:Z)
{
    ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
    SetPlayerToFacePoint(playerid, X, Y);
    SetCameraBehindPlayer(playerid);
    KillTimer(WalkToTim[playerid]);
	WalkToTim[playerid] = SetTimerEx("WalkToTimer", 500, 1, "ifffi", playerid, X, Y, Z, 1);
}

stock RunToPos(playerid, Float:X, Float:Y, Float:Z)
{
    ApplyAnimation(playerid,"PED","run_player",4.1,1,1,1,1,1);
    SetPlayerToFacePoint(playerid, X, Y);
    SetCameraBehindPlayer(playerid);
    KillTimer(WalkToTim[playerid]);
	WalkToTim[playerid] = SetTimerEx("WalkToTimer", 500, 1, "ifffi", playerid, X, Y, Z, 2);
}

forward WalkToTimer(playerid, Float:X, Float:Y, Float:Z, type);
public WalkToTimer(playerid, Float:X, Float:Y, Float:Z, type)
{
	if(type == 1)
	{
	    ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
	    SetPlayerToFacePoint(playerid, X, Y);
	    SetCameraBehindPlayer(playerid);
	}
	if(type == 2)
	{
	    ApplyAnimation(playerid,"PED","run_player",4.1,1,1,1,1,1);
	    SetPlayerToFacePoint(playerid, X, Y);
	    SetCameraBehindPlayer(playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 1.0, X, Y, Z))
	{
		KillTimer(WalkToTim[playerid]);
	}
}*/

stock DialogText(playerid, time, NameC[] = "", Name[] = "", text[])
{
	KillTimer(DialogTextTimer[playerid]);
	new string[500];
	format(string, sizeof(string), "%s%s: ~w~%s", NameC, Name, text);
	TextDrawSetString(DialogTextInfoBox[playerid], FixGameString(string));
	TextDrawHideForPlayer(playerid, DialogTextInfoBox[playerid]);
	TextDrawShowForPlayer(playerid, DialogTextInfoBox[playerid]);
//	PlayerPlaySound(playerid, 1083, 0, 0, 0);
	DialogTextTimer[playerid] = SetTimerEx("DialogText_Hide", 1*time, 0, "i", playerid);
}

stock SetQuestCamera(playerid, Float:px,Float:py,Float:pz, Float:pxl, Float:pyl, Float:pzl)
{
	SetPlayerCameraPos(playerid, px, py, pz);
	SetPlayerCameraLookAt(playerid, pxl, pyl, pzl);
}

stock SetQuestDialogState(playerid, bool:statu)
{
	if(statu == true)
	{
	    InDialog[playerid] = true;
	    HideQuestCP(playerid);
	    GetPlayerHealth(playerid, bQuestHP[playerid]);
	    SetPlayerHealth(playerid, 100000000);
	    TogglePlayerControllable(playerid, 0);
	}
	else if(statu == false)
	{
	    InDialog[playerid] = false;
	    HideQuestCP(playerid);
	    SetPlayerHealth(playerid, bQuestHP[playerid]);
	    TogglePlayerControllable(playerid, 1);
	    SetCameraBehindPlayer(playerid);
	}
	return 1;
}

#if defined ACTORS
stock CreateQuestActor(actor[] = "john")
{
	if(!strcmp(actor, "John", true))
	{
	    DestroyActor(johnactor);
		johnactor = CreateActor(126, -2143.4148,-244.5622,36.5156,131.7317);
	}
	if(!strcmp(actor, "vevo", true))
	{
	    DestroyActor(vevoactor);
		vevoactor = CreateActor(22, -2947.7065,484.1356,4.4398,176.4740);
	}
}

stock DestroyQuestActor(actor[] = "john")
{
    if(!strcmp(actor, "John", true))
	{
	    DestroyActor(johnactor);
	}
	if(!strcmp(actor, "vevo", true))
	{
	    DestroyActor(vevoactor);
	}
}
#endif

stock SetQuestPart(playerid, questid, questpart)
{
	format(query, sizeof(query), "UPDATE quests SET QuestPart = %d WHERE QuestID = %d AND Name = '%s'", questpart, questid, GetPlayerNameEx(playerid));
	mysql_query(query);
	QuestPart[playerid] = questpart;
}

stock EndQuest(playerid, questid)
{
    /*format(query, sizeof(query), "DELETE FROM quests WHERE QuestID = %d AND Name = '%s'", questid, GetPlayerNameEx(playerid));
	mysql_query(query);*/
	format(query, sizeof(query), "UPDATE quests SET QuestPart = 999 WHERE QuestID = %d AND Name = '%s'", questid, GetPlayerNameEx(playerid));
	mysql_query(query);
	KillTimer(createQtimer[playerid]);
	RemoveQuestCP(playerid);
}

stock CreateQuestCP(playerid, Float:X, Float:Y, Float:Z)
{
	KillTimer(createQtimer[playerid]);
	//RemoveCheckpoint(questCP[playerid]);
//	questCP[playerid] = -1;
    questCP[playerid] = CreateCheckpoint(X, Y, Z);
    ShowPlayerCheckpoint(playerid, questCP[playerid], true);
    createQtimer[playerid] = SetTimerEx("createCPtimer", 500, 1, "i", playerid);
}

forward createCPtimer(playerid);
public createCPtimer(playerid)
{
    ShowPlayerCheckpoint(playerid, questCP[playerid], true);
}

stock HideQuestCP(playerid)
{
    KillTimer(createQtimer[playerid]);
	HidePlayerCheckpoint(playerid, questCP[playerid]);
}

stock RemoveQuestCP(playerid) RemoveCheckpoint(questCP[playerid]);

//------------------------------------------------------------------------------

//randomex(min,max) return random(max-min)+min; //By Y_Less
